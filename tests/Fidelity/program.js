if (!String.prototype.trim) {
    String.prototype.trim = function () {
        return this.replace(/^\s+|\s+$/g, '');
    };
}
if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function (searchElement, fromIndex) {
        "use strict";
        if (this == null) {
            throw new TypeError();
        }
        var t = Object(this);
        var len = t.length >>> 0;
        if (len === 0) {
            return -1;
        }
        var n = 0;
        if (arguments.length > 0) {
            n = Number(arguments[1]);
            if (n != n) {
                n = 0;
            }
            else if (n != 0 && n != Infinity && n != -Infinity) {
                n = (n > 0 || -1) * Math.floor(Math.abs(n));
            }
        }
        if (n >= len) {
            return -1;
        }
        var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);
        for (; k < len; k++) {
            if (k in t && t[k] === searchElement) {
                return k;
            }
        }
        return -1;
    };
}
if (!Array.prototype.filter) {
    Array.prototype.filter = function (fun, thisp) {
        "use strict";
        if (this == null)
            throw new TypeError();
        var t = Object(this);
        var len = t.length >>> 0;
        if (typeof fun != "function")
            throw new TypeError();
        var res = [];
        for (var i = 0; i < len; i++) {
            if (i in t) {
                var val = t[i];
                if (fun.call(thisp, val, i, t))
                    res.push(val);
            }
        }
        return res;
    };
}
if (!Array.prototype.map) {
    Array.prototype.map = function (callback, thisArg) {
        var T = undefined, A, k;
        if (this == null) {
            throw new TypeError(" this is null or not defined");
        }
        var O = Object(this);
        var len = O.length >>> 0;
        if ({}.toString.call(callback) != "[object Function]") {
            throw new TypeError(callback + " is not a function");
        }
        if (thisArg) {
            T = thisArg;
        }
        A = new Array(len);
        k = 0;
        while (k < len) {
            var kValue, mappedValue;
            if (k in O) {
                kValue = O[k];
                mappedValue = callback.call(T, kValue, k, O);
                A[k] = mappedValue;
            }
            k++;
        }
        return A;
    };
}
if (!Array.prototype.reduce) {
    Array.prototype.reduce = function reduce(accumulator) {
        if (this === null || this === undefined)
            throw new TypeError("Object is null or undefined");
        var i = 0, l = this.length >> 0, curr;
        if (typeof accumulator !== "function")
            throw new TypeError("First argument is not callable");
        if (arguments.length < 2) {
            if (l === 0)
                throw new TypeError("Array length is 0 and no second argument");
            curr = this[0];
            i = 1;
        }
        else
            curr = arguments[1];
        while (i < l) {
            if (i in this)
                curr = accumulator.call(undefined, curr, this[i], i, this);
            ++i;
        }
        return curr;
    };
}
if (!Array.prototype.forEach) {
    Array.prototype.forEach = function (callback, thisArg) {
        var T, k;
        if (this == null) {
            throw new TypeError(" this is null or not defined");
        }
        var O = Object(this);
        var len = O.length >>> 0;
        if ({}.toString.call(callback) != "[object Function]") {
            throw new TypeError(callback + " is not a function");
        }
        if (thisArg) {
            T = thisArg;
        }
        else {
            T = undefined;
        }
        k = 0;
        while (k < len) {
            var kValue;
            if (k in O) {
                kValue = O[k];
                callback.call(T, kValue, k, O);
            }
            k++;
        }
    };
}
if (!Date.now) {
    Date.now = function () {
        return (new Date()).getTime();
    };
}
if (!Array.prototype.some) {
    Array.prototype.some = function (fun) {
        "use strict";
        if (this == null)
            throw new TypeError();
        var t = Object(this);
        var len = t.length >>> 0;
        if (typeof fun != "function")
            throw new TypeError();
        var thisp = arguments[1];
        for (var i = 0; i < len; i++) {
            var idx = i.toString();
            if (idx in t && fun.call(thisp, t[i], i, t))
                return true;
        }
        return false;
    };
}
if (typeof JSON !== 'object') {
    JSON = {};
}
(function () {
    'use strict';
    function f(n) {
        return n < 10 ? '0' + n : n;
    }
    if (typeof Date.prototype.toJSON !== 'function') {
        Date.prototype.toJSON = function () {
            return isFinite(this.valueOf()) ? this.getUTCFullYear() + '-' + f(this.getUTCMonth() + 1) + '-' + f(this.getUTCDate()) + 'T' + f(this.getUTCHours()) + ':' + f(this.getUTCMinutes()) + ':' + f(this.getUTCSeconds()) + 'Z' : null;
        };
        String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function () {
            return this.valueOf();
        };
    }
    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, gap, indent, meta = {
        '\b': '\\b',
        '\t': '\\t',
        '\n': '\\n',
        '\f': '\\f',
        '\r': '\\r',
        '"': '\\"',
        '\\': '\\\\'
    }, rep;
    function quote(string) {
        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }
    function str(key, holder) {
        var i, k, v, length, mind = gap, partial, value = holder[key];
        if (value && typeof value === 'object' && typeof value.toJSON === 'function') {
            value = value.toJSON(key);
        }
        if (typeof rep === 'function') {
            value = rep.call(holder, key, value);
        }
        switch (typeof value) {
            case 'string':
                return quote(value);
            case 'number':
                return isFinite(value) ? String(value) : 'null';
            case 'boolean':
            case 'null':
                return String(value);
            case 'object':
                if (!value) {
                    return 'null';
                }
                gap += indent;
                partial = [];
                if (Object.prototype.toString.apply(value) === '[object Array]') {
                    length = value.length;
                    for (i = 0; i < length; i += 1) {
                        partial[i] = str(i, value) || 'null';
                    }
                    v = partial.length === 0 ? '[]' : gap ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' : '[' + partial.join(',') + ']';
                    gap = mind;
                    return v;
                }
                if (rep && typeof rep === 'object') {
                    length = rep.length;
                    for (i = 0; i < length; i += 1) {
                        if (typeof rep[i] === 'string') {
                            k = rep[i];
                            v = str(k, value);
                            if (v) {
                                partial.push(quote(k) + (gap ? ': ' : ':') + v);
                            }
                        }
                    }
                }
                else {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = str(k, value);
                            if (v) {
                                partial.push(quote(k) + (gap ? ': ' : ':') + v);
                            }
                        }
                    }
                }
                v = partial.length === 0 ? '{}' : gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' : '{' + partial.join(',') + '}';
                gap = mind;
                return v;
        }
    }
    if (typeof JSON.stringify !== 'function') {
        JSON.stringify = function (value, replacer, space) {
            var i;
            gap = '';
            indent = '';
            if (typeof space === 'number') {
                for (i = 0; i < space; i += 1) {
                    indent += ' ';
                }
            }
            else if (typeof space === 'string') {
                indent = space;
            }
            rep = replacer;
            if (replacer && typeof replacer !== 'function' && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {
                throw new Error('JSON.stringify');
            }
            return str('', { '': value });
        };
    }
    if (typeof JSON.parse !== 'function') {
        JSON.parse = function (text, reviver) {
            var j;
            function walk(holder, key) {
                var k, v, value = holder[key];
                if (value && typeof value === 'object') {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            }
                            else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }
            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }
            if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
                j = eval('(' + text + ')');
                return typeof reviver === 'function' ? walk({ '': j }, '') : j;
            }
            throw new SyntaxError('JSON.parse');
        };
    }
}());
var TypeScript;
(function (TypeScript) {
    TypeScript.nodeMakeDirectoryTime = 0;
    TypeScript.nodeCreateBufferTime = 0;
    TypeScript.nodeWriteFileSyncTime = 0;
    (function (ByteOrderMark) {
        ByteOrderMark[ByteOrderMark["None"] = 0] = "None";
        ByteOrderMark[ByteOrderMark["Utf8"] = 1] = "Utf8";
        ByteOrderMark[ByteOrderMark["Utf16BigEndian"] = 2] = "Utf16BigEndian";
        ByteOrderMark[ByteOrderMark["Utf16LittleEndian"] = 3] = "Utf16LittleEndian";
    })(TypeScript.ByteOrderMark || (TypeScript.ByteOrderMark = {}));
    var ByteOrderMark = TypeScript.ByteOrderMark;
    var FileInformation = (function () {
        function FileInformation(contents, byteOrderMark) {
            this.contents = contents;
            this.byteOrderMark = byteOrderMark;
        }
        return FileInformation;
    })();
    TypeScript.FileInformation = FileInformation;
    function throwIOError(message, error) {
        var errorMessage = message;
        if (error && error.message) {
            errorMessage += (" " + error.message);
        }
        throw new Error(errorMessage);
    }
    TypeScript.Environment = (function () {
        function getWindowsScriptHostEnvironment() {
            try {
                var fso = new ActiveXObject("Scripting.FileSystemObject");
            }
            catch (e) {
                return undefined;
            }
            var streamObjectPool = [];
            function getStreamObject() {
                if (streamObjectPool.length > 0) {
                    return streamObjectPool.pop();
                }
                else {
                    return new ActiveXObject("ADODB.Stream");
                }
            }
            function releaseStreamObject(obj) {
                streamObjectPool.push(obj);
            }
            var args = [];
            for (var i = 0; i < WScript.Arguments.length; i++) {
                args[i] = WScript.Arguments.Item(i);
            }
            return {
                newLine: "\r\n",
                currentDirectory: function () { return WScript.CreateObject("WScript.Shell").CurrentDirectory; },
                supportsCodePage: function () { return WScript.ReadFile; },
                absolutePath: function (path) { return fso.GetAbsolutePathName(path); },
                readFile: function (path, codepage) {
                    try {
                        if (codepage && this.supportsCodePage()) {
                            try {
                                var contents = WScript.ReadFile(path, codepage);
                                return new FileInformation(contents, 0 /* None */);
                            }
                            catch (e) {
                            }
                        }
                        var streamObj = getStreamObject();
                        streamObj.Open();
                        streamObj.Type = 2;
                        streamObj.Charset = 'x-ansi';
                        streamObj.LoadFromFile(path);
                        var bomChar = streamObj.ReadText(2);
                        streamObj.Position = 0;
                        var byteOrderMark = 0 /* None */;
                        if (bomChar.charCodeAt(0) === 0xFE && bomChar.charCodeAt(1) === 0xFF) {
                            streamObj.Charset = 'unicode';
                            byteOrderMark = 2 /* Utf16BigEndian */;
                        }
                        else if (bomChar.charCodeAt(0) === 0xFF && bomChar.charCodeAt(1) === 0xFE) {
                            streamObj.Charset = 'unicode';
                            byteOrderMark = 3 /* Utf16LittleEndian */;
                        }
                        else if (bomChar.charCodeAt(0) === 0xEF && bomChar.charCodeAt(1) === 0xBB) {
                            streamObj.Charset = 'utf-8';
                            byteOrderMark = 1 /* Utf8 */;
                        }
                        else {
                            streamObj.Charset = 'utf-8';
                        }
                        var contents = streamObj.ReadText(-1);
                        streamObj.Close();
                        releaseStreamObject(streamObj);
                        return new FileInformation(contents, byteOrderMark);
                    }
                    catch (err) {
                        var message;
                        if (err.number === -2147024809) {
                            message = TypeScript.getDiagnosticMessage(TypeScript.DiagnosticCode.Unsupported_file_encoding, undefined);
                        }
                        else {
                            message = TypeScript.getDiagnosticMessage(TypeScript.DiagnosticCode.Cannot_read_file_0_1, [path, err.message]);
                        }
                        throw new Error(message);
                    }
                },
                writeFile: function (path, contents, writeByteOrderMark) {
                    var textStream = getStreamObject();
                    textStream.Charset = 'utf-8';
                    textStream.Open();
                    textStream.WriteText(contents, 0);
                    if (!writeByteOrderMark) {
                        textStream.Position = 3;
                    }
                    else {
                        textStream.Position = 0;
                    }
                    var fileStream = getStreamObject();
                    fileStream.Type = 1;
                    fileStream.Open();
                    textStream.CopyTo(fileStream);
                    fileStream.Flush();
                    fileStream.SaveToFile(path, 2);
                    fileStream.Close();
                    textStream.Flush();
                    textStream.Close();
                },
                fileExists: function (path) { return fso.FileExists(path); },
                deleteFile: function (path) {
                    if (fso.FileExists(path)) {
                        fso.DeleteFile(path, true);
                    }
                },
                directoryExists: function (path) { return fso.FolderExists(path); },
                directoryName: function (path) { return fso.GetParentFolderName(path); },
                createDirectory: function (path) {
                    try {
                        if (!this.directoryExists(path)) {
                            fso.CreateFolder(path);
                        }
                    }
                    catch (e) {
                        throwIOError(TypeScript.getDiagnosticMessage(TypeScript.DiagnosticCode.Could_not_create_directory_0, [path]), e);
                    }
                },
                listFiles: function (path, spec, options) {
                    options = options || {};
                    function filesInFolder(folder, root) {
                        var paths = [];
                        var fc;
                        if (options.recursive) {
                            fc = new Enumerator(folder.subfolders);
                            for (; !fc.atEnd(); fc.moveNext()) {
                                paths = paths.concat(filesInFolder(fc.item(), root + "\\" + fc.item().Name));
                            }
                        }
                        fc = new Enumerator(folder.files);
                        for (; !fc.atEnd(); fc.moveNext()) {
                            if (!spec || fc.item().Name.match(spec)) {
                                paths.push(root + "\\" + fc.item().Name);
                            }
                        }
                        return paths;
                    }
                    var folder = fso.GetFolder(path);
                    var paths = [];
                    return filesInFolder(folder, path);
                },
                arguments: args,
                standardOut: WScript.StdOut,
                standardError: WScript.StdErr,
                executingFilePath: function () { return WScript.ScriptFullName; },
                quit: function (exitCode) {
                    if (exitCode === void 0) { exitCode = 0; }
                    try {
                        WScript.Quit(exitCode);
                    }
                    catch (e) {
                    }
                },
                watchFile: undefined
            };
        }
        ;
        function getNodeEnvironment() {
            var _fs = require('fs');
            var _path = require('path');
            var _module = require('module');
            var _os = require('os');
            return {
                newLine: _os.EOL,
                currentDirectory: function () { return process.cwd(); },
                supportsCodePage: function () { return false; },
                absolutePath: function (path) { return _path.resolve(path); },
                readFile: function (file, codepage) {
                    if (codepage) {
                        throw new Error(TypeScript.getDiagnosticMessage(TypeScript.DiagnosticCode.codepage_option_not_supported_on_current_platform, undefined));
                    }
                    var buffer = _fs.readFileSync(file);
                    switch (buffer[0]) {
                        case 0xFE:
                            if (buffer[1] === 0xFF) {
                                var i = 0;
                                while ((i + 1) < buffer.length) {
                                    var temp = buffer[i];
                                    buffer[i] = buffer[i + 1];
                                    buffer[i + 1] = temp;
                                    i += 2;
                                }
                                return new FileInformation(buffer.toString("ucs2", 2), 2 /* Utf16BigEndian */);
                            }
                            break;
                        case 0xFF:
                            if (buffer[1] === 0xFE) {
                                return new FileInformation(buffer.toString("ucs2", 2), 3 /* Utf16LittleEndian */);
                            }
                            break;
                        case 0xEF:
                            if (buffer[1] === 0xBB) {
                                return new FileInformation(buffer.toString("utf8", 3), 1 /* Utf8 */);
                            }
                    }
                    return new FileInformation(buffer.toString("utf8", 0), 0 /* None */);
                },
                writeFile: function (path, contents, writeByteOrderMark) {
                    function mkdirRecursiveSync(path) {
                        var stats = _fs.statSync(path);
                        if (stats.isFile()) {
                            throw "\"" + path + "\" exists but isn't a directory.";
                        }
                        else if (stats.isDirectory()) {
                            return;
                        }
                        else {
                            mkdirRecursiveSync(_path.dirname(path));
                            _fs.mkdirSync(path, 509);
                        }
                    }
                    var start = new Date().getTime();
                    mkdirRecursiveSync(_path.dirname(path));
                    TypeScript.nodeMakeDirectoryTime += new Date().getTime() - start;
                    if (writeByteOrderMark) {
                        contents = '\uFEFF' + contents;
                    }
                    var start = new Date().getTime();
                    var chunkLength = 4 * 1024;
                    var fileDescriptor = _fs.openSync(path, "w");
                    try {
                        for (var index = 0; index < contents.length; index += chunkLength) {
                            var bufferStart = new Date().getTime();
                            var buffer = new Buffer(contents.substr(index, chunkLength), "utf8");
                            TypeScript.nodeCreateBufferTime += new Date().getTime() - bufferStart;
                            _fs.writeSync(fileDescriptor, buffer, 0, buffer.length, null);
                        }
                    }
                    finally {
                        _fs.closeSync(fileDescriptor);
                    }
                    TypeScript.nodeWriteFileSyncTime += new Date().getTime() - start;
                },
                fileExists: function (path) { return _fs.existsSync(path); },
                deleteFile: function (path) {
                    try {
                        _fs.unlinkSync(path);
                    }
                    catch (e) {
                    }
                },
                directoryExists: function (path) { return _fs.existsSync(path) && _fs.statSync(path).isDirectory(); },
                directoryName: function (path) {
                    var dirPath = _path.dirname(path);
                    if (dirPath === path) {
                        dirPath = undefined;
                    }
                    return dirPath;
                },
                createDirectory: function (path) {
                    try {
                        if (!this.directoryExists(path)) {
                            _fs.mkdirSync(path);
                        }
                    }
                    catch (e) {
                        throwIOError(TypeScript.getDiagnosticMessage(TypeScript.DiagnosticCode.Could_not_create_directory_0, [path]), e);
                    }
                },
                listFiles: function (path, spec, options) {
                    options = options || {};
                    function filesInFolder(folder) {
                        var paths = [];
                        var files = _fs.readdirSync(folder);
                        for (var i = 0; i < files.length; i++) {
                            var pathToFile = _path.join(folder, files[i]);
                            var stat = _fs.statSync(pathToFile);
                            if (options.recursive && stat.isDirectory()) {
                                paths = paths.concat(filesInFolder(pathToFile));
                            }
                            else if (stat.isFile() && (!spec || files[i].match(spec))) {
                                paths.push(pathToFile);
                            }
                        }
                        return paths;
                    }
                    return filesInFolder(path);
                },
                arguments: process.argv.slice(2),
                standardOut: {
                    Write: function (str) { return process.stdout.write(str); },
                    WriteLine: function (str) { return process.stdout.write(str + '\n'); },
                    Close: function () {
                    }
                },
                standardError: {
                    Write: function (str) { return process.stderr.write(str); },
                    WriteLine: function (str) { return process.stderr.write(str + '\n'); },
                    Close: function () {
                    }
                },
                executingFilePath: function () { return process.mainModule.filename; },
                quit: function (code) {
                    var stderrFlushed = process.stderr.write('');
                    var stdoutFlushed = process.stdout.write('');
                    process.stderr.on('drain', function () {
                        stderrFlushed = true;
                        if (stdoutFlushed) {
                            process.exit(code);
                        }
                    });
                    process.stdout.on('drain', function () {
                        stdoutFlushed = true;
                        if (stderrFlushed) {
                            process.exit(code);
                        }
                    });
                    setTimeout(function () {
                        process.exit(code);
                    }, 5);
                },
                watchFile: function (fileName, callback) {
                    var firstRun = true;
                    var processingChange = false;
                    var fileChanged = function (curr, prev) {
                        if (!firstRun) {
                            if (curr.mtime < prev.mtime) {
                                return;
                            }
                            _fs.unwatchFile(fileName, fileChanged);
                            if (!processingChange) {
                                processingChange = true;
                                callback(fileName);
                                setTimeout(function () {
                                    processingChange = false;
                                }, 100);
                            }
                        }
                        firstRun = false;
                        _fs.watchFile(fileName, { persistent: true, interval: 500 }, fileChanged);
                    };
                    fileChanged();
                    return {
                        fileName: fileName,
                        close: function () {
                            _fs.unwatchFile(fileName, fileChanged);
                        }
                    };
                }
            };
        }
        ;
        if (typeof WScript !== "undefined" && typeof ActiveXObject === "function") {
            return getWindowsScriptHostEnvironment();
        }
        else if (typeof module !== 'undefined' && module.exports) {
            return getNodeEnvironment();
        }
        else {
            return undefined;
        }
    })();
})(TypeScript || (TypeScript = {}));
var ts;
(function (ts) {
    ts.sys = (function () {
        function getWScriptSystem() {
            var fso = new ActiveXObject("Scripting.FileSystemObject");
            var fileStream = new ActiveXObject("ADODB.Stream");
            fileStream.Type = 2;
            var binaryStream = new ActiveXObject("ADODB.Stream");
            binaryStream.Type = 1;
            var args = [];
            for (var i = 0; i < WScript.Arguments.length; i++) {
                args[i] = WScript.Arguments.Item(i);
            }
            function readFile(fileName, encoding) {
                if (!fso.FileExists(fileName)) {
                    return undefined;
                }
                fileStream.Open();
                try {
                    if (encoding) {
                        fileStream.Charset = encoding;
                        fileStream.LoadFromFile(fileName);
                    }
                    else {
                        fileStream.Charset = "x-ansi";
                        fileStream.LoadFromFile(fileName);
                        var bom = fileStream.ReadText(2) || "";
                        fileStream.Position = 0;
                        fileStream.Charset = bom.length >= 2 && (bom.charCodeAt(0) === 0xFF && bom.charCodeAt(1) === 0xFE || bom.charCodeAt(0) === 0xFE && bom.charCodeAt(1) === 0xFF) ? "unicode" : "utf-8";
                    }
                    return fileStream.ReadText();
                }
                catch (e) {
                    throw e;
                }
                finally {
                    fileStream.Close();
                }
            }
            function writeFile(fileName, data, writeByteOrderMark) {
                fileStream.Open();
                binaryStream.Open();
                try {
                    fileStream.Charset = "utf-8";
                    fileStream.WriteText(data);
                    if (writeByteOrderMark) {
                        fileStream.Position = 0;
                    }
                    else {
                        fileStream.Position = 3;
                    }
                    fileStream.CopyTo(binaryStream);
                    binaryStream.SaveToFile(fileName, 2);
                }
                finally {
                    binaryStream.Close();
                    fileStream.Close();
                }
            }
            return {
                args: args,
                newLine: "\r\n",
                useCaseSensitiveFileNames: false,
                write: function (s) {
                    WScript.StdOut.Write(s);
                },
                readFile: readFile,
                writeFile: writeFile,
                resolvePath: function (path) {
                    return fso.GetAbsolutePathName(path);
                },
                fileExists: function (path) {
                    return fso.FileExists(path);
                },
                directoryExists: function (path) {
                    return fso.FolderExists(path);
                },
                createDirectory: function (directoryName) {
                    if (!this.directoryExists(directoryName)) {
                        fso.CreateFolder(directoryName);
                    }
                },
                getExecutingFilePath: function () {
                    return WScript.ScriptFullName;
                },
                getCurrentDirectory: function () {
                    return new ActiveXObject("WScript.Shell").CurrentDirectory;
                },
                exit: function (exitCode) {
                    try {
                        WScript.Quit(exitCode);
                    }
                    catch (e) {
                    }
                }
            };
        }
        function getNodeSystem() {
            var _fs = require("fs");
            var _path = require("path");
            var _os = require('os');
            var platform = _os.platform();
            var useCaseSensitiveFileNames = platform !== "win32" && platform !== "win64" && platform !== "darwin";
            function readFile(fileName, encoding) {
                if (!_fs.existsSync(fileName)) {
                    return undefined;
                }
                var buffer = _fs.readFileSync(fileName);
                var len = buffer.length;
                if (len >= 2 && buffer[0] === 0xFE && buffer[1] === 0xFF) {
                    len &= ~1;
                    for (var i = 0; i < len; i += 2) {
                        var temp = buffer[i];
                        buffer[i] = buffer[i + 1];
                        buffer[i + 1] = temp;
                    }
                    return buffer.toString("utf16le", 2);
                }
                if (len >= 2 && buffer[0] === 0xFF && buffer[1] === 0xFE) {
                    return buffer.toString("utf16le", 2);
                }
                if (len >= 3 && buffer[0] === 0xEF && buffer[1] === 0xBB && buffer[2] === 0xBF) {
                    return buffer.toString("utf8", 3);
                }
                return buffer.toString("utf8");
            }
            function writeFile(fileName, data, writeByteOrderMark) {
                if (writeByteOrderMark) {
                    data = '\uFEFF' + data;
                }
                _fs.writeFileSync(fileName, data, "utf8");
            }
            return {
                args: process.argv.slice(2),
                newLine: _os.EOL,
                useCaseSensitiveFileNames: useCaseSensitiveFileNames,
                write: function (s) {
                    _fs.writeSync(1, s);
                },
                readFile: readFile,
                writeFile: writeFile,
                watchFile: function (fileName, callback) {
                    _fs.watchFile(fileName, { persistent: true, interval: 250 }, fileChanged);
                    return {
                        close: function () {
                            _fs.unwatchFile(fileName, fileChanged);
                        }
                    };
                    function fileChanged(curr, prev) {
                        if (+curr.mtime <= +prev.mtime) {
                            return;
                        }
                        callback(fileName);
                    }
                    ;
                },
                resolvePath: function (path) {
                    return _path.resolve(path);
                },
                fileExists: function (path) {
                    return _fs.existsSync(path);
                },
                directoryExists: function (path) {
                    return _fs.existsSync(path) && _fs.statSync(path).isDirectory();
                },
                createDirectory: function (directoryName) {
                    if (!this.directoryExists(directoryName)) {
                        _fs.mkdirSync(directoryName);
                    }
                },
                getExecutingFilePath: function () {
                    return __filename;
                },
                getCurrentDirectory: function () {
                    return process.cwd();
                },
                getMemoryUsage: function () {
                    if (global.gc) {
                        global.gc();
                    }
                    return process.memoryUsage().heapUsed;
                },
                exit: function (exitCode) {
                    process.exit(exitCode);
                }
            };
        }
        if (typeof WScript !== "undefined" && typeof ActiveXObject === "function") {
            return getWScriptSystem();
        }
        else if (typeof module !== "undefined" && module.exports) {
            return getNodeSystem();
        }
        else {
            return undefined;
        }
    })();
})(ts || (ts = {}));
var ts;
(function (ts) {
    (function (Ternary) {
        Ternary[Ternary["False"] = 0] = "False";
        Ternary[Ternary["Maybe"] = 1] = "Maybe";
        Ternary[Ternary["True"] = -1] = "True";
    })(ts.Ternary || (ts.Ternary = {}));
    var Ternary = ts.Ternary;
    (function (Comparison) {
        Comparison[Comparison["LessThan"] = -1] = "LessThan";
        Comparison[Comparison["EqualTo"] = 0] = "EqualTo";
        Comparison[Comparison["GreaterThan"] = 1] = "GreaterThan";
    })(ts.Comparison || (ts.Comparison = {}));
    var Comparison = ts.Comparison;
    function forEach(array, callback) {
        if (array) {
            for (var i = 0, len = array.length; i < len; i++) {
                var result = callback(array[i]);
                if (result) {
                    return result;
                }
            }
        }
        return undefined;
    }
    ts.forEach = forEach;
    function contains(array, value) {
        if (array) {
            for (var i = 0, len = array.length; i < len; i++) {
                if (array[i] === value) {
                    return true;
                }
            }
        }
        return false;
    }
    ts.contains = contains;
    function indexOf(array, value) {
        if (array) {
            for (var i = 0, len = array.length; i < len; i++) {
                if (array[i] === value) {
                    return i;
                }
            }
        }
        return -1;
    }
    ts.indexOf = indexOf;
    function countWhere(array, predicate) {
        var count = 0;
        if (array) {
            for (var i = 0, len = array.length; i < len; i++) {
                if (predicate(array[i])) {
                    count++;
                }
            }
        }
        return count;
    }
    ts.countWhere = countWhere;
    function filter(array, f) {
        if (array) {
            var result = [];
            for (var i = 0, len = array.length; i < len; i++) {
                var item = array[i];
                if (f(item)) {
                    result.push(item);
                }
            }
        }
        return result;
    }
    ts.filter = filter;
    function map(array, f) {
        if (array) {
            var result = [];
            for (var i = 0, len = array.length; i < len; i++) {
                result.push(f(array[i]));
            }
        }
        return result;
    }
    ts.map = map;
    function concatenate(array1, array2) {
        if (!array2 || !array2.length)
            return array1;
        if (!array1 || !array1.length)
            return array2;
        return array1.concat(array2);
    }
    ts.concatenate = concatenate;
    function deduplicate(array) {
        if (array) {
            var result = [];
            for (var i = 0, len = array.length; i < len; i++) {
                var item = array[i];
                if (!contains(result, item))
                    result.push(item);
            }
        }
        return result;
    }
    ts.deduplicate = deduplicate;
    function sum(array, prop) {
        var result = 0;
        for (var i = 0; i < array.length; i++) {
            result += array[i][prop];
        }
        return result;
    }
    ts.sum = sum;
    function lastOrUndefined(array) {
        if (array.length === 0) {
            return undefined;
        }
        return array[array.length - 1];
    }
    ts.lastOrUndefined = lastOrUndefined;
    function binarySearch(array, value) {
        var low = 0;
        var high = array.length - 1;
        while (low <= high) {
            var middle = low + ((high - low) >> 1);
            var midValue = array[middle];
            if (midValue === value) {
                return middle;
            }
            else if (midValue > value) {
                high = middle - 1;
            }
            else {
                low = middle + 1;
            }
        }
        return ~low;
    }
    ts.binarySearch = binarySearch;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    function hasProperty(map, key) {
        return hasOwnProperty.call(map, key);
    }
    ts.hasProperty = hasProperty;
    function getProperty(map, key) {
        return hasOwnProperty.call(map, key) ? map[key] : undefined;
    }
    ts.getProperty = getProperty;
    function isEmpty(map) {
        for (var id in map) {
            if (hasProperty(map, id)) {
                return false;
            }
        }
        return true;
    }
    ts.isEmpty = isEmpty;
    function clone(object) {
        var result = {};
        for (var id in object) {
            result[id] = object[id];
        }
        return result;
    }
    ts.clone = clone;
    function forEachValue(map, callback) {
        var result;
        for (var id in map) {
            if (result = callback(map[id]))
                break;
        }
        return result;
    }
    ts.forEachValue = forEachValue;
    function forEachKey(map, callback) {
        var result;
        for (var id in map) {
            if (result = callback(id))
                break;
        }
        return result;
    }
    ts.forEachKey = forEachKey;
    function lookUp(map, key) {
        return hasProperty(map, key) ? map[key] : undefined;
    }
    ts.lookUp = lookUp;
    function mapToArray(map) {
        var result = [];
        for (var id in map) {
            result.push(map[id]);
        }
        return result;
    }
    ts.mapToArray = mapToArray;
    function arrayToMap(array, makeKey) {
        var result = {};
        forEach(array, function (value) {
            result[makeKey(value)] = value;
        });
        return result;
    }
    ts.arrayToMap = arrayToMap;
    function formatStringFromArgs(text, args, baseIndex) {
        baseIndex = baseIndex || 0;
        return text.replace(/{(\d+)}/g, function (match, index) { return args[+index + baseIndex]; });
    }
    ts.localizedDiagnosticMessages = undefined;
    function getLocaleSpecificMessage(message) {
        return ts.localizedDiagnosticMessages && ts.localizedDiagnosticMessages[message] ? ts.localizedDiagnosticMessages[message] : message;
    }
    ts.getLocaleSpecificMessage = getLocaleSpecificMessage;
    function createFileDiagnostic(file, start, length, message) {
        Debug.assert(start >= 0, "start must be non-negative, is " + start);
        Debug.assert(length >= 0, "length must be non-negative, is " + length);
        var text = getLocaleSpecificMessage(message.key);
        if (arguments.length > 4) {
            text = formatStringFromArgs(text, arguments, 4);
        }
        return {
            file: file,
            start: start,
            length: length,
            messageText: text,
            category: message.category,
            code: message.code,
            isEarly: message.isEarly
        };
    }
    ts.createFileDiagnostic = createFileDiagnostic;
    function createCompilerDiagnostic(message) {
        var text = getLocaleSpecificMessage(message.key);
        if (arguments.length > 1) {
            text = formatStringFromArgs(text, arguments, 1);
        }
        return {
            file: undefined,
            start: undefined,
            length: undefined,
            messageText: text,
            category: message.category,
            code: message.code,
            isEarly: message.isEarly
        };
    }
    ts.createCompilerDiagnostic = createCompilerDiagnostic;
    function chainDiagnosticMessages(details, message) {
        var text = getLocaleSpecificMessage(message.key);
        if (arguments.length > 2) {
            text = formatStringFromArgs(text, arguments, 2);
        }
        return {
            messageText: text,
            category: message.category,
            code: message.code,
            next: details
        };
    }
    ts.chainDiagnosticMessages = chainDiagnosticMessages;
    function concatenateDiagnosticMessageChains(headChain, tailChain) {
        Debug.assert(!headChain.next);
        headChain.next = tailChain;
        return headChain;
    }
    ts.concatenateDiagnosticMessageChains = concatenateDiagnosticMessageChains;
    function flattenDiagnosticChain(file, start, length, diagnosticChain, newLine) {
        Debug.assert(start >= 0, "start must be non-negative, is " + start);
        Debug.assert(length >= 0, "length must be non-negative, is " + length);
        var code = diagnosticChain.code;
        var category = diagnosticChain.category;
        var messageText = "";
        var indent = 0;
        while (diagnosticChain) {
            if (indent) {
                messageText += newLine;
                for (var i = 0; i < indent; i++) {
                    messageText += "  ";
                }
            }
            messageText += diagnosticChain.messageText;
            indent++;
            diagnosticChain = diagnosticChain.next;
        }
        return {
            file: file,
            start: start,
            length: length,
            code: code,
            category: category,
            messageText: messageText
        };
    }
    ts.flattenDiagnosticChain = flattenDiagnosticChain;
    function compareValues(a, b) {
        if (a === b)
            return 0 /* EqualTo */;
        if (a === undefined)
            return -1 /* LessThan */;
        if (b === undefined)
            return 1 /* GreaterThan */;
        return a < b ? -1 /* LessThan */ : 1 /* GreaterThan */;
    }
    ts.compareValues = compareValues;
    function getDiagnosticFilename(diagnostic) {
        return diagnostic.file ? diagnostic.file.filename : undefined;
    }
    function compareDiagnostics(d1, d2) {
        return compareValues(getDiagnosticFilename(d1), getDiagnosticFilename(d2)) || compareValues(d1.start, d2.start) || compareValues(d1.length, d2.length) || compareValues(d1.code, d2.code) || compareValues(d1.messageText, d2.messageText) || 0;
    }
    ts.compareDiagnostics = compareDiagnostics;
    function deduplicateSortedDiagnostics(diagnostics) {
        if (diagnostics.length < 2) {
            return diagnostics;
        }
        var newDiagnostics = [diagnostics[0]];
        var previousDiagnostic = diagnostics[0];
        for (var i = 1; i < diagnostics.length; i++) {
            var currentDiagnostic = diagnostics[i];
            var isDupe = compareDiagnostics(currentDiagnostic, previousDiagnostic) === 0 /* EqualTo */;
            if (!isDupe) {
                newDiagnostics.push(currentDiagnostic);
                previousDiagnostic = currentDiagnostic;
            }
        }
        return newDiagnostics;
    }
    ts.deduplicateSortedDiagnostics = deduplicateSortedDiagnostics;
    function normalizeSlashes(path) {
        return path.replace(/\\/g, "/");
    }
    ts.normalizeSlashes = normalizeSlashes;
    function getRootLength(path) {
        if (path.charCodeAt(0) === 47 /* slash */) {
            if (path.charCodeAt(1) !== 47 /* slash */)
                return 1;
            var p1 = path.indexOf("/", 2);
            if (p1 < 0)
                return 2;
            var p2 = path.indexOf("/", p1 + 1);
            if (p2 < 0)
                return p1 + 1;
            return p2 + 1;
        }
        if (path.charCodeAt(1) === 58 /* colon */) {
            if (path.charCodeAt(2) === 47 /* slash */)
                return 3;
            return 2;
        }
        return 0;
    }
    ts.getRootLength = getRootLength;
    ts.directorySeparator = "/";
    function getNormalizedParts(normalizedSlashedPath, rootLength) {
        var parts = normalizedSlashedPath.substr(rootLength).split(ts.directorySeparator);
        var normalized = [];
        for (var i = 0; i < parts.length; i++) {
            var part = parts[i];
            if (part !== ".") {
                if (part === ".." && normalized.length > 0 && normalized[normalized.length - 1] !== "..") {
                    normalized.pop();
                }
                else {
                    normalized.push(part);
                }
            }
        }
        return normalized;
    }
    function normalizePath(path) {
        var path = normalizeSlashes(path);
        var rootLength = getRootLength(path);
        var normalized = getNormalizedParts(path, rootLength);
        return path.substr(0, rootLength) + normalized.join(ts.directorySeparator);
    }
    ts.normalizePath = normalizePath;
    function getDirectoryPath(path) {
        return path.substr(0, Math.max(getRootLength(path), path.lastIndexOf(ts.directorySeparator)));
    }
    ts.getDirectoryPath = getDirectoryPath;
    function isUrl(path) {
        return path && !isRootedDiskPath(path) && path.indexOf("://") !== -1;
    }
    ts.isUrl = isUrl;
    function isRootedDiskPath(path) {
        return getRootLength(path) !== 0;
    }
    ts.isRootedDiskPath = isRootedDiskPath;
    function normalizedPathComponents(path, rootLength) {
        var normalizedParts = getNormalizedParts(path, rootLength);
        return [path.substr(0, rootLength)].concat(normalizedParts);
    }
    function getNormalizedPathComponents(path, currentDirectory) {
        var path = normalizeSlashes(path);
        var rootLength = getRootLength(path);
        if (rootLength == 0) {
            path = combinePaths(normalizeSlashes(currentDirectory), path);
            rootLength = getRootLength(path);
        }
        return normalizedPathComponents(path, rootLength);
    }
    ts.getNormalizedPathComponents = getNormalizedPathComponents;
    function getNormalizedAbsolutePath(filename, currentDirectory) {
        return getNormalizedPathFromPathComponents(getNormalizedPathComponents(filename, currentDirectory));
    }
    ts.getNormalizedAbsolutePath = getNormalizedAbsolutePath;
    function getNormalizedPathFromPathComponents(pathComponents) {
        if (pathComponents && pathComponents.length) {
            return pathComponents[0] + pathComponents.slice(1).join(ts.directorySeparator);
        }
    }
    ts.getNormalizedPathFromPathComponents = getNormalizedPathFromPathComponents;
    function getNormalizedPathComponentsOfUrl(url) {
        var urlLength = url.length;
        var rootLength = url.indexOf("://") + "://".length;
        while (rootLength < urlLength) {
            if (url.charCodeAt(rootLength) === 47 /* slash */) {
                rootLength++;
            }
            else {
                break;
            }
        }
        if (rootLength === urlLength) {
            return [url];
        }
        var indexOfNextSlash = url.indexOf(ts.directorySeparator, rootLength);
        if (indexOfNextSlash !== -1) {
            rootLength = indexOfNextSlash + 1;
            return normalizedPathComponents(url, rootLength);
        }
        else {
            return [url + ts.directorySeparator];
        }
    }
    function getNormalizedPathOrUrlComponents(pathOrUrl, currentDirectory) {
        if (isUrl(pathOrUrl)) {
            return getNormalizedPathComponentsOfUrl(pathOrUrl);
        }
        else {
            return getNormalizedPathComponents(pathOrUrl, currentDirectory);
        }
    }
    function getRelativePathToDirectoryOrUrl(directoryPathOrUrl, relativeOrAbsolutePath, currentDirectory, getCanonicalFileName, isAbsolutePathAnUrl) {
        var pathComponents = getNormalizedPathOrUrlComponents(relativeOrAbsolutePath, currentDirectory);
        var directoryComponents = getNormalizedPathOrUrlComponents(directoryPathOrUrl, currentDirectory);
        if (directoryComponents.length > 1 && directoryComponents[directoryComponents.length - 1] === "") {
            directoryComponents.length--;
        }
        for (var joinStartIndex = 0; joinStartIndex < pathComponents.length && joinStartIndex < directoryComponents.length; joinStartIndex++) {
            if (getCanonicalFileName(directoryComponents[joinStartIndex]) !== getCanonicalFileName(pathComponents[joinStartIndex])) {
                break;
            }
        }
        if (joinStartIndex) {
            var relativePath = "";
            var relativePathComponents = pathComponents.slice(joinStartIndex, pathComponents.length);
            for (; joinStartIndex < directoryComponents.length; joinStartIndex++) {
                if (directoryComponents[joinStartIndex] !== "") {
                    relativePath = relativePath + ".." + ts.directorySeparator;
                }
            }
            return relativePath + relativePathComponents.join(ts.directorySeparator);
        }
        var absolutePath = getNormalizedPathFromPathComponents(pathComponents);
        if (isAbsolutePathAnUrl && isRootedDiskPath(absolutePath)) {
            absolutePath = "file:///" + absolutePath;
        }
        return absolutePath;
    }
    ts.getRelativePathToDirectoryOrUrl = getRelativePathToDirectoryOrUrl;
    function getBaseFilename(path) {
        var i = path.lastIndexOf(ts.directorySeparator);
        return i < 0 ? path : path.substring(i + 1);
    }
    ts.getBaseFilename = getBaseFilename;
    function combinePaths(path1, path2) {
        if (!(path1 && path1.length))
            return path2;
        if (!(path2 && path2.length))
            return path1;
        if (path2.charAt(0) === ts.directorySeparator)
            return path2;
        if (path1.charAt(path1.length - 1) === ts.directorySeparator)
            return path1 + path2;
        return path1 + ts.directorySeparator + path2;
    }
    ts.combinePaths = combinePaths;
    function fileExtensionIs(path, extension) {
        var pathLen = path.length;
        var extLen = extension.length;
        return pathLen > extLen && path.substr(pathLen - extLen, extLen) === extension;
    }
    ts.fileExtensionIs = fileExtensionIs;
    var supportedExtensions = [".d.ts", ".ts", ".js"];
    function removeFileExtension(path) {
        for (var i = 0; i < supportedExtensions.length; i++) {
            var ext = supportedExtensions[i];
            if (fileExtensionIs(path, ext)) {
                return path.substr(0, path.length - ext.length);
            }
        }
        return path;
    }
    ts.removeFileExtension = removeFileExtension;
    var backslashOrDoubleQuote = /[\"\\]/g;
    var escapedCharsRegExp = /[\0-\19\t\v\f\b\0\r\n\u2028\u2029\u0085]/g;
    var escapedCharsMap = {
        "\0": "\\0",
        "\t": "\\t",
        "\v": "\\v",
        "\f": "\\f",
        "\b": "\\b",
        "\r": "\\r",
        "\n": "\\n",
        "\\": "\\\\",
        "\"": "\\\"",
        "\u2028": "\\u2028",
        "\u2029": "\\u2029",
        "\u0085": "\\u0085"
    };
    function escapeString(s) {
        s = backslashOrDoubleQuote.test(s) ? s.replace(backslashOrDoubleQuote, getReplacement) : s;
        s = escapedCharsRegExp.test(s) ? s.replace(escapedCharsRegExp, getReplacement) : s;
        return s;
        function getReplacement(c) {
            return escapedCharsMap[c] || unicodeEscape(c);
        }
        function unicodeEscape(c) {
            var hexCharCode = c.charCodeAt(0).toString(16);
            var paddedHexCode = ("0000" + hexCharCode).slice(-4);
            return "\\u" + paddedHexCode;
        }
    }
    ts.escapeString = escapeString;
    function Symbol(flags, name) {
        this.flags = flags;
        this.name = name;
        this.declarations = undefined;
    }
    function Type(checker, flags) {
        this.flags = flags;
    }
    function Signature(checker) {
    }
    ts.objectAllocator = {
        getNodeConstructor: function (kind) {
            function Node() {
            }
            Node.prototype = {
                kind: kind,
                pos: 0,
                end: 0,
                flags: 0,
                parent: undefined
            };
            return Node;
        },
        getSymbolConstructor: function () { return Symbol; },
        getTypeConstructor: function () { return Type; },
        getSignatureConstructor: function () { return Signature; }
    };
    (function (AssertionLevel) {
        AssertionLevel[AssertionLevel["None"] = 0] = "None";
        AssertionLevel[AssertionLevel["Normal"] = 1] = "Normal";
        AssertionLevel[AssertionLevel["Aggressive"] = 2] = "Aggressive";
        AssertionLevel[AssertionLevel["VeryAggressive"] = 3] = "VeryAggressive";
    })(ts.AssertionLevel || (ts.AssertionLevel = {}));
    var AssertionLevel = ts.AssertionLevel;
    var Debug;
    (function (Debug) {
        var currentAssertionLevel = 0 /* None */;
        function shouldAssert(level) {
            return currentAssertionLevel >= level;
        }
        Debug.shouldAssert = shouldAssert;
        function assert(expression, message, verboseDebugInfo) {
            if (!expression) {
                var verboseDebugString = "";
                if (verboseDebugInfo) {
                    verboseDebugString = "\r\nVerbose Debug Information: " + verboseDebugInfo();
                }
                throw new Error("Debug Failure. False expression: " + (message || "") + verboseDebugString);
            }
        }
        Debug.assert = assert;
        function fail(message) {
            Debug.assert(false, message);
        }
        Debug.fail = fail;
    })(Debug = ts.Debug || (ts.Debug = {}));
})(ts || (ts = {}));
var ts;
(function (ts) {
    (function (SyntaxKind) {
        SyntaxKind[SyntaxKind["Unknown"] = 0] = "Unknown";
        SyntaxKind[SyntaxKind["EndOfFileToken"] = 1] = "EndOfFileToken";
        SyntaxKind[SyntaxKind["SingleLineCommentTrivia"] = 2] = "SingleLineCommentTrivia";
        SyntaxKind[SyntaxKind["MultiLineCommentTrivia"] = 3] = "MultiLineCommentTrivia";
        SyntaxKind[SyntaxKind["NewLineTrivia"] = 4] = "NewLineTrivia";
        SyntaxKind[SyntaxKind["WhitespaceTrivia"] = 5] = "WhitespaceTrivia";
        SyntaxKind[SyntaxKind["ConflictMarkerTrivia"] = 6] = "ConflictMarkerTrivia";
        SyntaxKind[SyntaxKind["NumericLiteral"] = 7] = "NumericLiteral";
        SyntaxKind[SyntaxKind["StringLiteral"] = 8] = "StringLiteral";
        SyntaxKind[SyntaxKind["RegularExpressionLiteral"] = 9] = "RegularExpressionLiteral";
        SyntaxKind[SyntaxKind["NoSubstitutionTemplateLiteral"] = 10] = "NoSubstitutionTemplateLiteral";
        SyntaxKind[SyntaxKind["TemplateHead"] = 11] = "TemplateHead";
        SyntaxKind[SyntaxKind["TemplateMiddle"] = 12] = "TemplateMiddle";
        SyntaxKind[SyntaxKind["TemplateTail"] = 13] = "TemplateTail";
        SyntaxKind[SyntaxKind["OpenBraceToken"] = 14] = "OpenBraceToken";
        SyntaxKind[SyntaxKind["CloseBraceToken"] = 15] = "CloseBraceToken";
        SyntaxKind[SyntaxKind["OpenParenToken"] = 16] = "OpenParenToken";
        SyntaxKind[SyntaxKind["CloseParenToken"] = 17] = "CloseParenToken";
        SyntaxKind[SyntaxKind["OpenBracketToken"] = 18] = "OpenBracketToken";
        SyntaxKind[SyntaxKind["CloseBracketToken"] = 19] = "CloseBracketToken";
        SyntaxKind[SyntaxKind["DotToken"] = 20] = "DotToken";
        SyntaxKind[SyntaxKind["DotDotDotToken"] = 21] = "DotDotDotToken";
        SyntaxKind[SyntaxKind["SemicolonToken"] = 22] = "SemicolonToken";
        SyntaxKind[SyntaxKind["CommaToken"] = 23] = "CommaToken";
        SyntaxKind[SyntaxKind["LessThanToken"] = 24] = "LessThanToken";
        SyntaxKind[SyntaxKind["GreaterThanToken"] = 25] = "GreaterThanToken";
        SyntaxKind[SyntaxKind["LessThanEqualsToken"] = 26] = "LessThanEqualsToken";
        SyntaxKind[SyntaxKind["GreaterThanEqualsToken"] = 27] = "GreaterThanEqualsToken";
        SyntaxKind[SyntaxKind["EqualsEqualsToken"] = 28] = "EqualsEqualsToken";
        SyntaxKind[SyntaxKind["ExclamationEqualsToken"] = 29] = "ExclamationEqualsToken";
        SyntaxKind[SyntaxKind["EqualsEqualsEqualsToken"] = 30] = "EqualsEqualsEqualsToken";
        SyntaxKind[SyntaxKind["ExclamationEqualsEqualsToken"] = 31] = "ExclamationEqualsEqualsToken";
        SyntaxKind[SyntaxKind["EqualsGreaterThanToken"] = 32] = "EqualsGreaterThanToken";
        SyntaxKind[SyntaxKind["PlusToken"] = 33] = "PlusToken";
        SyntaxKind[SyntaxKind["MinusToken"] = 34] = "MinusToken";
        SyntaxKind[SyntaxKind["AsteriskToken"] = 35] = "AsteriskToken";
        SyntaxKind[SyntaxKind["SlashToken"] = 36] = "SlashToken";
        SyntaxKind[SyntaxKind["PercentToken"] = 37] = "PercentToken";
        SyntaxKind[SyntaxKind["PlusPlusToken"] = 38] = "PlusPlusToken";
        SyntaxKind[SyntaxKind["MinusMinusToken"] = 39] = "MinusMinusToken";
        SyntaxKind[SyntaxKind["LessThanLessThanToken"] = 40] = "LessThanLessThanToken";
        SyntaxKind[SyntaxKind["GreaterThanGreaterThanToken"] = 41] = "GreaterThanGreaterThanToken";
        SyntaxKind[SyntaxKind["GreaterThanGreaterThanGreaterThanToken"] = 42] = "GreaterThanGreaterThanGreaterThanToken";
        SyntaxKind[SyntaxKind["AmpersandToken"] = 43] = "AmpersandToken";
        SyntaxKind[SyntaxKind["BarToken"] = 44] = "BarToken";
        SyntaxKind[SyntaxKind["CaretToken"] = 45] = "CaretToken";
        SyntaxKind[SyntaxKind["ExclamationToken"] = 46] = "ExclamationToken";
        SyntaxKind[SyntaxKind["TildeToken"] = 47] = "TildeToken";
        SyntaxKind[SyntaxKind["AmpersandAmpersandToken"] = 48] = "AmpersandAmpersandToken";
        SyntaxKind[SyntaxKind["BarBarToken"] = 49] = "BarBarToken";
        SyntaxKind[SyntaxKind["QuestionToken"] = 50] = "QuestionToken";
        SyntaxKind[SyntaxKind["ColonToken"] = 51] = "ColonToken";
        SyntaxKind[SyntaxKind["EqualsToken"] = 52] = "EqualsToken";
        SyntaxKind[SyntaxKind["PlusEqualsToken"] = 53] = "PlusEqualsToken";
        SyntaxKind[SyntaxKind["MinusEqualsToken"] = 54] = "MinusEqualsToken";
        SyntaxKind[SyntaxKind["AsteriskEqualsToken"] = 55] = "AsteriskEqualsToken";
        SyntaxKind[SyntaxKind["SlashEqualsToken"] = 56] = "SlashEqualsToken";
        SyntaxKind[SyntaxKind["PercentEqualsToken"] = 57] = "PercentEqualsToken";
        SyntaxKind[SyntaxKind["LessThanLessThanEqualsToken"] = 58] = "LessThanLessThanEqualsToken";
        SyntaxKind[SyntaxKind["GreaterThanGreaterThanEqualsToken"] = 59] = "GreaterThanGreaterThanEqualsToken";
        SyntaxKind[SyntaxKind["GreaterThanGreaterThanGreaterThanEqualsToken"] = 60] = "GreaterThanGreaterThanGreaterThanEqualsToken";
        SyntaxKind[SyntaxKind["AmpersandEqualsToken"] = 61] = "AmpersandEqualsToken";
        SyntaxKind[SyntaxKind["BarEqualsToken"] = 62] = "BarEqualsToken";
        SyntaxKind[SyntaxKind["CaretEqualsToken"] = 63] = "CaretEqualsToken";
        SyntaxKind[SyntaxKind["Identifier"] = 64] = "Identifier";
        SyntaxKind[SyntaxKind["BreakKeyword"] = 65] = "BreakKeyword";
        SyntaxKind[SyntaxKind["CaseKeyword"] = 66] = "CaseKeyword";
        SyntaxKind[SyntaxKind["CatchKeyword"] = 67] = "CatchKeyword";
        SyntaxKind[SyntaxKind["ClassKeyword"] = 68] = "ClassKeyword";
        SyntaxKind[SyntaxKind["ConstKeyword"] = 69] = "ConstKeyword";
        SyntaxKind[SyntaxKind["ContinueKeyword"] = 70] = "ContinueKeyword";
        SyntaxKind[SyntaxKind["DebuggerKeyword"] = 71] = "DebuggerKeyword";
        SyntaxKind[SyntaxKind["DefaultKeyword"] = 72] = "DefaultKeyword";
        SyntaxKind[SyntaxKind["DeleteKeyword"] = 73] = "DeleteKeyword";
        SyntaxKind[SyntaxKind["DoKeyword"] = 74] = "DoKeyword";
        SyntaxKind[SyntaxKind["ElseKeyword"] = 75] = "ElseKeyword";
        SyntaxKind[SyntaxKind["EnumKeyword"] = 76] = "EnumKeyword";
        SyntaxKind[SyntaxKind["ExportKeyword"] = 77] = "ExportKeyword";
        SyntaxKind[SyntaxKind["ExtendsKeyword"] = 78] = "ExtendsKeyword";
        SyntaxKind[SyntaxKind["FalseKeyword"] = 79] = "FalseKeyword";
        SyntaxKind[SyntaxKind["FinallyKeyword"] = 80] = "FinallyKeyword";
        SyntaxKind[SyntaxKind["ForKeyword"] = 81] = "ForKeyword";
        SyntaxKind[SyntaxKind["FunctionKeyword"] = 82] = "FunctionKeyword";
        SyntaxKind[SyntaxKind["IfKeyword"] = 83] = "IfKeyword";
        SyntaxKind[SyntaxKind["ImportKeyword"] = 84] = "ImportKeyword";
        SyntaxKind[SyntaxKind["InKeyword"] = 85] = "InKeyword";
        SyntaxKind[SyntaxKind["InstanceOfKeyword"] = 86] = "InstanceOfKeyword";
        SyntaxKind[SyntaxKind["NewKeyword"] = 87] = "NewKeyword";
        SyntaxKind[SyntaxKind["NullKeyword"] = 88] = "NullKeyword";
        SyntaxKind[SyntaxKind["ReturnKeyword"] = 89] = "ReturnKeyword";
        SyntaxKind[SyntaxKind["SuperKeyword"] = 90] = "SuperKeyword";
        SyntaxKind[SyntaxKind["SwitchKeyword"] = 91] = "SwitchKeyword";
        SyntaxKind[SyntaxKind["ThisKeyword"] = 92] = "ThisKeyword";
        SyntaxKind[SyntaxKind["ThrowKeyword"] = 93] = "ThrowKeyword";
        SyntaxKind[SyntaxKind["TrueKeyword"] = 94] = "TrueKeyword";
        SyntaxKind[SyntaxKind["TryKeyword"] = 95] = "TryKeyword";
        SyntaxKind[SyntaxKind["TypeOfKeyword"] = 96] = "TypeOfKeyword";
        SyntaxKind[SyntaxKind["VarKeyword"] = 97] = "VarKeyword";
        SyntaxKind[SyntaxKind["VoidKeyword"] = 98] = "VoidKeyword";
        SyntaxKind[SyntaxKind["WhileKeyword"] = 99] = "WhileKeyword";
        SyntaxKind[SyntaxKind["WithKeyword"] = 100] = "WithKeyword";
        SyntaxKind[SyntaxKind["ImplementsKeyword"] = 101] = "ImplementsKeyword";
        SyntaxKind[SyntaxKind["InterfaceKeyword"] = 102] = "InterfaceKeyword";
        SyntaxKind[SyntaxKind["LetKeyword"] = 103] = "LetKeyword";
        SyntaxKind[SyntaxKind["PackageKeyword"] = 104] = "PackageKeyword";
        SyntaxKind[SyntaxKind["PrivateKeyword"] = 105] = "PrivateKeyword";
        SyntaxKind[SyntaxKind["ProtectedKeyword"] = 106] = "ProtectedKeyword";
        SyntaxKind[SyntaxKind["PublicKeyword"] = 107] = "PublicKeyword";
        SyntaxKind[SyntaxKind["StaticKeyword"] = 108] = "StaticKeyword";
        SyntaxKind[SyntaxKind["YieldKeyword"] = 109] = "YieldKeyword";
        SyntaxKind[SyntaxKind["AnyKeyword"] = 110] = "AnyKeyword";
        SyntaxKind[SyntaxKind["BooleanKeyword"] = 111] = "BooleanKeyword";
        SyntaxKind[SyntaxKind["ConstructorKeyword"] = 112] = "ConstructorKeyword";
        SyntaxKind[SyntaxKind["DeclareKeyword"] = 113] = "DeclareKeyword";
        SyntaxKind[SyntaxKind["GetKeyword"] = 114] = "GetKeyword";
        SyntaxKind[SyntaxKind["ModuleKeyword"] = 115] = "ModuleKeyword";
        SyntaxKind[SyntaxKind["RequireKeyword"] = 116] = "RequireKeyword";
        SyntaxKind[SyntaxKind["NumberKeyword"] = 117] = "NumberKeyword";
        SyntaxKind[SyntaxKind["SetKeyword"] = 118] = "SetKeyword";
        SyntaxKind[SyntaxKind["StringKeyword"] = 119] = "StringKeyword";
        SyntaxKind[SyntaxKind["TypeKeyword"] = 120] = "TypeKeyword";
        SyntaxKind[SyntaxKind["QualifiedName"] = 121] = "QualifiedName";
        SyntaxKind[SyntaxKind["ComputedPropertyName"] = 122] = "ComputedPropertyName";
        SyntaxKind[SyntaxKind["TypeParameter"] = 123] = "TypeParameter";
        SyntaxKind[SyntaxKind["Parameter"] = 124] = "Parameter";
        SyntaxKind[SyntaxKind["PropertySignature"] = 125] = "PropertySignature";
        SyntaxKind[SyntaxKind["PropertyDeclaration"] = 126] = "PropertyDeclaration";
        SyntaxKind[SyntaxKind["MethodSignature"] = 127] = "MethodSignature";
        SyntaxKind[SyntaxKind["MethodDeclaration"] = 128] = "MethodDeclaration";
        SyntaxKind[SyntaxKind["Constructor"] = 129] = "Constructor";
        SyntaxKind[SyntaxKind["GetAccessor"] = 130] = "GetAccessor";
        SyntaxKind[SyntaxKind["SetAccessor"] = 131] = "SetAccessor";
        SyntaxKind[SyntaxKind["CallSignature"] = 132] = "CallSignature";
        SyntaxKind[SyntaxKind["ConstructSignature"] = 133] = "ConstructSignature";
        SyntaxKind[SyntaxKind["IndexSignature"] = 134] = "IndexSignature";
        SyntaxKind[SyntaxKind["TypeReference"] = 135] = "TypeReference";
        SyntaxKind[SyntaxKind["FunctionType"] = 136] = "FunctionType";
        SyntaxKind[SyntaxKind["ConstructorType"] = 137] = "ConstructorType";
        SyntaxKind[SyntaxKind["TypeQuery"] = 138] = "TypeQuery";
        SyntaxKind[SyntaxKind["TypeLiteral"] = 139] = "TypeLiteral";
        SyntaxKind[SyntaxKind["ArrayType"] = 140] = "ArrayType";
        SyntaxKind[SyntaxKind["TupleType"] = 141] = "TupleType";
        SyntaxKind[SyntaxKind["UnionType"] = 142] = "UnionType";
        SyntaxKind[SyntaxKind["ParenthesizedType"] = 143] = "ParenthesizedType";
        SyntaxKind[SyntaxKind["ObjectBindingPattern"] = 144] = "ObjectBindingPattern";
        SyntaxKind[SyntaxKind["ArrayBindingPattern"] = 145] = "ArrayBindingPattern";
        SyntaxKind[SyntaxKind["BindingElement"] = 146] = "BindingElement";
        SyntaxKind[SyntaxKind["ArrayLiteralExpression"] = 147] = "ArrayLiteralExpression";
        SyntaxKind[SyntaxKind["ObjectLiteralExpression"] = 148] = "ObjectLiteralExpression";
        SyntaxKind[SyntaxKind["PropertyAccessExpression"] = 149] = "PropertyAccessExpression";
        SyntaxKind[SyntaxKind["ElementAccessExpression"] = 150] = "ElementAccessExpression";
        SyntaxKind[SyntaxKind["CallExpression"] = 151] = "CallExpression";
        SyntaxKind[SyntaxKind["NewExpression"] = 152] = "NewExpression";
        SyntaxKind[SyntaxKind["TaggedTemplateExpression"] = 153] = "TaggedTemplateExpression";
        SyntaxKind[SyntaxKind["TypeAssertionExpression"] = 154] = "TypeAssertionExpression";
        SyntaxKind[SyntaxKind["ParenthesizedExpression"] = 155] = "ParenthesizedExpression";
        SyntaxKind[SyntaxKind["FunctionExpression"] = 156] = "FunctionExpression";
        SyntaxKind[SyntaxKind["ArrowFunction"] = 157] = "ArrowFunction";
        SyntaxKind[SyntaxKind["DeleteExpression"] = 158] = "DeleteExpression";
        SyntaxKind[SyntaxKind["TypeOfExpression"] = 159] = "TypeOfExpression";
        SyntaxKind[SyntaxKind["VoidExpression"] = 160] = "VoidExpression";
        SyntaxKind[SyntaxKind["PrefixUnaryExpression"] = 161] = "PrefixUnaryExpression";
        SyntaxKind[SyntaxKind["PostfixUnaryExpression"] = 162] = "PostfixUnaryExpression";
        SyntaxKind[SyntaxKind["BinaryExpression"] = 163] = "BinaryExpression";
        SyntaxKind[SyntaxKind["ConditionalExpression"] = 164] = "ConditionalExpression";
        SyntaxKind[SyntaxKind["TemplateExpression"] = 165] = "TemplateExpression";
        SyntaxKind[SyntaxKind["YieldExpression"] = 166] = "YieldExpression";
        SyntaxKind[SyntaxKind["OmittedExpression"] = 167] = "OmittedExpression";
        SyntaxKind[SyntaxKind["TemplateSpan"] = 168] = "TemplateSpan";
        SyntaxKind[SyntaxKind["Block"] = 169] = "Block";
        SyntaxKind[SyntaxKind["VariableStatement"] = 170] = "VariableStatement";
        SyntaxKind[SyntaxKind["EmptyStatement"] = 171] = "EmptyStatement";
        SyntaxKind[SyntaxKind["ExpressionStatement"] = 172] = "ExpressionStatement";
        SyntaxKind[SyntaxKind["IfStatement"] = 173] = "IfStatement";
        SyntaxKind[SyntaxKind["DoStatement"] = 174] = "DoStatement";
        SyntaxKind[SyntaxKind["WhileStatement"] = 175] = "WhileStatement";
        SyntaxKind[SyntaxKind["ForStatement"] = 176] = "ForStatement";
        SyntaxKind[SyntaxKind["ForInStatement"] = 177] = "ForInStatement";
        SyntaxKind[SyntaxKind["ContinueStatement"] = 178] = "ContinueStatement";
        SyntaxKind[SyntaxKind["BreakStatement"] = 179] = "BreakStatement";
        SyntaxKind[SyntaxKind["ReturnStatement"] = 180] = "ReturnStatement";
        SyntaxKind[SyntaxKind["WithStatement"] = 181] = "WithStatement";
        SyntaxKind[SyntaxKind["SwitchStatement"] = 182] = "SwitchStatement";
        SyntaxKind[SyntaxKind["LabeledStatement"] = 183] = "LabeledStatement";
        SyntaxKind[SyntaxKind["ThrowStatement"] = 184] = "ThrowStatement";
        SyntaxKind[SyntaxKind["TryStatement"] = 185] = "TryStatement";
        SyntaxKind[SyntaxKind["TryBlock"] = 186] = "TryBlock";
        SyntaxKind[SyntaxKind["FinallyBlock"] = 187] = "FinallyBlock";
        SyntaxKind[SyntaxKind["DebuggerStatement"] = 188] = "DebuggerStatement";
        SyntaxKind[SyntaxKind["VariableDeclaration"] = 189] = "VariableDeclaration";
        SyntaxKind[SyntaxKind["FunctionDeclaration"] = 190] = "FunctionDeclaration";
        SyntaxKind[SyntaxKind["ClassDeclaration"] = 191] = "ClassDeclaration";
        SyntaxKind[SyntaxKind["InterfaceDeclaration"] = 192] = "InterfaceDeclaration";
        SyntaxKind[SyntaxKind["TypeAliasDeclaration"] = 193] = "TypeAliasDeclaration";
        SyntaxKind[SyntaxKind["EnumDeclaration"] = 194] = "EnumDeclaration";
        SyntaxKind[SyntaxKind["ModuleDeclaration"] = 195] = "ModuleDeclaration";
        SyntaxKind[SyntaxKind["ModuleBlock"] = 196] = "ModuleBlock";
        SyntaxKind[SyntaxKind["ImportDeclaration"] = 197] = "ImportDeclaration";
        SyntaxKind[SyntaxKind["ExportAssignment"] = 198] = "ExportAssignment";
        SyntaxKind[SyntaxKind["ExternalModuleReference"] = 199] = "ExternalModuleReference";
        SyntaxKind[SyntaxKind["CaseClause"] = 200] = "CaseClause";
        SyntaxKind[SyntaxKind["DefaultClause"] = 201] = "DefaultClause";
        SyntaxKind[SyntaxKind["HeritageClause"] = 202] = "HeritageClause";
        SyntaxKind[SyntaxKind["CatchClause"] = 203] = "CatchClause";
        SyntaxKind[SyntaxKind["PropertyAssignment"] = 204] = "PropertyAssignment";
        SyntaxKind[SyntaxKind["ShorthandPropertyAssignment"] = 205] = "ShorthandPropertyAssignment";
        SyntaxKind[SyntaxKind["EnumMember"] = 206] = "EnumMember";
        SyntaxKind[SyntaxKind["SourceFile"] = 207] = "SourceFile";
        SyntaxKind[SyntaxKind["Program"] = 208] = "Program";
        SyntaxKind[SyntaxKind["SyntaxList"] = 209] = "SyntaxList";
        SyntaxKind[SyntaxKind["Count"] = 210] = "Count";
        SyntaxKind[SyntaxKind["FirstAssignment"] = 52] = "FirstAssignment";
        SyntaxKind[SyntaxKind["LastAssignment"] = 63] = "LastAssignment";
        SyntaxKind[SyntaxKind["FirstReservedWord"] = 65] = "FirstReservedWord";
        SyntaxKind[SyntaxKind["LastReservedWord"] = 100] = "LastReservedWord";
        SyntaxKind[SyntaxKind["FirstKeyword"] = 65] = "FirstKeyword";
        SyntaxKind[SyntaxKind["LastKeyword"] = 120] = "LastKeyword";
        SyntaxKind[SyntaxKind["FirstFutureReservedWord"] = 101] = "FirstFutureReservedWord";
        SyntaxKind[SyntaxKind["LastFutureReservedWord"] = 109] = "LastFutureReservedWord";
        SyntaxKind[SyntaxKind["FirstTypeNode"] = 135] = "FirstTypeNode";
        SyntaxKind[SyntaxKind["LastTypeNode"] = 143] = "LastTypeNode";
        SyntaxKind[SyntaxKind["FirstPunctuation"] = 14] = "FirstPunctuation";
        SyntaxKind[SyntaxKind["LastPunctuation"] = 63] = "LastPunctuation";
        SyntaxKind[SyntaxKind["FirstToken"] = 0] = "FirstToken";
        SyntaxKind[SyntaxKind["LastToken"] = 120] = "LastToken";
        SyntaxKind[SyntaxKind["FirstTriviaToken"] = 2] = "FirstTriviaToken";
        SyntaxKind[SyntaxKind["LastTriviaToken"] = 6] = "LastTriviaToken";
        SyntaxKind[SyntaxKind["FirstLiteralToken"] = 7] = "FirstLiteralToken";
        SyntaxKind[SyntaxKind["LastLiteralToken"] = 10] = "LastLiteralToken";
        SyntaxKind[SyntaxKind["FirstTemplateToken"] = 10] = "FirstTemplateToken";
        SyntaxKind[SyntaxKind["LastTemplateToken"] = 13] = "LastTemplateToken";
        SyntaxKind[SyntaxKind["FirstOperator"] = 22] = "FirstOperator";
        SyntaxKind[SyntaxKind["LastOperator"] = 63] = "LastOperator";
        SyntaxKind[SyntaxKind["FirstBinaryOperator"] = 24] = "FirstBinaryOperator";
        SyntaxKind[SyntaxKind["LastBinaryOperator"] = 63] = "LastBinaryOperator";
        SyntaxKind[SyntaxKind["FirstNode"] = 121] = "FirstNode";
    })(ts.SyntaxKind || (ts.SyntaxKind = {}));
    var SyntaxKind = ts.SyntaxKind;
    (function (NodeFlags) {
        NodeFlags[NodeFlags["Export"] = 1] = "Export";
        NodeFlags[NodeFlags["Ambient"] = 2] = "Ambient";
        NodeFlags[NodeFlags["Public"] = 16] = "Public";
        NodeFlags[NodeFlags["Private"] = 32] = "Private";
        NodeFlags[NodeFlags["Protected"] = 64] = "Protected";
        NodeFlags[NodeFlags["Static"] = 128] = "Static";
        NodeFlags[NodeFlags["MultiLine"] = 256] = "MultiLine";
        NodeFlags[NodeFlags["Synthetic"] = 512] = "Synthetic";
        NodeFlags[NodeFlags["DeclarationFile"] = 1024] = "DeclarationFile";
        NodeFlags[NodeFlags["Let"] = 2048] = "Let";
        NodeFlags[NodeFlags["Const"] = 4096] = "Const";
        NodeFlags[NodeFlags["OctalLiteral"] = 8192] = "OctalLiteral";
        NodeFlags[NodeFlags["Modifier"] = 243] = "Modifier";
        NodeFlags[NodeFlags["AccessibilityModifier"] = 112] = "AccessibilityModifier";
        NodeFlags[NodeFlags["BlockScoped"] = 6144] = "BlockScoped";
    })(ts.NodeFlags || (ts.NodeFlags = {}));
    var NodeFlags = ts.NodeFlags;
    (function (ParserContextFlags) {
        ParserContextFlags[ParserContextFlags["StrictMode"] = 1] = "StrictMode";
        ParserContextFlags[ParserContextFlags["DisallowIn"] = 2] = "DisallowIn";
        ParserContextFlags[ParserContextFlags["Yield"] = 4] = "Yield";
        ParserContextFlags[ParserContextFlags["GeneratorParameter"] = 8] = "GeneratorParameter";
        ParserContextFlags[ParserContextFlags["ContainsError"] = 16] = "ContainsError";
        ParserContextFlags[ParserContextFlags["HasPropagatedChildContainsErrorFlag"] = 32] = "HasPropagatedChildContainsErrorFlag";
    })(ts.ParserContextFlags || (ts.ParserContextFlags = {}));
    var ParserContextFlags = ts.ParserContextFlags;
    (function (EmitReturnStatus) {
        EmitReturnStatus[EmitReturnStatus["Succeeded"] = 0] = "Succeeded";
        EmitReturnStatus[EmitReturnStatus["AllOutputGenerationSkipped"] = 1] = "AllOutputGenerationSkipped";
        EmitReturnStatus[EmitReturnStatus["JSGeneratedWithSemanticErrors"] = 2] = "JSGeneratedWithSemanticErrors";
        EmitReturnStatus[EmitReturnStatus["DeclarationGenerationSkipped"] = 3] = "DeclarationGenerationSkipped";
        EmitReturnStatus[EmitReturnStatus["EmitErrorsEncountered"] = 4] = "EmitErrorsEncountered";
        EmitReturnStatus[EmitReturnStatus["CompilerOptionsErrors"] = 5] = "CompilerOptionsErrors";
    })(ts.EmitReturnStatus || (ts.EmitReturnStatus = {}));
    var EmitReturnStatus = ts.EmitReturnStatus;
    (function (TypeFormatFlags) {
        TypeFormatFlags[TypeFormatFlags["None"] = 0] = "None";
        TypeFormatFlags[TypeFormatFlags["WriteArrayAsGenericType"] = 1] = "WriteArrayAsGenericType";
        TypeFormatFlags[TypeFormatFlags["UseTypeOfFunction"] = 2] = "UseTypeOfFunction";
        TypeFormatFlags[TypeFormatFlags["NoTruncation"] = 4] = "NoTruncation";
        TypeFormatFlags[TypeFormatFlags["WriteArrowStyleSignature"] = 8] = "WriteArrowStyleSignature";
        TypeFormatFlags[TypeFormatFlags["WriteOwnNameForAnyLike"] = 16] = "WriteOwnNameForAnyLike";
        TypeFormatFlags[TypeFormatFlags["WriteTypeArgumentsOfSignature"] = 32] = "WriteTypeArgumentsOfSignature";
        TypeFormatFlags[TypeFormatFlags["InElementType"] = 64] = "InElementType";
    })(ts.TypeFormatFlags || (ts.TypeFormatFlags = {}));
    var TypeFormatFlags = ts.TypeFormatFlags;
    (function (SymbolFormatFlags) {
        SymbolFormatFlags[SymbolFormatFlags["None"] = 0] = "None";
        SymbolFormatFlags[SymbolFormatFlags["WriteTypeParametersOrArguments"] = 1] = "WriteTypeParametersOrArguments";
        SymbolFormatFlags[SymbolFormatFlags["UseOnlyExternalAliasing"] = 2] = "UseOnlyExternalAliasing";
    })(ts.SymbolFormatFlags || (ts.SymbolFormatFlags = {}));
    var SymbolFormatFlags = ts.SymbolFormatFlags;
    (function (SymbolAccessibility) {
        SymbolAccessibility[SymbolAccessibility["Accessible"] = 0] = "Accessible";
        SymbolAccessibility[SymbolAccessibility["NotAccessible"] = 1] = "NotAccessible";
        SymbolAccessibility[SymbolAccessibility["CannotBeNamed"] = 2] = "CannotBeNamed";
    })(ts.SymbolAccessibility || (ts.SymbolAccessibility = {}));
    var SymbolAccessibility = ts.SymbolAccessibility;
    (function (SymbolFlags) {
        SymbolFlags[SymbolFlags["FunctionScopedVariable"] = 1] = "FunctionScopedVariable";
        SymbolFlags[SymbolFlags["BlockScopedVariable"] = 2] = "BlockScopedVariable";
        SymbolFlags[SymbolFlags["Property"] = 4] = "Property";
        SymbolFlags[SymbolFlags["EnumMember"] = 8] = "EnumMember";
        SymbolFlags[SymbolFlags["Function"] = 16] = "Function";
        SymbolFlags[SymbolFlags["Class"] = 32] = "Class";
        SymbolFlags[SymbolFlags["Interface"] = 64] = "Interface";
        SymbolFlags[SymbolFlags["ConstEnum"] = 128] = "ConstEnum";
        SymbolFlags[SymbolFlags["RegularEnum"] = 256] = "RegularEnum";
        SymbolFlags[SymbolFlags["ValueModule"] = 512] = "ValueModule";
        SymbolFlags[SymbolFlags["NamespaceModule"] = 1024] = "NamespaceModule";
        SymbolFlags[SymbolFlags["TypeLiteral"] = 2048] = "TypeLiteral";
        SymbolFlags[SymbolFlags["ObjectLiteral"] = 4096] = "ObjectLiteral";
        SymbolFlags[SymbolFlags["Method"] = 8192] = "Method";
        SymbolFlags[SymbolFlags["Constructor"] = 16384] = "Constructor";
        SymbolFlags[SymbolFlags["GetAccessor"] = 32768] = "GetAccessor";
        SymbolFlags[SymbolFlags["SetAccessor"] = 65536] = "SetAccessor";
        SymbolFlags[SymbolFlags["Signature"] = 131072] = "Signature";
        SymbolFlags[SymbolFlags["TypeParameter"] = 262144] = "TypeParameter";
        SymbolFlags[SymbolFlags["TypeAlias"] = 524288] = "TypeAlias";
        SymbolFlags[SymbolFlags["ExportValue"] = 1048576] = "ExportValue";
        SymbolFlags[SymbolFlags["ExportType"] = 2097152] = "ExportType";
        SymbolFlags[SymbolFlags["ExportNamespace"] = 4194304] = "ExportNamespace";
        SymbolFlags[SymbolFlags["Import"] = 8388608] = "Import";
        SymbolFlags[SymbolFlags["Instantiated"] = 16777216] = "Instantiated";
        SymbolFlags[SymbolFlags["Merged"] = 33554432] = "Merged";
        SymbolFlags[SymbolFlags["Transient"] = 67108864] = "Transient";
        SymbolFlags[SymbolFlags["Prototype"] = 134217728] = "Prototype";
        SymbolFlags[SymbolFlags["UnionProperty"] = 268435456] = "UnionProperty";
        SymbolFlags[SymbolFlags["Optional"] = 536870912] = "Optional";
        SymbolFlags[SymbolFlags["Enum"] = 384] = "Enum";
        SymbolFlags[SymbolFlags["Variable"] = 3] = "Variable";
        SymbolFlags[SymbolFlags["Value"] = 107455] = "Value";
        SymbolFlags[SymbolFlags["Type"] = 793056] = "Type";
        SymbolFlags[SymbolFlags["Namespace"] = 1536] = "Namespace";
        SymbolFlags[SymbolFlags["Module"] = 1536] = "Module";
        SymbolFlags[SymbolFlags["Accessor"] = 98304] = "Accessor";
        SymbolFlags[SymbolFlags["FunctionScopedVariableExcludes"] = 107454] = "FunctionScopedVariableExcludes";
        SymbolFlags[SymbolFlags["BlockScopedVariableExcludes"] = 107455] = "BlockScopedVariableExcludes";
        SymbolFlags[SymbolFlags["ParameterExcludes"] = 107455] = "ParameterExcludes";
        SymbolFlags[SymbolFlags["PropertyExcludes"] = 107455] = "PropertyExcludes";
        SymbolFlags[SymbolFlags["EnumMemberExcludes"] = 107455] = "EnumMemberExcludes";
        SymbolFlags[SymbolFlags["FunctionExcludes"] = 106927] = "FunctionExcludes";
        SymbolFlags[SymbolFlags["ClassExcludes"] = 899583] = "ClassExcludes";
        SymbolFlags[SymbolFlags["InterfaceExcludes"] = 792992] = "InterfaceExcludes";
        SymbolFlags[SymbolFlags["RegularEnumExcludes"] = 899327] = "RegularEnumExcludes";
        SymbolFlags[SymbolFlags["ConstEnumExcludes"] = 899967] = "ConstEnumExcludes";
        SymbolFlags[SymbolFlags["ValueModuleExcludes"] = 106639] = "ValueModuleExcludes";
        SymbolFlags[SymbolFlags["NamespaceModuleExcludes"] = 0] = "NamespaceModuleExcludes";
        SymbolFlags[SymbolFlags["MethodExcludes"] = 99263] = "MethodExcludes";
        SymbolFlags[SymbolFlags["GetAccessorExcludes"] = 41919] = "GetAccessorExcludes";
        SymbolFlags[SymbolFlags["SetAccessorExcludes"] = 74687] = "SetAccessorExcludes";
        SymbolFlags[SymbolFlags["TypeParameterExcludes"] = 530912] = "TypeParameterExcludes";
        SymbolFlags[SymbolFlags["TypeAliasExcludes"] = 793056] = "TypeAliasExcludes";
        SymbolFlags[SymbolFlags["ImportExcludes"] = 8388608] = "ImportExcludes";
        SymbolFlags[SymbolFlags["ModuleMember"] = 8914931] = "ModuleMember";
        SymbolFlags[SymbolFlags["ExportHasLocal"] = 944] = "ExportHasLocal";
        SymbolFlags[SymbolFlags["HasLocals"] = 255504] = "HasLocals";
        SymbolFlags[SymbolFlags["HasExports"] = 1952] = "HasExports";
        SymbolFlags[SymbolFlags["HasMembers"] = 6240] = "HasMembers";
        SymbolFlags[SymbolFlags["IsContainer"] = 262128] = "IsContainer";
        SymbolFlags[SymbolFlags["PropertyOrAccessor"] = 98308] = "PropertyOrAccessor";
        SymbolFlags[SymbolFlags["Export"] = 7340032] = "Export";
    })(ts.SymbolFlags || (ts.SymbolFlags = {}));
    var SymbolFlags = ts.SymbolFlags;
    (function (NodeCheckFlags) {
        NodeCheckFlags[NodeCheckFlags["TypeChecked"] = 1] = "TypeChecked";
        NodeCheckFlags[NodeCheckFlags["LexicalThis"] = 2] = "LexicalThis";
        NodeCheckFlags[NodeCheckFlags["CaptureThis"] = 4] = "CaptureThis";
        NodeCheckFlags[NodeCheckFlags["EmitExtends"] = 8] = "EmitExtends";
        NodeCheckFlags[NodeCheckFlags["SuperInstance"] = 16] = "SuperInstance";
        NodeCheckFlags[NodeCheckFlags["SuperStatic"] = 32] = "SuperStatic";
        NodeCheckFlags[NodeCheckFlags["ContextChecked"] = 64] = "ContextChecked";
        NodeCheckFlags[NodeCheckFlags["EnumValuesComputed"] = 128] = "EnumValuesComputed";
    })(ts.NodeCheckFlags || (ts.NodeCheckFlags = {}));
    var NodeCheckFlags = ts.NodeCheckFlags;
    (function (TypeFlags) {
        TypeFlags[TypeFlags["Any"] = 1] = "Any";
        TypeFlags[TypeFlags["String"] = 2] = "String";
        TypeFlags[TypeFlags["Number"] = 4] = "Number";
        TypeFlags[TypeFlags["Boolean"] = 8] = "Boolean";
        TypeFlags[TypeFlags["Void"] = 16] = "Void";
        TypeFlags[TypeFlags["Undefined"] = 32] = "Undefined";
        TypeFlags[TypeFlags["Null"] = 64] = "Null";
        TypeFlags[TypeFlags["Enum"] = 128] = "Enum";
        TypeFlags[TypeFlags["StringLiteral"] = 256] = "StringLiteral";
        TypeFlags[TypeFlags["TypeParameter"] = 512] = "TypeParameter";
        TypeFlags[TypeFlags["Class"] = 1024] = "Class";
        TypeFlags[TypeFlags["Interface"] = 2048] = "Interface";
        TypeFlags[TypeFlags["Reference"] = 4096] = "Reference";
        TypeFlags[TypeFlags["Tuple"] = 8192] = "Tuple";
        TypeFlags[TypeFlags["Union"] = 16384] = "Union";
        TypeFlags[TypeFlags["Anonymous"] = 32768] = "Anonymous";
        TypeFlags[TypeFlags["FromSignature"] = 65536] = "FromSignature";
        TypeFlags[TypeFlags["Unwidened"] = 131072] = "Unwidened";
        TypeFlags[TypeFlags["Intrinsic"] = 127] = "Intrinsic";
        TypeFlags[TypeFlags["StringLike"] = 258] = "StringLike";
        TypeFlags[TypeFlags["NumberLike"] = 132] = "NumberLike";
        TypeFlags[TypeFlags["ObjectType"] = 48128] = "ObjectType";
    })(ts.TypeFlags || (ts.TypeFlags = {}));
    var TypeFlags = ts.TypeFlags;
    (function (SignatureKind) {
        SignatureKind[SignatureKind["Call"] = 0] = "Call";
        SignatureKind[SignatureKind["Construct"] = 1] = "Construct";
    })(ts.SignatureKind || (ts.SignatureKind = {}));
    var SignatureKind = ts.SignatureKind;
    (function (IndexKind) {
        IndexKind[IndexKind["String"] = 0] = "String";
        IndexKind[IndexKind["Number"] = 1] = "Number";
    })(ts.IndexKind || (ts.IndexKind = {}));
    var IndexKind = ts.IndexKind;
    (function (DiagnosticCategory) {
        DiagnosticCategory[DiagnosticCategory["Warning"] = 0] = "Warning";
        DiagnosticCategory[DiagnosticCategory["Error"] = 1] = "Error";
        DiagnosticCategory[DiagnosticCategory["Message"] = 2] = "Message";
    })(ts.DiagnosticCategory || (ts.DiagnosticCategory = {}));
    var DiagnosticCategory = ts.DiagnosticCategory;
    (function (ModuleKind) {
        ModuleKind[ModuleKind["None"] = 0] = "None";
        ModuleKind[ModuleKind["CommonJS"] = 1] = "CommonJS";
        ModuleKind[ModuleKind["AMD"] = 2] = "AMD";
    })(ts.ModuleKind || (ts.ModuleKind = {}));
    var ModuleKind = ts.ModuleKind;
    (function (ScriptTarget) {
        ScriptTarget[ScriptTarget["ES3"] = 0] = "ES3";
        ScriptTarget[ScriptTarget["ES5"] = 1] = "ES5";
        ScriptTarget[ScriptTarget["ES6"] = 2] = "ES6";
        ScriptTarget[ScriptTarget["Latest"] = 2] = "Latest";
    })(ts.ScriptTarget || (ts.ScriptTarget = {}));
    var ScriptTarget = ts.ScriptTarget;
    (function (CharacterCodes) {
        CharacterCodes[CharacterCodes["nullCharacter"] = 0] = "nullCharacter";
        CharacterCodes[CharacterCodes["maxAsciiCharacter"] = 127] = "maxAsciiCharacter";
        CharacterCodes[CharacterCodes["lineFeed"] = 10] = "lineFeed";
        CharacterCodes[CharacterCodes["carriageReturn"] = 13] = "carriageReturn";
        CharacterCodes[CharacterCodes["lineSeparator"] = 8232] = "lineSeparator";
        CharacterCodes[CharacterCodes["paragraphSeparator"] = 8233] = "paragraphSeparator";
        CharacterCodes[CharacterCodes["nextLine"] = 133] = "nextLine";
        CharacterCodes[CharacterCodes["space"] = 32] = "space";
        CharacterCodes[CharacterCodes["nonBreakingSpace"] = 160] = "nonBreakingSpace";
        CharacterCodes[CharacterCodes["enQuad"] = 8192] = "enQuad";
        CharacterCodes[CharacterCodes["emQuad"] = 8193] = "emQuad";
        CharacterCodes[CharacterCodes["enSpace"] = 8194] = "enSpace";
        CharacterCodes[CharacterCodes["emSpace"] = 8195] = "emSpace";
        CharacterCodes[CharacterCodes["threePerEmSpace"] = 8196] = "threePerEmSpace";
        CharacterCodes[CharacterCodes["fourPerEmSpace"] = 8197] = "fourPerEmSpace";
        CharacterCodes[CharacterCodes["sixPerEmSpace"] = 8198] = "sixPerEmSpace";
        CharacterCodes[CharacterCodes["figureSpace"] = 8199] = "figureSpace";
        CharacterCodes[CharacterCodes["punctuationSpace"] = 8200] = "punctuationSpace";
        CharacterCodes[CharacterCodes["thinSpace"] = 8201] = "thinSpace";
        CharacterCodes[CharacterCodes["hairSpace"] = 8202] = "hairSpace";
        CharacterCodes[CharacterCodes["zeroWidthSpace"] = 8203] = "zeroWidthSpace";
        CharacterCodes[CharacterCodes["narrowNoBreakSpace"] = 8239] = "narrowNoBreakSpace";
        CharacterCodes[CharacterCodes["ideographicSpace"] = 12288] = "ideographicSpace";
        CharacterCodes[CharacterCodes["mathematicalSpace"] = 8287] = "mathematicalSpace";
        CharacterCodes[CharacterCodes["ogham"] = 5760] = "ogham";
        CharacterCodes[CharacterCodes["_"] = 95] = "_";
        CharacterCodes[CharacterCodes["$"] = 36] = "$";
        CharacterCodes[CharacterCodes["_0"] = 48] = "_0";
        CharacterCodes[CharacterCodes["_1"] = 49] = "_1";
        CharacterCodes[CharacterCodes["_2"] = 50] = "_2";
        CharacterCodes[CharacterCodes["_3"] = 51] = "_3";
        CharacterCodes[CharacterCodes["_4"] = 52] = "_4";
        CharacterCodes[CharacterCodes["_5"] = 53] = "_5";
        CharacterCodes[CharacterCodes["_6"] = 54] = "_6";
        CharacterCodes[CharacterCodes["_7"] = 55] = "_7";
        CharacterCodes[CharacterCodes["_8"] = 56] = "_8";
        CharacterCodes[CharacterCodes["_9"] = 57] = "_9";
        CharacterCodes[CharacterCodes["a"] = 97] = "a";
        CharacterCodes[CharacterCodes["b"] = 98] = "b";
        CharacterCodes[CharacterCodes["c"] = 99] = "c";
        CharacterCodes[CharacterCodes["d"] = 100] = "d";
        CharacterCodes[CharacterCodes["e"] = 101] = "e";
        CharacterCodes[CharacterCodes["f"] = 102] = "f";
        CharacterCodes[CharacterCodes["g"] = 103] = "g";
        CharacterCodes[CharacterCodes["h"] = 104] = "h";
        CharacterCodes[CharacterCodes["i"] = 105] = "i";
        CharacterCodes[CharacterCodes["j"] = 106] = "j";
        CharacterCodes[CharacterCodes["k"] = 107] = "k";
        CharacterCodes[CharacterCodes["l"] = 108] = "l";
        CharacterCodes[CharacterCodes["m"] = 109] = "m";
        CharacterCodes[CharacterCodes["n"] = 110] = "n";
        CharacterCodes[CharacterCodes["o"] = 111] = "o";
        CharacterCodes[CharacterCodes["p"] = 112] = "p";
        CharacterCodes[CharacterCodes["q"] = 113] = "q";
        CharacterCodes[CharacterCodes["r"] = 114] = "r";
        CharacterCodes[CharacterCodes["s"] = 115] = "s";
        CharacterCodes[CharacterCodes["t"] = 116] = "t";
        CharacterCodes[CharacterCodes["u"] = 117] = "u";
        CharacterCodes[CharacterCodes["v"] = 118] = "v";
        CharacterCodes[CharacterCodes["w"] = 119] = "w";
        CharacterCodes[CharacterCodes["x"] = 120] = "x";
        CharacterCodes[CharacterCodes["y"] = 121] = "y";
        CharacterCodes[CharacterCodes["z"] = 122] = "z";
        CharacterCodes[CharacterCodes["A"] = 65] = "A";
        CharacterCodes[CharacterCodes["B"] = 66] = "B";
        CharacterCodes[CharacterCodes["C"] = 67] = "C";
        CharacterCodes[CharacterCodes["D"] = 68] = "D";
        CharacterCodes[CharacterCodes["E"] = 69] = "E";
        CharacterCodes[CharacterCodes["F"] = 70] = "F";
        CharacterCodes[CharacterCodes["G"] = 71] = "G";
        CharacterCodes[CharacterCodes["H"] = 72] = "H";
        CharacterCodes[CharacterCodes["I"] = 73] = "I";
        CharacterCodes[CharacterCodes["J"] = 74] = "J";
        CharacterCodes[CharacterCodes["K"] = 75] = "K";
        CharacterCodes[CharacterCodes["L"] = 76] = "L";
        CharacterCodes[CharacterCodes["M"] = 77] = "M";
        CharacterCodes[CharacterCodes["N"] = 78] = "N";
        CharacterCodes[CharacterCodes["O"] = 79] = "O";
        CharacterCodes[CharacterCodes["P"] = 80] = "P";
        CharacterCodes[CharacterCodes["Q"] = 81] = "Q";
        CharacterCodes[CharacterCodes["R"] = 82] = "R";
        CharacterCodes[CharacterCodes["S"] = 83] = "S";
        CharacterCodes[CharacterCodes["T"] = 84] = "T";
        CharacterCodes[CharacterCodes["U"] = 85] = "U";
        CharacterCodes[CharacterCodes["V"] = 86] = "V";
        CharacterCodes[CharacterCodes["W"] = 87] = "W";
        CharacterCodes[CharacterCodes["X"] = 88] = "X";
        CharacterCodes[CharacterCodes["Y"] = 89] = "Y";
        CharacterCodes[CharacterCodes["Z"] = 90] = "Z";
        CharacterCodes[CharacterCodes["ampersand"] = 38] = "ampersand";
        CharacterCodes[CharacterCodes["asterisk"] = 42] = "asterisk";
        CharacterCodes[CharacterCodes["at"] = 64] = "at";
        CharacterCodes[CharacterCodes["backslash"] = 92] = "backslash";
        CharacterCodes[CharacterCodes["backtick"] = 96] = "backtick";
        CharacterCodes[CharacterCodes["bar"] = 124] = "bar";
        CharacterCodes[CharacterCodes["caret"] = 94] = "caret";
        CharacterCodes[CharacterCodes["closeBrace"] = 125] = "closeBrace";
        CharacterCodes[CharacterCodes["closeBracket"] = 93] = "closeBracket";
        CharacterCodes[CharacterCodes["closeParen"] = 41] = "closeParen";
        CharacterCodes[CharacterCodes["colon"] = 58] = "colon";
        CharacterCodes[CharacterCodes["comma"] = 44] = "comma";
        CharacterCodes[CharacterCodes["dot"] = 46] = "dot";
        CharacterCodes[CharacterCodes["doubleQuote"] = 34] = "doubleQuote";
        CharacterCodes[CharacterCodes["equals"] = 61] = "equals";
        CharacterCodes[CharacterCodes["exclamation"] = 33] = "exclamation";
        CharacterCodes[CharacterCodes["greaterThan"] = 62] = "greaterThan";
        CharacterCodes[CharacterCodes["lessThan"] = 60] = "lessThan";
        CharacterCodes[CharacterCodes["minus"] = 45] = "minus";
        CharacterCodes[CharacterCodes["openBrace"] = 123] = "openBrace";
        CharacterCodes[CharacterCodes["openBracket"] = 91] = "openBracket";
        CharacterCodes[CharacterCodes["openParen"] = 40] = "openParen";
        CharacterCodes[CharacterCodes["percent"] = 37] = "percent";
        CharacterCodes[CharacterCodes["plus"] = 43] = "plus";
        CharacterCodes[CharacterCodes["question"] = 63] = "question";
        CharacterCodes[CharacterCodes["semicolon"] = 59] = "semicolon";
        CharacterCodes[CharacterCodes["singleQuote"] = 39] = "singleQuote";
        CharacterCodes[CharacterCodes["slash"] = 47] = "slash";
        CharacterCodes[CharacterCodes["tilde"] = 126] = "tilde";
        CharacterCodes[CharacterCodes["backspace"] = 8] = "backspace";
        CharacterCodes[CharacterCodes["formFeed"] = 12] = "formFeed";
        CharacterCodes[CharacterCodes["byteOrderMark"] = 65279] = "byteOrderMark";
        CharacterCodes[CharacterCodes["tab"] = 9] = "tab";
        CharacterCodes[CharacterCodes["verticalTab"] = 11] = "verticalTab";
    })(ts.CharacterCodes || (ts.CharacterCodes = {}));
    var CharacterCodes = ts.CharacterCodes;
})(ts || (ts = {}));
var ts;
(function (ts) {
    ts.Diagnostics = {
        Unterminated_string_literal: { code: 1002, category: 1 /* Error */, key: "Unterminated string literal." },
        Identifier_expected: { code: 1003, category: 1 /* Error */, key: "Identifier expected." },
        _0_expected: { code: 1005, category: 1 /* Error */, key: "'{0}' expected." },
        A_file_cannot_have_a_reference_to_itself: { code: 1006, category: 1 /* Error */, key: "A file cannot have a reference to itself." },
        Trailing_comma_not_allowed: { code: 1009, category: 1 /* Error */, key: "Trailing comma not allowed." },
        Asterisk_Slash_expected: { code: 1010, category: 1 /* Error */, key: "'*/' expected." },
        Unexpected_token: { code: 1012, category: 1 /* Error */, key: "Unexpected token." },
        Catch_clause_parameter_cannot_have_a_type_annotation: { code: 1013, category: 1 /* Error */, key: "Catch clause parameter cannot have a type annotation." },
        A_rest_parameter_must_be_last_in_a_parameter_list: { code: 1014, category: 1 /* Error */, key: "A rest parameter must be last in a parameter list." },
        Parameter_cannot_have_question_mark_and_initializer: { code: 1015, category: 1 /* Error */, key: "Parameter cannot have question mark and initializer." },
        A_required_parameter_cannot_follow_an_optional_parameter: { code: 1016, category: 1 /* Error */, key: "A required parameter cannot follow an optional parameter." },
        An_index_signature_cannot_have_a_rest_parameter: { code: 1017, category: 1 /* Error */, key: "An index signature cannot have a rest parameter." },
        An_index_signature_parameter_cannot_have_an_accessibility_modifier: { code: 1018, category: 1 /* Error */, key: "An index signature parameter cannot have an accessibility modifier." },
        An_index_signature_parameter_cannot_have_a_question_mark: { code: 1019, category: 1 /* Error */, key: "An index signature parameter cannot have a question mark." },
        An_index_signature_parameter_cannot_have_an_initializer: { code: 1020, category: 1 /* Error */, key: "An index signature parameter cannot have an initializer." },
        An_index_signature_must_have_a_type_annotation: { code: 1021, category: 1 /* Error */, key: "An index signature must have a type annotation." },
        An_index_signature_parameter_must_have_a_type_annotation: { code: 1022, category: 1 /* Error */, key: "An index signature parameter must have a type annotation." },
        An_index_signature_parameter_type_must_be_string_or_number: { code: 1023, category: 1 /* Error */, key: "An index signature parameter type must be 'string' or 'number'." },
        A_class_or_interface_declaration_can_only_have_one_extends_clause: { code: 1024, category: 1 /* Error */, key: "A class or interface declaration can only have one 'extends' clause." },
        An_extends_clause_must_precede_an_implements_clause: { code: 1025, category: 1 /* Error */, key: "An 'extends' clause must precede an 'implements' clause." },
        A_class_can_only_extend_a_single_class: { code: 1026, category: 1 /* Error */, key: "A class can only extend a single class." },
        A_class_declaration_can_only_have_one_implements_clause: { code: 1027, category: 1 /* Error */, key: "A class declaration can only have one 'implements' clause." },
        Accessibility_modifier_already_seen: { code: 1028, category: 1 /* Error */, key: "Accessibility modifier already seen." },
        _0_modifier_must_precede_1_modifier: { code: 1029, category: 1 /* Error */, key: "'{0}' modifier must precede '{1}' modifier." },
        _0_modifier_already_seen: { code: 1030, category: 1 /* Error */, key: "'{0}' modifier already seen." },
        _0_modifier_cannot_appear_on_a_class_element: { code: 1031, category: 1 /* Error */, key: "'{0}' modifier cannot appear on a class element." },
        An_interface_declaration_cannot_have_an_implements_clause: { code: 1032, category: 1 /* Error */, key: "An interface declaration cannot have an 'implements' clause." },
        super_must_be_followed_by_an_argument_list_or_member_access: { code: 1034, category: 1 /* Error */, key: "'super' must be followed by an argument list or member access." },
        Only_ambient_modules_can_use_quoted_names: { code: 1035, category: 1 /* Error */, key: "Only ambient modules can use quoted names." },
        Statements_are_not_allowed_in_ambient_contexts: { code: 1036, category: 1 /* Error */, key: "Statements are not allowed in ambient contexts." },
        A_function_implementation_cannot_be_declared_in_an_ambient_context: { code: 1037, category: 1 /* Error */, key: "A function implementation cannot be declared in an ambient context." },
        A_declare_modifier_cannot_be_used_in_an_already_ambient_context: { code: 1038, category: 1 /* Error */, key: "A 'declare' modifier cannot be used in an already ambient context." },
        Initializers_are_not_allowed_in_ambient_contexts: { code: 1039, category: 1 /* Error */, key: "Initializers are not allowed in ambient contexts." },
        _0_modifier_cannot_appear_on_a_module_element: { code: 1044, category: 1 /* Error */, key: "'{0}' modifier cannot appear on a module element." },
        A_declare_modifier_cannot_be_used_with_an_interface_declaration: { code: 1045, category: 1 /* Error */, key: "A 'declare' modifier cannot be used with an interface declaration." },
        A_declare_modifier_is_required_for_a_top_level_declaration_in_a_d_ts_file: { code: 1046, category: 1 /* Error */, key: "A 'declare' modifier is required for a top level declaration in a .d.ts file." },
        A_rest_parameter_cannot_be_optional: { code: 1047, category: 1 /* Error */, key: "A rest parameter cannot be optional." },
        A_rest_parameter_cannot_have_an_initializer: { code: 1048, category: 1 /* Error */, key: "A rest parameter cannot have an initializer." },
        A_set_accessor_must_have_exactly_one_parameter: { code: 1049, category: 1 /* Error */, key: "A 'set' accessor must have exactly one parameter." },
        A_set_accessor_cannot_have_an_optional_parameter: { code: 1051, category: 1 /* Error */, key: "A 'set' accessor cannot have an optional parameter." },
        A_set_accessor_parameter_cannot_have_an_initializer: { code: 1052, category: 1 /* Error */, key: "A 'set' accessor parameter cannot have an initializer." },
        A_set_accessor_cannot_have_rest_parameter: { code: 1053, category: 1 /* Error */, key: "A 'set' accessor cannot have rest parameter." },
        A_get_accessor_cannot_have_parameters: { code: 1054, category: 1 /* Error */, key: "A 'get' accessor cannot have parameters." },
        Accessors_are_only_available_when_targeting_ECMAScript_5_and_higher: { code: 1056, category: 1 /* Error */, key: "Accessors are only available when targeting ECMAScript 5 and higher." },
        Enum_member_must_have_initializer: { code: 1061, category: 1 /* Error */, key: "Enum member must have initializer." },
        An_export_assignment_cannot_be_used_in_an_internal_module: { code: 1063, category: 1 /* Error */, key: "An export assignment cannot be used in an internal module." },
        Ambient_enum_elements_can_only_have_integer_literal_initializers: { code: 1066, category: 1 /* Error */, key: "Ambient enum elements can only have integer literal initializers." },
        Unexpected_token_A_constructor_method_accessor_or_property_was_expected: { code: 1068, category: 1 /* Error */, key: "Unexpected token. A constructor, method, accessor, or property was expected." },
        A_declare_modifier_cannot_be_used_with_an_import_declaration: { code: 1079, category: 1 /* Error */, key: "A 'declare' modifier cannot be used with an import declaration." },
        Invalid_reference_directive_syntax: { code: 1084, category: 1 /* Error */, key: "Invalid 'reference' directive syntax." },
        Octal_literals_are_not_available_when_targeting_ECMAScript_5_and_higher: { code: 1085, category: 1 /* Error */, key: "Octal literals are not available when targeting ECMAScript 5 and higher." },
        An_accessor_cannot_be_declared_in_an_ambient_context: { code: 1086, category: 1 /* Error */, key: "An accessor cannot be declared in an ambient context." },
        _0_modifier_cannot_appear_on_a_constructor_declaration: { code: 1089, category: 1 /* Error */, key: "'{0}' modifier cannot appear on a constructor declaration." },
        _0_modifier_cannot_appear_on_a_parameter: { code: 1090, category: 1 /* Error */, key: "'{0}' modifier cannot appear on a parameter." },
        Only_a_single_variable_declaration_is_allowed_in_a_for_in_statement: { code: 1091, category: 1 /* Error */, key: "Only a single variable declaration is allowed in a 'for...in' statement." },
        Type_parameters_cannot_appear_on_a_constructor_declaration: { code: 1092, category: 1 /* Error */, key: "Type parameters cannot appear on a constructor declaration." },
        Type_annotation_cannot_appear_on_a_constructor_declaration: { code: 1093, category: 1 /* Error */, key: "Type annotation cannot appear on a constructor declaration." },
        An_accessor_cannot_have_type_parameters: { code: 1094, category: 1 /* Error */, key: "An accessor cannot have type parameters." },
        A_set_accessor_cannot_have_a_return_type_annotation: { code: 1095, category: 1 /* Error */, key: "A 'set' accessor cannot have a return type annotation." },
        An_index_signature_must_have_exactly_one_parameter: { code: 1096, category: 1 /* Error */, key: "An index signature must have exactly one parameter." },
        _0_list_cannot_be_empty: { code: 1097, category: 1 /* Error */, key: "'{0}' list cannot be empty." },
        Type_parameter_list_cannot_be_empty: { code: 1098, category: 1 /* Error */, key: "Type parameter list cannot be empty." },
        Type_argument_list_cannot_be_empty: { code: 1099, category: 1 /* Error */, key: "Type argument list cannot be empty." },
        Invalid_use_of_0_in_strict_mode: { code: 1100, category: 1 /* Error */, key: "Invalid use of '{0}' in strict mode." },
        with_statements_are_not_allowed_in_strict_mode: { code: 1101, category: 1 /* Error */, key: "'with' statements are not allowed in strict mode." },
        delete_cannot_be_called_on_an_identifier_in_strict_mode: { code: 1102, category: 1 /* Error */, key: "'delete' cannot be called on an identifier in strict mode." },
        A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement: { code: 1104, category: 1 /* Error */, key: "A 'continue' statement can only be used within an enclosing iteration statement." },
        A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement: { code: 1105, category: 1 /* Error */, key: "A 'break' statement can only be used within an enclosing iteration or switch statement." },
        Jump_target_cannot_cross_function_boundary: { code: 1107, category: 1 /* Error */, key: "Jump target cannot cross function boundary." },
        A_return_statement_can_only_be_used_within_a_function_body: { code: 1108, category: 1 /* Error */, key: "A 'return' statement can only be used within a function body." },
        Expression_expected: { code: 1109, category: 1 /* Error */, key: "Expression expected." },
        Type_expected: { code: 1110, category: 1 /* Error */, key: "Type expected." },
        A_constructor_implementation_cannot_be_declared_in_an_ambient_context: { code: 1111, category: 1 /* Error */, key: "A constructor implementation cannot be declared in an ambient context." },
        A_class_member_cannot_be_declared_optional: { code: 1112, category: 1 /* Error */, key: "A class member cannot be declared optional." },
        A_default_clause_cannot_appear_more_than_once_in_a_switch_statement: { code: 1113, category: 1 /* Error */, key: "A 'default' clause cannot appear more than once in a 'switch' statement." },
        Duplicate_label_0: { code: 1114, category: 1 /* Error */, key: "Duplicate label '{0}'" },
        A_continue_statement_can_only_jump_to_a_label_of_an_enclosing_iteration_statement: { code: 1115, category: 1 /* Error */, key: "A 'continue' statement can only jump to a label of an enclosing iteration statement." },
        A_break_statement_can_only_jump_to_a_label_of_an_enclosing_statement: { code: 1116, category: 1 /* Error */, key: "A 'break' statement can only jump to a label of an enclosing statement." },
        An_object_literal_cannot_have_multiple_properties_with_the_same_name_in_strict_mode: { code: 1117, category: 1 /* Error */, key: "An object literal cannot have multiple properties with the same name in strict mode." },
        An_object_literal_cannot_have_multiple_get_Slashset_accessors_with_the_same_name: { code: 1118, category: 1 /* Error */, key: "An object literal cannot have multiple get/set accessors with the same name." },
        An_object_literal_cannot_have_property_and_accessor_with_the_same_name: { code: 1119, category: 1 /* Error */, key: "An object literal cannot have property and accessor with the same name." },
        An_export_assignment_cannot_have_modifiers: { code: 1120, category: 1 /* Error */, key: "An export assignment cannot have modifiers." },
        Octal_literals_are_not_allowed_in_strict_mode: { code: 1121, category: 1 /* Error */, key: "Octal literals are not allowed in strict mode." },
        A_tuple_type_element_list_cannot_be_empty: { code: 1122, category: 1 /* Error */, key: "A tuple type element list cannot be empty." },
        Variable_declaration_list_cannot_be_empty: { code: 1123, category: 1 /* Error */, key: "Variable declaration list cannot be empty." },
        Digit_expected: { code: 1124, category: 1 /* Error */, key: "Digit expected." },
        Hexadecimal_digit_expected: { code: 1125, category: 1 /* Error */, key: "Hexadecimal digit expected." },
        Unexpected_end_of_text: { code: 1126, category: 1 /* Error */, key: "Unexpected end of text." },
        Invalid_character: { code: 1127, category: 1 /* Error */, key: "Invalid character." },
        Declaration_or_statement_expected: { code: 1128, category: 1 /* Error */, key: "Declaration or statement expected." },
        Statement_expected: { code: 1129, category: 1 /* Error */, key: "Statement expected." },
        case_or_default_expected: { code: 1130, category: 1 /* Error */, key: "'case' or 'default' expected." },
        Property_or_signature_expected: { code: 1131, category: 1 /* Error */, key: "Property or signature expected." },
        Enum_member_expected: { code: 1132, category: 1 /* Error */, key: "Enum member expected." },
        Type_reference_expected: { code: 1133, category: 1 /* Error */, key: "Type reference expected." },
        Variable_declaration_expected: { code: 1134, category: 1 /* Error */, key: "Variable declaration expected." },
        Argument_expression_expected: { code: 1135, category: 1 /* Error */, key: "Argument expression expected." },
        Property_assignment_expected: { code: 1136, category: 1 /* Error */, key: "Property assignment expected." },
        Expression_or_comma_expected: { code: 1137, category: 1 /* Error */, key: "Expression or comma expected." },
        Parameter_declaration_expected: { code: 1138, category: 1 /* Error */, key: "Parameter declaration expected." },
        Type_parameter_declaration_expected: { code: 1139, category: 1 /* Error */, key: "Type parameter declaration expected." },
        Type_argument_expected: { code: 1140, category: 1 /* Error */, key: "Type argument expected." },
        String_literal_expected: { code: 1141, category: 1 /* Error */, key: "String literal expected." },
        Line_break_not_permitted_here: { code: 1142, category: 1 /* Error */, key: "Line break not permitted here." },
        or_expected: { code: 1144, category: 1 /* Error */, key: "'{' or ';' expected." },
        Modifiers_not_permitted_on_index_signature_members: { code: 1145, category: 1 /* Error */, key: "Modifiers not permitted on index signature members." },
        Declaration_expected: { code: 1146, category: 1 /* Error */, key: "Declaration expected." },
        Import_declarations_in_an_internal_module_cannot_reference_an_external_module: { code: 1147, category: 1 /* Error */, key: "Import declarations in an internal module cannot reference an external module." },
        Cannot_compile_external_modules_unless_the_module_flag_is_provided: { code: 1148, category: 1 /* Error */, key: "Cannot compile external modules unless the '--module' flag is provided." },
        Filename_0_differs_from_already_included_filename_1_only_in_casing: { code: 1149, category: 1 /* Error */, key: "Filename '{0}' differs from already included filename '{1}' only in casing" },
        new_T_cannot_be_used_to_create_an_array_Use_new_Array_T_instead: { code: 1150, category: 1 /* Error */, key: "'new T[]' cannot be used to create an array. Use 'new Array<T>()' instead." },
        var_let_or_const_expected: { code: 1152, category: 1 /* Error */, key: "'var', 'let' or 'const' expected." },
        let_declarations_are_only_available_when_targeting_ECMAScript_6_and_higher: { code: 1153, category: 1 /* Error */, key: "'let' declarations are only available when targeting ECMAScript 6 and higher." },
        const_declarations_are_only_available_when_targeting_ECMAScript_6_and_higher: { code: 1154, category: 1 /* Error */, key: "'const' declarations are only available when targeting ECMAScript 6 and higher." },
        const_declarations_must_be_initialized: { code: 1155, category: 1 /* Error */, key: "'const' declarations must be initialized" },
        const_declarations_can_only_be_declared_inside_a_block: { code: 1156, category: 1 /* Error */, key: "'const' declarations can only be declared inside a block." },
        let_declarations_can_only_be_declared_inside_a_block: { code: 1157, category: 1 /* Error */, key: "'let' declarations can only be declared inside a block." },
        Tagged_templates_are_only_available_when_targeting_ECMAScript_6_and_higher: { code: 1159, category: 1 /* Error */, key: "Tagged templates are only available when targeting ECMAScript 6 and higher." },
        Unterminated_template_literal: { code: 1160, category: 1 /* Error */, key: "Unterminated template literal." },
        Unterminated_regular_expression_literal: { code: 1161, category: 1 /* Error */, key: "Unterminated regular expression literal." },
        An_object_member_cannot_be_declared_optional: { code: 1162, category: 1 /* Error */, key: "An object member cannot be declared optional." },
        yield_expression_must_be_contained_within_a_generator_declaration: { code: 1163, category: 1 /* Error */, key: "'yield' expression must be contained_within a generator declaration." },
        Computed_property_names_are_not_allowed_in_enums: { code: 1164, category: 1 /* Error */, key: "Computed property names are not allowed in enums." },
        Computed_property_names_are_not_allowed_in_an_ambient_context: { code: 1165, category: 1 /* Error */, key: "Computed property names are not allowed in an ambient context." },
        Computed_property_names_are_not_allowed_in_class_property_declarations: { code: 1166, category: 1 /* Error */, key: "Computed property names are not allowed in class property declarations." },
        Computed_property_names_are_only_available_when_targeting_ECMAScript_6_and_higher: { code: 1167, category: 1 /* Error */, key: "Computed property names are only available when targeting ECMAScript 6 and higher." },
        Computed_property_names_are_not_allowed_in_method_overloads: { code: 1168, category: 1 /* Error */, key: "Computed property names are not allowed in method overloads." },
        Computed_property_names_are_not_allowed_in_interfaces: { code: 1169, category: 1 /* Error */, key: "Computed property names are not allowed in interfaces." },
        Computed_property_names_are_not_allowed_in_type_literals: { code: 1170, category: 1 /* Error */, key: "Computed property names are not allowed in type literals." },
        A_comma_expression_is_not_allowed_in_a_computed_property_name: { code: 1171, category: 1 /* Error */, key: "A comma expression is not allowed in a computed property name." },
        extends_clause_already_seen: { code: 1172, category: 1 /* Error */, key: "'extends' clause already seen." },
        extends_clause_must_precede_implements_clause: { code: 1173, category: 1 /* Error */, key: "'extends' clause must precede 'implements' clause." },
        Classes_can_only_extend_a_single_class: { code: 1174, category: 1 /* Error */, key: "Classes can only extend a single class." },
        implements_clause_already_seen: { code: 1175, category: 1 /* Error */, key: "'implements' clause already seen." },
        Interface_declaration_cannot_have_implements_clause: { code: 1176, category: 1 /* Error */, key: "Interface declaration cannot have 'implements' clause." },
        Binary_digit_expected: { code: 1177, category: 1 /* Error */, key: "Binary digit expected." },
        Octal_digit_expected: { code: 1178, category: 1 /* Error */, key: "Octal digit expected." },
        Unexpected_token_expected: { code: 1179, category: 1 /* Error */, key: "Unexpected token. '{' expected." },
        Property_destructuring_pattern_expected: { code: 1180, category: 1 /* Error */, key: "Property destructuring pattern expected." },
        Array_element_destructuring_pattern_expected: { code: 1181, category: 1 /* Error */, key: "Array element destructuring pattern expected." },
        A_destructuring_declaration_must_have_an_initializer: { code: 1182, category: 1 /* Error */, key: "A destructuring declaration must have an initializer." },
        Destructuring_declarations_are_not_allowed_in_ambient_contexts: { code: 1183, category: 1 /* Error */, key: "Destructuring declarations are not allowed in ambient contexts." },
        Merge_conflict_marker_encountered: { code: 1184, category: 1 /* Error */, key: "Merge conflict marker encountered." },
        Duplicate_identifier_0: { code: 2300, category: 1 /* Error */, key: "Duplicate identifier '{0}'." },
        Initializer_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor: { code: 2301, category: 1 /* Error */, key: "Initializer of instance member variable '{0}' cannot reference identifier '{1}' declared in the constructor." },
        Static_members_cannot_reference_class_type_parameters: { code: 2302, category: 1 /* Error */, key: "Static members cannot reference class type parameters." },
        Circular_definition_of_import_alias_0: { code: 2303, category: 1 /* Error */, key: "Circular definition of import alias '{0}'." },
        Cannot_find_name_0: { code: 2304, category: 1 /* Error */, key: "Cannot find name '{0}'." },
        Module_0_has_no_exported_member_1: { code: 2305, category: 1 /* Error */, key: "Module '{0}' has no exported member '{1}'." },
        File_0_is_not_an_external_module: { code: 2306, category: 1 /* Error */, key: "File '{0}' is not an external module." },
        Cannot_find_external_module_0: { code: 2307, category: 1 /* Error */, key: "Cannot find external module '{0}'." },
        A_module_cannot_have_more_than_one_export_assignment: { code: 2308, category: 1 /* Error */, key: "A module cannot have more than one export assignment." },
        An_export_assignment_cannot_be_used_in_a_module_with_other_exported_elements: { code: 2309, category: 1 /* Error */, key: "An export assignment cannot be used in a module with other exported elements." },
        Type_0_recursively_references_itself_as_a_base_type: { code: 2310, category: 1 /* Error */, key: "Type '{0}' recursively references itself as a base type." },
        A_class_may_only_extend_another_class: { code: 2311, category: 1 /* Error */, key: "A class may only extend another class." },
        An_interface_may_only_extend_a_class_or_another_interface: { code: 2312, category: 1 /* Error */, key: "An interface may only extend a class or another interface." },
        Constraint_of_a_type_parameter_cannot_reference_any_type_parameter_from_the_same_type_parameter_list: { code: 2313, category: 1 /* Error */, key: "Constraint of a type parameter cannot reference any type parameter from the same type parameter list." },
        Generic_type_0_requires_1_type_argument_s: { code: 2314, category: 1 /* Error */, key: "Generic type '{0}' requires {1} type argument(s)." },
        Type_0_is_not_generic: { code: 2315, category: 1 /* Error */, key: "Type '{0}' is not generic." },
        Global_type_0_must_be_a_class_or_interface_type: { code: 2316, category: 1 /* Error */, key: "Global type '{0}' must be a class or interface type." },
        Global_type_0_must_have_1_type_parameter_s: { code: 2317, category: 1 /* Error */, key: "Global type '{0}' must have {1} type parameter(s)." },
        Cannot_find_global_type_0: { code: 2318, category: 1 /* Error */, key: "Cannot find global type '{0}'." },
        Named_properties_0_of_types_1_and_2_are_not_identical: { code: 2319, category: 1 /* Error */, key: "Named properties '{0}' of types '{1}' and '{2}' are not identical." },
        Interface_0_cannot_simultaneously_extend_types_1_and_2: { code: 2320, category: 1 /* Error */, key: "Interface '{0}' cannot simultaneously extend types '{1}' and '{2}'." },
        Excessive_stack_depth_comparing_types_0_and_1: { code: 2321, category: 1 /* Error */, key: "Excessive stack depth comparing types '{0}' and '{1}'." },
        Type_0_is_not_assignable_to_type_1: { code: 2322, category: 1 /* Error */, key: "Type '{0}' is not assignable to type '{1}'." },
        Property_0_is_missing_in_type_1: { code: 2324, category: 1 /* Error */, key: "Property '{0}' is missing in type '{1}'." },
        Property_0_is_private_in_type_1_but_not_in_type_2: { code: 2325, category: 1 /* Error */, key: "Property '{0}' is private in type '{1}' but not in type '{2}'." },
        Types_of_property_0_are_incompatible: { code: 2326, category: 1 /* Error */, key: "Types of property '{0}' are incompatible." },
        Property_0_is_optional_in_type_1_but_required_in_type_2: { code: 2327, category: 1 /* Error */, key: "Property '{0}' is optional in type '{1}' but required in type '{2}'." },
        Types_of_parameters_0_and_1_are_incompatible: { code: 2328, category: 1 /* Error */, key: "Types of parameters '{0}' and '{1}' are incompatible." },
        Index_signature_is_missing_in_type_0: { code: 2329, category: 1 /* Error */, key: "Index signature is missing in type '{0}'." },
        Index_signatures_are_incompatible: { code: 2330, category: 1 /* Error */, key: "Index signatures are incompatible." },
        this_cannot_be_referenced_in_a_module_body: { code: 2331, category: 1 /* Error */, key: "'this' cannot be referenced in a module body." },
        this_cannot_be_referenced_in_current_location: { code: 2332, category: 1 /* Error */, key: "'this' cannot be referenced in current location." },
        this_cannot_be_referenced_in_constructor_arguments: { code: 2333, category: 1 /* Error */, key: "'this' cannot be referenced in constructor arguments." },
        this_cannot_be_referenced_in_a_static_property_initializer: { code: 2334, category: 1 /* Error */, key: "'this' cannot be referenced in a static property initializer." },
        super_can_only_be_referenced_in_a_derived_class: { code: 2335, category: 1 /* Error */, key: "'super' can only be referenced in a derived class." },
        super_cannot_be_referenced_in_constructor_arguments: { code: 2336, category: 1 /* Error */, key: "'super' cannot be referenced in constructor arguments." },
        Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors: { code: 2337, category: 1 /* Error */, key: "Super calls are not permitted outside constructors or in nested functions inside constructors" },
        super_property_access_is_permitted_only_in_a_constructor_member_function_or_member_accessor_of_a_derived_class: { code: 2338, category: 1 /* Error */, key: "'super' property access is permitted only in a constructor, member function, or member accessor of a derived class" },
        Property_0_does_not_exist_on_type_1: { code: 2339, category: 1 /* Error */, key: "Property '{0}' does not exist on type '{1}'." },
        Only_public_and_protected_methods_of_the_base_class_are_accessible_via_the_super_keyword: { code: 2340, category: 1 /* Error */, key: "Only public and protected methods of the base class are accessible via the 'super' keyword" },
        Property_0_is_private_and_only_accessible_within_class_1: { code: 2341, category: 1 /* Error */, key: "Property '{0}' is private and only accessible within class '{1}'." },
        An_index_expression_argument_must_be_of_type_string_number_or_any: { code: 2342, category: 1 /* Error */, key: "An index expression argument must be of type 'string', 'number', or 'any'." },
        Type_0_does_not_satisfy_the_constraint_1: { code: 2344, category: 1 /* Error */, key: "Type '{0}' does not satisfy the constraint '{1}'." },
        Argument_of_type_0_is_not_assignable_to_parameter_of_type_1: { code: 2345, category: 1 /* Error */, key: "Argument of type '{0}' is not assignable to parameter of type '{1}'." },
        Supplied_parameters_do_not_match_any_signature_of_call_target: { code: 2346, category: 1 /* Error */, key: "Supplied parameters do not match any signature of call target." },
        Untyped_function_calls_may_not_accept_type_arguments: { code: 2347, category: 1 /* Error */, key: "Untyped function calls may not accept type arguments." },
        Value_of_type_0_is_not_callable_Did_you_mean_to_include_new: { code: 2348, category: 1 /* Error */, key: "Value of type '{0}' is not callable. Did you mean to include 'new'?" },
        Cannot_invoke_an_expression_whose_type_lacks_a_call_signature: { code: 2349, category: 1 /* Error */, key: "Cannot invoke an expression whose type lacks a call signature." },
        Only_a_void_function_can_be_called_with_the_new_keyword: { code: 2350, category: 1 /* Error */, key: "Only a void function can be called with the 'new' keyword." },
        Cannot_use_new_with_an_expression_whose_type_lacks_a_call_or_construct_signature: { code: 2351, category: 1 /* Error */, key: "Cannot use 'new' with an expression whose type lacks a call or construct signature." },
        Neither_type_0_nor_type_1_is_assignable_to_the_other: { code: 2352, category: 1 /* Error */, key: "Neither type '{0}' nor type '{1}' is assignable to the other." },
        No_best_common_type_exists_among_return_expressions: { code: 2354, category: 1 /* Error */, key: "No best common type exists among return expressions." },
        A_function_whose_declared_type_is_neither_void_nor_any_must_return_a_value_or_consist_of_a_single_throw_statement: { code: 2355, category: 1 /* Error */, key: "A function whose declared type is neither 'void' nor 'any' must return a value or consist of a single 'throw' statement." },
        An_arithmetic_operand_must_be_of_type_any_number_or_an_enum_type: { code: 2356, category: 1 /* Error */, key: "An arithmetic operand must be of type 'any', 'number' or an enum type." },
        The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_property_or_indexer: { code: 2357, category: 1 /* Error */, key: "The operand of an increment or decrement operator must be a variable, property or indexer." },
        The_left_hand_side_of_an_instanceof_expression_must_be_of_type_any_an_object_type_or_a_type_parameter: { code: 2358, category: 1 /* Error */, key: "The left-hand side of an 'instanceof' expression must be of type 'any', an object type or a type parameter." },
        The_right_hand_side_of_an_instanceof_expression_must_be_of_type_any_or_of_a_type_assignable_to_the_Function_interface_type: { code: 2359, category: 1 /* Error */, key: "The right-hand side of an 'instanceof' expression must be of type 'any' or of a type assignable to the 'Function' interface type." },
        The_left_hand_side_of_an_in_expression_must_be_of_types_any_string_or_number: { code: 2360, category: 1 /* Error */, key: "The left-hand side of an 'in' expression must be of types 'any', 'string' or 'number'." },
        The_right_hand_side_of_an_in_expression_must_be_of_type_any_an_object_type_or_a_type_parameter: { code: 2361, category: 1 /* Error */, key: "The right-hand side of an 'in' expression must be of type 'any', an object type or a type parameter" },
        The_left_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type: { code: 2362, category: 1 /* Error */, key: "The left-hand side of an arithmetic operation must be of type 'any', 'number' or an enum type." },
        The_right_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type: { code: 2363, category: 1 /* Error */, key: "The right-hand side of an arithmetic operation must be of type 'any', 'number' or an enum type." },
        Invalid_left_hand_side_of_assignment_expression: { code: 2364, category: 1 /* Error */, key: "Invalid left-hand side of assignment expression." },
        Operator_0_cannot_be_applied_to_types_1_and_2: { code: 2365, category: 1 /* Error */, key: "Operator '{0}' cannot be applied to types '{1}' and '{2}'." },
        Type_parameter_name_cannot_be_0: { code: 2368, category: 1 /* Error */, key: "Type parameter name cannot be '{0}'" },
        A_parameter_property_is_only_allowed_in_a_constructor_implementation: { code: 2369, category: 1 /* Error */, key: "A parameter property is only allowed in a constructor implementation." },
        A_rest_parameter_must_be_of_an_array_type: { code: 2370, category: 1 /* Error */, key: "A rest parameter must be of an array type." },
        A_parameter_initializer_is_only_allowed_in_a_function_or_constructor_implementation: { code: 2371, category: 1 /* Error */, key: "A parameter initializer is only allowed in a function or constructor implementation." },
        Parameter_0_cannot_be_referenced_in_its_initializer: { code: 2372, category: 1 /* Error */, key: "Parameter '{0}' cannot be referenced in its initializer." },
        Initializer_of_parameter_0_cannot_reference_identifier_1_declared_after_it: { code: 2373, category: 1 /* Error */, key: "Initializer of parameter '{0}' cannot reference identifier '{1}' declared after it." },
        Duplicate_string_index_signature: { code: 2374, category: 1 /* Error */, key: "Duplicate string index signature." },
        Duplicate_number_index_signature: { code: 2375, category: 1 /* Error */, key: "Duplicate number index signature." },
        A_super_call_must_be_the_first_statement_in_the_constructor_when_a_class_contains_initialized_properties_or_has_parameter_properties: { code: 2376, category: 1 /* Error */, key: "A 'super' call must be the first statement in the constructor when a class contains initialized properties or has parameter properties." },
        Constructors_for_derived_classes_must_contain_a_super_call: { code: 2377, category: 1 /* Error */, key: "Constructors for derived classes must contain a 'super' call." },
        A_get_accessor_must_return_a_value_or_consist_of_a_single_throw_statement: { code: 2378, category: 1 /* Error */, key: "A 'get' accessor must return a value or consist of a single 'throw' statement." },
        Getter_and_setter_accessors_do_not_agree_in_visibility: { code: 2379, category: 1 /* Error */, key: "Getter and setter accessors do not agree in visibility." },
        get_and_set_accessor_must_have_the_same_type: { code: 2380, category: 1 /* Error */, key: "'get' and 'set' accessor must have the same type." },
        A_signature_with_an_implementation_cannot_use_a_string_literal_type: { code: 2381, category: 1 /* Error */, key: "A signature with an implementation cannot use a string literal type." },
        Specialized_overload_signature_is_not_assignable_to_any_non_specialized_signature: { code: 2382, category: 1 /* Error */, key: "Specialized overload signature is not assignable to any non-specialized signature." },
        Overload_signatures_must_all_be_exported_or_not_exported: { code: 2383, category: 1 /* Error */, key: "Overload signatures must all be exported or not exported." },
        Overload_signatures_must_all_be_ambient_or_non_ambient: { code: 2384, category: 1 /* Error */, key: "Overload signatures must all be ambient or non-ambient." },
        Overload_signatures_must_all_be_public_private_or_protected: { code: 2385, category: 1 /* Error */, key: "Overload signatures must all be public, private or protected." },
        Overload_signatures_must_all_be_optional_or_required: { code: 2386, category: 1 /* Error */, key: "Overload signatures must all be optional or required." },
        Function_overload_must_be_static: { code: 2387, category: 1 /* Error */, key: "Function overload must be static." },
        Function_overload_must_not_be_static: { code: 2388, category: 1 /* Error */, key: "Function overload must not be static." },
        Function_implementation_name_must_be_0: { code: 2389, category: 1 /* Error */, key: "Function implementation name must be '{0}'." },
        Constructor_implementation_is_missing: { code: 2390, category: 1 /* Error */, key: "Constructor implementation is missing." },
        Function_implementation_is_missing_or_not_immediately_following_the_declaration: { code: 2391, category: 1 /* Error */, key: "Function implementation is missing or not immediately following the declaration." },
        Multiple_constructor_implementations_are_not_allowed: { code: 2392, category: 1 /* Error */, key: "Multiple constructor implementations are not allowed." },
        Duplicate_function_implementation: { code: 2393, category: 1 /* Error */, key: "Duplicate function implementation." },
        Overload_signature_is_not_compatible_with_function_implementation: { code: 2394, category: 1 /* Error */, key: "Overload signature is not compatible with function implementation." },
        Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local: { code: 2395, category: 1 /* Error */, key: "Individual declarations in merged declaration {0} must be all exported or all local." },
        Duplicate_identifier_arguments_Compiler_uses_arguments_to_initialize_rest_parameters: { code: 2396, category: 1 /* Error */, key: "Duplicate identifier 'arguments'. Compiler uses 'arguments' to initialize rest parameters." },
        Duplicate_identifier_this_Compiler_uses_variable_declaration_this_to_capture_this_reference: { code: 2399, category: 1 /* Error */, key: "Duplicate identifier '_this'. Compiler uses variable declaration '_this' to capture 'this' reference." },
        Expression_resolves_to_variable_declaration_this_that_compiler_uses_to_capture_this_reference: { code: 2400, category: 1 /* Error */, key: "Expression resolves to variable declaration '_this' that compiler uses to capture 'this' reference." },
        Duplicate_identifier_super_Compiler_uses_super_to_capture_base_class_reference: { code: 2401, category: 1 /* Error */, key: "Duplicate identifier '_super'. Compiler uses '_super' to capture base class reference." },
        Expression_resolves_to_super_that_compiler_uses_to_capture_base_class_reference: { code: 2402, category: 1 /* Error */, key: "Expression resolves to '_super' that compiler uses to capture base class reference." },
        Subsequent_variable_declarations_must_have_the_same_type_Variable_0_must_be_of_type_1_but_here_has_type_2: { code: 2403, category: 1 /* Error */, key: "Subsequent variable declarations must have the same type.  Variable '{0}' must be of type '{1}', but here has type '{2}'." },
        The_left_hand_side_of_a_for_in_statement_cannot_use_a_type_annotation: { code: 2404, category: 1 /* Error */, key: "The left-hand side of a 'for...in' statement cannot use a type annotation." },
        The_left_hand_side_of_a_for_in_statement_must_be_of_type_string_or_any: { code: 2405, category: 1 /* Error */, key: "The left-hand side of a 'for...in' statement must be of type 'string' or 'any'." },
        Invalid_left_hand_side_in_for_in_statement: { code: 2406, category: 1 /* Error */, key: "Invalid left-hand side in 'for...in' statement." },
        The_right_hand_side_of_a_for_in_statement_must_be_of_type_any_an_object_type_or_a_type_parameter: { code: 2407, category: 1 /* Error */, key: "The right-hand side of a 'for...in' statement must be of type 'any', an object type or a type parameter." },
        Setters_cannot_return_a_value: { code: 2408, category: 1 /* Error */, key: "Setters cannot return a value." },
        Return_type_of_constructor_signature_must_be_assignable_to_the_instance_type_of_the_class: { code: 2409, category: 1 /* Error */, key: "Return type of constructor signature must be assignable to the instance type of the class" },
        All_symbols_within_a_with_block_will_be_resolved_to_any: { code: 2410, category: 1 /* Error */, key: "All symbols within a 'with' block will be resolved to 'any'." },
        Property_0_of_type_1_is_not_assignable_to_string_index_type_2: { code: 2411, category: 1 /* Error */, key: "Property '{0}' of type '{1}' is not assignable to string index type '{2}'." },
        Property_0_of_type_1_is_not_assignable_to_numeric_index_type_2: { code: 2412, category: 1 /* Error */, key: "Property '{0}' of type '{1}' is not assignable to numeric index type '{2}'." },
        Numeric_index_type_0_is_not_assignable_to_string_index_type_1: { code: 2413, category: 1 /* Error */, key: "Numeric index type '{0}' is not assignable to string index type '{1}'." },
        Class_name_cannot_be_0: { code: 2414, category: 1 /* Error */, key: "Class name cannot be '{0}'" },
        Class_0_incorrectly_extends_base_class_1: { code: 2415, category: 1 /* Error */, key: "Class '{0}' incorrectly extends base class '{1}'." },
        Class_static_side_0_incorrectly_extends_base_class_static_side_1: { code: 2417, category: 1 /* Error */, key: "Class static side '{0}' incorrectly extends base class static side '{1}'." },
        Type_name_0_in_extends_clause_does_not_reference_constructor_function_for_0: { code: 2419, category: 1 /* Error */, key: "Type name '{0}' in extends clause does not reference constructor function for '{0}'." },
        Class_0_incorrectly_implements_interface_1: { code: 2420, category: 1 /* Error */, key: "Class '{0}' incorrectly implements interface '{1}'." },
        A_class_may_only_implement_another_class_or_interface: { code: 2422, category: 1 /* Error */, key: "A class may only implement another class or interface." },
        Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_accessor: { code: 2423, category: 1 /* Error */, key: "Class '{0}' defines instance member function '{1}', but extended class '{2}' defines it as instance member accessor." },
        Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_property: { code: 2424, category: 1 /* Error */, key: "Class '{0}' defines instance member function '{1}', but extended class '{2}' defines it as instance member property." },
        Class_0_defines_instance_member_property_1_but_extended_class_2_defines_it_as_instance_member_function: { code: 2425, category: 1 /* Error */, key: "Class '{0}' defines instance member property '{1}', but extended class '{2}' defines it as instance member function." },
        Class_0_defines_instance_member_accessor_1_but_extended_class_2_defines_it_as_instance_member_function: { code: 2426, category: 1 /* Error */, key: "Class '{0}' defines instance member accessor '{1}', but extended class '{2}' defines it as instance member function." },
        Interface_name_cannot_be_0: { code: 2427, category: 1 /* Error */, key: "Interface name cannot be '{0}'" },
        All_declarations_of_an_interface_must_have_identical_type_parameters: { code: 2428, category: 1 /* Error */, key: "All declarations of an interface must have identical type parameters." },
        Interface_0_incorrectly_extends_interface_1: { code: 2430, category: 1 /* Error */, key: "Interface '{0}' incorrectly extends interface '{1}'." },
        Enum_name_cannot_be_0: { code: 2431, category: 1 /* Error */, key: "Enum name cannot be '{0}'" },
        In_an_enum_with_multiple_declarations_only_one_declaration_can_omit_an_initializer_for_its_first_enum_element: { code: 2432, category: 1 /* Error */, key: "In an enum with multiple declarations, only one declaration can omit an initializer for its first enum element." },
        A_module_declaration_cannot_be_in_a_different_file_from_a_class_or_function_with_which_it_is_merged: { code: 2433, category: 1 /* Error */, key: "A module declaration cannot be in a different file from a class or function with which it is merged" },
        A_module_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged: { code: 2434, category: 1 /* Error */, key: "A module declaration cannot be located prior to a class or function with which it is merged" },
        Ambient_external_modules_cannot_be_nested_in_other_modules: { code: 2435, category: 1 /* Error */, key: "Ambient external modules cannot be nested in other modules." },
        Ambient_external_module_declaration_cannot_specify_relative_module_name: { code: 2436, category: 1 /* Error */, key: "Ambient external module declaration cannot specify relative module name." },
        Module_0_is_hidden_by_a_local_declaration_with_the_same_name: { code: 2437, category: 1 /* Error */, key: "Module '{0}' is hidden by a local declaration with the same name" },
        Import_name_cannot_be_0: { code: 2438, category: 1 /* Error */, key: "Import name cannot be '{0}'" },
        Import_declaration_in_an_ambient_external_module_declaration_cannot_reference_external_module_through_relative_external_module_name: { code: 2439, category: 1 /* Error */, key: "Import declaration in an ambient external module declaration cannot reference external module through relative external module name." },
        Import_declaration_conflicts_with_local_declaration_of_0: { code: 2440, category: 1 /* Error */, key: "Import declaration conflicts with local declaration of '{0}'" },
        Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_an_external_module: { code: 2441, category: 1 /* Error */, key: "Duplicate identifier '{0}'. Compiler reserves name '{1}' in top level scope of an external module." },
        Types_have_separate_declarations_of_a_private_property_0: { code: 2442, category: 1 /* Error */, key: "Types have separate declarations of a private property '{0}'." },
        Property_0_is_protected_but_type_1_is_not_a_class_derived_from_2: { code: 2443, category: 1 /* Error */, key: "Property '{0}' is protected but type '{1}' is not a class derived from '{2}'." },
        Property_0_is_protected_in_type_1_but_public_in_type_2: { code: 2444, category: 1 /* Error */, key: "Property '{0}' is protected in type '{1}' but public in type '{2}'." },
        Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses: { code: 2445, category: 1 /* Error */, key: "Property '{0}' is protected and only accessible within class '{1}' and its subclasses." },
        Property_0_is_protected_and_only_accessible_through_an_instance_of_class_1: { code: 2446, category: 1 /* Error */, key: "Property '{0}' is protected and only accessible through an instance of class '{1}'." },
        The_0_operator_is_not_allowed_for_boolean_types_Consider_using_1_instead: { code: 2447, category: 1 /* Error */, key: "The '{0}' operator is not allowed for boolean types. Consider using '{1}' instead." },
        Block_scoped_variable_0_used_before_its_declaration: { code: 2448, category: 1 /* Error */, key: "Block-scoped variable '{0}' used before its declaration.", isEarly: true },
        The_operand_of_an_increment_or_decrement_operator_cannot_be_a_constant: { code: 2449, category: 1 /* Error */, key: "The operand of an increment or decrement operator cannot be a constant.", isEarly: true },
        Left_hand_side_of_assignment_expression_cannot_be_a_constant: { code: 2450, category: 1 /* Error */, key: "Left-hand side of assignment expression cannot be a constant.", isEarly: true },
        Cannot_redeclare_block_scoped_variable_0: { code: 2451, category: 1 /* Error */, key: "Cannot redeclare block-scoped variable '{0}'.", isEarly: true },
        An_enum_member_cannot_have_a_numeric_name: { code: 2452, category: 1 /* Error */, key: "An enum member cannot have a numeric name." },
        The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly: { code: 2453, category: 1 /* Error */, key: "The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly." },
        Type_argument_candidate_1_is_not_a_valid_type_argument_because_it_is_not_a_supertype_of_candidate_0: { code: 2455, category: 1 /* Error */, key: "Type argument candidate '{1}' is not a valid type argument because it is not a supertype of candidate '{0}'." },
        Type_alias_0_circularly_references_itself: { code: 2456, category: 1 /* Error */, key: "Type alias '{0}' circularly references itself." },
        Type_alias_name_cannot_be_0: { code: 2457, category: 1 /* Error */, key: "Type alias name cannot be '{0}'" },
        An_AMD_module_cannot_have_multiple_name_assignments: { code: 2458, category: 1 /* Error */, key: "An AMD module cannot have multiple name assignments." },
        Type_0_has_no_property_1_and_no_string_index_signature: { code: 2459, category: 1 /* Error */, key: "Type '{0}' has no property '{1}' and no string index signature." },
        Type_0_has_no_property_1: { code: 2460, category: 1 /* Error */, key: "Type '{0}' has no property '{1}'." },
        Type_0_is_not_an_array_type: { code: 2461, category: 1 /* Error */, key: "Type '{0}' is not an array type." },
        Import_declaration_0_is_using_private_name_1: { code: 4000, category: 1 /* Error */, key: "Import declaration '{0}' is using private name '{1}'." },
        Type_parameter_0_of_exported_class_has_or_is_using_private_name_1: { code: 4002, category: 1 /* Error */, key: "Type parameter '{0}' of exported class has or is using private name '{1}'." },
        Type_parameter_0_of_exported_interface_has_or_is_using_private_name_1: { code: 4004, category: 1 /* Error */, key: "Type parameter '{0}' of exported interface has or is using private name '{1}'." },
        Type_parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1: { code: 4006, category: 1 /* Error */, key: "Type parameter '{0}' of constructor signature from exported interface has or is using private name '{1}'." },
        Type_parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1: { code: 4008, category: 1 /* Error */, key: "Type parameter '{0}' of call signature from exported interface has or is using private name '{1}'." },
        Type_parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1: { code: 4010, category: 1 /* Error */, key: "Type parameter '{0}' of public static method from exported class has or is using private name '{1}'." },
        Type_parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1: { code: 4012, category: 1 /* Error */, key: "Type parameter '{0}' of public method from exported class has or is using private name '{1}'." },
        Type_parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1: { code: 4014, category: 1 /* Error */, key: "Type parameter '{0}' of method from exported interface has or is using private name '{1}'." },
        Type_parameter_0_of_exported_function_has_or_is_using_private_name_1: { code: 4016, category: 1 /* Error */, key: "Type parameter '{0}' of exported function has or is using private name '{1}'." },
        Implements_clause_of_exported_class_0_has_or_is_using_private_name_1: { code: 4019, category: 1 /* Error */, key: "Implements clause of exported class '{0}' has or is using private name '{1}'." },
        Extends_clause_of_exported_class_0_has_or_is_using_private_name_1: { code: 4020, category: 1 /* Error */, key: "Extends clause of exported class '{0}' has or is using private name '{1}'." },
        Extends_clause_of_exported_interface_0_has_or_is_using_private_name_1: { code: 4022, category: 1 /* Error */, key: "Extends clause of exported interface '{0}' has or is using private name '{1}'." },
        Exported_variable_0_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: { code: 4023, category: 1 /* Error */, key: "Exported variable '{0}' has or is using name '{1}' from external module {2} but cannot be named." },
        Exported_variable_0_has_or_is_using_name_1_from_private_module_2: { code: 4024, category: 1 /* Error */, key: "Exported variable '{0}' has or is using name '{1}' from private module '{2}'." },
        Exported_variable_0_has_or_is_using_private_name_1: { code: 4025, category: 1 /* Error */, key: "Exported variable '{0}' has or is using private name '{1}'." },
        Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: { code: 4026, category: 1 /* Error */, key: "Public static property '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named." },
        Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2: { code: 4027, category: 1 /* Error */, key: "Public static property '{0}' of exported class has or is using name '{1}' from private module '{2}'." },
        Public_static_property_0_of_exported_class_has_or_is_using_private_name_1: { code: 4028, category: 1 /* Error */, key: "Public static property '{0}' of exported class has or is using private name '{1}'." },
        Public_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: { code: 4029, category: 1 /* Error */, key: "Public property '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named." },
        Public_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2: { code: 4030, category: 1 /* Error */, key: "Public property '{0}' of exported class has or is using name '{1}' from private module '{2}'." },
        Public_property_0_of_exported_class_has_or_is_using_private_name_1: { code: 4031, category: 1 /* Error */, key: "Public property '{0}' of exported class has or is using private name '{1}'." },
        Property_0_of_exported_interface_has_or_is_using_name_1_from_private_module_2: { code: 4032, category: 1 /* Error */, key: "Property '{0}' of exported interface has or is using name '{1}' from private module '{2}'." },
        Property_0_of_exported_interface_has_or_is_using_private_name_1: { code: 4033, category: 1 /* Error */, key: "Property '{0}' of exported interface has or is using private name '{1}'." },
        Parameter_0_of_public_static_property_setter_from_exported_class_has_or_is_using_name_1_from_private_module_2: { code: 4034, category: 1 /* Error */, key: "Parameter '{0}' of public static property setter from exported class has or is using name '{1}' from private module '{2}'." },
        Parameter_0_of_public_static_property_setter_from_exported_class_has_or_is_using_private_name_1: { code: 4035, category: 1 /* Error */, key: "Parameter '{0}' of public static property setter from exported class has or is using private name '{1}'." },
        Parameter_0_of_public_property_setter_from_exported_class_has_or_is_using_name_1_from_private_module_2: { code: 4036, category: 1 /* Error */, key: "Parameter '{0}' of public property setter from exported class has or is using name '{1}' from private module '{2}'." },
        Parameter_0_of_public_property_setter_from_exported_class_has_or_is_using_private_name_1: { code: 4037, category: 1 /* Error */, key: "Parameter '{0}' of public property setter from exported class has or is using private name '{1}'." },
        Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named: { code: 4038, category: 1 /* Error */, key: "Return type of public static property getter from exported class has or is using name '{0}' from external module {1} but cannot be named." },
        Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_name_0_from_private_module_1: { code: 4039, category: 1 /* Error */, key: "Return type of public static property getter from exported class has or is using name '{0}' from private module '{1}'." },
        Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_private_name_0: { code: 4040, category: 1 /* Error */, key: "Return type of public static property getter from exported class has or is using private name '{0}'." },
        Return_type_of_public_property_getter_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named: { code: 4041, category: 1 /* Error */, key: "Return type of public property getter from exported class has or is using name '{0}' from external module {1} but cannot be named." },
        Return_type_of_public_property_getter_from_exported_class_has_or_is_using_name_0_from_private_module_1: { code: 4042, category: 1 /* Error */, key: "Return type of public property getter from exported class has or is using name '{0}' from private module '{1}'." },
        Return_type_of_public_property_getter_from_exported_class_has_or_is_using_private_name_0: { code: 4043, category: 1 /* Error */, key: "Return type of public property getter from exported class has or is using private name '{0}'." },
        Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1: { code: 4044, category: 1 /* Error */, key: "Return type of constructor signature from exported interface has or is using name '{0}' from private module '{1}'." },
        Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_0: { code: 4045, category: 1 /* Error */, key: "Return type of constructor signature from exported interface has or is using private name '{0}'." },
        Return_type_of_call_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1: { code: 4046, category: 1 /* Error */, key: "Return type of call signature from exported interface has or is using name '{0}' from private module '{1}'." },
        Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_name_0: { code: 4047, category: 1 /* Error */, key: "Return type of call signature from exported interface has or is using private name '{0}'." },
        Return_type_of_index_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1: { code: 4048, category: 1 /* Error */, key: "Return type of index signature from exported interface has or is using name '{0}' from private module '{1}'." },
        Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_name_0: { code: 4049, category: 1 /* Error */, key: "Return type of index signature from exported interface has or is using private name '{0}'." },
        Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named: { code: 4050, category: 1 /* Error */, key: "Return type of public static method from exported class has or is using name '{0}' from external module {1} but cannot be named." },
        Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_private_module_1: { code: 4051, category: 1 /* Error */, key: "Return type of public static method from exported class has or is using name '{0}' from private module '{1}'." },
        Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_name_0: { code: 4052, category: 1 /* Error */, key: "Return type of public static method from exported class has or is using private name '{0}'." },
        Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named: { code: 4053, category: 1 /* Error */, key: "Return type of public method from exported class has or is using name '{0}' from external module {1} but cannot be named." },
        Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_private_module_1: { code: 4054, category: 1 /* Error */, key: "Return type of public method from exported class has or is using name '{0}' from private module '{1}'." },
        Return_type_of_public_method_from_exported_class_has_or_is_using_private_name_0: { code: 4055, category: 1 /* Error */, key: "Return type of public method from exported class has or is using private name '{0}'." },
        Return_type_of_method_from_exported_interface_has_or_is_using_name_0_from_private_module_1: { code: 4056, category: 1 /* Error */, key: "Return type of method from exported interface has or is using name '{0}' from private module '{1}'." },
        Return_type_of_method_from_exported_interface_has_or_is_using_private_name_0: { code: 4057, category: 1 /* Error */, key: "Return type of method from exported interface has or is using private name '{0}'." },
        Return_type_of_exported_function_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named: { code: 4058, category: 1 /* Error */, key: "Return type of exported function has or is using name '{0}' from external module {1} but cannot be named." },
        Return_type_of_exported_function_has_or_is_using_name_0_from_private_module_1: { code: 4059, category: 1 /* Error */, key: "Return type of exported function has or is using name '{0}' from private module '{1}'." },
        Return_type_of_exported_function_has_or_is_using_private_name_0: { code: 4060, category: 1 /* Error */, key: "Return type of exported function has or is using private name '{0}'." },
        Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: { code: 4061, category: 1 /* Error */, key: "Parameter '{0}' of constructor from exported class has or is using name '{1}' from external module {2} but cannot be named." },
        Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_private_module_2: { code: 4062, category: 1 /* Error */, key: "Parameter '{0}' of constructor from exported class has or is using name '{1}' from private module '{2}'." },
        Parameter_0_of_constructor_from_exported_class_has_or_is_using_private_name_1: { code: 4063, category: 1 /* Error */, key: "Parameter '{0}' of constructor from exported class has or is using private name '{1}'." },
        Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2: { code: 4064, category: 1 /* Error */, key: "Parameter '{0}' of constructor signature from exported interface has or is using name '{1}' from private module '{2}'." },
        Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1: { code: 4065, category: 1 /* Error */, key: "Parameter '{0}' of constructor signature from exported interface has or is using private name '{1}'." },
        Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2: { code: 4066, category: 1 /* Error */, key: "Parameter '{0}' of call signature from exported interface has or is using name '{1}' from private module '{2}'." },
        Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1: { code: 4067, category: 1 /* Error */, key: "Parameter '{0}' of call signature from exported interface has or is using private name '{1}'." },
        Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: { code: 4068, category: 1 /* Error */, key: "Parameter '{0}' of public static method from exported class has or is using name '{1}' from external module {2} but cannot be named." },
        Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_private_module_2: { code: 4069, category: 1 /* Error */, key: "Parameter '{0}' of public static method from exported class has or is using name '{1}' from private module '{2}'." },
        Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1: { code: 4070, category: 1 /* Error */, key: "Parameter '{0}' of public static method from exported class has or is using private name '{1}'." },
        Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: { code: 4071, category: 1 /* Error */, key: "Parameter '{0}' of public method from exported class has or is using name '{1}' from external module {2} but cannot be named." },
        Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_private_module_2: { code: 4072, category: 1 /* Error */, key: "Parameter '{0}' of public method from exported class has or is using name '{1}' from private module '{2}'." },
        Parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1: { code: 4073, category: 1 /* Error */, key: "Parameter '{0}' of public method from exported class has or is using private name '{1}'." },
        Parameter_0_of_method_from_exported_interface_has_or_is_using_name_1_from_private_module_2: { code: 4074, category: 1 /* Error */, key: "Parameter '{0}' of method from exported interface has or is using name '{1}' from private module '{2}'." },
        Parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1: { code: 4075, category: 1 /* Error */, key: "Parameter '{0}' of method from exported interface has or is using private name '{1}'." },
        Parameter_0_of_exported_function_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: { code: 4076, category: 1 /* Error */, key: "Parameter '{0}' of exported function has or is using name '{1}' from external module {2} but cannot be named." },
        Parameter_0_of_exported_function_has_or_is_using_name_1_from_private_module_2: { code: 4077, category: 1 /* Error */, key: "Parameter '{0}' of exported function has or is using name '{1}' from private module '{2}'." },
        Parameter_0_of_exported_function_has_or_is_using_private_name_1: { code: 4078, category: 1 /* Error */, key: "Parameter '{0}' of exported function has or is using private name '{1}'." },
        Exported_type_alias_0_has_or_is_using_private_name_1: { code: 4081, category: 1 /* Error */, key: "Exported type alias '{0}' has or is using private name '{1}'." },
        Enum_declarations_must_all_be_const_or_non_const: { code: 4082, category: 1 /* Error */, key: "Enum declarations must all be const or non-const." },
        In_const_enum_declarations_member_initializer_must_be_constant_expression: { code: 4083, category: 1 /* Error */, key: "In 'const' enum declarations member initializer must be constant expression.", isEarly: true },
        const_enums_can_only_be_used_in_property_or_index_access_expressions_or_the_right_hand_side_of_an_import_declaration_or_export_assignment: { code: 4084, category: 1 /* Error */, key: "'const' enums can only be used in property or index access expressions or the right hand side of an import declaration or export assignment." },
        Index_expression_arguments_in_const_enums_must_be_of_type_string: { code: 4085, category: 1 /* Error */, key: "Index expression arguments in 'const' enums must be of type 'string'." },
        const_enum_member_initializer_was_evaluated_to_a_non_finite_value: { code: 4086, category: 1 /* Error */, key: "'const' enum member initializer was evaluated to a non-finite value." },
        const_enum_member_initializer_was_evaluated_to_disallowed_value_NaN: { code: 4087, category: 1 /* Error */, key: "'const' enum member initializer was evaluated to disallowed value 'NaN'." },
        The_current_host_does_not_support_the_0_option: { code: 5001, category: 1 /* Error */, key: "The current host does not support the '{0}' option." },
        Cannot_find_the_common_subdirectory_path_for_the_input_files: { code: 5009, category: 1 /* Error */, key: "Cannot find the common subdirectory path for the input files." },
        Cannot_read_file_0_Colon_1: { code: 5012, category: 1 /* Error */, key: "Cannot read file '{0}': {1}" },
        Unsupported_file_encoding: { code: 5013, category: 1 /* Error */, key: "Unsupported file encoding." },
        Unknown_compiler_option_0: { code: 5023, category: 1 /* Error */, key: "Unknown compiler option '{0}'." },
        Could_not_write_file_0_Colon_1: { code: 5033, category: 1 /* Error */, key: "Could not write file '{0}': {1}" },
        Option_mapRoot_cannot_be_specified_without_specifying_sourcemap_option: { code: 5038, category: 1 /* Error */, key: "Option mapRoot cannot be specified without specifying sourcemap option." },
        Option_sourceRoot_cannot_be_specified_without_specifying_sourcemap_option: { code: 5039, category: 1 /* Error */, key: "Option sourceRoot cannot be specified without specifying sourcemap option." },
        Concatenate_and_emit_output_to_single_file: { code: 6001, category: 2 /* Message */, key: "Concatenate and emit output to single file." },
        Generates_corresponding_d_ts_file: { code: 6002, category: 2 /* Message */, key: "Generates corresponding '.d.ts' file." },
        Specifies_the_location_where_debugger_should_locate_map_files_instead_of_generated_locations: { code: 6003, category: 2 /* Message */, key: "Specifies the location where debugger should locate map files instead of generated locations." },
        Specifies_the_location_where_debugger_should_locate_TypeScript_files_instead_of_source_locations: { code: 6004, category: 2 /* Message */, key: "Specifies the location where debugger should locate TypeScript files instead of source locations." },
        Watch_input_files: { code: 6005, category: 2 /* Message */, key: "Watch input files." },
        Redirect_output_structure_to_the_directory: { code: 6006, category: 2 /* Message */, key: "Redirect output structure to the directory." },
        Do_not_erase_const_enum_declarations_in_generated_code: { code: 6007, category: 2 /* Message */, key: "Do not erase const enum declarations in generated code." },
        Do_not_emit_outputs_if_any_type_checking_errors_were_reported: { code: 6008, category: 2 /* Message */, key: "Do not emit outputs if any type checking errors were reported." },
        Do_not_emit_comments_to_output: { code: 6009, category: 2 /* Message */, key: "Do not emit comments to output." },
        Specify_ECMAScript_target_version_Colon_ES3_default_ES5_or_ES6_experimental: { code: 6015, category: 2 /* Message */, key: "Specify ECMAScript target version: 'ES3' (default), 'ES5', or 'ES6' (experimental)" },
        Specify_module_code_generation_Colon_commonjs_or_amd: { code: 6016, category: 2 /* Message */, key: "Specify module code generation: 'commonjs' or 'amd'" },
        Print_this_message: { code: 6017, category: 2 /* Message */, key: "Print this message." },
        Print_the_compiler_s_version: { code: 6019, category: 2 /* Message */, key: "Print the compiler's version." },
        Syntax_Colon_0: { code: 6023, category: 2 /* Message */, key: "Syntax: {0}" },
        options: { code: 6024, category: 2 /* Message */, key: "options" },
        file: { code: 6025, category: 2 /* Message */, key: "file" },
        Examples_Colon_0: { code: 6026, category: 2 /* Message */, key: "Examples: {0}" },
        Options_Colon: { code: 6027, category: 2 /* Message */, key: "Options:" },
        Version_0: { code: 6029, category: 2 /* Message */, key: "Version {0}" },
        Insert_command_line_options_and_files_from_a_file: { code: 6030, category: 2 /* Message */, key: "Insert command line options and files from a file." },
        File_change_detected_Compiling: { code: 6032, category: 2 /* Message */, key: "File change detected. Compiling..." },
        KIND: { code: 6034, category: 2 /* Message */, key: "KIND" },
        FILE: { code: 6035, category: 2 /* Message */, key: "FILE" },
        VERSION: { code: 6036, category: 2 /* Message */, key: "VERSION" },
        LOCATION: { code: 6037, category: 2 /* Message */, key: "LOCATION" },
        DIRECTORY: { code: 6038, category: 2 /* Message */, key: "DIRECTORY" },
        Compilation_complete_Watching_for_file_changes: { code: 6042, category: 2 /* Message */, key: "Compilation complete. Watching for file changes." },
        Generates_corresponding_map_file: { code: 6043, category: 2 /* Message */, key: "Generates corresponding '.map' file." },
        Compiler_option_0_expects_an_argument: { code: 6044, category: 1 /* Error */, key: "Compiler option '{0}' expects an argument." },
        Unterminated_quoted_string_in_response_file_0: { code: 6045, category: 1 /* Error */, key: "Unterminated quoted string in response file '{0}'." },
        Argument_for_module_option_must_be_commonjs_or_amd: { code: 6046, category: 1 /* Error */, key: "Argument for '--module' option must be 'commonjs' or 'amd'." },
        Argument_for_target_option_must_be_es3_es5_or_es6: { code: 6047, category: 1 /* Error */, key: "Argument for '--target' option must be 'es3', 'es5', or 'es6'." },
        Locale_must_be_of_the_form_language_or_language_territory_For_example_0_or_1: { code: 6048, category: 1 /* Error */, key: "Locale must be of the form <language> or <language>-<territory>. For example '{0}' or '{1}'." },
        Unsupported_locale_0: { code: 6049, category: 1 /* Error */, key: "Unsupported locale '{0}'." },
        Unable_to_open_file_0: { code: 6050, category: 1 /* Error */, key: "Unable to open file '{0}'." },
        Corrupted_locale_file_0: { code: 6051, category: 1 /* Error */, key: "Corrupted locale file {0}." },
        Warn_on_expressions_and_declarations_with_an_implied_any_type: { code: 6052, category: 2 /* Message */, key: "Warn on expressions and declarations with an implied 'any' type." },
        File_0_not_found: { code: 6053, category: 1 /* Error */, key: "File '{0}' not found." },
        File_0_must_have_extension_ts_or_d_ts: { code: 6054, category: 1 /* Error */, key: "File '{0}' must have extension '.ts' or '.d.ts'." },
        Suppress_noImplicitAny_errors_for_indexing_objects_lacking_index_signatures: { code: 6055, category: 2 /* Message */, key: "Suppress noImplicitAny errors for indexing objects lacking index signatures." },
        Variable_0_implicitly_has_an_1_type: { code: 7005, category: 1 /* Error */, key: "Variable '{0}' implicitly has an '{1}' type." },
        Parameter_0_implicitly_has_an_1_type: { code: 7006, category: 1 /* Error */, key: "Parameter '{0}' implicitly has an '{1}' type." },
        Member_0_implicitly_has_an_1_type: { code: 7008, category: 1 /* Error */, key: "Member '{0}' implicitly has an '{1}' type." },
        new_expression_whose_target_lacks_a_construct_signature_implicitly_has_an_any_type: { code: 7009, category: 1 /* Error */, key: "'new' expression, whose target lacks a construct signature, implicitly has an 'any' type." },
        _0_which_lacks_return_type_annotation_implicitly_has_an_1_return_type: { code: 7010, category: 1 /* Error */, key: "'{0}', which lacks return-type annotation, implicitly has an '{1}' return type." },
        Function_expression_which_lacks_return_type_annotation_implicitly_has_an_0_return_type: { code: 7011, category: 1 /* Error */, key: "Function expression, which lacks return-type annotation, implicitly has an '{0}' return type." },
        Construct_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type: { code: 7013, category: 1 /* Error */, key: "Construct signature, which lacks return-type annotation, implicitly has an 'any' return type." },
        Property_0_implicitly_has_type_any_because_its_set_accessor_lacks_a_type_annotation: { code: 7016, category: 1 /* Error */, key: "Property '{0}' implicitly has type 'any', because its 'set' accessor lacks a type annotation." },
        Index_signature_of_object_type_implicitly_has_an_any_type: { code: 7017, category: 1 /* Error */, key: "Index signature of object type implicitly has an 'any' type." },
        Object_literal_s_property_0_implicitly_has_an_1_type: { code: 7018, category: 1 /* Error */, key: "Object literal's property '{0}' implicitly has an '{1}' type." },
        Rest_parameter_0_implicitly_has_an_any_type: { code: 7019, category: 1 /* Error */, key: "Rest parameter '{0}' implicitly has an 'any[]' type." },
        Call_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type: { code: 7020, category: 1 /* Error */, key: "Call signature, which lacks return-type annotation, implicitly has an 'any' return type." },
        _0_implicitly_has_type_any_because_it_is_referenced_directly_or_indirectly_in_its_own_type_annotation: { code: 7021, category: 1 /* Error */, key: "'{0}' implicitly has type 'any' because it is referenced directly or indirectly in its own type annotation." },
        _0_implicitly_has_type_any_because_it_is_does_not_have_a_type_annotation_and_is_referenced_directly_or_indirectly_in_its_own_initializer: { code: 7022, category: 1 /* Error */, key: "'{0}' implicitly has type 'any' because it is does not have a type annotation and is referenced directly or indirectly in its own initializer." },
        _0_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions: { code: 7023, category: 1 /* Error */, key: "'{0}' implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions." },
        Function_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions: { code: 7024, category: 1 /* Error */, key: "Function implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions." },
        You_cannot_rename_this_element: { code: 8000, category: 1 /* Error */, key: "You cannot rename this element." },
        yield_expressions_are_not_currently_supported: { code: 9000, category: 1 /* Error */, key: "'yield' expressions are not currently supported." },
        Generators_are_not_currently_supported: { code: 9001, category: 1 /* Error */, key: "Generators are not currently supported." },
        Computed_property_names_are_not_currently_supported: { code: 9002, category: 1 /* Error */, key: "Computed property names are not currently supported." }
    };
})(ts || (ts = {}));
var ts;
(function (ts) {
    var textToToken = {
        "any": 110 /* AnyKeyword */,
        "boolean": 111 /* BooleanKeyword */,
        "break": 65 /* BreakKeyword */,
        "case": 66 /* CaseKeyword */,
        "catch": 67 /* CatchKeyword */,
        "class": 68 /* ClassKeyword */,
        "continue": 70 /* ContinueKeyword */,
        "const": 69 /* ConstKeyword */,
        "constructor": 112 /* ConstructorKeyword */,
        "debugger": 71 /* DebuggerKeyword */,
        "declare": 113 /* DeclareKeyword */,
        "default": 72 /* DefaultKeyword */,
        "delete": 73 /* DeleteKeyword */,
        "do": 74 /* DoKeyword */,
        "else": 75 /* ElseKeyword */,
        "enum": 76 /* EnumKeyword */,
        "export": 77 /* ExportKeyword */,
        "extends": 78 /* ExtendsKeyword */,
        "false": 79 /* FalseKeyword */,
        "finally": 80 /* FinallyKeyword */,
        "for": 81 /* ForKeyword */,
        "function": 82 /* FunctionKeyword */,
        "get": 114 /* GetKeyword */,
        "if": 83 /* IfKeyword */,
        "implements": 101 /* ImplementsKeyword */,
        "import": 84 /* ImportKeyword */,
        "in": 85 /* InKeyword */,
        "instanceof": 86 /* InstanceOfKeyword */,
        "interface": 102 /* InterfaceKeyword */,
        "let": 103 /* LetKeyword */,
        "module": 115 /* ModuleKeyword */,
        "new": 87 /* NewKeyword */,
        "null": 88 /* NullKeyword */,
        "number": 117 /* NumberKeyword */,
        "package": 104 /* PackageKeyword */,
        "private": 105 /* PrivateKeyword */,
        "protected": 106 /* ProtectedKeyword */,
        "public": 107 /* PublicKeyword */,
        "require": 116 /* RequireKeyword */,
        "return": 89 /* ReturnKeyword */,
        "set": 118 /* SetKeyword */,
        "static": 108 /* StaticKeyword */,
        "string": 119 /* StringKeyword */,
        "super": 90 /* SuperKeyword */,
        "switch": 91 /* SwitchKeyword */,
        "this": 92 /* ThisKeyword */,
        "throw": 93 /* ThrowKeyword */,
        "true": 94 /* TrueKeyword */,
        "try": 95 /* TryKeyword */,
        "type": 120 /* TypeKeyword */,
        "typeof": 96 /* TypeOfKeyword */,
        "var": 97 /* VarKeyword */,
        "void": 98 /* VoidKeyword */,
        "while": 99 /* WhileKeyword */,
        "with": 100 /* WithKeyword */,
        "yield": 109 /* YieldKeyword */,
        "{": 14 /* OpenBraceToken */,
        "}": 15 /* CloseBraceToken */,
        "(": 16 /* OpenParenToken */,
        ")": 17 /* CloseParenToken */,
        "[": 18 /* OpenBracketToken */,
        "]": 19 /* CloseBracketToken */,
        ".": 20 /* DotToken */,
        "...": 21 /* DotDotDotToken */,
        ";": 22 /* SemicolonToken */,
        ",": 23 /* CommaToken */,
        "<": 24 /* LessThanToken */,
        ">": 25 /* GreaterThanToken */,
        "<=": 26 /* LessThanEqualsToken */,
        ">=": 27 /* GreaterThanEqualsToken */,
        "==": 28 /* EqualsEqualsToken */,
        "!=": 29 /* ExclamationEqualsToken */,
        "===": 30 /* EqualsEqualsEqualsToken */,
        "!==": 31 /* ExclamationEqualsEqualsToken */,
        "=>": 32 /* EqualsGreaterThanToken */,
        "+": 33 /* PlusToken */,
        "-": 34 /* MinusToken */,
        "*": 35 /* AsteriskToken */,
        "/": 36 /* SlashToken */,
        "%": 37 /* PercentToken */,
        "++": 38 /* PlusPlusToken */,
        "--": 39 /* MinusMinusToken */,
        "<<": 40 /* LessThanLessThanToken */,
        ">>": 41 /* GreaterThanGreaterThanToken */,
        ">>>": 42 /* GreaterThanGreaterThanGreaterThanToken */,
        "&": 43 /* AmpersandToken */,
        "|": 44 /* BarToken */,
        "^": 45 /* CaretToken */,
        "!": 46 /* ExclamationToken */,
        "~": 47 /* TildeToken */,
        "&&": 48 /* AmpersandAmpersandToken */,
        "||": 49 /* BarBarToken */,
        "?": 50 /* QuestionToken */,
        ":": 51 /* ColonToken */,
        "=": 52 /* EqualsToken */,
        "+=": 53 /* PlusEqualsToken */,
        "-=": 54 /* MinusEqualsToken */,
        "*=": 55 /* AsteriskEqualsToken */,
        "/=": 56 /* SlashEqualsToken */,
        "%=": 57 /* PercentEqualsToken */,
        "<<=": 58 /* LessThanLessThanEqualsToken */,
        ">>=": 59 /* GreaterThanGreaterThanEqualsToken */,
        ">>>=": 60 /* GreaterThanGreaterThanGreaterThanEqualsToken */,
        "&=": 61 /* AmpersandEqualsToken */,
        "|=": 62 /* BarEqualsToken */,
        "^=": 63 /* CaretEqualsToken */
    };
    var unicodeES3IdentifierStart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685, 688, 696, 699, 705, 720, 721, 736, 740, 750, 750, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974, 976, 983, 986, 1011, 1024, 1153, 1164, 1220, 1223, 1224, 1227, 1228, 1232, 1269, 1272, 1273, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1569, 1594, 1600, 1610, 1649, 1747, 1749, 1749, 1765, 1766, 1786, 1788, 1808, 1808, 1810, 1836, 1920, 1957, 2309, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2784, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3294, 3294, 3296, 3297, 3333, 3340, 3342, 3344, 3346, 3368, 3370, 3385, 3424, 3425, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3805, 3840, 3840, 3904, 3911, 3913, 3946, 3976, 3979, 4096, 4129, 4131, 4135, 4137, 4138, 4176, 4181, 4256, 4293, 4304, 4342, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878, 4880, 4880, 4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 5024, 5108, 5121, 5740, 5743, 5750, 5761, 5786, 5792, 5866, 6016, 6067, 6176, 6263, 6272, 6312, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8319, 8319, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8497, 8499, 8505, 8544, 8579, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12346, 12353, 12436, 12445, 12446, 12449, 12538, 12540, 12542, 12549, 12588, 12593, 12686, 12704, 12727, 13312, 19893, 19968, 40869, 40960, 42124, 44032, 55203, 63744, 64045, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65138, 65140, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,];
    var unicodeES3IdentifierPart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685, 688, 696, 699, 705, 720, 721, 736, 740, 750, 750, 768, 846, 864, 866, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974, 976, 983, 986, 1011, 1024, 1153, 1155, 1158, 1164, 1220, 1223, 1224, 1227, 1228, 1232, 1269, 1272, 1273, 1329, 1366, 1369, 1369, 1377, 1415, 1425, 1441, 1443, 1465, 1467, 1469, 1471, 1471, 1473, 1474, 1476, 1476, 1488, 1514, 1520, 1522, 1569, 1594, 1600, 1621, 1632, 1641, 1648, 1747, 1749, 1756, 1759, 1768, 1770, 1773, 1776, 1788, 1808, 1836, 1840, 1866, 1920, 1968, 2305, 2307, 2309, 2361, 2364, 2381, 2384, 2388, 2392, 2403, 2406, 2415, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2492, 2492, 2494, 2500, 2503, 2504, 2507, 2509, 2519, 2519, 2524, 2525, 2527, 2531, 2534, 2545, 2562, 2562, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2649, 2652, 2654, 2654, 2662, 2676, 2689, 2691, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765, 2768, 2768, 2784, 2784, 2790, 2799, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870, 2873, 2876, 2883, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2913, 2918, 2927, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3006, 3010, 3014, 3016, 3018, 3021, 3031, 3031, 3047, 3055, 3073, 3075, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3134, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3168, 3169, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3262, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3294, 3294, 3296, 3297, 3302, 3311, 3330, 3331, 3333, 3340, 3342, 3344, 3346, 3368, 3370, 3385, 3390, 3395, 3398, 3400, 3402, 3405, 3415, 3415, 3424, 3425, 3430, 3439, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789, 3792, 3801, 3804, 3805, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3911, 3913, 3946, 3953, 3972, 3974, 3979, 3984, 3991, 3993, 4028, 4038, 4038, 4096, 4129, 4131, 4135, 4137, 4138, 4140, 4146, 4150, 4153, 4160, 4169, 4176, 4185, 4256, 4293, 4304, 4342, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878, 4880, 4880, 4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 4969, 4977, 5024, 5108, 5121, 5740, 5743, 5750, 5761, 5786, 5792, 5866, 6016, 6099, 6112, 6121, 6160, 6169, 6176, 6263, 6272, 6313, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8255, 8256, 8319, 8319, 8400, 8412, 8417, 8417, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8497, 8499, 8505, 8544, 8579, 12293, 12295, 12321, 12335, 12337, 12341, 12344, 12346, 12353, 12436, 12441, 12442, 12445, 12446, 12449, 12542, 12549, 12588, 12593, 12686, 12704, 12727, 13312, 19893, 19968, 40869, 40960, 42124, 44032, 55203, 63744, 64045, 64256, 64262, 64275, 64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65056, 65059, 65075, 65076, 65101, 65103, 65136, 65138, 65140, 65140, 65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65381, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,];
    var unicodeES5IdentifierStart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774, 1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969, 1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088, 2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840, 3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186, 4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016, 6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389, 6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688, 6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141, 7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424, 7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538, 42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015, 43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259, 43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520, 43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695, 43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739, 43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,];
    var unicodeES5IdentifierPart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520, 1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788, 1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112, 2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423, 2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525, 2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929, 2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018, 3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424, 3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789, 3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028, 4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099, 6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783, 6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155, 7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205, 8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417, 8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335, 12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072, 43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309, 43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584, 43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741, 43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140, 65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,];
    function lookupInUnicodeMap(code, map) {
        if (code < map[0]) {
            return false;
        }
        var lo = 0;
        var hi = map.length;
        var mid;
        while (lo + 1 < hi) {
            mid = lo + (hi - lo) / 2;
            mid -= mid % 2;
            if (map[mid] <= code && code <= map[mid + 1]) {
                return true;
            }
            if (code < map[mid]) {
                hi = mid;
            }
            else {
                lo = mid + 2;
            }
        }
        return false;
    }
    function isUnicodeIdentifierStart(code, languageVersion) {
        return languageVersion === 0 /* ES3 */ ? lookupInUnicodeMap(code, unicodeES3IdentifierStart) : lookupInUnicodeMap(code, unicodeES5IdentifierStart);
    }
    function isUnicodeIdentifierPart(code, languageVersion) {
        return languageVersion === 0 /* ES3 */ ? lookupInUnicodeMap(code, unicodeES3IdentifierPart) : lookupInUnicodeMap(code, unicodeES5IdentifierPart);
    }
    function makeReverseMap(source) {
        var result = [];
        for (var name in source) {
            if (source.hasOwnProperty(name)) {
                result[source[name]] = name;
            }
        }
        return result;
    }
    var tokenStrings = makeReverseMap(textToToken);
    function tokenToString(t) {
        return tokenStrings[t];
    }
    ts.tokenToString = tokenToString;
    function computeLineStarts(text) {
        var result = new Array();
        var pos = 0;
        var lineStart = 0;
        while (pos < text.length) {
            var ch = text.charCodeAt(pos++);
            switch (ch) {
                case 13 /* carriageReturn */:
                    if (text.charCodeAt(pos) === 10 /* lineFeed */) {
                        pos++;
                    }
                case 10 /* lineFeed */:
                    result.push(lineStart);
                    lineStart = pos;
                    break;
                default:
                    if (ch > 127 /* maxAsciiCharacter */ && isLineBreak(ch)) {
                        result.push(lineStart);
                        lineStart = pos;
                    }
                    break;
            }
        }
        result.push(lineStart);
        return result;
    }
    ts.computeLineStarts = computeLineStarts;
    function getPositionFromLineAndCharacter(lineStarts, line, character) {
        ts.Debug.assert(line > 0);
        return lineStarts[line - 1] + character - 1;
    }
    ts.getPositionFromLineAndCharacter = getPositionFromLineAndCharacter;
    function getLineAndCharacterOfPosition(lineStarts, position) {
        var lineNumber = ts.binarySearch(lineStarts, position);
        if (lineNumber < 0) {
            lineNumber = (~lineNumber) - 1;
        }
        return {
            line: lineNumber + 1,
            character: position - lineStarts[lineNumber] + 1
        };
    }
    ts.getLineAndCharacterOfPosition = getLineAndCharacterOfPosition;
    function positionToLineAndCharacter(text, pos) {
        var lineStarts = computeLineStarts(text);
        return getLineAndCharacterOfPosition(lineStarts, pos);
    }
    ts.positionToLineAndCharacter = positionToLineAndCharacter;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    function isWhiteSpace(ch) {
        return ch === 32 /* space */ || ch === 9 /* tab */ || ch === 11 /* verticalTab */ || ch === 12 /* formFeed */ || ch === 160 /* nonBreakingSpace */ || ch === 5760 /* ogham */ || ch >= 8192 /* enQuad */ && ch <= 8203 /* zeroWidthSpace */ || ch === 8239 /* narrowNoBreakSpace */ || ch === 8287 /* mathematicalSpace */ || ch === 12288 /* ideographicSpace */ || ch === 65279 /* byteOrderMark */;
    }
    ts.isWhiteSpace = isWhiteSpace;
    function isLineBreak(ch) {
        return ch === 10 /* lineFeed */ || ch === 13 /* carriageReturn */ || ch === 8232 /* lineSeparator */ || ch === 8233 /* paragraphSeparator */ || ch === 133 /* nextLine */;
    }
    ts.isLineBreak = isLineBreak;
    function isDigit(ch) {
        return ch >= 48 /* _0 */ && ch <= 57 /* _9 */;
    }
    function isOctalDigit(ch) {
        return ch >= 48 /* _0 */ && ch <= 55 /* _7 */;
    }
    ts.isOctalDigit = isOctalDigit;
    function skipTrivia(text, pos, stopAfterLineBreak) {
        while (true) {
            var ch = text.charCodeAt(pos);
            switch (ch) {
                case 13 /* carriageReturn */:
                    if (text.charCodeAt(pos + 1) === 10 /* lineFeed */) {
                        pos++;
                    }
                case 10 /* lineFeed */:
                    pos++;
                    if (stopAfterLineBreak) {
                        return pos;
                    }
                    continue;
                case 9 /* tab */:
                case 11 /* verticalTab */:
                case 12 /* formFeed */:
                case 32 /* space */:
                    pos++;
                    continue;
                case 47 /* slash */:
                    if (text.charCodeAt(pos + 1) === 47 /* slash */) {
                        pos += 2;
                        while (pos < text.length) {
                            if (isLineBreak(text.charCodeAt(pos))) {
                                break;
                            }
                            pos++;
                        }
                        continue;
                    }
                    if (text.charCodeAt(pos + 1) === 42 /* asterisk */) {
                        pos += 2;
                        while (pos < text.length) {
                            if (text.charCodeAt(pos) === 42 /* asterisk */ && text.charCodeAt(pos + 1) === 47 /* slash */) {
                                pos += 2;
                                break;
                            }
                            pos++;
                        }
                        continue;
                    }
                    break;
                case 60 /* lessThan */:
                case 61 /* equals */:
                case 62 /* greaterThan */:
                    if (isConflictMarkerTrivia(text, pos)) {
                        pos = scanConflictMarkerTrivia(text, pos);
                        continue;
                    }
                    break;
                default:
                    if (ch > 127 /* maxAsciiCharacter */ && (isWhiteSpace(ch) || isLineBreak(ch))) {
                        pos++;
                        continue;
                    }
                    break;
            }
            return pos;
        }
    }
    ts.skipTrivia = skipTrivia;
    function isConflictMarkerTrivia(text, pos) {
        if (pos > 0 && isLineBreak(text.charCodeAt(pos - 1))) {
            var ch = text.charCodeAt(pos);
            var markerLength = "<<<<<<<".length;
            if ((pos + markerLength) < text.length) {
                for (var i = 0, n = markerLength; i < n; i++) {
                    if (text.charCodeAt(pos + i) !== ch) {
                        return false;
                    }
                }
                return ch === 61 /* equals */ || text.charCodeAt(pos + markerLength) === 32 /* space */;
            }
        }
        return false;
    }
    function scanConflictMarkerTrivia(text, pos) {
        var len = text.length;
        while (pos < len && !isLineBreak(text.charCodeAt(pos))) {
            pos++;
        }
        return pos;
    }
    function getCommentRanges(text, pos, trailing) {
        var result;
        var collecting = trailing || pos === 0;
        while (true) {
            var ch = text.charCodeAt(pos);
            switch (ch) {
                case 13 /* carriageReturn */:
                    if (text.charCodeAt(pos + 1) === 10 /* lineFeed */)
                        pos++;
                case 10 /* lineFeed */:
                    pos++;
                    if (trailing) {
                        return result;
                    }
                    collecting = true;
                    if (result && result.length) {
                        result[result.length - 1].hasTrailingNewLine = true;
                    }
                    continue;
                case 9 /* tab */:
                case 11 /* verticalTab */:
                case 12 /* formFeed */:
                case 32 /* space */:
                    pos++;
                    continue;
                case 47 /* slash */:
                    var nextChar = text.charCodeAt(pos + 1);
                    var hasTrailingNewLine = false;
                    if (nextChar === 47 /* slash */ || nextChar === 42 /* asterisk */) {
                        var startPos = pos;
                        pos += 2;
                        if (nextChar === 47 /* slash */) {
                            while (pos < text.length) {
                                if (isLineBreak(text.charCodeAt(pos))) {
                                    hasTrailingNewLine = true;
                                    break;
                                }
                                pos++;
                            }
                        }
                        else {
                            while (pos < text.length) {
                                if (text.charCodeAt(pos) === 42 /* asterisk */ && text.charCodeAt(pos + 1) === 47 /* slash */) {
                                    pos += 2;
                                    break;
                                }
                                pos++;
                            }
                        }
                        if (collecting) {
                            if (!result)
                                result = [];
                            result.push({ pos: startPos, end: pos, hasTrailingNewLine: hasTrailingNewLine });
                        }
                        continue;
                    }
                    break;
                default:
                    if (ch > 127 /* maxAsciiCharacter */ && (isWhiteSpace(ch) || isLineBreak(ch))) {
                        if (result && result.length && isLineBreak(ch)) {
                            result[result.length - 1].hasTrailingNewLine = true;
                        }
                        pos++;
                        continue;
                    }
                    break;
            }
            return result;
        }
    }
    function getLeadingCommentRanges(text, pos) {
        return getCommentRanges(text, pos, false);
    }
    ts.getLeadingCommentRanges = getLeadingCommentRanges;
    function getTrailingCommentRanges(text, pos) {
        return getCommentRanges(text, pos, true);
    }
    ts.getTrailingCommentRanges = getTrailingCommentRanges;
    function isIdentifierStart(ch, languageVersion) {
        return ch >= 65 /* A */ && ch <= 90 /* Z */ || ch >= 97 /* a */ && ch <= 122 /* z */ || ch === 36 /* $ */ || ch === 95 /* _ */ || ch > 127 /* maxAsciiCharacter */ && isUnicodeIdentifierStart(ch, languageVersion);
    }
    ts.isIdentifierStart = isIdentifierStart;
    function isIdentifierPart(ch, languageVersion) {
        return ch >= 65 /* A */ && ch <= 90 /* Z */ || ch >= 97 /* a */ && ch <= 122 /* z */ || ch >= 48 /* _0 */ && ch <= 57 /* _9 */ || ch === 36 /* $ */ || ch === 95 /* _ */ || ch > 127 /* maxAsciiCharacter */ && isUnicodeIdentifierPart(ch, languageVersion);
    }
    ts.isIdentifierPart = isIdentifierPart;
    function createScanner(languageVersion, skipTrivia, text, onError) {
        var pos;
        var len;
        var startPos;
        var tokenPos;
        var token;
        var tokenValue;
        var precedingLineBreak;
        var tokenIsUnterminated;
        function error(message) {
            if (onError) {
                onError(message);
            }
        }
        function isIdentifierStart(ch) {
            return ch >= 65 /* A */ && ch <= 90 /* Z */ || ch >= 97 /* a */ && ch <= 122 /* z */ || ch === 36 /* $ */ || ch === 95 /* _ */ || ch > 127 /* maxAsciiCharacter */ && isUnicodeIdentifierStart(ch, languageVersion);
        }
        function isIdentifierPart(ch) {
            return ch >= 65 /* A */ && ch <= 90 /* Z */ || ch >= 97 /* a */ && ch <= 122 /* z */ || ch >= 48 /* _0 */ && ch <= 57 /* _9 */ || ch === 36 /* $ */ || ch === 95 /* _ */ || ch > 127 /* maxAsciiCharacter */ && isUnicodeIdentifierPart(ch, languageVersion);
        }
        function scanNumber() {
            var start = pos;
            while (isDigit(text.charCodeAt(pos)))
                pos++;
            if (text.charCodeAt(pos) === 46 /* dot */) {
                pos++;
                while (isDigit(text.charCodeAt(pos)))
                    pos++;
            }
            var end = pos;
            if (text.charCodeAt(pos) === 69 /* E */ || text.charCodeAt(pos) === 101 /* e */) {
                pos++;
                if (text.charCodeAt(pos) === 43 /* plus */ || text.charCodeAt(pos) === 45 /* minus */)
                    pos++;
                if (isDigit(text.charCodeAt(pos))) {
                    pos++;
                    while (isDigit(text.charCodeAt(pos)))
                        pos++;
                    end = pos;
                }
                else {
                    error(ts.Diagnostics.Digit_expected);
                }
            }
            return +(text.substring(start, end));
        }
        function scanOctalDigits() {
            var start = pos;
            while (isOctalDigit(text.charCodeAt(pos))) {
                pos++;
            }
            return +(text.substring(start, pos));
        }
        function scanHexDigits(count, mustMatchCount) {
            var digits = 0;
            var value = 0;
            while (digits < count || !mustMatchCount) {
                var ch = text.charCodeAt(pos);
                if (ch >= 48 /* _0 */ && ch <= 57 /* _9 */) {
                    value = value * 16 + ch - 48 /* _0 */;
                }
                else if (ch >= 65 /* A */ && ch <= 70 /* F */) {
                    value = value * 16 + ch - 65 /* A */ + 10;
                }
                else if (ch >= 97 /* a */ && ch <= 102 /* f */) {
                    value = value * 16 + ch - 97 /* a */ + 10;
                }
                else {
                    break;
                }
                pos++;
                digits++;
            }
            if (digits < count) {
                value = -1;
            }
            return value;
        }
        function scanString() {
            var quote = text.charCodeAt(pos++);
            var result = "";
            var start = pos;
            while (true) {
                if (pos >= len) {
                    result += text.substring(start, pos);
                    tokenIsUnterminated = true;
                    error(ts.Diagnostics.Unterminated_string_literal);
                    break;
                }
                var ch = text.charCodeAt(pos);
                if (ch === quote) {
                    result += text.substring(start, pos);
                    pos++;
                    break;
                }
                if (ch === 92 /* backslash */) {
                    result += text.substring(start, pos);
                    result += scanEscapeSequence();
                    start = pos;
                    continue;
                }
                if (isLineBreak(ch)) {
                    result += text.substring(start, pos);
                    tokenIsUnterminated = true;
                    error(ts.Diagnostics.Unterminated_string_literal);
                    break;
                }
                pos++;
            }
            return result;
        }
        function scanTemplateAndSetTokenValue() {
            var startedWithBacktick = text.charCodeAt(pos) === 96 /* backtick */;
            pos++;
            var start = pos;
            var contents = "";
            var resultingToken;
            while (true) {
                if (pos >= len) {
                    contents += text.substring(start, pos);
                    tokenIsUnterminated = true;
                    error(ts.Diagnostics.Unterminated_template_literal);
                    resultingToken = startedWithBacktick ? 10 /* NoSubstitutionTemplateLiteral */ : 13 /* TemplateTail */;
                    break;
                }
                var currChar = text.charCodeAt(pos);
                if (currChar === 96 /* backtick */) {
                    contents += text.substring(start, pos);
                    pos++;
                    resultingToken = startedWithBacktick ? 10 /* NoSubstitutionTemplateLiteral */ : 13 /* TemplateTail */;
                    break;
                }
                if (currChar === 36 /* $ */ && pos + 1 < len && text.charCodeAt(pos + 1) === 123 /* openBrace */) {
                    contents += text.substring(start, pos);
                    pos += 2;
                    resultingToken = startedWithBacktick ? 11 /* TemplateHead */ : 12 /* TemplateMiddle */;
                    break;
                }
                if (currChar === 92 /* backslash */) {
                    contents += text.substring(start, pos);
                    contents += scanEscapeSequence();
                    start = pos;
                    continue;
                }
                if (currChar === 13 /* carriageReturn */) {
                    contents += text.substring(start, pos);
                    pos++;
                    if (pos < len && text.charCodeAt(pos) === 10 /* lineFeed */) {
                        pos++;
                    }
                    contents += "\n";
                    start = pos;
                    continue;
                }
                pos++;
            }
            ts.Debug.assert(resultingToken !== undefined);
            tokenValue = contents;
            return resultingToken;
        }
        function scanEscapeSequence() {
            pos++;
            if (pos >= len) {
                error(ts.Diagnostics.Unexpected_end_of_text);
                return "";
            }
            var ch = text.charCodeAt(pos++);
            switch (ch) {
                case 48 /* _0 */:
                    return "\0";
                case 98 /* b */:
                    return "\b";
                case 116 /* t */:
                    return "\t";
                case 110 /* n */:
                    return "\n";
                case 118 /* v */:
                    return "\v";
                case 102 /* f */:
                    return "\f";
                case 114 /* r */:
                    return "\r";
                case 39 /* singleQuote */:
                    return "\'";
                case 34 /* doubleQuote */:
                    return "\"";
                case 120 /* x */:
                case 117 /* u */:
                    var ch = scanHexDigits(ch === 120 /* x */ ? 2 : 4, true);
                    if (ch >= 0) {
                        return String.fromCharCode(ch);
                    }
                    else {
                        error(ts.Diagnostics.Hexadecimal_digit_expected);
                        return "";
                    }
                case 13 /* carriageReturn */:
                    if (pos < len && text.charCodeAt(pos) === 10 /* lineFeed */) {
                        pos++;
                    }
                case 10 /* lineFeed */:
                case 8232 /* lineSeparator */:
                case 8233 /* paragraphSeparator */:
                    return "";
                default:
                    return String.fromCharCode(ch);
            }
        }
        function peekUnicodeEscape() {
            if (pos + 5 < len && text.charCodeAt(pos + 1) === 117 /* u */) {
                var start = pos;
                pos += 2;
                var value = scanHexDigits(4, true);
                pos = start;
                return value;
            }
            return -1;
        }
        function scanIdentifierParts() {
            var result = "";
            var start = pos;
            while (pos < len) {
                var ch = text.charCodeAt(pos);
                if (isIdentifierPart(ch)) {
                    pos++;
                }
                else if (ch === 92 /* backslash */) {
                    ch = peekUnicodeEscape();
                    if (!(ch >= 0 && isIdentifierPart(ch))) {
                        break;
                    }
                    result += text.substring(start, pos);
                    result += String.fromCharCode(ch);
                    pos += 6;
                    start = pos;
                }
                else {
                    break;
                }
            }
            result += text.substring(start, pos);
            return result;
        }
        function getIdentifierToken() {
            var len = tokenValue.length;
            if (len >= 2 && len <= 11) {
                var ch = tokenValue.charCodeAt(0);
                if (ch >= 97 /* a */ && ch <= 122 /* z */ && hasOwnProperty.call(textToToken, tokenValue)) {
                    return token = textToToken[tokenValue];
                }
            }
            return token = 64 /* Identifier */;
        }
        function scanBinaryOrOctalDigits(base) {
            ts.Debug.assert(base !== 2 || base !== 8, "Expected either base 2 or base 8");
            var value = 0;
            var numberOfDigits = 0;
            while (true) {
                var ch = text.charCodeAt(pos);
                var valueOfCh = ch - 48 /* _0 */;
                if (!isDigit(ch) || valueOfCh >= base) {
                    break;
                }
                value = value * base + valueOfCh;
                pos++;
                numberOfDigits++;
            }
            if (numberOfDigits === 0) {
                return -1;
            }
            return value;
        }
        function scan() {
            startPos = pos;
            precedingLineBreak = false;
            tokenIsUnterminated = false;
            while (true) {
                tokenPos = pos;
                if (pos >= len) {
                    return token = 1 /* EndOfFileToken */;
                }
                var ch = text.charCodeAt(pos);
                switch (ch) {
                    case 10 /* lineFeed */:
                    case 13 /* carriageReturn */:
                        precedingLineBreak = true;
                        if (skipTrivia) {
                            pos++;
                            continue;
                        }
                        else {
                            if (ch === 13 /* carriageReturn */ && pos + 1 < len && text.charCodeAt(pos + 1) === 10 /* lineFeed */) {
                                pos += 2;
                            }
                            else {
                                pos++;
                            }
                            return token = 4 /* NewLineTrivia */;
                        }
                    case 9 /* tab */:
                    case 11 /* verticalTab */:
                    case 12 /* formFeed */:
                    case 32 /* space */:
                        if (skipTrivia) {
                            pos++;
                            continue;
                        }
                        else {
                            while (pos < len && isWhiteSpace(text.charCodeAt(pos))) {
                                pos++;
                            }
                            return token = 5 /* WhitespaceTrivia */;
                        }
                    case 33 /* exclamation */:
                        if (text.charCodeAt(pos + 1) === 61 /* equals */) {
                            if (text.charCodeAt(pos + 2) === 61 /* equals */) {
                                return pos += 3, token = 31 /* ExclamationEqualsEqualsToken */;
                            }
                            return pos += 2, token = 29 /* ExclamationEqualsToken */;
                        }
                        return pos++, token = 46 /* ExclamationToken */;
                    case 34 /* doubleQuote */:
                    case 39 /* singleQuote */:
                        tokenValue = scanString();
                        return token = 8 /* StringLiteral */;
                    case 96 /* backtick */:
                        return token = scanTemplateAndSetTokenValue();
                    case 37 /* percent */:
                        if (text.charCodeAt(pos + 1) === 61 /* equals */) {
                            return pos += 2, token = 57 /* PercentEqualsToken */;
                        }
                        return pos++, token = 37 /* PercentToken */;
                    case 38 /* ampersand */:
                        if (text.charCodeAt(pos + 1) === 38 /* ampersand */) {
                            return pos += 2, token = 48 /* AmpersandAmpersandToken */;
                        }
                        if (text.charCodeAt(pos + 1) === 61 /* equals */) {
                            return pos += 2, token = 61 /* AmpersandEqualsToken */;
                        }
                        return pos++, token = 43 /* AmpersandToken */;
                    case 40 /* openParen */:
                        return pos++, token = 16 /* OpenParenToken */;
                    case 41 /* closeParen */:
                        return pos++, token = 17 /* CloseParenToken */;
                    case 42 /* asterisk */:
                        if (text.charCodeAt(pos + 1) === 61 /* equals */) {
                            return pos += 2, token = 55 /* AsteriskEqualsToken */;
                        }
                        return pos++, token = 35 /* AsteriskToken */;
                    case 43 /* plus */:
                        if (text.charCodeAt(pos + 1) === 43 /* plus */) {
                            return pos += 2, token = 38 /* PlusPlusToken */;
                        }
                        if (text.charCodeAt(pos + 1) === 61 /* equals */) {
                            return pos += 2, token = 53 /* PlusEqualsToken */;
                        }
                        return pos++, token = 33 /* PlusToken */;
                    case 44 /* comma */:
                        return pos++, token = 23 /* CommaToken */;
                    case 45 /* minus */:
                        if (text.charCodeAt(pos + 1) === 45 /* minus */) {
                            return pos += 2, token = 39 /* MinusMinusToken */;
                        }
                        if (text.charCodeAt(pos + 1) === 61 /* equals */) {
                            return pos += 2, token = 54 /* MinusEqualsToken */;
                        }
                        return pos++, token = 34 /* MinusToken */;
                    case 46 /* dot */:
                        if (isDigit(text.charCodeAt(pos + 1))) {
                            tokenValue = "" + scanNumber();
                            return token = 7 /* NumericLiteral */;
                        }
                        if (text.charCodeAt(pos + 1) === 46 /* dot */ && text.charCodeAt(pos + 2) === 46 /* dot */) {
                            return pos += 3, token = 21 /* DotDotDotToken */;
                        }
                        return pos++, token = 20 /* DotToken */;
                    case 47 /* slash */:
                        if (text.charCodeAt(pos + 1) === 47 /* slash */) {
                            pos += 2;
                            while (pos < len) {
                                if (isLineBreak(text.charCodeAt(pos))) {
                                    break;
                                }
                                pos++;
                            }
                            if (skipTrivia) {
                                continue;
                            }
                            else {
                                return token = 2 /* SingleLineCommentTrivia */;
                            }
                        }
                        if (text.charCodeAt(pos + 1) === 42 /* asterisk */) {
                            pos += 2;
                            var commentClosed = false;
                            while (pos < len) {
                                var ch = text.charCodeAt(pos);
                                if (ch === 42 /* asterisk */ && text.charCodeAt(pos + 1) === 47 /* slash */) {
                                    pos += 2;
                                    commentClosed = true;
                                    break;
                                }
                                if (isLineBreak(ch)) {
                                    precedingLineBreak = true;
                                }
                                pos++;
                            }
                            if (!commentClosed) {
                                error(ts.Diagnostics.Asterisk_Slash_expected);
                            }
                            if (skipTrivia) {
                                continue;
                            }
                            else {
                                tokenIsUnterminated = !commentClosed;
                                return token = 3 /* MultiLineCommentTrivia */;
                            }
                        }
                        if (text.charCodeAt(pos + 1) === 61 /* equals */) {
                            return pos += 2, token = 56 /* SlashEqualsToken */;
                        }
                        return pos++, token = 36 /* SlashToken */;
                    case 48 /* _0 */:
                        if (pos + 2 < len && (text.charCodeAt(pos + 1) === 88 /* X */ || text.charCodeAt(pos + 1) === 120 /* x */)) {
                            pos += 2;
                            var value = scanHexDigits(1, false);
                            if (value < 0) {
                                error(ts.Diagnostics.Hexadecimal_digit_expected);
                                value = 0;
                            }
                            tokenValue = "" + value;
                            return token = 7 /* NumericLiteral */;
                        }
                        else if (pos + 2 < len && (text.charCodeAt(pos + 1) === 66 /* B */ || text.charCodeAt(pos + 1) === 98 /* b */)) {
                            pos += 2;
                            var value = scanBinaryOrOctalDigits(2);
                            if (value < 0) {
                                error(ts.Diagnostics.Binary_digit_expected);
                                value = 0;
                            }
                            tokenValue = "" + value;
                            return 7 /* NumericLiteral */;
                        }
                        else if (pos + 2 < len && (text.charCodeAt(pos + 1) === 79 /* O */ || text.charCodeAt(pos + 1) === 111 /* o */)) {
                            pos += 2;
                            var value = scanBinaryOrOctalDigits(8);
                            if (value < 0) {
                                error(ts.Diagnostics.Octal_digit_expected);
                                value = 0;
                            }
                            tokenValue = "" + value;
                            return 7 /* NumericLiteral */;
                        }
                        if (pos + 1 < len && isOctalDigit(text.charCodeAt(pos + 1))) {
                            tokenValue = "" + scanOctalDigits();
                            return token = 7 /* NumericLiteral */;
                        }
                    case 49 /* _1 */:
                    case 50 /* _2 */:
                    case 51 /* _3 */:
                    case 52 /* _4 */:
                    case 53 /* _5 */:
                    case 54 /* _6 */:
                    case 55 /* _7 */:
                    case 56 /* _8 */:
                    case 57 /* _9 */:
                        tokenValue = "" + scanNumber();
                        return token = 7 /* NumericLiteral */;
                    case 58 /* colon */:
                        return pos++, token = 51 /* ColonToken */;
                    case 59 /* semicolon */:
                        return pos++, token = 22 /* SemicolonToken */;
                    case 60 /* lessThan */:
                        if (isConflictMarkerTrivia(text, pos)) {
                            error(ts.Diagnostics.Merge_conflict_marker_encountered);
                            pos = scanConflictMarkerTrivia(text, pos);
                            if (skipTrivia) {
                                continue;
                            }
                            else {
                                return token = 6 /* ConflictMarkerTrivia */;
                            }
                        }
                        if (text.charCodeAt(pos + 1) === 60 /* lessThan */) {
                            if (text.charCodeAt(pos + 2) === 61 /* equals */) {
                                return pos += 3, token = 58 /* LessThanLessThanEqualsToken */;
                            }
                            return pos += 2, token = 40 /* LessThanLessThanToken */;
                        }
                        if (text.charCodeAt(pos + 1) === 61 /* equals */) {
                            return pos += 2, token = 26 /* LessThanEqualsToken */;
                        }
                        return pos++, token = 24 /* LessThanToken */;
                    case 61 /* equals */:
                        if (isConflictMarkerTrivia(text, pos)) {
                            error(ts.Diagnostics.Merge_conflict_marker_encountered);
                            pos = scanConflictMarkerTrivia(text, pos);
                            if (skipTrivia) {
                                continue;
                            }
                            else {
                                return token = 6 /* ConflictMarkerTrivia */;
                            }
                        }
                        if (text.charCodeAt(pos + 1) === 61 /* equals */) {
                            if (text.charCodeAt(pos + 2) === 61 /* equals */) {
                                return pos += 3, token = 30 /* EqualsEqualsEqualsToken */;
                            }
                            return pos += 2, token = 28 /* EqualsEqualsToken */;
                        }
                        if (text.charCodeAt(pos + 1) === 62 /* greaterThan */) {
                            return pos += 2, token = 32 /* EqualsGreaterThanToken */;
                        }
                        return pos++, token = 52 /* EqualsToken */;
                    case 62 /* greaterThan */:
                        if (isConflictMarkerTrivia(text, pos)) {
                            error(ts.Diagnostics.Merge_conflict_marker_encountered);
                            pos = scanConflictMarkerTrivia(text, pos);
                            if (skipTrivia) {
                                continue;
                            }
                            else {
                                return token = 6 /* ConflictMarkerTrivia */;
                            }
                        }
                        return pos++, token = 25 /* GreaterThanToken */;
                    case 63 /* question */:
                        return pos++, token = 50 /* QuestionToken */;
                    case 91 /* openBracket */:
                        return pos++, token = 18 /* OpenBracketToken */;
                    case 93 /* closeBracket */:
                        return pos++, token = 19 /* CloseBracketToken */;
                    case 94 /* caret */:
                        if (text.charCodeAt(pos + 1) === 61 /* equals */) {
                            return pos += 2, token = 63 /* CaretEqualsToken */;
                        }
                        return pos++, token = 45 /* CaretToken */;
                    case 123 /* openBrace */:
                        return pos++, token = 14 /* OpenBraceToken */;
                    case 124 /* bar */:
                        if (text.charCodeAt(pos + 1) === 124 /* bar */) {
                            return pos += 2, token = 49 /* BarBarToken */;
                        }
                        if (text.charCodeAt(pos + 1) === 61 /* equals */) {
                            return pos += 2, token = 62 /* BarEqualsToken */;
                        }
                        return pos++, token = 44 /* BarToken */;
                    case 125 /* closeBrace */:
                        return pos++, token = 15 /* CloseBraceToken */;
                    case 126 /* tilde */:
                        return pos++, token = 47 /* TildeToken */;
                    case 92 /* backslash */:
                        var ch = peekUnicodeEscape();
                        if (ch >= 0 && isIdentifierStart(ch)) {
                            pos += 6;
                            tokenValue = String.fromCharCode(ch) + scanIdentifierParts();
                            return token = getIdentifierToken();
                        }
                        error(ts.Diagnostics.Invalid_character);
                        return pos++, token = 0 /* Unknown */;
                    default:
                        if (isIdentifierStart(ch)) {
                            pos++;
                            while (pos < len && isIdentifierPart(ch = text.charCodeAt(pos)))
                                pos++;
                            tokenValue = text.substring(tokenPos, pos);
                            if (ch === 92 /* backslash */) {
                                tokenValue += scanIdentifierParts();
                            }
                            return token = getIdentifierToken();
                        }
                        else if (isWhiteSpace(ch)) {
                            pos++;
                            continue;
                        }
                        else if (isLineBreak(ch)) {
                            precedingLineBreak = true;
                            pos++;
                            continue;
                        }
                        error(ts.Diagnostics.Invalid_character);
                        return pos++, token = 0 /* Unknown */;
                }
            }
        }
        function reScanGreaterToken() {
            if (token === 25 /* GreaterThanToken */) {
                if (text.charCodeAt(pos) === 62 /* greaterThan */) {
                    if (text.charCodeAt(pos + 1) === 62 /* greaterThan */) {
                        if (text.charCodeAt(pos + 2) === 61 /* equals */) {
                            return pos += 3, token = 60 /* GreaterThanGreaterThanGreaterThanEqualsToken */;
                        }
                        return pos += 2, token = 42 /* GreaterThanGreaterThanGreaterThanToken */;
                    }
                    if (text.charCodeAt(pos + 1) === 61 /* equals */) {
                        return pos += 2, token = 59 /* GreaterThanGreaterThanEqualsToken */;
                    }
                    return pos++, token = 41 /* GreaterThanGreaterThanToken */;
                }
                if (text.charCodeAt(pos) === 61 /* equals */) {
                    return pos++, token = 27 /* GreaterThanEqualsToken */;
                }
            }
            return token;
        }
        function reScanSlashToken() {
            if (token === 36 /* SlashToken */ || token === 56 /* SlashEqualsToken */) {
                var p = tokenPos + 1;
                var inEscape = false;
                var inCharacterClass = false;
                while (true) {
                    if (p >= len) {
                        tokenIsUnterminated = true;
                        error(ts.Diagnostics.Unterminated_regular_expression_literal);
                        break;
                    }
                    var ch = text.charCodeAt(p);
                    if (isLineBreak(ch)) {
                        tokenIsUnterminated = true;
                        error(ts.Diagnostics.Unterminated_regular_expression_literal);
                        break;
                    }
                    if (inEscape) {
                        inEscape = false;
                    }
                    else if (ch === 47 /* slash */ && !inCharacterClass) {
                        p++;
                        break;
                    }
                    else if (ch === 91 /* openBracket */) {
                        inCharacterClass = true;
                    }
                    else if (ch === 92 /* backslash */) {
                        inEscape = true;
                    }
                    else if (ch === 93 /* closeBracket */) {
                        inCharacterClass = false;
                    }
                    p++;
                }
                while (p < len && isIdentifierPart(text.charCodeAt(p))) {
                    p++;
                }
                pos = p;
                tokenValue = text.substring(tokenPos, pos);
                token = 9 /* RegularExpressionLiteral */;
            }
            return token;
        }
        function reScanTemplateToken() {
            ts.Debug.assert(token === 15 /* CloseBraceToken */, "'reScanTemplateToken' should only be called on a '}'");
            pos = tokenPos;
            return token = scanTemplateAndSetTokenValue();
        }
        function speculationHelper(callback, isLookahead) {
            var savePos = pos;
            var saveStartPos = startPos;
            var saveTokenPos = tokenPos;
            var saveToken = token;
            var saveTokenValue = tokenValue;
            var savePrecedingLineBreak = precedingLineBreak;
            var result = callback();
            if (!result || isLookahead) {
                pos = savePos;
                startPos = saveStartPos;
                tokenPos = saveTokenPos;
                token = saveToken;
                tokenValue = saveTokenValue;
                precedingLineBreak = savePrecedingLineBreak;
            }
            return result;
        }
        function lookAhead(callback) {
            return speculationHelper(callback, true);
        }
        function tryScan(callback) {
            return speculationHelper(callback, false);
        }
        function setText(newText) {
            text = newText || "";
            len = text.length;
            setTextPos(0);
        }
        function setTextPos(textPos) {
            pos = textPos;
            startPos = textPos;
            tokenPos = textPos;
            token = 0 /* Unknown */;
            precedingLineBreak = false;
        }
        setText(text);
        return {
            getStartPos: function () { return startPos; },
            getTextPos: function () { return pos; },
            getToken: function () { return token; },
            getTokenPos: function () { return tokenPos; },
            getTokenText: function () { return text.substring(tokenPos, pos); },
            getTokenValue: function () { return tokenValue; },
            hasPrecedingLineBreak: function () { return precedingLineBreak; },
            isIdentifier: function () { return token === 64 /* Identifier */ || token > 100 /* LastReservedWord */; },
            isReservedWord: function () { return token >= 65 /* FirstReservedWord */ && token <= 100 /* LastReservedWord */; },
            isUnterminated: function () { return tokenIsUnterminated; },
            reScanGreaterToken: reScanGreaterToken,
            reScanSlashToken: reScanSlashToken,
            reScanTemplateToken: reScanTemplateToken,
            scan: scan,
            setText: setText,
            setTextPos: setTextPos,
            tryScan: tryScan,
            lookAhead: lookAhead
        };
    }
    ts.createScanner = createScanner;
})(ts || (ts = {}));
var ts;
(function (ts) {
    function getDeclarationOfKind(symbol, kind) {
        var declarations = symbol.declarations;
        for (var i = 0; i < declarations.length; i++) {
            var declaration = declarations[i];
            if (declaration.kind === kind) {
                return declaration;
            }
        }
        return undefined;
    }
    ts.getDeclarationOfKind = getDeclarationOfKind;
    var stringWriters = [];
    function getSingleLineStringWriter() {
        if (stringWriters.length == 0) {
            var str = "";
            var writeText = function (text) { return str += text; };
            return {
                string: function () { return str; },
                writeKeyword: writeText,
                writeOperator: writeText,
                writePunctuation: writeText,
                writeSpace: writeText,
                writeStringLiteral: writeText,
                writeParameter: writeText,
                writeSymbol: writeText,
                writeLine: function () { return str += " "; },
                increaseIndent: function () {
                },
                decreaseIndent: function () {
                },
                clear: function () { return str = ""; },
                trackSymbol: function () {
                }
            };
        }
        return stringWriters.pop();
    }
    ts.getSingleLineStringWriter = getSingleLineStringWriter;
    function releaseStringWriter(writer) {
        writer.clear();
        stringWriters.push(writer);
    }
    ts.releaseStringWriter = releaseStringWriter;
    function getFullWidth(node) {
        return node.end - node.pos;
    }
    ts.getFullWidth = getFullWidth;
    function hasFlag(val, flag) {
        return (val & flag) !== 0;
    }
    ts.hasFlag = hasFlag;
    function containsParseError(node) {
        if (!hasFlag(node.parserContextFlags, 32 /* HasPropagatedChildContainsErrorFlag */)) {
            var val = hasFlag(node.parserContextFlags, 16 /* ContainsError */) || ts.forEachChild(node, containsParseError);
            if (val) {
                node.parserContextFlags |= 16 /* ContainsError */;
            }
            node.parserContextFlags |= 32 /* HasPropagatedChildContainsErrorFlag */;
        }
        return hasFlag(node.parserContextFlags, 16 /* ContainsError */);
    }
    ts.containsParseError = containsParseError;
    function getSourceFileOfNode(node) {
        while (node && node.kind !== 207 /* SourceFile */) {
            node = node.parent;
        }
        return node;
    }
    ts.getSourceFileOfNode = getSourceFileOfNode;
    function nodePosToString(node) {
        var file = getSourceFileOfNode(node);
        var loc = file.getLineAndCharacterFromPosition(node.pos);
        return file.filename + "(" + loc.line + "," + loc.character + ")";
    }
    ts.nodePosToString = nodePosToString;
    function getStartPosOfNode(node) {
        return node.pos;
    }
    ts.getStartPosOfNode = getStartPosOfNode;
    function isMissingNode(node) {
        return node.pos === node.end && node.kind !== 1 /* EndOfFileToken */;
    }
    ts.isMissingNode = isMissingNode;
    function getTokenPosOfNode(node, sourceFile) {
        if (isMissingNode(node)) {
            return node.pos;
        }
        return ts.skipTrivia((sourceFile || getSourceFileOfNode(node)).text, node.pos);
    }
    ts.getTokenPosOfNode = getTokenPosOfNode;
    function getSourceTextOfNodeFromSourceFile(sourceFile, node) {
        if (isMissingNode(node)) {
            return "";
        }
        var text = sourceFile.text;
        return text.substring(ts.skipTrivia(text, node.pos), node.end);
    }
    ts.getSourceTextOfNodeFromSourceFile = getSourceTextOfNodeFromSourceFile;
    function getTextOfNodeFromSourceText(sourceText, node) {
        if (isMissingNode(node)) {
            return "";
        }
        return sourceText.substring(ts.skipTrivia(sourceText, node.pos), node.end);
    }
    ts.getTextOfNodeFromSourceText = getTextOfNodeFromSourceText;
    function getTextOfNode(node) {
        return getSourceTextOfNodeFromSourceFile(getSourceFileOfNode(node), node);
    }
    ts.getTextOfNode = getTextOfNode;
    function escapeIdentifier(identifier) {
        return identifier.length >= 2 && identifier.charCodeAt(0) === 95 /* _ */ && identifier.charCodeAt(1) === 95 /* _ */ ? "_" + identifier : identifier;
    }
    ts.escapeIdentifier = escapeIdentifier;
    function unescapeIdentifier(identifier) {
        return identifier.length >= 3 && identifier.charCodeAt(0) === 95 /* _ */ && identifier.charCodeAt(1) === 95 /* _ */ && identifier.charCodeAt(2) === 95 /* _ */ ? identifier.substr(1) : identifier;
    }
    ts.unescapeIdentifier = unescapeIdentifier;
    function declarationNameToString(name) {
        return getFullWidth(name) === 0 ? "(Missing)" : getTextOfNode(name);
    }
    ts.declarationNameToString = declarationNameToString;
    function createDiagnosticForNode(node, message, arg0, arg1, arg2) {
        node = getErrorSpanForNode(node);
        var file = getSourceFileOfNode(node);
        var start = getTokenPosOfNode(node, file);
        var length = node.end - start;
        return ts.createFileDiagnostic(file, start, length, message, arg0, arg1, arg2);
    }
    ts.createDiagnosticForNode = createDiagnosticForNode;
    function createDiagnosticForNodeFromMessageChain(node, messageChain, newLine) {
        node = getErrorSpanForNode(node);
        var file = getSourceFileOfNode(node);
        var start = ts.skipTrivia(file.text, node.pos);
        var length = node.end - start;
        return ts.flattenDiagnosticChain(file, start, length, messageChain, newLine);
    }
    ts.createDiagnosticForNodeFromMessageChain = createDiagnosticForNodeFromMessageChain;
    function getErrorSpanForNode(node) {
        var errorSpan;
        switch (node.kind) {
            case 189 /* VariableDeclaration */:
            case 146 /* BindingElement */:
            case 191 /* ClassDeclaration */:
            case 192 /* InterfaceDeclaration */:
            case 195 /* ModuleDeclaration */:
            case 194 /* EnumDeclaration */:
            case 206 /* EnumMember */:
                errorSpan = node.name;
                break;
        }
        return errorSpan && errorSpan.pos < errorSpan.end ? errorSpan : node;
    }
    ts.getErrorSpanForNode = getErrorSpanForNode;
    function isExternalModule(file) {
        return file.externalModuleIndicator !== undefined;
    }
    ts.isExternalModule = isExternalModule;
    function isDeclarationFile(file) {
        return (file.flags & 1024 /* DeclarationFile */) !== 0;
    }
    ts.isDeclarationFile = isDeclarationFile;
    function isConstEnumDeclaration(node) {
        return node.kind === 194 /* EnumDeclaration */ && isConst(node);
    }
    ts.isConstEnumDeclaration = isConstEnumDeclaration;
    function isConst(node) {
        return !!(node.flags & 4096 /* Const */);
    }
    ts.isConst = isConst;
    function isLet(node) {
        return !!(node.flags & 2048 /* Let */);
    }
    ts.isLet = isLet;
    function isPrologueDirective(node) {
        return node.kind === 172 /* ExpressionStatement */ && node.expression.kind === 8 /* StringLiteral */;
    }
    ts.isPrologueDirective = isPrologueDirective;
    function getLeadingCommentRangesOfNode(node, sourceFileOfNode) {
        sourceFileOfNode = sourceFileOfNode || getSourceFileOfNode(node);
        if (node.kind === 124 /* Parameter */ || node.kind === 123 /* TypeParameter */) {
            return ts.concatenate(ts.getTrailingCommentRanges(sourceFileOfNode.text, node.pos), ts.getLeadingCommentRanges(sourceFileOfNode.text, node.pos));
        }
        else {
            return ts.getLeadingCommentRanges(sourceFileOfNode.text, node.pos);
        }
    }
    ts.getLeadingCommentRangesOfNode = getLeadingCommentRangesOfNode;
    function getJsDocComments(node, sourceFileOfNode) {
        return ts.filter(getLeadingCommentRangesOfNode(node, sourceFileOfNode), isJsDocComment);
        function isJsDocComment(comment) {
            return sourceFileOfNode.text.charCodeAt(comment.pos + 1) === 42 /* asterisk */ && sourceFileOfNode.text.charCodeAt(comment.pos + 2) === 42 /* asterisk */ && sourceFileOfNode.text.charCodeAt(comment.pos + 3) !== 47 /* slash */;
        }
    }
    ts.getJsDocComments = getJsDocComments;
    ts.fullTripleSlashReferencePathRegEx = /^(\/\/\/\s*<reference\s+path\s*=\s*)('|")(.+?)\2.*?\/>/;
    function forEachReturnStatement(body, visitor) {
        return traverse(body);
        function traverse(node) {
            switch (node.kind) {
                case 180 /* ReturnStatement */:
                    return visitor(node);
                case 169 /* Block */:
                case 173 /* IfStatement */:
                case 174 /* DoStatement */:
                case 175 /* WhileStatement */:
                case 176 /* ForStatement */:
                case 177 /* ForInStatement */:
                case 181 /* WithStatement */:
                case 182 /* SwitchStatement */:
                case 200 /* CaseClause */:
                case 201 /* DefaultClause */:
                case 183 /* LabeledStatement */:
                case 185 /* TryStatement */:
                case 186 /* TryBlock */:
                case 203 /* CatchClause */:
                case 187 /* FinallyBlock */:
                    return ts.forEachChild(node, traverse);
            }
        }
    }
    ts.forEachReturnStatement = forEachReturnStatement;
    function isAnyFunction(node) {
        if (node) {
            switch (node.kind) {
                case 129 /* Constructor */:
                case 156 /* FunctionExpression */:
                case 190 /* FunctionDeclaration */:
                case 157 /* ArrowFunction */:
                case 128 /* MethodDeclaration */:
                case 127 /* MethodSignature */:
                case 130 /* GetAccessor */:
                case 131 /* SetAccessor */:
                case 132 /* CallSignature */:
                case 133 /* ConstructSignature */:
                case 134 /* IndexSignature */:
                case 136 /* FunctionType */:
                case 137 /* ConstructorType */:
                case 156 /* FunctionExpression */:
                case 157 /* ArrowFunction */:
                case 190 /* FunctionDeclaration */:
                    return true;
            }
        }
        return false;
    }
    ts.isAnyFunction = isAnyFunction;
    function isFunctionBlock(node) {
        return node && node.kind === 169 /* Block */ && isAnyFunction(node.parent);
    }
    ts.isFunctionBlock = isFunctionBlock;
    function isObjectLiteralMethod(node) {
        return node && node.kind === 128 /* MethodDeclaration */ && node.parent.kind === 148 /* ObjectLiteralExpression */;
    }
    ts.isObjectLiteralMethod = isObjectLiteralMethod;
    function getContainingFunction(node) {
        while (true) {
            node = node.parent;
            if (!node || isAnyFunction(node)) {
                return node;
            }
        }
    }
    ts.getContainingFunction = getContainingFunction;
    function getThisContainer(node, includeArrowFunctions) {
        while (true) {
            node = node.parent;
            if (!node) {
                return undefined;
            }
            switch (node.kind) {
                case 157 /* ArrowFunction */:
                    if (!includeArrowFunctions) {
                        continue;
                    }
                case 190 /* FunctionDeclaration */:
                case 156 /* FunctionExpression */:
                case 195 /* ModuleDeclaration */:
                case 126 /* PropertyDeclaration */:
                case 125 /* PropertySignature */:
                case 128 /* MethodDeclaration */:
                case 127 /* MethodSignature */:
                case 129 /* Constructor */:
                case 130 /* GetAccessor */:
                case 131 /* SetAccessor */:
                case 194 /* EnumDeclaration */:
                case 207 /* SourceFile */:
                    return node;
            }
        }
    }
    ts.getThisContainer = getThisContainer;
    function getSuperContainer(node) {
        while (true) {
            node = node.parent;
            if (!node) {
                return undefined;
            }
            switch (node.kind) {
                case 126 /* PropertyDeclaration */:
                case 125 /* PropertySignature */:
                case 128 /* MethodDeclaration */:
                case 127 /* MethodSignature */:
                case 129 /* Constructor */:
                case 130 /* GetAccessor */:
                case 131 /* SetAccessor */:
                    return node;
            }
        }
    }
    ts.getSuperContainer = getSuperContainer;
    function getInvokedExpression(node) {
        if (node.kind === 153 /* TaggedTemplateExpression */) {
            return node.tag;
        }
        return node.expression;
    }
    ts.getInvokedExpression = getInvokedExpression;
    function isExpression(node) {
        switch (node.kind) {
            case 92 /* ThisKeyword */:
            case 90 /* SuperKeyword */:
            case 88 /* NullKeyword */:
            case 94 /* TrueKeyword */:
            case 79 /* FalseKeyword */:
            case 9 /* RegularExpressionLiteral */:
            case 147 /* ArrayLiteralExpression */:
            case 148 /* ObjectLiteralExpression */:
            case 149 /* PropertyAccessExpression */:
            case 150 /* ElementAccessExpression */:
            case 151 /* CallExpression */:
            case 152 /* NewExpression */:
            case 153 /* TaggedTemplateExpression */:
            case 154 /* TypeAssertionExpression */:
            case 155 /* ParenthesizedExpression */:
            case 156 /* FunctionExpression */:
            case 157 /* ArrowFunction */:
            case 160 /* VoidExpression */:
            case 158 /* DeleteExpression */:
            case 159 /* TypeOfExpression */:
            case 161 /* PrefixUnaryExpression */:
            case 162 /* PostfixUnaryExpression */:
            case 163 /* BinaryExpression */:
            case 164 /* ConditionalExpression */:
            case 165 /* TemplateExpression */:
            case 10 /* NoSubstitutionTemplateLiteral */:
            case 167 /* OmittedExpression */:
                return true;
            case 121 /* QualifiedName */:
                while (node.parent.kind === 121 /* QualifiedName */) {
                    node = node.parent;
                }
                return node.parent.kind === 138 /* TypeQuery */;
            case 64 /* Identifier */:
                if (node.parent.kind === 138 /* TypeQuery */) {
                    return true;
                }
            case 7 /* NumericLiteral */:
            case 8 /* StringLiteral */:
                var parent = node.parent;
                switch (parent.kind) {
                    case 189 /* VariableDeclaration */:
                    case 124 /* Parameter */:
                    case 126 /* PropertyDeclaration */:
                    case 125 /* PropertySignature */:
                    case 206 /* EnumMember */:
                    case 204 /* PropertyAssignment */:
                    case 146 /* BindingElement */:
                        return parent.initializer === node;
                    case 172 /* ExpressionStatement */:
                    case 173 /* IfStatement */:
                    case 174 /* DoStatement */:
                    case 175 /* WhileStatement */:
                    case 180 /* ReturnStatement */:
                    case 181 /* WithStatement */:
                    case 182 /* SwitchStatement */:
                    case 200 /* CaseClause */:
                    case 184 /* ThrowStatement */:
                    case 182 /* SwitchStatement */:
                        return parent.expression === node;
                    case 176 /* ForStatement */:
                        return parent.initializer === node || parent.condition === node || parent.iterator === node;
                    case 177 /* ForInStatement */:
                        return parent.variable === node || parent.expression === node;
                    case 154 /* TypeAssertionExpression */:
                        return node === parent.expression;
                    case 168 /* TemplateSpan */:
                        return node === parent.expression;
                    default:
                        if (isExpression(parent)) {
                            return true;
                        }
                }
        }
        return false;
    }
    ts.isExpression = isExpression;
    function isExternalModuleImportDeclaration(node) {
        return node.kind === 197 /* ImportDeclaration */ && node.moduleReference.kind === 199 /* ExternalModuleReference */;
    }
    ts.isExternalModuleImportDeclaration = isExternalModuleImportDeclaration;
    function getExternalModuleImportDeclarationExpression(node) {
        ts.Debug.assert(isExternalModuleImportDeclaration(node));
        return node.moduleReference.expression;
    }
    ts.getExternalModuleImportDeclarationExpression = getExternalModuleImportDeclarationExpression;
    function isInternalModuleImportDeclaration(node) {
        return node.kind === 197 /* ImportDeclaration */ && node.moduleReference.kind !== 199 /* ExternalModuleReference */;
    }
    ts.isInternalModuleImportDeclaration = isInternalModuleImportDeclaration;
    function hasDotDotDotToken(node) {
        return node && node.kind === 124 /* Parameter */ && node.dotDotDotToken !== undefined;
    }
    ts.hasDotDotDotToken = hasDotDotDotToken;
    function hasQuestionToken(node) {
        if (node) {
            switch (node.kind) {
                case 124 /* Parameter */:
                    return node.questionToken !== undefined;
                case 128 /* MethodDeclaration */:
                case 127 /* MethodSignature */:
                    return node.questionToken !== undefined;
                case 205 /* ShorthandPropertyAssignment */:
                case 204 /* PropertyAssignment */:
                case 126 /* PropertyDeclaration */:
                case 125 /* PropertySignature */:
                    return node.questionToken !== undefined;
            }
        }
        return false;
    }
    ts.hasQuestionToken = hasQuestionToken;
    function hasRestParameters(s) {
        return s.parameters.length > 0 && s.parameters[s.parameters.length - 1].dotDotDotToken !== undefined;
    }
    ts.hasRestParameters = hasRestParameters;
    function isLiteralKind(kind) {
        return 7 /* FirstLiteralToken */ <= kind && kind <= 10 /* LastLiteralToken */;
    }
    ts.isLiteralKind = isLiteralKind;
    function isTextualLiteralKind(kind) {
        return kind === 8 /* StringLiteral */ || kind === 10 /* NoSubstitutionTemplateLiteral */;
    }
    ts.isTextualLiteralKind = isTextualLiteralKind;
    function isTemplateLiteralKind(kind) {
        return 10 /* FirstTemplateToken */ <= kind && kind <= 13 /* LastTemplateToken */;
    }
    ts.isTemplateLiteralKind = isTemplateLiteralKind;
    function isBindingPattern(node) {
        return node.kind === 145 /* ArrayBindingPattern */ || node.kind === 144 /* ObjectBindingPattern */;
    }
    ts.isBindingPattern = isBindingPattern;
    function isInAmbientContext(node) {
        while (node) {
            if (node.flags & (2 /* Ambient */ | 1024 /* DeclarationFile */))
                return true;
            node = node.parent;
        }
        return false;
    }
    ts.isInAmbientContext = isInAmbientContext;
    function isDeclaration(node) {
        switch (node.kind) {
            case 123 /* TypeParameter */:
            case 124 /* Parameter */:
            case 189 /* VariableDeclaration */:
            case 146 /* BindingElement */:
            case 126 /* PropertyDeclaration */:
            case 125 /* PropertySignature */:
            case 204 /* PropertyAssignment */:
            case 205 /* ShorthandPropertyAssignment */:
            case 206 /* EnumMember */:
            case 128 /* MethodDeclaration */:
            case 127 /* MethodSignature */:
            case 190 /* FunctionDeclaration */:
            case 130 /* GetAccessor */:
            case 131 /* SetAccessor */:
            case 129 /* Constructor */:
            case 191 /* ClassDeclaration */:
            case 192 /* InterfaceDeclaration */:
            case 193 /* TypeAliasDeclaration */:
            case 194 /* EnumDeclaration */:
            case 195 /* ModuleDeclaration */:
            case 197 /* ImportDeclaration */:
                return true;
        }
        return false;
    }
    ts.isDeclaration = isDeclaration;
    function isStatement(n) {
        switch (n.kind) {
            case 179 /* BreakStatement */:
            case 178 /* ContinueStatement */:
            case 188 /* DebuggerStatement */:
            case 174 /* DoStatement */:
            case 172 /* ExpressionStatement */:
            case 171 /* EmptyStatement */:
            case 177 /* ForInStatement */:
            case 176 /* ForStatement */:
            case 173 /* IfStatement */:
            case 183 /* LabeledStatement */:
            case 180 /* ReturnStatement */:
            case 182 /* SwitchStatement */:
            case 93 /* ThrowKeyword */:
            case 185 /* TryStatement */:
            case 170 /* VariableStatement */:
            case 175 /* WhileStatement */:
            case 181 /* WithStatement */:
            case 198 /* ExportAssignment */:
                return true;
            default:
                return false;
        }
    }
    ts.isStatement = isStatement;
    function isDeclarationOrFunctionExpressionOrCatchVariableName(name) {
        if (name.kind !== 64 /* Identifier */ && name.kind !== 8 /* StringLiteral */ && name.kind !== 7 /* NumericLiteral */) {
            return false;
        }
        var parent = name.parent;
        if (isDeclaration(parent) || parent.kind === 156 /* FunctionExpression */) {
            return parent.name === name;
        }
        if (parent.kind === 203 /* CatchClause */) {
            return parent.name === name;
        }
        return false;
    }
    ts.isDeclarationOrFunctionExpressionOrCatchVariableName = isDeclarationOrFunctionExpressionOrCatchVariableName;
    function getClassBaseTypeNode(node) {
        var heritageClause = getHeritageClause(node.heritageClauses, 78 /* ExtendsKeyword */);
        return heritageClause && heritageClause.types.length > 0 ? heritageClause.types[0] : undefined;
    }
    ts.getClassBaseTypeNode = getClassBaseTypeNode;
    function getClassImplementedTypeNodes(node) {
        var heritageClause = getHeritageClause(node.heritageClauses, 101 /* ImplementsKeyword */);
        return heritageClause ? heritageClause.types : undefined;
    }
    ts.getClassImplementedTypeNodes = getClassImplementedTypeNodes;
    function getInterfaceBaseTypeNodes(node) {
        var heritageClause = getHeritageClause(node.heritageClauses, 78 /* ExtendsKeyword */);
        return heritageClause ? heritageClause.types : undefined;
    }
    ts.getInterfaceBaseTypeNodes = getInterfaceBaseTypeNodes;
    function getHeritageClause(clauses, kind) {
        if (clauses) {
            for (var i = 0, n = clauses.length; i < n; i++) {
                if (clauses[i].token === kind) {
                    return clauses[i];
                }
            }
        }
        return undefined;
    }
    ts.getHeritageClause = getHeritageClause;
    function tryResolveScriptReference(program, sourceFile, reference) {
        if (!program.getCompilerOptions().noResolve) {
            var referenceFileName = ts.isRootedDiskPath(reference.filename) ? reference.filename : ts.combinePaths(ts.getDirectoryPath(sourceFile.filename), reference.filename);
            referenceFileName = ts.getNormalizedAbsolutePath(referenceFileName, program.getCompilerHost().getCurrentDirectory());
            return program.getSourceFile(referenceFileName);
        }
    }
    ts.tryResolveScriptReference = tryResolveScriptReference;
    function getAncestor(node, kind) {
        switch (kind) {
            case 191 /* ClassDeclaration */:
                while (node) {
                    switch (node.kind) {
                        case 191 /* ClassDeclaration */:
                            return node;
                        case 194 /* EnumDeclaration */:
                        case 192 /* InterfaceDeclaration */:
                        case 193 /* TypeAliasDeclaration */:
                        case 195 /* ModuleDeclaration */:
                        case 197 /* ImportDeclaration */:
                            return undefined;
                        default:
                            node = node.parent;
                            continue;
                    }
                }
                break;
            default:
                while (node) {
                    if (node.kind === kind) {
                        return node;
                    }
                    node = node.parent;
                }
                break;
        }
        return undefined;
    }
    ts.getAncestor = getAncestor;
    function getFileReferenceFromReferencePath(comment, commentRange) {
        var simpleReferenceRegEx = /^\/\/\/\s*<reference\s+/gim;
        var isNoDefaultLibRegEx = /^(\/\/\/\s*<reference\s+no-default-lib\s*=\s*)('|")(.+?)\2\s*\/>/gim;
        if (simpleReferenceRegEx.exec(comment)) {
            if (isNoDefaultLibRegEx.exec(comment)) {
                return {
                    isNoDefaultLib: true
                };
            }
            else {
                var matchResult = ts.fullTripleSlashReferencePathRegEx.exec(comment);
                if (matchResult) {
                    var start = commentRange.pos;
                    var end = commentRange.end;
                    return {
                        fileReference: {
                            pos: start,
                            end: end,
                            filename: matchResult[3]
                        },
                        isNoDefaultLib: false
                    };
                }
                else {
                    return {
                        diagnosticMessage: ts.Diagnostics.Invalid_reference_directive_syntax,
                        isNoDefaultLib: false
                    };
                }
            }
        }
        return undefined;
    }
    ts.getFileReferenceFromReferencePath = getFileReferenceFromReferencePath;
    function isKeyword(token) {
        return 65 /* FirstKeyword */ <= token && token <= 120 /* LastKeyword */;
    }
    ts.isKeyword = isKeyword;
    function isTrivia(token) {
        return 2 /* FirstTriviaToken */ <= token && token <= 6 /* LastTriviaToken */;
    }
    ts.isTrivia = isTrivia;
    function isModifier(token) {
        switch (token) {
            case 107 /* PublicKeyword */:
            case 105 /* PrivateKeyword */:
            case 106 /* ProtectedKeyword */:
            case 108 /* StaticKeyword */:
            case 77 /* ExportKeyword */:
            case 113 /* DeclareKeyword */:
            case 69 /* ConstKeyword */:
                return true;
        }
        return false;
    }
    ts.isModifier = isModifier;
})(ts || (ts = {}));
var ts;
(function (ts) {
    var nodeConstructors = new Array(210 /* Count */);
    function getNodeConstructor(kind) {
        return nodeConstructors[kind] || (nodeConstructors[kind] = ts.objectAllocator.getNodeConstructor(kind));
    }
    ts.getNodeConstructor = getNodeConstructor;
    function createNode(kind) {
        return new (getNodeConstructor(kind))();
    }
    ts.createNode = createNode;
    function forEachChild(node, cbNode, cbNodes) {
        function child(node) {
            if (node) {
                return cbNode(node);
            }
        }
        function children(nodes) {
            if (nodes) {
                if (cbNodes) {
                    return cbNodes(nodes);
                }
                for (var i = 0, len = nodes.length; i < len; i++) {
                    var result = cbNode(nodes[i]);
                    if (result) {
                        return result;
                    }
                }
                return undefined;
            }
        }
        if (!node) {
            return;
        }
        switch (node.kind) {
            case 121 /* QualifiedName */:
                return child(node.left) || child(node.right);
            case 123 /* TypeParameter */:
                return child(node.name) || child(node.constraint);
            case 124 /* Parameter */:
            case 126 /* PropertyDeclaration */:
            case 125 /* PropertySignature */:
            case 204 /* PropertyAssignment */:
            case 205 /* ShorthandPropertyAssignment */:
            case 189 /* VariableDeclaration */:
            case 146 /* BindingElement */:
                return children(node.modifiers) || child(node.propertyName) || child(node.dotDotDotToken) || child(node.name) || child(node.questionToken) || child(node.type) || child(node.initializer);
            case 136 /* FunctionType */:
            case 137 /* ConstructorType */:
            case 132 /* CallSignature */:
            case 133 /* ConstructSignature */:
            case 134 /* IndexSignature */:
                return children(node.modifiers) || children(node.typeParameters) || children(node.parameters) || child(node.type);
            case 128 /* MethodDeclaration */:
            case 127 /* MethodSignature */:
            case 129 /* Constructor */:
            case 130 /* GetAccessor */:
            case 131 /* SetAccessor */:
            case 156 /* FunctionExpression */:
            case 190 /* FunctionDeclaration */:
            case 157 /* ArrowFunction */:
                return children(node.modifiers) || child(node.asteriskToken) || child(node.name) || child(node.questionToken) || children(node.typeParameters) || children(node.parameters) || child(node.type) || child(node.body);
            case 135 /* TypeReference */:
                return child(node.typeName) || children(node.typeArguments);
            case 138 /* TypeQuery */:
                return child(node.exprName);
            case 139 /* TypeLiteral */:
                return children(node.members);
            case 140 /* ArrayType */:
                return child(node.elementType);
            case 141 /* TupleType */:
                return children(node.elementTypes);
            case 142 /* UnionType */:
                return children(node.types);
            case 143 /* ParenthesizedType */:
                return child(node.type);
            case 144 /* ObjectBindingPattern */:
            case 145 /* ArrayBindingPattern */:
                return children(node.elements);
            case 147 /* ArrayLiteralExpression */:
                return children(node.elements);
            case 148 /* ObjectLiteralExpression */:
                return children(node.properties);
            case 149 /* PropertyAccessExpression */:
                return child(node.expression) || child(node.name);
            case 150 /* ElementAccessExpression */:
                return child(node.expression) || child(node.argumentExpression);
            case 151 /* CallExpression */:
            case 152 /* NewExpression */:
                return child(node.expression) || children(node.typeArguments) || children(node.arguments);
            case 153 /* TaggedTemplateExpression */:
                return child(node.tag) || child(node.template);
            case 154 /* TypeAssertionExpression */:
                return child(node.type) || child(node.expression);
            case 155 /* ParenthesizedExpression */:
                return child(node.expression);
            case 158 /* DeleteExpression */:
                return child(node.expression);
            case 159 /* TypeOfExpression */:
                return child(node.expression);
            case 160 /* VoidExpression */:
                return child(node.expression);
            case 161 /* PrefixUnaryExpression */:
                return child(node.operand);
            case 166 /* YieldExpression */:
                return child(node.asteriskToken) || child(node.expression);
            case 162 /* PostfixUnaryExpression */:
                return child(node.operand);
            case 163 /* BinaryExpression */:
                return child(node.left) || child(node.right);
            case 164 /* ConditionalExpression */:
                return child(node.condition) || child(node.whenTrue) || child(node.whenFalse);
            case 169 /* Block */:
            case 186 /* TryBlock */:
            case 187 /* FinallyBlock */:
            case 196 /* ModuleBlock */:
                return children(node.statements);
            case 207 /* SourceFile */:
                return children(node.statements) || child(node.endOfFileToken);
            case 170 /* VariableStatement */:
                return children(node.modifiers) || children(node.declarations);
            case 172 /* ExpressionStatement */:
                return child(node.expression);
            case 173 /* IfStatement */:
                return child(node.expression) || child(node.thenStatement) || child(node.elseStatement);
            case 174 /* DoStatement */:
                return child(node.statement) || child(node.expression);
            case 175 /* WhileStatement */:
                return child(node.expression) || child(node.statement);
            case 176 /* ForStatement */:
                return children(node.declarations) || child(node.initializer) || child(node.condition) || child(node.iterator) || child(node.statement);
            case 177 /* ForInStatement */:
                return children(node.declarations) || child(node.variable) || child(node.expression) || child(node.statement);
            case 178 /* ContinueStatement */:
            case 179 /* BreakStatement */:
                return child(node.label);
            case 180 /* ReturnStatement */:
                return child(node.expression);
            case 181 /* WithStatement */:
                return child(node.expression) || child(node.statement);
            case 182 /* SwitchStatement */:
                return child(node.expression) || children(node.clauses);
            case 200 /* CaseClause */:
                return child(node.expression) || children(node.statements);
            case 201 /* DefaultClause */:
                return children(node.statements);
            case 183 /* LabeledStatement */:
                return child(node.label) || child(node.statement);
            case 184 /* ThrowStatement */:
                return child(node.expression);
            case 185 /* TryStatement */:
                return child(node.tryBlock) || child(node.catchClause) || child(node.finallyBlock);
            case 203 /* CatchClause */:
                return child(node.name) || child(node.type) || child(node.block);
            case 191 /* ClassDeclaration */:
                return children(node.modifiers) || child(node.name) || children(node.typeParameters) || children(node.heritageClauses) || children(node.members);
            case 192 /* InterfaceDeclaration */:
                return children(node.modifiers) || child(node.name) || children(node.typeParameters) || children(node.heritageClauses) || children(node.members);
            case 193 /* TypeAliasDeclaration */:
                return children(node.modifiers) || child(node.name) || child(node.type);
            case 194 /* EnumDeclaration */:
                return children(node.modifiers) || child(node.name) || children(node.members);
            case 206 /* EnumMember */:
                return child(node.name) || child(node.initializer);
            case 195 /* ModuleDeclaration */:
                return children(node.modifiers) || child(node.name) || child(node.body);
            case 197 /* ImportDeclaration */:
                return children(node.modifiers) || child(node.name) || child(node.moduleReference);
            case 198 /* ExportAssignment */:
                return children(node.modifiers) || child(node.exportName);
            case 165 /* TemplateExpression */:
                return child(node.head) || children(node.templateSpans);
            case 168 /* TemplateSpan */:
                return child(node.expression) || child(node.literal);
            case 122 /* ComputedPropertyName */:
                return child(node.expression);
            case 202 /* HeritageClause */:
                return children(node.types);
            case 199 /* ExternalModuleReference */:
                return child(node.expression);
        }
    }
    ts.forEachChild = forEachChild;
    function createCompilerHost(options) {
        var currentDirectory;
        var existingDirectories = {};
        function getCanonicalFileName(fileName) {
            return ts.sys.useCaseSensitiveFileNames ? fileName : fileName.toLowerCase();
        }
        var unsupportedFileEncodingErrorCode = -2147024809;
        function getSourceFile(filename, languageVersion, onError) {
            try {
                var text = ts.sys.readFile(filename, options.charset);
            }
            catch (e) {
                if (onError) {
                    onError(e.number === unsupportedFileEncodingErrorCode ? ts.createCompilerDiagnostic(ts.Diagnostics.Unsupported_file_encoding).messageText : e.message);
                }
                text = "";
            }
            return text !== undefined ? createSourceFile(filename, text, languageVersion) : undefined;
        }
        function writeFile(fileName, data, writeByteOrderMark, onError) {
            function directoryExists(directoryPath) {
                if (ts.hasProperty(existingDirectories, directoryPath)) {
                    return true;
                }
                if (ts.sys.directoryExists(directoryPath)) {
                    existingDirectories[directoryPath] = true;
                    return true;
                }
                return false;
            }
            function ensureDirectoriesExist(directoryPath) {
                if (directoryPath.length > ts.getRootLength(directoryPath) && !directoryExists(directoryPath)) {
                    var parentDirectory = ts.getDirectoryPath(directoryPath);
                    ensureDirectoriesExist(parentDirectory);
                    ts.sys.createDirectory(directoryPath);
                }
            }
            try {
                ensureDirectoriesExist(ts.getDirectoryPath(ts.normalizePath(fileName)));
                ts.sys.writeFile(fileName, data, writeByteOrderMark);
            }
            catch (e) {
                if (onError) {
                    onError(e.message);
                }
            }
        }
        return {
            getSourceFile: getSourceFile,
            getDefaultLibFilename: function (options) { return ts.combinePaths(ts.getDirectoryPath(ts.normalizePath(ts.sys.getExecutingFilePath())), options.target === 2 /* ES6 */ ? "lib.es6.d.ts" : "lib.d.ts"); },
            writeFile: writeFile,
            getCurrentDirectory: function () { return currentDirectory || (currentDirectory = ts.sys.getCurrentDirectory()); },
            useCaseSensitiveFileNames: function () { return ts.sys.useCaseSensitiveFileNames; },
            getCanonicalFileName: getCanonicalFileName,
            getNewLine: function () { return ts.sys.newLine; }
        };
    }
    ts.createCompilerHost = createCompilerHost;
    var ParsingContext;
    (function (ParsingContext) {
        ParsingContext[ParsingContext["SourceElements"] = 0] = "SourceElements";
        ParsingContext[ParsingContext["ModuleElements"] = 1] = "ModuleElements";
        ParsingContext[ParsingContext["BlockStatements"] = 2] = "BlockStatements";
        ParsingContext[ParsingContext["SwitchClauses"] = 3] = "SwitchClauses";
        ParsingContext[ParsingContext["SwitchClauseStatements"] = 4] = "SwitchClauseStatements";
        ParsingContext[ParsingContext["TypeMembers"] = 5] = "TypeMembers";
        ParsingContext[ParsingContext["ClassMembers"] = 6] = "ClassMembers";
        ParsingContext[ParsingContext["EnumMembers"] = 7] = "EnumMembers";
        ParsingContext[ParsingContext["TypeReferences"] = 8] = "TypeReferences";
        ParsingContext[ParsingContext["VariableDeclarations"] = 9] = "VariableDeclarations";
        ParsingContext[ParsingContext["ObjectBindingElements"] = 10] = "ObjectBindingElements";
        ParsingContext[ParsingContext["ArrayBindingElements"] = 11] = "ArrayBindingElements";
        ParsingContext[ParsingContext["ArgumentExpressions"] = 12] = "ArgumentExpressions";
        ParsingContext[ParsingContext["ObjectLiteralMembers"] = 13] = "ObjectLiteralMembers";
        ParsingContext[ParsingContext["ArrayLiteralMembers"] = 14] = "ArrayLiteralMembers";
        ParsingContext[ParsingContext["Parameters"] = 15] = "Parameters";
        ParsingContext[ParsingContext["TypeParameters"] = 16] = "TypeParameters";
        ParsingContext[ParsingContext["TypeArguments"] = 17] = "TypeArguments";
        ParsingContext[ParsingContext["TupleElementTypes"] = 18] = "TupleElementTypes";
        ParsingContext[ParsingContext["HeritageClauses"] = 19] = "HeritageClauses";
        ParsingContext[ParsingContext["Count"] = 20] = "Count";
    })(ParsingContext || (ParsingContext = {}));
    var Tristate;
    (function (Tristate) {
        Tristate[Tristate["False"] = 0] = "False";
        Tristate[Tristate["True"] = 1] = "True";
        Tristate[Tristate["Unknown"] = 2] = "Unknown";
    })(Tristate || (Tristate = {}));
    function parsingContextErrors(context) {
        switch (context) {
            case 0 /* SourceElements */: return ts.Diagnostics.Declaration_or_statement_expected;
            case 1 /* ModuleElements */: return ts.Diagnostics.Declaration_or_statement_expected;
            case 2 /* BlockStatements */: return ts.Diagnostics.Statement_expected;
            case 3 /* SwitchClauses */: return ts.Diagnostics.case_or_default_expected;
            case 4 /* SwitchClauseStatements */: return ts.Diagnostics.Statement_expected;
            case 5 /* TypeMembers */: return ts.Diagnostics.Property_or_signature_expected;
            case 6 /* ClassMembers */: return ts.Diagnostics.Unexpected_token_A_constructor_method_accessor_or_property_was_expected;
            case 7 /* EnumMembers */: return ts.Diagnostics.Enum_member_expected;
            case 8 /* TypeReferences */: return ts.Diagnostics.Type_reference_expected;
            case 9 /* VariableDeclarations */: return ts.Diagnostics.Variable_declaration_expected;
            case 10 /* ObjectBindingElements */: return ts.Diagnostics.Property_destructuring_pattern_expected;
            case 11 /* ArrayBindingElements */: return ts.Diagnostics.Array_element_destructuring_pattern_expected;
            case 12 /* ArgumentExpressions */: return ts.Diagnostics.Argument_expression_expected;
            case 13 /* ObjectLiteralMembers */: return ts.Diagnostics.Property_assignment_expected;
            case 14 /* ArrayLiteralMembers */: return ts.Diagnostics.Expression_or_comma_expected;
            case 15 /* Parameters */: return ts.Diagnostics.Parameter_declaration_expected;
            case 16 /* TypeParameters */: return ts.Diagnostics.Type_parameter_declaration_expected;
            case 17 /* TypeArguments */: return ts.Diagnostics.Type_argument_expected;
            case 18 /* TupleElementTypes */: return ts.Diagnostics.Type_expected;
            case 19 /* HeritageClauses */: return ts.Diagnostics.Unexpected_token_expected;
        }
    }
    ;
    function modifierToFlag(token) {
        switch (token) {
            case 108 /* StaticKeyword */: return 128 /* Static */;
            case 107 /* PublicKeyword */: return 16 /* Public */;
            case 106 /* ProtectedKeyword */: return 64 /* Protected */;
            case 105 /* PrivateKeyword */: return 32 /* Private */;
            case 77 /* ExportKeyword */: return 1 /* Export */;
            case 113 /* DeclareKeyword */: return 2 /* Ambient */;
            case 69 /* ConstKeyword */: return 4096 /* Const */;
        }
        return 0;
    }
    function fixupParentReferences(sourceFile) {
        var parent = sourceFile;
        function walk(n) {
            if (n.parent !== parent) {
                n.parent = parent;
                var saveParent = parent;
                parent = n;
                forEachChild(n, walk);
                parent = saveParent;
            }
        }
        forEachChild(sourceFile, walk);
    }
    function isEvalOrArgumentsIdentifier(node) {
        return node.kind === 64 /* Identifier */ && (node.text === "eval" || node.text === "arguments");
    }
    function isUseStrictPrologueDirective(sourceFile, node) {
        ts.Debug.assert(ts.isPrologueDirective(node));
        var nodeText = ts.getSourceTextOfNodeFromSourceFile(sourceFile, node.expression);
        return nodeText === '"use strict"' || nodeText === "'use strict'";
    }
    function createSourceFile(filename, sourceText, languageVersion, setParentNodes) {
        if (setParentNodes === void 0) { setParentNodes = false; }
        var parsingContext;
        var identifiers = {};
        var identifierCount = 0;
        var nodeCount = 0;
        var lineStarts;
        var contextFlags = 0;
        var parseErrorBeforeNextFinishedNode = false;
        var sourceFile = createNode(207 /* SourceFile */, 0);
        if (ts.fileExtensionIs(filename, ".d.ts")) {
            sourceFile.flags = 1024 /* DeclarationFile */;
        }
        sourceFile.end = sourceText.length;
        sourceFile.filename = ts.normalizePath(filename);
        sourceFile.text = sourceText;
        sourceFile.getLineAndCharacterFromPosition = getLineAndCharacterFromSourcePosition;
        sourceFile.getPositionFromLineAndCharacter = getPositionFromSourceLineAndCharacter;
        sourceFile.getLineStarts = getLineStarts;
        sourceFile.getSyntacticDiagnostics = getSyntacticDiagnostics;
        sourceFile.referenceDiagnostics = [];
        sourceFile.parseDiagnostics = [];
        sourceFile.grammarDiagnostics = [];
        sourceFile.semanticDiagnostics = [];
        processReferenceComments();
        var scanner = ts.createScanner(languageVersion, true, sourceText, scanError);
        var token = nextToken();
        sourceFile.statements = parseList(0 /* SourceElements */, true, parseSourceElement);
        ts.Debug.assert(token === 1 /* EndOfFileToken */);
        sourceFile.endOfFileToken = parseTokenNode();
        sourceFile.externalModuleIndicator = getExternalModuleIndicator();
        sourceFile.nodeCount = nodeCount;
        sourceFile.identifierCount = identifierCount;
        sourceFile.languageVersion = languageVersion;
        sourceFile.identifiers = identifiers;
        if (setParentNodes) {
            fixupParentReferences(sourceFile);
        }
        return sourceFile;
        function setContextFlag(val, flag) {
            if (val) {
                contextFlags |= flag;
            }
            else {
                contextFlags &= ~flag;
            }
        }
        function setStrictModeContext(val) {
            setContextFlag(val, 1 /* StrictMode */);
        }
        function setDisallowInContext(val) {
            setContextFlag(val, 2 /* DisallowIn */);
        }
        function setYieldContext(val) {
            setContextFlag(val, 4 /* Yield */);
        }
        function setGeneratorParameterContext(val) {
            setContextFlag(val, 8 /* GeneratorParameter */);
        }
        function allowInAnd(func) {
            if (contextFlags & 2 /* DisallowIn */) {
                setDisallowInContext(false);
                var result = func();
                setDisallowInContext(true);
                return result;
            }
            return func();
        }
        function disallowInAnd(func) {
            if (contextFlags & 2 /* DisallowIn */) {
                return func();
            }
            setDisallowInContext(true);
            var result = func();
            setDisallowInContext(false);
            return result;
        }
        function doInYieldContext(func) {
            if (contextFlags & 4 /* Yield */) {
                return func();
            }
            setYieldContext(true);
            var result = func();
            setYieldContext(false);
            return result;
        }
        function doOutsideOfYieldContext(func) {
            if (contextFlags & 4 /* Yield */) {
                setYieldContext(false);
                var result = func();
                setYieldContext(true);
                return result;
            }
            return func();
        }
        function inYieldContext() {
            return (contextFlags & 4 /* Yield */) !== 0;
        }
        function inStrictModeContext() {
            return (contextFlags & 1 /* StrictMode */) !== 0;
        }
        function inGeneratorParameterContext() {
            return (contextFlags & 8 /* GeneratorParameter */) !== 0;
        }
        function inDisallowInContext() {
            return (contextFlags & 2 /* DisallowIn */) !== 0;
        }
        function getLineStarts() {
            return lineStarts || (lineStarts = ts.computeLineStarts(sourceText));
        }
        function getLineAndCharacterFromSourcePosition(position) {
            return ts.getLineAndCharacterOfPosition(getLineStarts(), position);
        }
        function getPositionFromSourceLineAndCharacter(line, character) {
            return ts.getPositionFromLineAndCharacter(getLineStarts(), line, character);
        }
        function parseErrorAtCurrentToken(message, arg0) {
            var start = scanner.getTokenPos();
            var length = scanner.getTextPos() - start;
            parseErrorAtPosition(start, length, message, arg0);
        }
        function parseErrorAtPosition(start, length, message, arg0) {
            var lastError = ts.lastOrUndefined(sourceFile.parseDiagnostics);
            if (!lastError || start !== lastError.start) {
                sourceFile.parseDiagnostics.push(ts.createFileDiagnostic(sourceFile, start, length, message, arg0));
            }
            parseErrorBeforeNextFinishedNode = true;
        }
        function scanError(message) {
            var pos = scanner.getTextPos();
            parseErrorAtPosition(pos, 0, message);
        }
        function getNodePos() {
            return scanner.getStartPos();
        }
        function getNodeEnd() {
            return scanner.getStartPos();
        }
        function nextToken() {
            return token = scanner.scan();
        }
        function getTokenPos(pos) {
            return ts.skipTrivia(sourceText, pos);
        }
        function reScanGreaterToken() {
            return token = scanner.reScanGreaterToken();
        }
        function reScanSlashToken() {
            return token = scanner.reScanSlashToken();
        }
        function reScanTemplateToken() {
            return token = scanner.reScanTemplateToken();
        }
        function speculationHelper(callback, isLookAhead) {
            var saveToken = token;
            var saveParseDiagnosticsLength = sourceFile.parseDiagnostics.length;
            var saveParseErrorBeforeNextFinishedNode = parseErrorBeforeNextFinishedNode;
            var saveContextFlags = contextFlags;
            var result = isLookAhead ? scanner.lookAhead(callback) : scanner.tryScan(callback);
            ts.Debug.assert(saveContextFlags === contextFlags);
            if (!result || isLookAhead) {
                token = saveToken;
                sourceFile.parseDiagnostics.length = saveParseDiagnosticsLength;
                parseErrorBeforeNextFinishedNode = saveParseErrorBeforeNextFinishedNode;
            }
            return result;
        }
        function lookAhead(callback) {
            return speculationHelper(callback, true);
        }
        function tryParse(callback) {
            return speculationHelper(callback, false);
        }
        function isIdentifier() {
            if (token === 64 /* Identifier */) {
                return true;
            }
            if (token === 109 /* YieldKeyword */ && inYieldContext()) {
                return false;
            }
            return inStrictModeContext() ? token > 109 /* LastFutureReservedWord */ : token > 100 /* LastReservedWord */;
        }
        function parseExpected(kind, diagnosticMessage, arg0) {
            if (token === kind) {
                nextToken();
                return true;
            }
            if (diagnosticMessage) {
                parseErrorAtCurrentToken(diagnosticMessage, arg0);
            }
            else {
                parseErrorAtCurrentToken(ts.Diagnostics._0_expected, ts.tokenToString(kind));
            }
            return false;
        }
        function parseOptional(t) {
            if (token === t) {
                nextToken();
                return true;
            }
            return false;
        }
        function parseOptionalToken(t) {
            if (token === t) {
                var node = createNode(t);
                nextToken();
                return finishNode(node);
            }
            return undefined;
        }
        function canParseSemicolon() {
            if (token === 22 /* SemicolonToken */) {
                return true;
            }
            return token === 15 /* CloseBraceToken */ || token === 1 /* EndOfFileToken */ || scanner.hasPrecedingLineBreak();
        }
        function parseSemicolon(diagnosticMessage) {
            if (canParseSemicolon()) {
                if (token === 22 /* SemicolonToken */) {
                    nextToken();
                }
                return true;
            }
            else {
                return parseExpected(22 /* SemicolonToken */, diagnosticMessage);
            }
        }
        function createNode(kind, pos) {
            nodeCount++;
            var node = new (nodeConstructors[kind] || (nodeConstructors[kind] = ts.objectAllocator.getNodeConstructor(kind)))();
            if (!(pos >= 0)) {
                pos = scanner.getStartPos();
            }
            node.pos = pos;
            node.end = pos;
            return node;
        }
        function finishNode(node) {
            node.end = scanner.getStartPos();
            if (contextFlags) {
                node.parserContextFlags = contextFlags;
            }
            if (parseErrorBeforeNextFinishedNode) {
                parseErrorBeforeNextFinishedNode = false;
                node.parserContextFlags |= 16 /* ContainsError */;
            }
            return node;
        }
        function createMissingNode(kind, reportAtCurrentPosition, diagnosticMessage, arg0) {
            if (reportAtCurrentPosition) {
                parseErrorAtPosition(scanner.getStartPos(), 0, diagnosticMessage, arg0);
            }
            else {
                parseErrorAtCurrentToken(diagnosticMessage, arg0);
            }
            var result = createNode(kind, scanner.getStartPos());
            result.text = "";
            return finishNode(result);
        }
        function internIdentifier(text) {
            text = ts.escapeIdentifier(text);
            return ts.hasProperty(identifiers, text) ? identifiers[text] : (identifiers[text] = text);
        }
        function createIdentifier(isIdentifier, diagnosticMessage) {
            identifierCount++;
            if (isIdentifier) {
                var node = createNode(64 /* Identifier */);
                node.text = internIdentifier(scanner.getTokenValue());
                nextToken();
                return finishNode(node);
            }
            return createMissingNode(64 /* Identifier */, false, diagnosticMessage || ts.Diagnostics.Identifier_expected);
        }
        function parseIdentifier(diagnosticMessage) {
            return createIdentifier(isIdentifier(), diagnosticMessage);
        }
        function parseIdentifierName() {
            return createIdentifier(isIdentifierOrKeyword());
        }
        function isLiteralPropertyName() {
            return isIdentifierOrKeyword() || token === 8 /* StringLiteral */ || token === 7 /* NumericLiteral */;
        }
        function parsePropertyName() {
            if (token === 8 /* StringLiteral */ || token === 7 /* NumericLiteral */) {
                return parseLiteralNode(true);
            }
            if (token === 18 /* OpenBracketToken */) {
                return parseComputedPropertyName();
            }
            return parseIdentifierName();
        }
        function parseComputedPropertyName() {
            var node = createNode(122 /* ComputedPropertyName */);
            parseExpected(18 /* OpenBracketToken */);
            var yieldContext = inYieldContext();
            if (inGeneratorParameterContext()) {
                setYieldContext(false);
            }
            node.expression = allowInAnd(parseExpression);
            if (inGeneratorParameterContext()) {
                setYieldContext(yieldContext);
            }
            parseExpected(19 /* CloseBracketToken */);
            return finishNode(node);
        }
        function parseContextualModifier(t) {
            return token === t && tryParse(nextTokenCanFollowModifier);
        }
        function nextTokenCanFollowModifier() {
            nextToken();
            return canFollowModifier();
        }
        function parseAnyContextualModifier() {
            return ts.isModifier(token) && tryParse(nextTokenCanFollowContextualModifier);
        }
        function nextTokenCanFollowContextualModifier() {
            if (token === 69 /* ConstKeyword */) {
                return nextToken() === 76 /* EnumKeyword */;
            }
            nextToken();
            return canFollowModifier();
        }
        function canFollowModifier() {
            return token === 18 /* OpenBracketToken */ || token === 35 /* AsteriskToken */ || isLiteralPropertyName();
        }
        function isListElement(kind, inErrorRecovery) {
            switch (kind) {
                case 0 /* SourceElements */:
                case 1 /* ModuleElements */:
                    return isSourceElement(inErrorRecovery);
                case 2 /* BlockStatements */:
                case 4 /* SwitchClauseStatements */:
                    return isStatement(inErrorRecovery);
                case 3 /* SwitchClauses */:
                    return token === 66 /* CaseKeyword */ || token === 72 /* DefaultKeyword */;
                case 5 /* TypeMembers */:
                    return isStartOfTypeMember();
                case 6 /* ClassMembers */:
                    return lookAhead(isClassMemberStart);
                case 7 /* EnumMembers */:
                    return token === 18 /* OpenBracketToken */ || isLiteralPropertyName();
                case 13 /* ObjectLiteralMembers */:
                    return token === 18 /* OpenBracketToken */ || token === 35 /* AsteriskToken */ || isLiteralPropertyName();
                case 10 /* ObjectBindingElements */:
                    return isLiteralPropertyName();
                case 8 /* TypeReferences */:
                    return isIdentifier() && !isNotHeritageClauseTypeName();
                case 9 /* VariableDeclarations */:
                    return isIdentifierOrPattern();
                case 11 /* ArrayBindingElements */:
                    return token === 23 /* CommaToken */ || isIdentifierOrPattern();
                case 16 /* TypeParameters */:
                    return isIdentifier();
                case 12 /* ArgumentExpressions */:
                    return token === 23 /* CommaToken */ || isStartOfExpression();
                case 14 /* ArrayLiteralMembers */:
                    return token === 23 /* CommaToken */ || isStartOfExpression();
                case 15 /* Parameters */:
                    return isStartOfParameter();
                case 17 /* TypeArguments */:
                case 18 /* TupleElementTypes */:
                    return token === 23 /* CommaToken */ || isStartOfType();
                case 19 /* HeritageClauses */:
                    return isHeritageClause();
            }
            ts.Debug.fail("Non-exhaustive case in 'isListElement'.");
        }
        function nextTokenIsIdentifier() {
            nextToken();
            return isIdentifier();
        }
        function isNotHeritageClauseTypeName() {
            if (token === 101 /* ImplementsKeyword */ || token === 78 /* ExtendsKeyword */) {
                return lookAhead(nextTokenIsIdentifier);
            }
            return false;
        }
        function isListTerminator(kind) {
            if (token === 1 /* EndOfFileToken */) {
                return true;
            }
            switch (kind) {
                case 1 /* ModuleElements */:
                case 2 /* BlockStatements */:
                case 3 /* SwitchClauses */:
                case 5 /* TypeMembers */:
                case 6 /* ClassMembers */:
                case 7 /* EnumMembers */:
                case 13 /* ObjectLiteralMembers */:
                case 10 /* ObjectBindingElements */:
                    return token === 15 /* CloseBraceToken */;
                case 4 /* SwitchClauseStatements */:
                    return token === 15 /* CloseBraceToken */ || token === 66 /* CaseKeyword */ || token === 72 /* DefaultKeyword */;
                case 8 /* TypeReferences */:
                    return token === 14 /* OpenBraceToken */ || token === 78 /* ExtendsKeyword */ || token === 101 /* ImplementsKeyword */;
                case 9 /* VariableDeclarations */:
                    return isVariableDeclaratorListTerminator();
                case 16 /* TypeParameters */:
                    return token === 25 /* GreaterThanToken */ || token === 16 /* OpenParenToken */ || token === 14 /* OpenBraceToken */ || token === 78 /* ExtendsKeyword */ || token === 101 /* ImplementsKeyword */;
                case 12 /* ArgumentExpressions */:
                    return token === 17 /* CloseParenToken */ || token === 22 /* SemicolonToken */;
                case 14 /* ArrayLiteralMembers */:
                case 18 /* TupleElementTypes */:
                case 11 /* ArrayBindingElements */:
                    return token === 19 /* CloseBracketToken */;
                case 15 /* Parameters */:
                    return token === 17 /* CloseParenToken */ || token === 19 /* CloseBracketToken */;
                case 17 /* TypeArguments */:
                    return token === 25 /* GreaterThanToken */ || token === 16 /* OpenParenToken */;
                case 19 /* HeritageClauses */:
                    return token === 14 /* OpenBraceToken */ || token === 15 /* CloseBraceToken */;
            }
        }
        function isVariableDeclaratorListTerminator() {
            if (canParseSemicolon()) {
                return true;
            }
            if (token === 85 /* InKeyword */) {
                return true;
            }
            if (token === 32 /* EqualsGreaterThanToken */) {
                return true;
            }
            return false;
        }
        function isInSomeParsingContext() {
            for (var kind = 0; kind < 20 /* Count */; kind++) {
                if (parsingContext & (1 << kind)) {
                    if (isListElement(kind, true) || isListTerminator(kind)) {
                        return true;
                    }
                }
            }
            return false;
        }
        function parseList(kind, checkForStrictMode, parseElement) {
            var saveParsingContext = parsingContext;
            parsingContext |= 1 << kind;
            var result = [];
            result.pos = getNodePos();
            var savedStrictModeContext = inStrictModeContext();
            while (!isListTerminator(kind)) {
                if (isListElement(kind, false)) {
                    var element = parseElement();
                    result.push(element);
                    if (checkForStrictMode && !inStrictModeContext()) {
                        if (ts.isPrologueDirective(element)) {
                            if (isUseStrictPrologueDirective(sourceFile, element)) {
                                setStrictModeContext(true);
                                checkForStrictMode = false;
                            }
                        }
                        else {
                            checkForStrictMode = false;
                        }
                    }
                    continue;
                }
                if (abortParsingListOrMoveToNextToken(kind)) {
                    break;
                }
            }
            setStrictModeContext(savedStrictModeContext);
            result.end = getNodeEnd();
            parsingContext = saveParsingContext;
            return result;
        }
        function abortParsingListOrMoveToNextToken(kind) {
            parseErrorAtCurrentToken(parsingContextErrors(kind));
            if (isInSomeParsingContext()) {
                return true;
            }
            nextToken();
            return false;
        }
        function parseDelimitedList(kind, parseElement) {
            var saveParsingContext = parsingContext;
            parsingContext |= 1 << kind;
            var result = [];
            result.pos = getNodePos();
            var commaStart = -1;
            while (true) {
                if (isListElement(kind, false)) {
                    result.push(parseElement());
                    commaStart = scanner.getTokenPos();
                    if (parseOptional(23 /* CommaToken */)) {
                        continue;
                    }
                    commaStart = -1;
                    if (isListTerminator(kind)) {
                        break;
                    }
                    parseExpected(23 /* CommaToken */);
                    continue;
                }
                if (isListTerminator(kind)) {
                    break;
                }
                if (abortParsingListOrMoveToNextToken(kind)) {
                    break;
                }
            }
            if (commaStart >= 0) {
                result.hasTrailingComma = true;
            }
            result.end = getNodeEnd();
            parsingContext = saveParsingContext;
            return result;
        }
        function createMissingList() {
            var pos = getNodePos();
            var result = [];
            result.pos = pos;
            result.end = pos;
            return result;
        }
        function parseBracketedList(kind, parseElement, open, close) {
            if (parseExpected(open)) {
                var result = parseDelimitedList(kind, parseElement);
                parseExpected(close);
                return result;
            }
            return createMissingList();
        }
        function parseEntityName(allowReservedWords, diagnosticMessage) {
            var entity = parseIdentifier(diagnosticMessage);
            while (parseOptional(20 /* DotToken */)) {
                var node = createNode(121 /* QualifiedName */, entity.pos);
                node.left = entity;
                node.right = parseRightSideOfDot(allowReservedWords);
                entity = finishNode(node);
            }
            return entity;
        }
        function parseRightSideOfDot(allowIdentifierNames) {
            if (scanner.hasPrecedingLineBreak() && scanner.isReservedWord()) {
                var matchesPattern = lookAhead(nextTokenIsIdentifierOrKeywordOnSameLine);
                if (matchesPattern) {
                    return createMissingNode(64 /* Identifier */, true, ts.Diagnostics.Identifier_expected);
                }
            }
            return allowIdentifierNames ? parseIdentifierName() : parseIdentifier();
        }
        function parseTokenNode() {
            var node = createNode(token);
            nextToken();
            return finishNode(node);
        }
        function parseTemplateExpression() {
            var template = createNode(165 /* TemplateExpression */);
            template.head = parseLiteralNode();
            ts.Debug.assert(template.head.kind === 11 /* TemplateHead */, "Template head has wrong token kind");
            var templateSpans = [];
            templateSpans.pos = getNodePos();
            do {
                templateSpans.push(parseTemplateSpan());
            } while (templateSpans[templateSpans.length - 1].literal.kind === 12 /* TemplateMiddle */);
            templateSpans.end = getNodeEnd();
            template.templateSpans = templateSpans;
            return finishNode(template);
        }
        function parseTemplateSpan() {
            var span = createNode(168 /* TemplateSpan */);
            span.expression = allowInAnd(parseExpression);
            var literal;
            if (token === 15 /* CloseBraceToken */) {
                reScanTemplateToken();
                literal = parseLiteralNode();
            }
            else {
                literal = createMissingNode(13 /* TemplateTail */, false, ts.Diagnostics._0_expected, ts.tokenToString(15 /* CloseBraceToken */));
            }
            span.literal = literal;
            return finishNode(span);
        }
        function parseLiteralNode(internName) {
            var node = createNode(token);
            var text = scanner.getTokenValue();
            node.text = internName ? internIdentifier(text) : text;
            if (scanner.isUnterminated()) {
                node.isUnterminated = true;
            }
            var tokenPos = scanner.getTokenPos();
            nextToken();
            finishNode(node);
            if (node.kind === 7 /* NumericLiteral */ && sourceText.charCodeAt(tokenPos) === 48 /* _0 */ && ts.isOctalDigit(sourceText.charCodeAt(tokenPos + 1))) {
                node.flags |= 8192 /* OctalLiteral */;
            }
            return node;
        }
        function parseTypeReference() {
            var node = createNode(135 /* TypeReference */);
            node.typeName = parseEntityName(false, ts.Diagnostics.Type_expected);
            if (!scanner.hasPrecedingLineBreak() && token === 24 /* LessThanToken */) {
                node.typeArguments = parseBracketedList(17 /* TypeArguments */, parseType, 24 /* LessThanToken */, 25 /* GreaterThanToken */);
            }
            return finishNode(node);
        }
        function parseTypeQuery() {
            var node = createNode(138 /* TypeQuery */);
            parseExpected(96 /* TypeOfKeyword */);
            node.exprName = parseEntityName(true);
            return finishNode(node);
        }
        function parseTypeParameter() {
            var node = createNode(123 /* TypeParameter */);
            node.name = parseIdentifier();
            if (parseOptional(78 /* ExtendsKeyword */)) {
                if (isStartOfType() || !isStartOfExpression()) {
                    node.constraint = parseType();
                }
                else {
                    node.expression = parseUnaryExpressionOrHigher();
                }
            }
            return finishNode(node);
        }
        function parseTypeParameters() {
            if (token === 24 /* LessThanToken */) {
                return parseBracketedList(16 /* TypeParameters */, parseTypeParameter, 24 /* LessThanToken */, 25 /* GreaterThanToken */);
            }
        }
        function parseParameterType() {
            if (parseOptional(51 /* ColonToken */)) {
                return token === 8 /* StringLiteral */ ? parseLiteralNode(true) : parseType();
            }
            return undefined;
        }
        function isStartOfParameter() {
            return token === 21 /* DotDotDotToken */ || isIdentifierOrPattern() || ts.isModifier(token);
        }
        function setModifiers(node, modifiers) {
            if (modifiers) {
                node.flags |= modifiers.flags;
                node.modifiers = modifiers;
            }
        }
        function parseParameter() {
            var node = createNode(124 /* Parameter */);
            setModifiers(node, parseModifiers());
            node.dotDotDotToken = parseOptionalToken(21 /* DotDotDotToken */);
            node.name = inGeneratorParameterContext() ? doInYieldContext(parseIdentifierOrPattern) : parseIdentifierOrPattern();
            if (ts.getFullWidth(node.name) === 0 && node.flags === 0 && ts.isModifier(token)) {
                nextToken();
            }
            node.questionToken = parseOptionalToken(50 /* QuestionToken */);
            node.type = parseParameterType();
            node.initializer = inGeneratorParameterContext() ? doOutsideOfYieldContext(parseParameterInitializer) : parseParameterInitializer();
            return finishNode(node);
        }
        function parseParameterInitializer() {
            return parseInitializer(true);
        }
        function fillSignature(returnToken, yieldAndGeneratorParameterContext, requireCompleteParameterList, signature) {
            var returnTokenRequired = returnToken === 32 /* EqualsGreaterThanToken */;
            signature.typeParameters = parseTypeParameters();
            signature.parameters = parseParameterList(yieldAndGeneratorParameterContext, requireCompleteParameterList);
            if (returnTokenRequired) {
                parseExpected(returnToken);
                signature.type = parseType();
            }
            else if (parseOptional(returnToken)) {
                signature.type = parseType();
            }
        }
        function parseParameterList(yieldAndGeneratorParameterContext, requireCompleteParameterList) {
            if (parseExpected(16 /* OpenParenToken */)) {
                var savedYieldContext = inYieldContext();
                var savedGeneratorParameterContext = inGeneratorParameterContext();
                setYieldContext(yieldAndGeneratorParameterContext);
                setGeneratorParameterContext(yieldAndGeneratorParameterContext);
                var result = parseDelimitedList(15 /* Parameters */, parseParameter);
                setYieldContext(savedYieldContext);
                setGeneratorParameterContext(savedGeneratorParameterContext);
                if (!parseExpected(17 /* CloseParenToken */) && requireCompleteParameterList) {
                    return undefined;
                }
                return result;
            }
            return requireCompleteParameterList ? undefined : createMissingList();
        }
        function parseTypeMemberSemicolon() {
            if (parseSemicolon()) {
                return;
            }
            parseOptional(23 /* CommaToken */);
        }
        function parseSignatureMember(kind) {
            var node = createNode(kind);
            if (kind === 133 /* ConstructSignature */) {
                parseExpected(87 /* NewKeyword */);
            }
            fillSignature(51 /* ColonToken */, false, false, node);
            parseTypeMemberSemicolon();
            return finishNode(node);
        }
        function isIndexSignature() {
            if (token !== 18 /* OpenBracketToken */) {
                return false;
            }
            return lookAhead(isUnambiguouslyIndexSignature);
        }
        function isUnambiguouslyIndexSignature() {
            nextToken();
            if (token === 21 /* DotDotDotToken */ || token === 19 /* CloseBracketToken */) {
                return true;
            }
            if (ts.isModifier(token)) {
                nextToken();
                if (isIdentifier()) {
                    return true;
                }
            }
            else if (!isIdentifier()) {
                return false;
            }
            else {
                nextToken();
            }
            if (token === 51 /* ColonToken */ || token === 23 /* CommaToken */) {
                return true;
            }
            if (token !== 50 /* QuestionToken */) {
                return false;
            }
            nextToken();
            return token === 51 /* ColonToken */ || token === 23 /* CommaToken */ || token === 19 /* CloseBracketToken */;
        }
        function parseIndexSignatureDeclaration(fullStart, modifiers) {
            var node = createNode(134 /* IndexSignature */, fullStart);
            setModifiers(node, modifiers);
            node.parameters = parseBracketedList(15 /* Parameters */, parseParameter, 18 /* OpenBracketToken */, 19 /* CloseBracketToken */);
            node.type = parseTypeAnnotation();
            parseTypeMemberSemicolon();
            return finishNode(node);
        }
        function parsePropertyOrMethodSignature() {
            var fullStart = scanner.getStartPos();
            var name = parsePropertyName();
            var questionToken = parseOptionalToken(50 /* QuestionToken */);
            if (token === 16 /* OpenParenToken */ || token === 24 /* LessThanToken */) {
                var method = createNode(127 /* MethodSignature */, fullStart);
                method.name = name;
                method.questionToken = questionToken;
                fillSignature(51 /* ColonToken */, false, false, method);
                parseTypeMemberSemicolon();
                return finishNode(method);
            }
            else {
                var property = createNode(125 /* PropertySignature */, fullStart);
                property.name = name;
                property.questionToken = questionToken;
                property.type = parseTypeAnnotation();
                parseTypeMemberSemicolon();
                return finishNode(property);
            }
        }
        function isStartOfTypeMember() {
            switch (token) {
                case 16 /* OpenParenToken */:
                case 24 /* LessThanToken */:
                case 18 /* OpenBracketToken */:
                    return true;
                default:
                    return isLiteralPropertyName() && lookAhead(isTypeMemberWithLiteralPropertyName);
            }
        }
        function isTypeMemberWithLiteralPropertyName() {
            nextToken();
            return token === 16 /* OpenParenToken */ || token === 24 /* LessThanToken */ || token === 50 /* QuestionToken */ || token === 51 /* ColonToken */ || canParseSemicolon();
        }
        function parseTypeMember() {
            switch (token) {
                case 16 /* OpenParenToken */:
                case 24 /* LessThanToken */:
                    return parseSignatureMember(132 /* CallSignature */);
                case 18 /* OpenBracketToken */:
                    return isIndexSignature() ? parseIndexSignatureDeclaration(scanner.getStartPos(), undefined) : parsePropertyOrMethodSignature();
                case 87 /* NewKeyword */:
                    if (lookAhead(isStartOfConstructSignature)) {
                        return parseSignatureMember(133 /* ConstructSignature */);
                    }
                case 8 /* StringLiteral */:
                case 7 /* NumericLiteral */:
                    return parsePropertyOrMethodSignature();
                default:
                    if (isIdentifierOrKeyword()) {
                        return parsePropertyOrMethodSignature();
                    }
            }
        }
        function isStartOfConstructSignature() {
            nextToken();
            return token === 16 /* OpenParenToken */ || token === 24 /* LessThanToken */;
        }
        function parseTypeLiteral() {
            var node = createNode(139 /* TypeLiteral */);
            node.members = parseObjectTypeMembers();
            return finishNode(node);
        }
        function parseObjectTypeMembers() {
            var members;
            if (parseExpected(14 /* OpenBraceToken */)) {
                members = parseList(5 /* TypeMembers */, false, parseTypeMember);
                parseExpected(15 /* CloseBraceToken */);
            }
            else {
                members = createMissingList();
            }
            return members;
        }
        function parseTupleType() {
            var node = createNode(141 /* TupleType */);
            node.elementTypes = parseBracketedList(18 /* TupleElementTypes */, parseType, 18 /* OpenBracketToken */, 19 /* CloseBracketToken */);
            return finishNode(node);
        }
        function parseParenthesizedType() {
            var node = createNode(143 /* ParenthesizedType */);
            parseExpected(16 /* OpenParenToken */);
            node.type = parseType();
            parseExpected(17 /* CloseParenToken */);
            return finishNode(node);
        }
        function parseFunctionOrConstructorType(kind) {
            var node = createNode(kind);
            if (kind === 137 /* ConstructorType */) {
                parseExpected(87 /* NewKeyword */);
            }
            fillSignature(32 /* EqualsGreaterThanToken */, false, false, node);
            return finishNode(node);
        }
        function parseKeywordAndNoDot() {
            var node = parseTokenNode();
            return token === 20 /* DotToken */ ? undefined : node;
        }
        function parseNonArrayType() {
            switch (token) {
                case 110 /* AnyKeyword */:
                case 119 /* StringKeyword */:
                case 117 /* NumberKeyword */:
                case 111 /* BooleanKeyword */:
                    var node = tryParse(parseKeywordAndNoDot);
                    return node || parseTypeReference();
                case 98 /* VoidKeyword */:
                    return parseTokenNode();
                case 96 /* TypeOfKeyword */:
                    return parseTypeQuery();
                case 14 /* OpenBraceToken */:
                    return parseTypeLiteral();
                case 18 /* OpenBracketToken */:
                    return parseTupleType();
                case 16 /* OpenParenToken */:
                    return parseParenthesizedType();
                default:
                    return parseTypeReference();
            }
        }
        function isStartOfType() {
            switch (token) {
                case 110 /* AnyKeyword */:
                case 119 /* StringKeyword */:
                case 117 /* NumberKeyword */:
                case 111 /* BooleanKeyword */:
                case 98 /* VoidKeyword */:
                case 96 /* TypeOfKeyword */:
                case 14 /* OpenBraceToken */:
                case 18 /* OpenBracketToken */:
                case 24 /* LessThanToken */:
                case 87 /* NewKeyword */:
                    return true;
                case 16 /* OpenParenToken */:
                    return lookAhead(isStartOfParenthesizedOrFunctionType);
                default:
                    return isIdentifier();
            }
        }
        function isStartOfParenthesizedOrFunctionType() {
            nextToken();
            return token === 17 /* CloseParenToken */ || isStartOfParameter() || isStartOfType();
        }
        function parseArrayTypeOrHigher() {
            var type = parseNonArrayType();
            while (!scanner.hasPrecedingLineBreak() && parseOptional(18 /* OpenBracketToken */)) {
                parseExpected(19 /* CloseBracketToken */);
                var node = createNode(140 /* ArrayType */, type.pos);
                node.elementType = type;
                type = finishNode(node);
            }
            return type;
        }
        function parseUnionTypeOrHigher() {
            var type = parseArrayTypeOrHigher();
            if (token === 44 /* BarToken */) {
                var types = [type];
                types.pos = type.pos;
                while (parseOptional(44 /* BarToken */)) {
                    types.push(parseArrayTypeOrHigher());
                }
                types.end = getNodeEnd();
                var node = createNode(142 /* UnionType */, type.pos);
                node.types = types;
                type = finishNode(node);
            }
            return type;
        }
        function isStartOfFunctionType() {
            if (token === 24 /* LessThanToken */) {
                return true;
            }
            return token === 16 /* OpenParenToken */ && lookAhead(isUnambiguouslyStartOfFunctionType);
        }
        function isUnambiguouslyStartOfFunctionType() {
            nextToken();
            if (token === 17 /* CloseParenToken */ || token === 21 /* DotDotDotToken */) {
                return true;
            }
            if (isIdentifier() || ts.isModifier(token)) {
                nextToken();
                if (token === 51 /* ColonToken */ || token === 23 /* CommaToken */ || token === 50 /* QuestionToken */ || token === 52 /* EqualsToken */ || isIdentifier() || ts.isModifier(token)) {
                    return true;
                }
                if (token === 17 /* CloseParenToken */) {
                    nextToken();
                    if (token === 32 /* EqualsGreaterThanToken */) {
                        return true;
                    }
                }
            }
            return false;
        }
        function parseType() {
            var savedYieldContext = inYieldContext();
            var savedGeneratorParameterContext = inGeneratorParameterContext();
            setYieldContext(false);
            setGeneratorParameterContext(false);
            var result = parseTypeWorker();
            setYieldContext(savedYieldContext);
            setGeneratorParameterContext(savedGeneratorParameterContext);
            return result;
        }
        function parseTypeWorker() {
            if (isStartOfFunctionType()) {
                return parseFunctionOrConstructorType(136 /* FunctionType */);
            }
            if (token === 87 /* NewKeyword */) {
                return parseFunctionOrConstructorType(137 /* ConstructorType */);
            }
            return parseUnionTypeOrHigher();
        }
        function parseTypeAnnotation() {
            return parseOptional(51 /* ColonToken */) ? parseType() : undefined;
        }
        function isStartOfExpression() {
            switch (token) {
                case 92 /* ThisKeyword */:
                case 90 /* SuperKeyword */:
                case 88 /* NullKeyword */:
                case 94 /* TrueKeyword */:
                case 79 /* FalseKeyword */:
                case 7 /* NumericLiteral */:
                case 8 /* StringLiteral */:
                case 10 /* NoSubstitutionTemplateLiteral */:
                case 11 /* TemplateHead */:
                case 16 /* OpenParenToken */:
                case 18 /* OpenBracketToken */:
                case 14 /* OpenBraceToken */:
                case 82 /* FunctionKeyword */:
                case 87 /* NewKeyword */:
                case 36 /* SlashToken */:
                case 56 /* SlashEqualsToken */:
                case 33 /* PlusToken */:
                case 34 /* MinusToken */:
                case 47 /* TildeToken */:
                case 46 /* ExclamationToken */:
                case 73 /* DeleteKeyword */:
                case 96 /* TypeOfKeyword */:
                case 98 /* VoidKeyword */:
                case 38 /* PlusPlusToken */:
                case 39 /* MinusMinusToken */:
                case 24 /* LessThanToken */:
                case 64 /* Identifier */:
                case 109 /* YieldKeyword */:
                    return true;
                default:
                    if (isBinaryOperator()) {
                        return true;
                    }
                    return isIdentifier();
            }
        }
        function isStartOfExpressionStatement() {
            return token !== 14 /* OpenBraceToken */ && token !== 82 /* FunctionKeyword */ && isStartOfExpression();
        }
        function parseExpression() {
            var expr = parseAssignmentExpressionOrHigher();
            while (parseOptional(23 /* CommaToken */)) {
                expr = makeBinaryExpression(expr, 23 /* CommaToken */, parseAssignmentExpressionOrHigher());
            }
            return expr;
        }
        function parseInitializer(inParameter) {
            if (token !== 52 /* EqualsToken */) {
                if (scanner.hasPrecedingLineBreak() || (inParameter && token === 14 /* OpenBraceToken */) || !isStartOfExpression()) {
                    return undefined;
                }
            }
            parseExpected(52 /* EqualsToken */);
            return parseAssignmentExpressionOrHigher();
        }
        function parseAssignmentExpressionOrHigher() {
            if (isYieldExpression()) {
                return parseYieldExpression();
            }
            var arrowExpression = tryParseParenthesizedArrowFunctionExpression();
            if (arrowExpression) {
                return arrowExpression;
            }
            var expr = parseBinaryExpressionOrHigher(0);
            if (expr.kind === 64 /* Identifier */ && token === 32 /* EqualsGreaterThanToken */) {
                return parseSimpleArrowFunctionExpression(expr);
            }
            if (isLeftHandSideExpression(expr) && isAssignmentOperator(reScanGreaterToken())) {
                var operator = token;
                nextToken();
                return makeBinaryExpression(expr, operator, parseAssignmentExpressionOrHigher());
            }
            return parseConditionalExpressionRest(expr);
        }
        function isYieldExpression() {
            if (token === 109 /* YieldKeyword */) {
                if (inYieldContext()) {
                    return true;
                }
                if (inStrictModeContext()) {
                    return true;
                }
                return lookAhead(nextTokenIsIdentifierOnSameLine);
            }
            return false;
        }
        function nextTokenIsIdentifierOnSameLine() {
            nextToken();
            return !scanner.hasPrecedingLineBreak() && isIdentifier();
        }
        function parseYieldExpression() {
            var node = createNode(166 /* YieldExpression */);
            nextToken();
            if (!scanner.hasPrecedingLineBreak() && (token === 35 /* AsteriskToken */ || isStartOfExpression())) {
                node.asteriskToken = parseOptionalToken(35 /* AsteriskToken */);
                node.expression = parseAssignmentExpressionOrHigher();
                return finishNode(node);
            }
            else {
                return finishNode(node);
            }
        }
        function parseSimpleArrowFunctionExpression(identifier) {
            ts.Debug.assert(token === 32 /* EqualsGreaterThanToken */, "parseSimpleArrowFunctionExpression should only have been called if we had a =>");
            var node = createNode(157 /* ArrowFunction */, identifier.pos);
            var parameter = createNode(124 /* Parameter */, identifier.pos);
            parameter.name = identifier;
            finishNode(parameter);
            node.parameters = [parameter];
            node.parameters.pos = parameter.pos;
            node.parameters.end = parameter.end;
            parseExpected(32 /* EqualsGreaterThanToken */);
            node.body = parseArrowFunctionExpressionBody();
            return finishNode(node);
        }
        function tryParseParenthesizedArrowFunctionExpression() {
            var triState = isParenthesizedArrowFunctionExpression();
            if (triState === 0 /* False */) {
                return undefined;
            }
            var arrowFunction = triState === 1 /* True */ ? parseParenthesizedArrowFunctionExpressionHead(true) : tryParse(parsePossibleParenthesizedArrowFunctionExpressionHead);
            if (!arrowFunction) {
                return undefined;
            }
            if (parseExpected(32 /* EqualsGreaterThanToken */) || token === 14 /* OpenBraceToken */) {
                arrowFunction.body = parseArrowFunctionExpressionBody();
            }
            else {
                arrowFunction.body = parseIdentifier();
            }
            return finishNode(arrowFunction);
        }
        function isParenthesizedArrowFunctionExpression() {
            if (token === 16 /* OpenParenToken */ || token === 24 /* LessThanToken */) {
                return lookAhead(isParenthesizedArrowFunctionExpressionWorker);
            }
            if (token === 32 /* EqualsGreaterThanToken */) {
                return 1 /* True */;
            }
            return 0 /* False */;
        }
        function isParenthesizedArrowFunctionExpressionWorker() {
            var first = token;
            var second = nextToken();
            if (first === 16 /* OpenParenToken */) {
                if (second === 17 /* CloseParenToken */) {
                    var third = nextToken();
                    switch (third) {
                        case 32 /* EqualsGreaterThanToken */:
                        case 51 /* ColonToken */:
                        case 14 /* OpenBraceToken */:
                            return 1 /* True */;
                        default:
                            return 0 /* False */;
                    }
                }
                if (second === 21 /* DotDotDotToken */) {
                    return 1 /* True */;
                }
                if (!isIdentifier()) {
                    return 0 /* False */;
                }
                if (nextToken() === 51 /* ColonToken */) {
                    return 1 /* True */;
                }
                return 2 /* Unknown */;
            }
            else {
                ts.Debug.assert(first === 24 /* LessThanToken */);
                if (!isIdentifier()) {
                    return 0 /* False */;
                }
                return 2 /* Unknown */;
            }
        }
        function parsePossibleParenthesizedArrowFunctionExpressionHead() {
            return parseParenthesizedArrowFunctionExpressionHead(false);
        }
        function parseParenthesizedArrowFunctionExpressionHead(allowAmbiguity) {
            var node = createNode(157 /* ArrowFunction */);
            fillSignature(51 /* ColonToken */, false, !allowAmbiguity, node);
            if (!node.parameters) {
                return undefined;
            }
            if (!allowAmbiguity && token !== 32 /* EqualsGreaterThanToken */ && token !== 14 /* OpenBraceToken */) {
                return undefined;
            }
            return node;
        }
        function parseArrowFunctionExpressionBody() {
            if (token === 14 /* OpenBraceToken */) {
                return parseFunctionBlock(false, false);
            }
            if (isStatement(true) && !isStartOfExpressionStatement() && token !== 82 /* FunctionKeyword */) {
                return parseFunctionBlock(false, true);
            }
            return parseAssignmentExpressionOrHigher();
        }
        function parseConditionalExpressionRest(leftOperand) {
            if (!parseOptional(50 /* QuestionToken */)) {
                return leftOperand;
            }
            var node = createNode(164 /* ConditionalExpression */, leftOperand.pos);
            node.condition = leftOperand;
            node.whenTrue = allowInAnd(parseAssignmentExpressionOrHigher);
            parseExpected(51 /* ColonToken */);
            node.whenFalse = parseAssignmentExpressionOrHigher();
            return finishNode(node);
        }
        function parseBinaryExpressionOrHigher(precedence) {
            var leftOperand = parseUnaryExpressionOrHigher();
            return parseBinaryExpressionRest(precedence, leftOperand);
        }
        function parseBinaryExpressionRest(precedence, leftOperand) {
            while (true) {
                reScanGreaterToken();
                var newPrecedence = getBinaryOperatorPrecedence();
                if (newPrecedence <= precedence) {
                    break;
                }
                if (token === 85 /* InKeyword */ && inDisallowInContext()) {
                    break;
                }
                var operator = token;
                nextToken();
                leftOperand = makeBinaryExpression(leftOperand, operator, parseBinaryExpressionOrHigher(newPrecedence));
            }
            return leftOperand;
        }
        function isBinaryOperator() {
            if (inDisallowInContext() && token === 85 /* InKeyword */) {
                return false;
            }
            return getBinaryOperatorPrecedence() > 0;
        }
        function getBinaryOperatorPrecedence() {
            switch (token) {
                case 49 /* BarBarToken */:
                    return 1;
                case 48 /* AmpersandAmpersandToken */:
                    return 2;
                case 44 /* BarToken */:
                    return 3;
                case 45 /* CaretToken */:
                    return 4;
                case 43 /* AmpersandToken */:
                    return 5;
                case 28 /* EqualsEqualsToken */:
                case 29 /* ExclamationEqualsToken */:
                case 30 /* EqualsEqualsEqualsToken */:
                case 31 /* ExclamationEqualsEqualsToken */:
                    return 6;
                case 24 /* LessThanToken */:
                case 25 /* GreaterThanToken */:
                case 26 /* LessThanEqualsToken */:
                case 27 /* GreaterThanEqualsToken */:
                case 86 /* InstanceOfKeyword */:
                case 85 /* InKeyword */:
                    return 7;
                case 40 /* LessThanLessThanToken */:
                case 41 /* GreaterThanGreaterThanToken */:
                case 42 /* GreaterThanGreaterThanGreaterThanToken */:
                    return 8;
                case 33 /* PlusToken */:
                case 34 /* MinusToken */:
                    return 9;
                case 35 /* AsteriskToken */:
                case 36 /* SlashToken */:
                case 37 /* PercentToken */:
                    return 10;
            }
            return -1;
        }
        function makeBinaryExpression(left, operator, right) {
            var node = createNode(163 /* BinaryExpression */, left.pos);
            node.left = left;
            node.operator = operator;
            node.right = right;
            return finishNode(node);
        }
        function parsePrefixUnaryExpression() {
            var node = createNode(161 /* PrefixUnaryExpression */);
            node.operator = token;
            nextToken();
            node.operand = parseUnaryExpressionOrHigher();
            return finishNode(node);
        }
        function parseDeleteExpression() {
            var node = createNode(158 /* DeleteExpression */);
            nextToken();
            node.expression = parseUnaryExpressionOrHigher();
            return finishNode(node);
        }
        function parseTypeOfExpression() {
            var node = createNode(159 /* TypeOfExpression */);
            nextToken();
            node.expression = parseUnaryExpressionOrHigher();
            return finishNode(node);
        }
        function parseVoidExpression() {
            var node = createNode(160 /* VoidExpression */);
            nextToken();
            node.expression = parseUnaryExpressionOrHigher();
            return finishNode(node);
        }
        function parseUnaryExpressionOrHigher() {
            switch (token) {
                case 33 /* PlusToken */:
                case 34 /* MinusToken */:
                case 47 /* TildeToken */:
                case 46 /* ExclamationToken */:
                case 38 /* PlusPlusToken */:
                case 39 /* MinusMinusToken */:
                    return parsePrefixUnaryExpression();
                case 73 /* DeleteKeyword */:
                    return parseDeleteExpression();
                case 96 /* TypeOfKeyword */:
                    return parseTypeOfExpression();
                case 98 /* VoidKeyword */:
                    return parseVoidExpression();
                case 24 /* LessThanToken */:
                    return parseTypeAssertion();
                default:
                    return parsePostfixExpressionOrHigher();
            }
        }
        function parsePostfixExpressionOrHigher() {
            var expression = parseLeftHandSideExpressionOrHigher();
            ts.Debug.assert(isLeftHandSideExpression(expression));
            if ((token === 38 /* PlusPlusToken */ || token === 39 /* MinusMinusToken */) && !scanner.hasPrecedingLineBreak()) {
                var node = createNode(162 /* PostfixUnaryExpression */, expression.pos);
                node.operand = expression;
                node.operator = token;
                nextToken();
                return finishNode(node);
            }
            return expression;
        }
        function parseLeftHandSideExpressionOrHigher() {
            var expression = token === 90 /* SuperKeyword */ ? parseSuperExpression() : parseMemberExpressionOrHigher();
            return parseCallExpressionRest(expression);
        }
        function parseMemberExpressionOrHigher() {
            var expression = parsePrimaryExpression();
            return parseMemberExpressionRest(expression);
        }
        function parseSuperExpression() {
            var expression = parseTokenNode();
            if (token === 16 /* OpenParenToken */ || token === 20 /* DotToken */) {
                return expression;
            }
            var node = createNode(149 /* PropertyAccessExpression */, expression.pos);
            node.expression = expression;
            parseExpected(20 /* DotToken */, ts.Diagnostics.super_must_be_followed_by_an_argument_list_or_member_access);
            node.name = parseRightSideOfDot(true);
            return finishNode(node);
        }
        function parseTypeAssertion() {
            var node = createNode(154 /* TypeAssertionExpression */);
            parseExpected(24 /* LessThanToken */);
            node.type = parseType();
            parseExpected(25 /* GreaterThanToken */);
            node.expression = parseUnaryExpressionOrHigher();
            return finishNode(node);
        }
        function parseMemberExpressionRest(expression) {
            while (true) {
                var dotOrBracketStart = scanner.getTokenPos();
                if (parseOptional(20 /* DotToken */)) {
                    var propertyAccess = createNode(149 /* PropertyAccessExpression */, expression.pos);
                    propertyAccess.expression = expression;
                    propertyAccess.name = parseRightSideOfDot(true);
                    expression = finishNode(propertyAccess);
                    continue;
                }
                if (parseOptional(18 /* OpenBracketToken */)) {
                    var indexedAccess = createNode(150 /* ElementAccessExpression */, expression.pos);
                    indexedAccess.expression = expression;
                    if (token !== 19 /* CloseBracketToken */) {
                        indexedAccess.argumentExpression = allowInAnd(parseExpression);
                        if (indexedAccess.argumentExpression.kind === 8 /* StringLiteral */ || indexedAccess.argumentExpression.kind === 7 /* NumericLiteral */) {
                            var literal = indexedAccess.argumentExpression;
                            literal.text = internIdentifier(literal.text);
                        }
                    }
                    parseExpected(19 /* CloseBracketToken */);
                    expression = finishNode(indexedAccess);
                    continue;
                }
                if (token === 10 /* NoSubstitutionTemplateLiteral */ || token === 11 /* TemplateHead */) {
                    var tagExpression = createNode(153 /* TaggedTemplateExpression */, expression.pos);
                    tagExpression.tag = expression;
                    tagExpression.template = token === 10 /* NoSubstitutionTemplateLiteral */ ? parseLiteralNode() : parseTemplateExpression();
                    expression = finishNode(tagExpression);
                    continue;
                }
                return expression;
            }
        }
        function parseCallExpressionRest(expression) {
            while (true) {
                expression = parseMemberExpressionRest(expression);
                if (token === 24 /* LessThanToken */) {
                    var typeArguments = tryParse(parseTypeArgumentsInExpression);
                    if (!typeArguments) {
                        return expression;
                    }
                    var callExpr = createNode(151 /* CallExpression */, expression.pos);
                    callExpr.expression = expression;
                    callExpr.typeArguments = typeArguments;
                    callExpr.arguments = parseArgumentList();
                    expression = finishNode(callExpr);
                    continue;
                }
                else if (token === 16 /* OpenParenToken */) {
                    var callExpr = createNode(151 /* CallExpression */, expression.pos);
                    callExpr.expression = expression;
                    callExpr.arguments = parseArgumentList();
                    expression = finishNode(callExpr);
                    continue;
                }
                return expression;
            }
        }
        function parseArgumentList() {
            parseExpected(16 /* OpenParenToken */);
            var result = parseDelimitedList(12 /* ArgumentExpressions */, parseArgumentExpression);
            parseExpected(17 /* CloseParenToken */);
            return result;
        }
        function parseTypeArgumentsInExpression() {
            if (!parseOptional(24 /* LessThanToken */)) {
                return undefined;
            }
            var typeArguments = parseDelimitedList(17 /* TypeArguments */, parseType);
            if (!parseExpected(25 /* GreaterThanToken */)) {
                return undefined;
            }
            return typeArguments && canFollowTypeArgumentsInExpression() ? typeArguments : undefined;
        }
        function canFollowTypeArgumentsInExpression() {
            switch (token) {
                case 16 /* OpenParenToken */:
                case 20 /* DotToken */:
                case 17 /* CloseParenToken */:
                case 19 /* CloseBracketToken */:
                case 51 /* ColonToken */:
                case 22 /* SemicolonToken */:
                case 23 /* CommaToken */:
                case 50 /* QuestionToken */:
                case 28 /* EqualsEqualsToken */:
                case 30 /* EqualsEqualsEqualsToken */:
                case 29 /* ExclamationEqualsToken */:
                case 31 /* ExclamationEqualsEqualsToken */:
                case 48 /* AmpersandAmpersandToken */:
                case 49 /* BarBarToken */:
                case 45 /* CaretToken */:
                case 43 /* AmpersandToken */:
                case 44 /* BarToken */:
                case 15 /* CloseBraceToken */:
                case 1 /* EndOfFileToken */:
                    return true;
                default:
                    return false;
            }
        }
        function parsePrimaryExpression() {
            switch (token) {
                case 92 /* ThisKeyword */:
                case 90 /* SuperKeyword */:
                case 88 /* NullKeyword */:
                case 94 /* TrueKeyword */:
                case 79 /* FalseKeyword */:
                    return parseTokenNode();
                case 7 /* NumericLiteral */:
                case 8 /* StringLiteral */:
                case 10 /* NoSubstitutionTemplateLiteral */:
                    return parseLiteralNode();
                case 16 /* OpenParenToken */:
                    return parseParenthesizedExpression();
                case 18 /* OpenBracketToken */:
                    return parseArrayLiteralExpression();
                case 14 /* OpenBraceToken */:
                    return parseObjectLiteralExpression();
                case 82 /* FunctionKeyword */:
                    return parseFunctionExpression();
                case 87 /* NewKeyword */:
                    return parseNewExpression();
                case 36 /* SlashToken */:
                case 56 /* SlashEqualsToken */:
                    if (reScanSlashToken() === 9 /* RegularExpressionLiteral */) {
                        return parseLiteralNode();
                    }
                    break;
                case 11 /* TemplateHead */:
                    return parseTemplateExpression();
            }
            return parseIdentifier(ts.Diagnostics.Expression_expected);
        }
        function parseParenthesizedExpression() {
            var node = createNode(155 /* ParenthesizedExpression */);
            parseExpected(16 /* OpenParenToken */);
            node.expression = allowInAnd(parseExpression);
            parseExpected(17 /* CloseParenToken */);
            return finishNode(node);
        }
        function parseAssignmentExpressionOrOmittedExpression() {
            return token === 23 /* CommaToken */ ? createNode(167 /* OmittedExpression */) : parseAssignmentExpressionOrHigher();
        }
        function parseArrayLiteralElement() {
            return parseAssignmentExpressionOrOmittedExpression();
        }
        function parseArgumentExpression() {
            return allowInAnd(parseAssignmentExpressionOrOmittedExpression);
        }
        function parseArrayLiteralExpression() {
            var node = createNode(147 /* ArrayLiteralExpression */);
            parseExpected(18 /* OpenBracketToken */);
            if (scanner.hasPrecedingLineBreak())
                node.flags |= 256 /* MultiLine */;
            node.elements = parseDelimitedList(14 /* ArrayLiteralMembers */, parseArrayLiteralElement);
            parseExpected(19 /* CloseBracketToken */);
            return finishNode(node);
        }
        function parseObjectLiteralElement() {
            var fullStart = scanner.getStartPos();
            var initialToken = token;
            if (parseContextualModifier(114 /* GetKeyword */) || parseContextualModifier(118 /* SetKeyword */)) {
                var kind = initialToken === 114 /* GetKeyword */ ? 130 /* GetAccessor */ : 131 /* SetAccessor */;
                return parseAccessorDeclaration(kind, fullStart, undefined);
            }
            var asteriskToken = parseOptionalToken(35 /* AsteriskToken */);
            var tokenIsIdentifier = isIdentifier();
            var nameToken = token;
            var propertyName = parsePropertyName();
            if (asteriskToken || token === 16 /* OpenParenToken */ || token === 24 /* LessThanToken */) {
                return parseMethodDeclaration(fullStart, undefined, asteriskToken, propertyName, undefined, true);
            }
            var questionToken = parseOptionalToken(50 /* QuestionToken */);
            if ((token === 23 /* CommaToken */ || token === 15 /* CloseBraceToken */) && tokenIsIdentifier) {
                var shorthandDeclaration = createNode(205 /* ShorthandPropertyAssignment */, fullStart);
                shorthandDeclaration.name = propertyName;
                shorthandDeclaration.questionToken = questionToken;
                return finishNode(shorthandDeclaration);
            }
            else {
                var propertyAssignment = createNode(204 /* PropertyAssignment */, fullStart);
                propertyAssignment.name = propertyName;
                propertyAssignment.questionToken = questionToken;
                parseExpected(51 /* ColonToken */);
                propertyAssignment.initializer = allowInAnd(parseAssignmentExpressionOrHigher);
                return finishNode(propertyAssignment);
            }
        }
        function parseObjectLiteralExpression() {
            var node = createNode(148 /* ObjectLiteralExpression */);
            parseExpected(14 /* OpenBraceToken */);
            if (scanner.hasPrecedingLineBreak()) {
                node.flags |= 256 /* MultiLine */;
            }
            node.properties = parseDelimitedList(13 /* ObjectLiteralMembers */, parseObjectLiteralElement);
            parseExpected(15 /* CloseBraceToken */);
            return finishNode(node);
        }
        function parseFunctionExpression() {
            var node = createNode(156 /* FunctionExpression */);
            parseExpected(82 /* FunctionKeyword */);
            node.asteriskToken = parseOptionalToken(35 /* AsteriskToken */);
            node.name = node.asteriskToken ? doInYieldContext(parseOptionalIdentifier) : parseOptionalIdentifier();
            fillSignature(51 /* ColonToken */, !!node.asteriskToken, false, node);
            node.body = parseFunctionBlock(!!node.asteriskToken, false);
            return finishNode(node);
        }
        function parseOptionalIdentifier() {
            return isIdentifier() ? parseIdentifier() : undefined;
        }
        function parseNewExpression() {
            var node = createNode(152 /* NewExpression */);
            parseExpected(87 /* NewKeyword */);
            node.expression = parseMemberExpressionOrHigher();
            node.typeArguments = tryParse(parseTypeArgumentsInExpression);
            if (node.typeArguments || token === 16 /* OpenParenToken */) {
                node.arguments = parseArgumentList();
            }
            return finishNode(node);
        }
        function parseBlock(kind, ignoreMissingOpenBrace, checkForStrictMode) {
            var node = createNode(kind);
            if (parseExpected(14 /* OpenBraceToken */) || ignoreMissingOpenBrace) {
                node.statements = parseList(2 /* BlockStatements */, checkForStrictMode, parseStatement);
                parseExpected(15 /* CloseBraceToken */);
            }
            else {
                node.statements = createMissingList();
            }
            return finishNode(node);
        }
        function parseFunctionBlock(allowYield, ignoreMissingOpenBrace) {
            var savedYieldContext = inYieldContext();
            setYieldContext(allowYield);
            var block = parseBlock(169 /* Block */, ignoreMissingOpenBrace, true);
            setYieldContext(savedYieldContext);
            return block;
        }
        function parseEmptyStatement() {
            var node = createNode(171 /* EmptyStatement */);
            parseExpected(22 /* SemicolonToken */);
            return finishNode(node);
        }
        function parseIfStatement() {
            var node = createNode(173 /* IfStatement */);
            parseExpected(83 /* IfKeyword */);
            parseExpected(16 /* OpenParenToken */);
            node.expression = allowInAnd(parseExpression);
            parseExpected(17 /* CloseParenToken */);
            node.thenStatement = parseStatement();
            node.elseStatement = parseOptional(75 /* ElseKeyword */) ? parseStatement() : undefined;
            return finishNode(node);
        }
        function parseDoStatement() {
            var node = createNode(174 /* DoStatement */);
            parseExpected(74 /* DoKeyword */);
            node.statement = parseStatement();
            parseExpected(99 /* WhileKeyword */);
            parseExpected(16 /* OpenParenToken */);
            node.expression = allowInAnd(parseExpression);
            parseExpected(17 /* CloseParenToken */);
            parseOptional(22 /* SemicolonToken */);
            return finishNode(node);
        }
        function parseWhileStatement() {
            var node = createNode(175 /* WhileStatement */);
            parseExpected(99 /* WhileKeyword */);
            parseExpected(16 /* OpenParenToken */);
            node.expression = allowInAnd(parseExpression);
            parseExpected(17 /* CloseParenToken */);
            node.statement = parseStatement();
            return finishNode(node);
        }
        function parseForOrForInStatement() {
            var pos = getNodePos();
            parseExpected(81 /* ForKeyword */);
            parseExpected(16 /* OpenParenToken */);
            if (token !== 22 /* SemicolonToken */) {
                if (parseOptional(97 /* VarKeyword */)) {
                    var declarations = disallowInAnd(parseVariableDeclarationList);
                }
                else if (parseOptional(103 /* LetKeyword */)) {
                    var declarations = setFlag(disallowInAnd(parseVariableDeclarationList), 2048 /* Let */);
                }
                else if (parseOptional(69 /* ConstKeyword */)) {
                    var declarations = setFlag(disallowInAnd(parseVariableDeclarationList), 4096 /* Const */);
                }
                else {
                    var varOrInit = disallowInAnd(parseExpression);
                }
            }
            var forOrForInStatement;
            if (parseOptional(85 /* InKeyword */)) {
                var forInStatement = createNode(177 /* ForInStatement */, pos);
                if (declarations) {
                    forInStatement.declarations = declarations;
                }
                else {
                    forInStatement.variable = varOrInit;
                }
                forInStatement.expression = allowInAnd(parseExpression);
                parseExpected(17 /* CloseParenToken */);
                forOrForInStatement = forInStatement;
            }
            else {
                var forStatement = createNode(176 /* ForStatement */, pos);
                if (declarations) {
                    forStatement.declarations = declarations;
                }
                if (varOrInit) {
                    forStatement.initializer = varOrInit;
                }
                parseExpected(22 /* SemicolonToken */);
                if (token !== 22 /* SemicolonToken */ && token !== 17 /* CloseParenToken */) {
                    forStatement.condition = allowInAnd(parseExpression);
                }
                parseExpected(22 /* SemicolonToken */);
                if (token !== 17 /* CloseParenToken */) {
                    forStatement.iterator = allowInAnd(parseExpression);
                }
                parseExpected(17 /* CloseParenToken */);
                forOrForInStatement = forStatement;
            }
            forOrForInStatement.statement = parseStatement();
            return finishNode(forOrForInStatement);
        }
        function parseBreakOrContinueStatement(kind) {
            var node = createNode(kind);
            parseExpected(kind === 179 /* BreakStatement */ ? 65 /* BreakKeyword */ : 70 /* ContinueKeyword */);
            if (!canParseSemicolon()) {
                node.label = parseIdentifier();
            }
            parseSemicolon();
            return finishNode(node);
        }
        function parseReturnStatement() {
            var node = createNode(180 /* ReturnStatement */);
            parseExpected(89 /* ReturnKeyword */);
            if (!canParseSemicolon()) {
                node.expression = allowInAnd(parseExpression);
            }
            parseSemicolon();
            return finishNode(node);
        }
        function parseWithStatement() {
            var node = createNode(181 /* WithStatement */);
            parseExpected(100 /* WithKeyword */);
            parseExpected(16 /* OpenParenToken */);
            node.expression = allowInAnd(parseExpression);
            parseExpected(17 /* CloseParenToken */);
            node.statement = parseStatement();
            return finishNode(node);
        }
        function parseCaseClause() {
            var node = createNode(200 /* CaseClause */);
            parseExpected(66 /* CaseKeyword */);
            node.expression = allowInAnd(parseExpression);
            parseExpected(51 /* ColonToken */);
            node.statements = parseList(4 /* SwitchClauseStatements */, false, parseStatement);
            return finishNode(node);
        }
        function parseDefaultClause() {
            var node = createNode(201 /* DefaultClause */);
            parseExpected(72 /* DefaultKeyword */);
            parseExpected(51 /* ColonToken */);
            node.statements = parseList(4 /* SwitchClauseStatements */, false, parseStatement);
            return finishNode(node);
        }
        function parseCaseOrDefaultClause() {
            return token === 66 /* CaseKeyword */ ? parseCaseClause() : parseDefaultClause();
        }
        function parseSwitchStatement() {
            var node = createNode(182 /* SwitchStatement */);
            parseExpected(91 /* SwitchKeyword */);
            parseExpected(16 /* OpenParenToken */);
            node.expression = allowInAnd(parseExpression);
            parseExpected(17 /* CloseParenToken */);
            parseExpected(14 /* OpenBraceToken */);
            node.clauses = parseList(3 /* SwitchClauses */, false, parseCaseOrDefaultClause);
            parseExpected(15 /* CloseBraceToken */);
            return finishNode(node);
        }
        function parseThrowStatement() {
            var node = createNode(184 /* ThrowStatement */);
            parseExpected(93 /* ThrowKeyword */);
            node.expression = scanner.hasPrecedingLineBreak() ? undefined : allowInAnd(parseExpression);
            parseSemicolon();
            return finishNode(node);
        }
        function parseTryStatement() {
            var node = createNode(185 /* TryStatement */);
            node.tryBlock = parseTokenAndBlock(95 /* TryKeyword */);
            node.catchClause = token === 67 /* CatchKeyword */ ? parseCatchClause() : undefined;
            node.finallyBlock = !node.catchClause || token === 80 /* FinallyKeyword */ ? parseTokenAndBlock(80 /* FinallyKeyword */) : undefined;
            return finishNode(node);
        }
        function parseTokenAndBlock(token) {
            var pos = getNodePos();
            parseExpected(token);
            var result = parseBlock(token === 95 /* TryKeyword */ ? 186 /* TryBlock */ : 187 /* FinallyBlock */, false, false);
            result.pos = pos;
            return result;
        }
        function parseCatchClause() {
            var result = createNode(203 /* CatchClause */);
            parseExpected(67 /* CatchKeyword */);
            parseExpected(16 /* OpenParenToken */);
            result.name = parseIdentifier();
            result.type = parseTypeAnnotation();
            parseExpected(17 /* CloseParenToken */);
            result.block = parseBlock(169 /* Block */, false, false);
            return finishNode(result);
        }
        function parseDebuggerStatement() {
            var node = createNode(188 /* DebuggerStatement */);
            parseExpected(71 /* DebuggerKeyword */);
            parseSemicolon();
            return finishNode(node);
        }
        function isLabel() {
            return isIdentifier() && lookAhead(nextTokenIsColonToken);
        }
        function nextTokenIsColonToken() {
            return nextToken() === 51 /* ColonToken */;
        }
        function parseLabeledStatement() {
            var node = createNode(183 /* LabeledStatement */);
            node.label = parseIdentifier();
            parseExpected(51 /* ColonToken */);
            node.statement = parseStatement();
            return finishNode(node);
        }
        function parseExpressionStatement() {
            var node = createNode(172 /* ExpressionStatement */);
            node.expression = allowInAnd(parseExpression);
            parseSemicolon();
            return finishNode(node);
        }
        function isStatement(inErrorRecovery) {
            switch (token) {
                case 22 /* SemicolonToken */:
                    return !inErrorRecovery;
                case 14 /* OpenBraceToken */:
                case 97 /* VarKeyword */:
                case 103 /* LetKeyword */:
                case 82 /* FunctionKeyword */:
                case 83 /* IfKeyword */:
                case 74 /* DoKeyword */:
                case 99 /* WhileKeyword */:
                case 81 /* ForKeyword */:
                case 70 /* ContinueKeyword */:
                case 65 /* BreakKeyword */:
                case 89 /* ReturnKeyword */:
                case 100 /* WithKeyword */:
                case 91 /* SwitchKeyword */:
                case 93 /* ThrowKeyword */:
                case 95 /* TryKeyword */:
                case 71 /* DebuggerKeyword */:
                case 67 /* CatchKeyword */:
                case 80 /* FinallyKeyword */:
                    return true;
                case 69 /* ConstKeyword */:
                    var isConstEnum = lookAhead(nextTokenIsEnumKeyword);
                    return !isConstEnum;
                case 102 /* InterfaceKeyword */:
                case 68 /* ClassKeyword */:
                case 115 /* ModuleKeyword */:
                case 76 /* EnumKeyword */:
                case 120 /* TypeKeyword */:
                    if (isDeclarationStart()) {
                        return false;
                    }
                case 107 /* PublicKeyword */:
                case 105 /* PrivateKeyword */:
                case 106 /* ProtectedKeyword */:
                case 108 /* StaticKeyword */:
                    if (lookAhead(nextTokenIsIdentifierOrKeywordOnSameLine)) {
                        return false;
                    }
                default:
                    return isStartOfExpression();
            }
        }
        function nextTokenIsEnumKeyword() {
            nextToken();
            return token === 76 /* EnumKeyword */;
        }
        function nextTokenIsIdentifierOrKeywordOnSameLine() {
            nextToken();
            return isIdentifierOrKeyword() && !scanner.hasPrecedingLineBreak();
        }
        function parseStatement() {
            switch (token) {
                case 14 /* OpenBraceToken */:
                    return parseBlock(169 /* Block */, false, false);
                case 97 /* VarKeyword */:
                case 69 /* ConstKeyword */:
                    return parseVariableStatement(scanner.getStartPos(), undefined);
                case 82 /* FunctionKeyword */:
                    return parseFunctionDeclaration(scanner.getStartPos(), undefined);
                case 22 /* SemicolonToken */:
                    return parseEmptyStatement();
                case 83 /* IfKeyword */:
                    return parseIfStatement();
                case 74 /* DoKeyword */:
                    return parseDoStatement();
                case 99 /* WhileKeyword */:
                    return parseWhileStatement();
                case 81 /* ForKeyword */:
                    return parseForOrForInStatement();
                case 70 /* ContinueKeyword */:
                    return parseBreakOrContinueStatement(178 /* ContinueStatement */);
                case 65 /* BreakKeyword */:
                    return parseBreakOrContinueStatement(179 /* BreakStatement */);
                case 89 /* ReturnKeyword */:
                    return parseReturnStatement();
                case 100 /* WithKeyword */:
                    return parseWithStatement();
                case 91 /* SwitchKeyword */:
                    return parseSwitchStatement();
                case 93 /* ThrowKeyword */:
                    return parseThrowStatement();
                case 95 /* TryKeyword */:
                case 67 /* CatchKeyword */:
                case 80 /* FinallyKeyword */:
                    return parseTryStatement();
                case 71 /* DebuggerKeyword */:
                    return parseDebuggerStatement();
                case 103 /* LetKeyword */:
                    if (isLetDeclaration()) {
                        return parseVariableStatement(scanner.getStartPos(), undefined);
                    }
                default:
                    return isLabel() ? parseLabeledStatement() : parseExpressionStatement();
            }
        }
        function parseFunctionBlockOrSemicolon(isGenerator) {
            if (token === 14 /* OpenBraceToken */) {
                return parseFunctionBlock(isGenerator, false);
            }
            parseSemicolon(ts.Diagnostics.or_expected);
            return undefined;
        }
        function parseBindingElement(context) {
            if (context === 11 /* ArrayBindingElements */ && token === 23 /* CommaToken */) {
                return createNode(167 /* OmittedExpression */);
            }
            var node = createNode(146 /* BindingElement */);
            if (context === 10 /* ObjectBindingElements */) {
                var id = parsePropertyName();
                if (id.kind === 64 /* Identifier */ && token !== 51 /* ColonToken */) {
                    node.name = id;
                }
                else {
                    parseExpected(51 /* ColonToken */);
                    node.propertyName = id;
                    node.name = parseIdentifierOrPattern();
                }
            }
            else {
                node.name = parseIdentifierOrPattern();
            }
            node.initializer = parseInitializer(false);
            return finishNode(node);
        }
        function parseBindingList(context) {
            return parseDelimitedList(context, function () { return parseBindingElement(context); });
        }
        function parseObjectBindingPattern() {
            var node = createNode(144 /* ObjectBindingPattern */);
            parseExpected(14 /* OpenBraceToken */);
            node.elements = parseBindingList(10 /* ObjectBindingElements */);
            parseExpected(15 /* CloseBraceToken */);
            return finishNode(node);
        }
        function parseArrayBindingPattern() {
            var node = createNode(145 /* ArrayBindingPattern */);
            parseExpected(18 /* OpenBracketToken */);
            node.elements = parseBindingList(11 /* ArrayBindingElements */);
            parseExpected(19 /* CloseBracketToken */);
            return finishNode(node);
        }
        function isIdentifierOrPattern() {
            return token === 14 /* OpenBraceToken */ || token === 18 /* OpenBracketToken */ || isIdentifier();
        }
        function parseIdentifierOrPattern() {
            if (token === 18 /* OpenBracketToken */) {
                return parseArrayBindingPattern();
            }
            if (token === 14 /* OpenBraceToken */) {
                return parseObjectBindingPattern();
            }
            return parseIdentifier();
        }
        function parseVariableDeclaration() {
            var node = createNode(189 /* VariableDeclaration */);
            node.name = parseIdentifierOrPattern();
            node.type = parseTypeAnnotation();
            node.initializer = parseInitializer(false);
            return finishNode(node);
        }
        function setFlag(nodes, flag) {
            for (var i = 0; i < nodes.length; i++) {
                var node = nodes[i];
                node.flags |= flag;
                if (node.name && ts.isBindingPattern(node.name)) {
                    setFlag(node.name.elements, flag);
                }
            }
            return nodes;
        }
        function parseVariableDeclarationList() {
            return parseDelimitedList(9 /* VariableDeclarations */, parseVariableDeclaration);
        }
        function parseVariableStatement(fullStart, modifiers) {
            var node = createNode(170 /* VariableStatement */, fullStart);
            setModifiers(node, modifiers);
            if (token === 103 /* LetKeyword */) {
                node.flags |= 2048 /* Let */;
            }
            else if (token === 69 /* ConstKeyword */) {
                node.flags |= 4096 /* Const */;
            }
            else {
                ts.Debug.assert(token === 97 /* VarKeyword */);
            }
            nextToken();
            node.declarations = allowInAnd(parseVariableDeclarationList);
            setFlag(node.declarations, node.flags);
            parseSemicolon();
            return finishNode(node);
        }
        function parseFunctionDeclaration(fullStart, modifiers) {
            var node = createNode(190 /* FunctionDeclaration */, fullStart);
            setModifiers(node, modifiers);
            parseExpected(82 /* FunctionKeyword */);
            node.asteriskToken = parseOptionalToken(35 /* AsteriskToken */);
            node.name = parseIdentifier();
            fillSignature(51 /* ColonToken */, !!node.asteriskToken, false, node);
            node.body = parseFunctionBlockOrSemicolon(!!node.asteriskToken);
            return finishNode(node);
        }
        function parseConstructorDeclaration(pos, modifiers) {
            var node = createNode(129 /* Constructor */, pos);
            setModifiers(node, modifiers);
            parseExpected(112 /* ConstructorKeyword */);
            fillSignature(51 /* ColonToken */, false, false, node);
            node.body = parseFunctionBlockOrSemicolon(false);
            return finishNode(node);
        }
        function parseMethodDeclaration(fullStart, modifiers, asteriskToken, name, questionToken, requireBlock) {
            var method = createNode(128 /* MethodDeclaration */, fullStart);
            setModifiers(method, modifiers);
            method.asteriskToken = asteriskToken;
            method.name = name;
            method.questionToken = questionToken;
            fillSignature(51 /* ColonToken */, !!asteriskToken, false, method);
            method.body = requireBlock ? parseFunctionBlock(!!asteriskToken, false) : parseFunctionBlockOrSemicolon(!!asteriskToken);
            return finishNode(method);
        }
        function parsePropertyOrMethodDeclaration(fullStart, modifiers) {
            var asteriskToken = parseOptionalToken(35 /* AsteriskToken */);
            var name = parsePropertyName();
            var questionToken = parseOptionalToken(50 /* QuestionToken */);
            if (asteriskToken || token === 16 /* OpenParenToken */ || token === 24 /* LessThanToken */) {
                return parseMethodDeclaration(fullStart, modifiers, asteriskToken, name, questionToken, false);
            }
            else {
                var property = createNode(126 /* PropertyDeclaration */, fullStart);
                setModifiers(property, modifiers);
                property.name = name;
                property.questionToken = questionToken;
                property.type = parseTypeAnnotation();
                property.initializer = allowInAnd(parseNonParameterInitializer);
                parseSemicolon();
                return finishNode(property);
            }
        }
        function parseNonParameterInitializer() {
            return parseInitializer(false);
        }
        function parseAccessorDeclaration(kind, fullStart, modifiers) {
            var node = createNode(kind, fullStart);
            setModifiers(node, modifiers);
            node.name = parsePropertyName();
            fillSignature(51 /* ColonToken */, false, false, node);
            node.body = parseFunctionBlockOrSemicolon(false);
            return finishNode(node);
        }
        function isClassMemberStart() {
            var idToken;
            while (ts.isModifier(token)) {
                idToken = token;
                nextToken();
            }
            if (token === 35 /* AsteriskToken */) {
                return true;
            }
            if (isLiteralPropertyName()) {
                idToken = token;
                nextToken();
            }
            if (token === 18 /* OpenBracketToken */) {
                return true;
            }
            if (idToken !== undefined) {
                if (!ts.isKeyword(idToken) || idToken === 118 /* SetKeyword */ || idToken === 114 /* GetKeyword */) {
                    return true;
                }
                switch (token) {
                    case 16 /* OpenParenToken */:
                    case 24 /* LessThanToken */:
                    case 51 /* ColonToken */:
                    case 52 /* EqualsToken */:
                    case 50 /* QuestionToken */:
                        return true;
                    default:
                        return canParseSemicolon();
                }
            }
            return false;
        }
        function parseModifiers() {
            var flags = 0;
            var modifiers;
            while (true) {
                var modifierStart = scanner.getStartPos();
                var modifierKind = token;
                if (!parseAnyContextualModifier()) {
                    break;
                }
                if (!modifiers) {
                    modifiers = [];
                    modifiers.pos = modifierStart;
                }
                flags |= modifierToFlag(modifierKind);
                modifiers.push(finishNode(createNode(modifierKind, modifierStart)));
            }
            if (modifiers) {
                modifiers.flags = flags;
                modifiers.end = scanner.getStartPos();
            }
            return modifiers;
        }
        function parseClassElement() {
            var fullStart = getNodePos();
            var modifiers = parseModifiers();
            if (parseContextualModifier(114 /* GetKeyword */)) {
                return parseAccessorDeclaration(130 /* GetAccessor */, fullStart, modifiers);
            }
            if (parseContextualModifier(118 /* SetKeyword */)) {
                return parseAccessorDeclaration(131 /* SetAccessor */, fullStart, modifiers);
            }
            if (token === 112 /* ConstructorKeyword */) {
                return parseConstructorDeclaration(fullStart, modifiers);
            }
            if (isIndexSignature()) {
                return parseIndexSignatureDeclaration(fullStart, modifiers);
            }
            if (isIdentifierOrKeyword() || token === 8 /* StringLiteral */ || token === 7 /* NumericLiteral */ || token === 35 /* AsteriskToken */ || token === 18 /* OpenBracketToken */) {
                return parsePropertyOrMethodDeclaration(fullStart, modifiers);
            }
            ts.Debug.fail("Should not have attempted to parse class member declaration.");
        }
        function parseClassDeclaration(fullStart, modifiers) {
            var node = createNode(191 /* ClassDeclaration */, fullStart);
            setModifiers(node, modifiers);
            parseExpected(68 /* ClassKeyword */);
            node.name = parseIdentifier();
            node.typeParameters = parseTypeParameters();
            node.heritageClauses = parseHeritageClauses(true);
            if (parseExpected(14 /* OpenBraceToken */)) {
                node.members = inGeneratorParameterContext() ? doOutsideOfYieldContext(parseClassMembers) : parseClassMembers();
                parseExpected(15 /* CloseBraceToken */);
            }
            else {
                node.members = createMissingList();
            }
            return finishNode(node);
        }
        function parseHeritageClauses(isClassHeritageClause) {
            if (isHeritageClause()) {
                return isClassHeritageClause && inGeneratorParameterContext() ? doOutsideOfYieldContext(parseHeritageClausesWorker) : parseHeritageClausesWorker();
            }
            return undefined;
        }
        function parseHeritageClausesWorker() {
            return parseList(19 /* HeritageClauses */, false, parseHeritageClause);
        }
        function parseHeritageClause() {
            if (token === 78 /* ExtendsKeyword */ || token === 101 /* ImplementsKeyword */) {
                var node = createNode(202 /* HeritageClause */);
                node.token = token;
                nextToken();
                node.types = parseDelimitedList(8 /* TypeReferences */, parseTypeReference);
                return finishNode(node);
            }
            return undefined;
        }
        function isHeritageClause() {
            return token === 78 /* ExtendsKeyword */ || token === 101 /* ImplementsKeyword */;
        }
        function parseClassMembers() {
            return parseList(6 /* ClassMembers */, false, parseClassElement);
        }
        function parseInterfaceDeclaration(fullStart, modifiers) {
            var node = createNode(192 /* InterfaceDeclaration */, fullStart);
            setModifiers(node, modifiers);
            parseExpected(102 /* InterfaceKeyword */);
            node.name = parseIdentifier();
            node.typeParameters = parseTypeParameters();
            node.heritageClauses = parseHeritageClauses(false);
            node.members = parseObjectTypeMembers();
            return finishNode(node);
        }
        function parseTypeAliasDeclaration(fullStart, modifiers) {
            var node = createNode(193 /* TypeAliasDeclaration */, fullStart);
            setModifiers(node, modifiers);
            parseExpected(120 /* TypeKeyword */);
            node.name = parseIdentifier();
            parseExpected(52 /* EqualsToken */);
            node.type = parseType();
            parseSemicolon();
            return finishNode(node);
        }
        function parseEnumMember() {
            var node = createNode(206 /* EnumMember */, scanner.getStartPos());
            node.name = parsePropertyName();
            node.initializer = allowInAnd(parseNonParameterInitializer);
            return finishNode(node);
        }
        function parseEnumDeclaration(fullStart, modifiers) {
            var node = createNode(194 /* EnumDeclaration */, fullStart);
            setModifiers(node, modifiers);
            parseExpected(76 /* EnumKeyword */);
            node.name = parseIdentifier();
            if (parseExpected(14 /* OpenBraceToken */)) {
                node.members = parseDelimitedList(7 /* EnumMembers */, parseEnumMember);
                parseExpected(15 /* CloseBraceToken */);
            }
            else {
                node.members = createMissingList();
            }
            return finishNode(node);
        }
        function parseModuleBlock() {
            var node = createNode(196 /* ModuleBlock */, scanner.getStartPos());
            if (parseExpected(14 /* OpenBraceToken */)) {
                node.statements = parseList(1 /* ModuleElements */, false, parseModuleElement);
                parseExpected(15 /* CloseBraceToken */);
            }
            else {
                node.statements = createMissingList();
            }
            return finishNode(node);
        }
        function parseInternalModuleTail(fullStart, modifiers, flags) {
            var node = createNode(195 /* ModuleDeclaration */, fullStart);
            setModifiers(node, modifiers);
            node.flags |= flags;
            node.name = parseIdentifier();
            node.body = parseOptional(20 /* DotToken */) ? parseInternalModuleTail(getNodePos(), undefined, 1 /* Export */) : parseModuleBlock();
            return finishNode(node);
        }
        function parseAmbientExternalModuleDeclaration(fullStart, modifiers) {
            var node = createNode(195 /* ModuleDeclaration */, fullStart);
            setModifiers(node, modifiers);
            node.name = parseLiteralNode(true);
            node.body = parseModuleBlock();
            return finishNode(node);
        }
        function parseModuleDeclaration(fullStart, modifiers) {
            parseExpected(115 /* ModuleKeyword */);
            return token === 8 /* StringLiteral */ ? parseAmbientExternalModuleDeclaration(fullStart, modifiers) : parseInternalModuleTail(fullStart, modifiers, modifiers ? modifiers.flags : 0);
        }
        function isExternalModuleReference() {
            return token === 116 /* RequireKeyword */ && lookAhead(nextTokenIsOpenParen);
        }
        function nextTokenIsOpenParen() {
            return nextToken() === 16 /* OpenParenToken */;
        }
        function parseImportDeclaration(fullStart, modifiers) {
            var node = createNode(197 /* ImportDeclaration */, fullStart);
            setModifiers(node, modifiers);
            parseExpected(84 /* ImportKeyword */);
            node.name = parseIdentifier();
            parseExpected(52 /* EqualsToken */);
            node.moduleReference = parseModuleReference();
            parseSemicolon();
            return finishNode(node);
        }
        function parseModuleReference() {
            return isExternalModuleReference() ? parseExternalModuleReference() : parseEntityName(false);
        }
        function parseExternalModuleReference() {
            var node = createNode(199 /* ExternalModuleReference */);
            parseExpected(116 /* RequireKeyword */);
            parseExpected(16 /* OpenParenToken */);
            node.expression = parseExpression();
            if (node.expression.kind === 8 /* StringLiteral */) {
                internIdentifier(node.expression.text);
            }
            parseExpected(17 /* CloseParenToken */);
            return finishNode(node);
        }
        function parseExportAssignmentTail(fullStart, modifiers) {
            var node = createNode(198 /* ExportAssignment */, fullStart);
            setModifiers(node, modifiers);
            node.exportName = parseIdentifier();
            parseSemicolon();
            return finishNode(node);
        }
        function isLetDeclaration() {
            return inStrictModeContext() || lookAhead(nextTokenIsIdentifierOnSameLine);
        }
        function isDeclarationStart() {
            switch (token) {
                case 97 /* VarKeyword */:
                case 69 /* ConstKeyword */:
                case 82 /* FunctionKeyword */:
                    return true;
                case 103 /* LetKeyword */:
                    return isLetDeclaration();
                case 68 /* ClassKeyword */:
                case 102 /* InterfaceKeyword */:
                case 76 /* EnumKeyword */:
                case 84 /* ImportKeyword */:
                case 120 /* TypeKeyword */:
                    return lookAhead(nextTokenIsIdentifierOrKeyword);
                case 115 /* ModuleKeyword */:
                    return lookAhead(nextTokenIsIdentifierOrKeywordOrStringLiteral);
                case 77 /* ExportKeyword */:
                    return lookAhead(nextTokenIsEqualsTokenOrDeclarationStart);
                case 113 /* DeclareKeyword */:
                case 107 /* PublicKeyword */:
                case 105 /* PrivateKeyword */:
                case 106 /* ProtectedKeyword */:
                case 108 /* StaticKeyword */:
                    return lookAhead(nextTokenIsDeclarationStart);
            }
        }
        function isIdentifierOrKeyword() {
            return token >= 64 /* Identifier */;
        }
        function nextTokenIsIdentifierOrKeyword() {
            nextToken();
            return isIdentifierOrKeyword();
        }
        function nextTokenIsIdentifierOrKeywordOrStringLiteral() {
            nextToken();
            return isIdentifierOrKeyword() || token === 8 /* StringLiteral */;
        }
        function nextTokenIsEqualsTokenOrDeclarationStart() {
            nextToken();
            return token === 52 /* EqualsToken */ || isDeclarationStart();
        }
        function nextTokenIsDeclarationStart() {
            nextToken();
            return isDeclarationStart();
        }
        function parseDeclaration() {
            var fullStart = getNodePos();
            var modifiers = parseModifiers();
            if (token === 77 /* ExportKeyword */) {
                nextToken();
                if (parseOptional(52 /* EqualsToken */)) {
                    return parseExportAssignmentTail(fullStart, modifiers);
                }
            }
            switch (token) {
                case 97 /* VarKeyword */:
                case 103 /* LetKeyword */:
                case 69 /* ConstKeyword */:
                    return parseVariableStatement(fullStart, modifiers);
                case 82 /* FunctionKeyword */:
                    return parseFunctionDeclaration(fullStart, modifiers);
                case 68 /* ClassKeyword */:
                    return parseClassDeclaration(fullStart, modifiers);
                case 102 /* InterfaceKeyword */:
                    return parseInterfaceDeclaration(fullStart, modifiers);
                case 120 /* TypeKeyword */:
                    return parseTypeAliasDeclaration(fullStart, modifiers);
                case 76 /* EnumKeyword */:
                    return parseEnumDeclaration(fullStart, modifiers);
                case 115 /* ModuleKeyword */:
                    return parseModuleDeclaration(fullStart, modifiers);
                case 84 /* ImportKeyword */:
                    return parseImportDeclaration(fullStart, modifiers);
                default:
                    ts.Debug.fail("Mismatch between isDeclarationStart and parseDeclaration");
            }
        }
        function isSourceElement(inErrorRecovery) {
            return isDeclarationStart() || isStatement(inErrorRecovery);
        }
        function parseSourceElement() {
            return parseSourceElementOrModuleElement();
        }
        function parseModuleElement() {
            return parseSourceElementOrModuleElement();
        }
        function parseSourceElementOrModuleElement() {
            return isDeclarationStart() ? parseDeclaration() : parseStatement();
        }
        function processReferenceComments() {
            var triviaScanner = ts.createScanner(languageVersion, false, sourceText);
            var referencedFiles = [];
            var amdDependencies = [];
            var amdModuleName;
            while (true) {
                var kind = triviaScanner.scan();
                if (kind === 5 /* WhitespaceTrivia */ || kind === 4 /* NewLineTrivia */ || kind === 3 /* MultiLineCommentTrivia */) {
                    continue;
                }
                if (kind !== 2 /* SingleLineCommentTrivia */) {
                    break;
                }
                var range = { pos: triviaScanner.getTokenPos(), end: triviaScanner.getTextPos() };
                var comment = sourceText.substring(range.pos, range.end);
                var referencePathMatchResult = ts.getFileReferenceFromReferencePath(comment, range);
                if (referencePathMatchResult) {
                    var fileReference = referencePathMatchResult.fileReference;
                    sourceFile.hasNoDefaultLib = referencePathMatchResult.isNoDefaultLib;
                    var diagnosticMessage = referencePathMatchResult.diagnosticMessage;
                    if (fileReference) {
                        referencedFiles.push(fileReference);
                    }
                    if (diagnosticMessage) {
                        sourceFile.referenceDiagnostics.push(ts.createFileDiagnostic(sourceFile, range.pos, range.end - range.pos, diagnosticMessage));
                    }
                }
                else {
                    var amdModuleNameRegEx = /^\/\/\/\s*<amd-module\s+name\s*=\s*('|")(.+?)\1/gim;
                    var amdModuleNameMatchResult = amdModuleNameRegEx.exec(comment);
                    if (amdModuleNameMatchResult) {
                        if (amdModuleName) {
                            sourceFile.referenceDiagnostics.push(ts.createFileDiagnostic(sourceFile, range.pos, range.end - range.pos, ts.Diagnostics.An_AMD_module_cannot_have_multiple_name_assignments));
                        }
                        amdModuleName = amdModuleNameMatchResult[2];
                    }
                    var amdDependencyRegEx = /^\/\/\/\s*<amd-dependency\s+path\s*=\s*('|")(.+?)\1/gim;
                    var amdDependencyMatchResult = amdDependencyRegEx.exec(comment);
                    if (amdDependencyMatchResult) {
                        amdDependencies.push(amdDependencyMatchResult[2]);
                    }
                }
            }
            sourceFile.referencedFiles = referencedFiles;
            sourceFile.amdDependencies = amdDependencies;
            sourceFile.amdModuleName = amdModuleName;
        }
        function getExternalModuleIndicator() {
            return ts.forEach(sourceFile.statements, function (node) { return node.flags & 1 /* Export */ || node.kind === 197 /* ImportDeclaration */ && node.moduleReference.kind === 199 /* ExternalModuleReference */ || node.kind === 198 /* ExportAssignment */ ? node : undefined; });
        }
        var syntacticDiagnostics;
        function getSyntacticDiagnostics() {
            if (syntacticDiagnostics === undefined) {
                if (sourceFile.parseDiagnostics.length > 0) {
                    syntacticDiagnostics = sourceFile.referenceDiagnostics.concat(sourceFile.parseDiagnostics);
                }
                else {
                    checkGrammar(sourceText, languageVersion, sourceFile);
                    syntacticDiagnostics = sourceFile.referenceDiagnostics.concat(sourceFile.grammarDiagnostics);
                }
            }
            ts.Debug.assert(syntacticDiagnostics !== undefined);
            return syntacticDiagnostics;
        }
    }
    ts.createSourceFile = createSourceFile;
    function isLeftHandSideExpression(expr) {
        if (expr) {
            switch (expr.kind) {
                case 149 /* PropertyAccessExpression */:
                case 150 /* ElementAccessExpression */:
                case 152 /* NewExpression */:
                case 151 /* CallExpression */:
                case 153 /* TaggedTemplateExpression */:
                case 147 /* ArrayLiteralExpression */:
                case 155 /* ParenthesizedExpression */:
                case 148 /* ObjectLiteralExpression */:
                case 156 /* FunctionExpression */:
                case 64 /* Identifier */:
                case 9 /* RegularExpressionLiteral */:
                case 7 /* NumericLiteral */:
                case 8 /* StringLiteral */:
                case 10 /* NoSubstitutionTemplateLiteral */:
                case 165 /* TemplateExpression */:
                case 79 /* FalseKeyword */:
                case 88 /* NullKeyword */:
                case 92 /* ThisKeyword */:
                case 94 /* TrueKeyword */:
                case 90 /* SuperKeyword */:
                    return true;
            }
        }
        return false;
    }
    function isAssignmentOperator(token) {
        return token >= 52 /* FirstAssignment */ && token <= 63 /* LastAssignment */;
    }
    function checkGrammar(sourceText, languageVersion, file) {
        var grammarDiagnostics = file.grammarDiagnostics;
        var scanner = ts.createScanner(languageVersion, true, sourceText);
        var inAmbientContext = ts.fileExtensionIs(file.filename, ".d.ts");
        var inFunctionBlock = false;
        var parent;
        visitNode(file);
        function visitNode(node) {
            var savedParent = parent;
            node.parent = parent;
            parent = node;
            if (!checkModifiers(node)) {
                var savedInFunctionBlock = inFunctionBlock;
                if (ts.isFunctionBlock(node)) {
                    inFunctionBlock = true;
                }
                var savedInAmbientContext = inAmbientContext;
                if (node.flags & 2 /* Ambient */) {
                    inAmbientContext = true;
                }
                checkNodeAndChildren(node);
                inAmbientContext = savedInAmbientContext;
                inFunctionBlock = savedInFunctionBlock;
            }
            parent = savedParent;
        }
        function checkNodeAndChildren(node) {
            var nodeKind = node.kind;
            if (inAmbientContext && checkForStatementInAmbientContext(node, nodeKind)) {
                return;
            }
            if (checkNode(node, nodeKind)) {
                return;
            }
            forEachChild(node, visitNode);
        }
        function checkNode(node, nodeKind) {
            switch (nodeKind) {
                case 157 /* ArrowFunction */:
                case 132 /* CallSignature */:
                case 137 /* ConstructorType */:
                case 133 /* ConstructSignature */:
                case 136 /* FunctionType */:
                    return checkAnySignatureDeclaration(node);
                case 179 /* BreakStatement */:
                case 178 /* ContinueStatement */:
                    return checkBreakOrContinueStatement(node);
                case 151 /* CallExpression */:
                case 152 /* NewExpression */:
                    return checkCallOrNewExpression(node);
                case 194 /* EnumDeclaration */: return checkEnumDeclaration(node);
                case 163 /* BinaryExpression */: return checkBinaryExpression(node);
                case 146 /* BindingElement */: return checkBindingElement(node);
                case 203 /* CatchClause */: return checkCatchClause(node);
                case 191 /* ClassDeclaration */: return checkClassDeclaration(node);
                case 122 /* ComputedPropertyName */: return checkComputedPropertyName(node);
                case 129 /* Constructor */: return checkConstructor(node);
                case 158 /* DeleteExpression */: return checkDeleteExpression(node);
                case 150 /* ElementAccessExpression */: return checkElementAccessExpression(node);
                case 198 /* ExportAssignment */: return checkExportAssignment(node);
                case 199 /* ExternalModuleReference */: return checkExternalModuleReference(node);
                case 177 /* ForInStatement */: return checkForInStatement(node);
                case 176 /* ForStatement */: return checkForStatement(node);
                case 190 /* FunctionDeclaration */: return checkFunctionDeclaration(node);
                case 156 /* FunctionExpression */: return checkFunctionExpression(node);
                case 130 /* GetAccessor */: return checkGetAccessor(node);
                case 202 /* HeritageClause */: return checkHeritageClause(node);
                case 134 /* IndexSignature */: return checkIndexSignature(node);
                case 192 /* InterfaceDeclaration */: return checkInterfaceDeclaration(node);
                case 183 /* LabeledStatement */: return checkLabeledStatement(node);
                case 204 /* PropertyAssignment */: return checkPropertyAssignment(node);
                case 128 /* MethodDeclaration */:
                case 127 /* MethodSignature */:
                    return checkMethod(node);
                case 195 /* ModuleDeclaration */: return checkModuleDeclaration(node);
                case 148 /* ObjectLiteralExpression */: return checkObjectLiteralExpression(node);
                case 7 /* NumericLiteral */: return checkNumericLiteral(node);
                case 124 /* Parameter */: return checkParameter(node);
                case 162 /* PostfixUnaryExpression */: return checkPostfixUnaryExpression(node);
                case 161 /* PrefixUnaryExpression */: return checkPrefixUnaryExpression(node);
                case 126 /* PropertyDeclaration */:
                case 125 /* PropertySignature */:
                    return checkProperty(node);
                case 180 /* ReturnStatement */: return checkReturnStatement(node);
                case 131 /* SetAccessor */: return checkSetAccessor(node);
                case 207 /* SourceFile */: return checkSourceFile(node);
                case 205 /* ShorthandPropertyAssignment */: return checkShorthandPropertyAssignment(node);
                case 182 /* SwitchStatement */: return checkSwitchStatement(node);
                case 153 /* TaggedTemplateExpression */: return checkTaggedTemplateExpression(node);
                case 184 /* ThrowStatement */: return checkThrowStatement(node);
                case 141 /* TupleType */: return checkTupleType(node);
                case 123 /* TypeParameter */: return checkTypeParameter(node);
                case 135 /* TypeReference */: return checkTypeReference(node);
                case 189 /* VariableDeclaration */: return checkVariableDeclaration(node);
                case 170 /* VariableStatement */: return checkVariableStatement(node);
                case 181 /* WithStatement */: return checkWithStatement(node);
                case 166 /* YieldExpression */: return checkYieldExpression(node);
            }
        }
        function scanToken(pos) {
            var start = ts.skipTrivia(sourceText, pos);
            scanner.setTextPos(start);
            scanner.scan();
            return start;
        }
        function grammarErrorOnFirstToken(node, message, arg0, arg1, arg2) {
            var start = scanToken(node.pos);
            grammarDiagnostics.push(ts.createFileDiagnostic(file, start, scanner.getTextPos() - start, message, arg0, arg1, arg2));
            return true;
        }
        function grammarErrorAfterFirstToken(node, message, arg0, arg1, arg2) {
            scanToken(node.pos);
            grammarDiagnostics.push(ts.createFileDiagnostic(file, scanner.getTextPos(), 0, message, arg0, arg1, arg2));
            return true;
        }
        function grammarErrorOnNode(node, message, arg0, arg1, arg2) {
            var span = ts.getErrorSpanForNode(node);
            var start = span.end > span.pos ? ts.skipTrivia(file.text, span.pos) : span.pos;
            var length = span.end - start;
            grammarDiagnostics.push(ts.createFileDiagnostic(file, start, length, message, arg0, arg1, arg2));
            return true;
        }
        function grammarErrorAtPos(start, length, message, arg0, arg1, arg2) {
            grammarDiagnostics.push(ts.createFileDiagnostic(file, start, length, message, arg0, arg1, arg2));
            return true;
        }
        function reportInvalidUseInStrictMode(node) {
            var name = sourceText.substring(ts.skipTrivia(sourceText, node.pos), node.end);
            return grammarErrorOnNode(node, ts.Diagnostics.Invalid_use_of_0_in_strict_mode, name);
        }
        function checkForStatementInAmbientContext(node, kind) {
            switch (kind) {
                case 169 /* Block */:
                case 171 /* EmptyStatement */:
                case 173 /* IfStatement */:
                case 174 /* DoStatement */:
                case 175 /* WhileStatement */:
                case 176 /* ForStatement */:
                case 177 /* ForInStatement */:
                case 178 /* ContinueStatement */:
                case 179 /* BreakStatement */:
                case 180 /* ReturnStatement */:
                case 181 /* WithStatement */:
                case 182 /* SwitchStatement */:
                case 184 /* ThrowStatement */:
                case 185 /* TryStatement */:
                case 188 /* DebuggerStatement */:
                case 183 /* LabeledStatement */:
                case 172 /* ExpressionStatement */:
                    return grammarErrorOnFirstToken(node, ts.Diagnostics.Statements_are_not_allowed_in_ambient_contexts);
            }
        }
        function checkAnySignatureDeclaration(node) {
            return checkTypeParameterList(node.typeParameters) || checkParameterList(node.parameters);
        }
        function checkBinaryExpression(node) {
            if (node.parserContextFlags & 1 /* StrictMode */) {
                if (isLeftHandSideExpression(node.left) && isAssignmentOperator(node.operator)) {
                    if (isEvalOrArgumentsIdentifier(node.left)) {
                        return reportInvalidUseInStrictMode(node.left);
                    }
                }
            }
        }
        function isIterationStatement(node, lookInLabeledStatements) {
            switch (node.kind) {
                case 176 /* ForStatement */:
                case 177 /* ForInStatement */:
                case 174 /* DoStatement */:
                case 175 /* WhileStatement */:
                    return true;
                case 183 /* LabeledStatement */:
                    return lookInLabeledStatements && isIterationStatement(node.statement, lookInLabeledStatements);
            }
            return false;
        }
        function checkLabeledStatement(node) {
            var current = node.parent;
            while (current) {
                if (ts.isAnyFunction(current)) {
                    break;
                }
                if (current.kind === 183 /* LabeledStatement */ && current.label.text === node.label.text) {
                    return grammarErrorOnNode(node.label, ts.Diagnostics.Duplicate_label_0, ts.getTextOfNodeFromSourceText(sourceText, node.label));
                }
                current = current.parent;
            }
        }
        function checkBreakOrContinueStatement(node) {
            var current = node;
            while (current) {
                if (ts.isAnyFunction(current)) {
                    return grammarErrorOnNode(node, ts.Diagnostics.Jump_target_cannot_cross_function_boundary);
                }
                switch (current.kind) {
                    case 183 /* LabeledStatement */:
                        if (node.label && current.label.text === node.label.text) {
                            var isMisplacedContinueLabel = node.kind === 178 /* ContinueStatement */ && !isIterationStatement(current.statement, true);
                            if (isMisplacedContinueLabel) {
                                return grammarErrorOnNode(node, ts.Diagnostics.A_continue_statement_can_only_jump_to_a_label_of_an_enclosing_iteration_statement);
                            }
                            return false;
                        }
                        break;
                    case 182 /* SwitchStatement */:
                        if (node.kind === 179 /* BreakStatement */ && !node.label) {
                            return false;
                        }
                        break;
                    default:
                        if (isIterationStatement(current, false) && !node.label) {
                            return false;
                        }
                        break;
                }
                current = current.parent;
            }
            if (node.label) {
                var message = node.kind === 179 /* BreakStatement */ ? ts.Diagnostics.A_break_statement_can_only_jump_to_a_label_of_an_enclosing_statement : ts.Diagnostics.A_continue_statement_can_only_jump_to_a_label_of_an_enclosing_iteration_statement;
                return grammarErrorOnNode(node, message);
            }
            else {
                var message = node.kind === 179 /* BreakStatement */ ? ts.Diagnostics.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement : ts.Diagnostics.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement;
                return grammarErrorOnNode(node, message);
            }
        }
        function checkCallOrNewExpression(node) {
            return checkTypeArguments(node.typeArguments) || checkArguments(node.arguments);
        }
        function checkArguments(arguments) {
            return checkForDisallowedTrailingComma(arguments) || checkForOmittedArgument(arguments);
        }
        function checkTypeArguments(typeArguments) {
            return checkForDisallowedTrailingComma(typeArguments) || checkForAtLeastOneTypeArgument(typeArguments);
        }
        function checkForOmittedArgument(arguments) {
            if (arguments) {
                for (var i = 0, n = arguments.length; i < n; i++) {
                    var arg = arguments[i];
                    if (arg.kind === 167 /* OmittedExpression */) {
                        return grammarErrorAtPos(arg.pos, 0, ts.Diagnostics.Argument_expression_expected);
                    }
                }
            }
        }
        function checkForAtLeastOneTypeArgument(typeArguments) {
            if (typeArguments && typeArguments.length === 0) {
                var start = typeArguments.pos - "<".length;
                var end = ts.skipTrivia(sourceText, typeArguments.end) + ">".length;
                return grammarErrorAtPos(start, end - start, ts.Diagnostics.Type_argument_list_cannot_be_empty);
            }
        }
        function checkForDisallowedTrailingComma(list) {
            if (list && list.hasTrailingComma) {
                var start = list.end - ",".length;
                var end = list.end;
                return grammarErrorAtPos(start, end - start, ts.Diagnostics.Trailing_comma_not_allowed);
            }
        }
        function checkCatchClause(node) {
            if (node.type) {
                var colonStart = ts.skipTrivia(sourceText, node.name.end);
                return grammarErrorAtPos(colonStart, ":".length, ts.Diagnostics.Catch_clause_parameter_cannot_have_a_type_annotation);
            }
            if (node.parserContextFlags & 1 /* StrictMode */ && isEvalOrArgumentsIdentifier(node.name)) {
                return reportInvalidUseInStrictMode(node.name);
            }
        }
        function checkClassDeclaration(node) {
            return checkClassDeclarationHeritageClauses(node);
        }
        function checkClassDeclarationHeritageClauses(node) {
            var seenExtendsClause = false;
            var seenImplementsClause = false;
            if (node.heritageClauses) {
                for (var i = 0, n = node.heritageClauses.length; i < n; i++) {
                    ts.Debug.assert(i <= 2);
                    var heritageClause = node.heritageClauses[i];
                    if (heritageClause.token === 78 /* ExtendsKeyword */) {
                        if (seenExtendsClause) {
                            return grammarErrorOnFirstToken(heritageClause, ts.Diagnostics.extends_clause_already_seen);
                        }
                        if (seenImplementsClause) {
                            return grammarErrorOnFirstToken(heritageClause, ts.Diagnostics.extends_clause_must_precede_implements_clause);
                        }
                        if (heritageClause.types.length > 1) {
                            return grammarErrorOnFirstToken(heritageClause.types[1], ts.Diagnostics.Classes_can_only_extend_a_single_class);
                        }
                        seenExtendsClause = true;
                    }
                    else {
                        ts.Debug.assert(heritageClause.token === 101 /* ImplementsKeyword */);
                        if (seenImplementsClause) {
                            return grammarErrorOnFirstToken(heritageClause, ts.Diagnostics.implements_clause_already_seen);
                        }
                        seenImplementsClause = true;
                    }
                }
            }
            return false;
        }
        function checkForAtLeastOneHeritageClause(types, listType) {
            if (types && types.length === 0) {
                return grammarErrorAtPos(types.pos, 0, ts.Diagnostics._0_list_cannot_be_empty, listType);
            }
        }
        function checkConstructor(node) {
            return checkAnySignatureDeclaration(node) || checkConstructorTypeParameters(node) || checkConstructorTypeAnnotation(node) || checkForBodyInAmbientContext(node.body, true);
        }
        function checkConstructorTypeParameters(node) {
            if (node.typeParameters) {
                return grammarErrorAtPos(node.typeParameters.pos, node.typeParameters.end - node.typeParameters.pos, ts.Diagnostics.Type_parameters_cannot_appear_on_a_constructor_declaration);
            }
        }
        function checkConstructorTypeAnnotation(node) {
            if (node.type) {
                return grammarErrorOnNode(node.type, ts.Diagnostics.Type_annotation_cannot_appear_on_a_constructor_declaration);
            }
        }
        function checkDeleteExpression(node) {
            if (node.parserContextFlags & 1 /* StrictMode */ && node.expression.kind === 64 /* Identifier */) {
                return grammarErrorOnNode(node.expression, ts.Diagnostics.delete_cannot_be_called_on_an_identifier_in_strict_mode);
            }
        }
        function checkEnumDeclaration(enumDecl) {
            var enumIsConst = (enumDecl.flags & 4096 /* Const */) !== 0;
            var hasError = false;
            if (!enumIsConst) {
                var inConstantEnumMemberSection = true;
                for (var i = 0, n = enumDecl.members.length; i < n; i++) {
                    var node = enumDecl.members[i];
                    if (node.name.kind === 122 /* ComputedPropertyName */) {
                        hasError = grammarErrorOnNode(node.name, ts.Diagnostics.Computed_property_names_are_not_allowed_in_enums);
                    }
                    else if (inAmbientContext) {
                        if (node.initializer && !isIntegerLiteral(node.initializer)) {
                            hasError = grammarErrorOnNode(node.name, ts.Diagnostics.Ambient_enum_elements_can_only_have_integer_literal_initializers) || hasError;
                        }
                    }
                    else if (node.initializer) {
                        inConstantEnumMemberSection = isIntegerLiteral(node.initializer);
                    }
                    else if (!inConstantEnumMemberSection) {
                        hasError = grammarErrorOnNode(node.name, ts.Diagnostics.Enum_member_must_have_initializer) || hasError;
                    }
                }
            }
            return hasError;
        }
        function isIntegerLiteral(expression) {
            function isInteger(literalExpression) {
                return /^[0-9]+([eE]\+?[0-9]+)?$/.test(literalExpression.text);
            }
            if (expression.kind === 161 /* PrefixUnaryExpression */) {
                var unaryExpression = expression;
                if (unaryExpression.operator === 33 /* PlusToken */ || unaryExpression.operator === 34 /* MinusToken */) {
                    expression = unaryExpression.operand;
                }
            }
            if (expression.kind === 7 /* NumericLiteral */) {
                return isInteger(expression);
            }
            return false;
        }
        function checkExportAssignment(node) {
            if (node.flags & 243 /* Modifier */) {
                return grammarErrorOnFirstToken(node, ts.Diagnostics.An_export_assignment_cannot_have_modifiers);
            }
        }
        function checkExternalModuleReference(node) {
            if (node.expression.kind !== 8 /* StringLiteral */) {
                return grammarErrorOnNode(node.expression, ts.Diagnostics.String_literal_expected);
            }
        }
        function checkForInStatement(node) {
            return checkVariableDeclarations(node.declarations) || checkForMoreThanOneDeclaration(node.declarations);
        }
        function checkForStatement(node) {
            return checkVariableDeclarations(node.declarations);
        }
        function checkForMoreThanOneDeclaration(declarations) {
            if (declarations && declarations.length > 1) {
                return grammarErrorOnFirstToken(declarations[1], ts.Diagnostics.Only_a_single_variable_declaration_is_allowed_in_a_for_in_statement);
            }
        }
        function checkFunctionDeclaration(node) {
            return checkAnySignatureDeclaration(node) || checkFunctionName(node.name) || checkForBodyInAmbientContext(node.body, false) || checkForGenerator(node);
        }
        function checkForGenerator(node) {
            if (node.asteriskToken) {
                return grammarErrorOnNode(node.asteriskToken, ts.Diagnostics.Generators_are_not_currently_supported);
            }
        }
        function checkFunctionExpression(node) {
            return checkAnySignatureDeclaration(node) || checkFunctionName(node.name) || checkForGenerator(node);
        }
        function checkFunctionName(name) {
            if (name && name.parserContextFlags & 1 /* StrictMode */ && isEvalOrArgumentsIdentifier(name)) {
                return reportInvalidUseInStrictMode(name);
            }
        }
        function checkGetAccessor(node) {
            return checkAnySignatureDeclaration(node) || checkAccessor(node);
        }
        function checkElementAccessExpression(node) {
            if (!node.argumentExpression) {
                if (node.parent.kind === 152 /* NewExpression */ && node.parent.expression === node) {
                    var start = ts.skipTrivia(sourceText, node.expression.end);
                    var end = node.end;
                    return grammarErrorAtPos(start, end - start, ts.Diagnostics.new_T_cannot_be_used_to_create_an_array_Use_new_Array_T_instead);
                }
                else {
                    var start = node.end - "]".length;
                    var end = node.end;
                    return grammarErrorAtPos(start, end - start, ts.Diagnostics.Expression_expected);
                }
            }
        }
        function checkHeritageClause(node) {
            return checkForDisallowedTrailingComma(node.types) || checkForAtLeastOneHeritageClause(node.types, ts.tokenToString(node.token));
        }
        function checkIndexSignature(node) {
            return checkIndexSignatureParameters(node) || checkForIndexSignatureModifiers(node);
        }
        function checkForIndexSignatureModifiers(node) {
            if (node.flags & 243 /* Modifier */) {
                return grammarErrorOnFirstToken(node, ts.Diagnostics.Modifiers_not_permitted_on_index_signature_members);
            }
        }
        function checkIndexSignatureParameters(node) {
            var parameter = node.parameters[0];
            if (node.parameters.length !== 1) {
                if (parameter) {
                    return grammarErrorOnNode(parameter.name, ts.Diagnostics.An_index_signature_must_have_exactly_one_parameter);
                }
                else {
                    return grammarErrorOnNode(node, ts.Diagnostics.An_index_signature_must_have_exactly_one_parameter);
                }
            }
            else if (parameter.dotDotDotToken) {
                return grammarErrorOnNode(parameter.dotDotDotToken, ts.Diagnostics.An_index_signature_cannot_have_a_rest_parameter);
            }
            else if (parameter.flags & 243 /* Modifier */) {
                return grammarErrorOnNode(parameter.name, ts.Diagnostics.An_index_signature_parameter_cannot_have_an_accessibility_modifier);
            }
            else if (parameter.questionToken) {
                return grammarErrorOnNode(parameter.questionToken, ts.Diagnostics.An_index_signature_parameter_cannot_have_a_question_mark);
            }
            else if (parameter.initializer) {
                return grammarErrorOnNode(parameter.name, ts.Diagnostics.An_index_signature_parameter_cannot_have_an_initializer);
            }
            else if (!parameter.type) {
                return grammarErrorOnNode(parameter.name, ts.Diagnostics.An_index_signature_parameter_must_have_a_type_annotation);
            }
            else if (parameter.type.kind !== 119 /* StringKeyword */ && parameter.type.kind !== 117 /* NumberKeyword */) {
                return grammarErrorOnNode(parameter.name, ts.Diagnostics.An_index_signature_parameter_type_must_be_string_or_number);
            }
            else if (!node.type) {
                return grammarErrorOnNode(node, ts.Diagnostics.An_index_signature_must_have_a_type_annotation);
            }
        }
        function checkInterfaceDeclaration(node) {
            return checkInterfaceDeclarationHeritageClauses(node);
        }
        function checkInterfaceDeclarationHeritageClauses(node) {
            var seenExtendsClause = false;
            if (node.heritageClauses) {
                for (var i = 0, n = node.heritageClauses.length; i < n; i++) {
                    ts.Debug.assert(i <= 1);
                    var heritageClause = node.heritageClauses[i];
                    if (heritageClause.token === 78 /* ExtendsKeyword */) {
                        if (seenExtendsClause) {
                            return grammarErrorOnFirstToken(heritageClause, ts.Diagnostics.extends_clause_already_seen);
                        }
                        seenExtendsClause = true;
                    }
                    else {
                        ts.Debug.assert(heritageClause.token === 101 /* ImplementsKeyword */);
                        return grammarErrorOnFirstToken(heritageClause, ts.Diagnostics.Interface_declaration_cannot_have_implements_clause);
                    }
                }
            }
            return false;
        }
        function checkMethod(node) {
            if (checkAnySignatureDeclaration(node) || checkForBodyInAmbientContext(node.body, false) || checkForGenerator(node)) {
                return true;
            }
            if (node.parent.kind === 191 /* ClassDeclaration */) {
                if (checkForInvalidQuestionMark(node, node.questionToken, ts.Diagnostics.A_class_member_cannot_be_declared_optional)) {
                    return true;
                }
                if (inAmbientContext) {
                    return checkForDisallowedComputedProperty(node.name, ts.Diagnostics.Computed_property_names_are_not_allowed_in_an_ambient_context);
                }
                else if (!node.body) {
                    return checkForDisallowedComputedProperty(node.name, ts.Diagnostics.Computed_property_names_are_not_allowed_in_method_overloads);
                }
            }
            else if (node.parent.kind === 192 /* InterfaceDeclaration */) {
                return checkForDisallowedComputedProperty(node.name, ts.Diagnostics.Computed_property_names_are_not_allowed_in_interfaces);
            }
            else if (node.parent.kind === 139 /* TypeLiteral */) {
                return checkForDisallowedComputedProperty(node.name, ts.Diagnostics.Computed_property_names_are_not_allowed_in_type_literals);
            }
        }
        function checkForBodyInAmbientContext(body, isConstructor) {
            if (inAmbientContext && body && body.kind === 169 /* Block */) {
                var diagnostic = isConstructor ? ts.Diagnostics.A_constructor_implementation_cannot_be_declared_in_an_ambient_context : ts.Diagnostics.A_function_implementation_cannot_be_declared_in_an_ambient_context;
                return grammarErrorOnFirstToken(body, diagnostic);
            }
        }
        function checkModuleDeclaration(node) {
            return checkModuleDeclarationName(node) || checkModuleDeclarationStatements(node);
        }
        function checkModuleDeclarationName(node) {
            if (!inAmbientContext && node.name.kind === 8 /* StringLiteral */) {
                return grammarErrorOnNode(node.name, ts.Diagnostics.Only_ambient_modules_can_use_quoted_names);
            }
        }
        function checkModuleDeclarationStatements(node) {
            if (node.name.kind === 64 /* Identifier */ && node.body.kind === 196 /* ModuleBlock */) {
                var statements = node.body.statements;
                for (var i = 0, n = statements.length; i < n; i++) {
                    var statement = statements[i];
                    if (statement.kind === 198 /* ExportAssignment */) {
                        return grammarErrorOnNode(statement, ts.Diagnostics.An_export_assignment_cannot_be_used_in_an_internal_module);
                    }
                    else if (ts.isExternalModuleImportDeclaration(statement)) {
                        return grammarErrorOnNode(ts.getExternalModuleImportDeclarationExpression(statement), ts.Diagnostics.Import_declarations_in_an_internal_module_cannot_reference_an_external_module);
                    }
                }
            }
        }
        function checkObjectLiteralExpression(node) {
            var seen = {};
            var Property = 1;
            var GetAccessor = 2;
            var SetAccesor = 4;
            var GetOrSetAccessor = GetAccessor | SetAccesor;
            var inStrictMode = (node.parserContextFlags & 1 /* StrictMode */) !== 0;
            for (var i = 0, n = node.properties.length; i < n; i++) {
                var prop = node.properties[i];
                var name = prop.name;
                if (prop.kind === 167 /* OmittedExpression */ || name.kind === 122 /* ComputedPropertyName */) {
                    continue;
                }
                var currentKind;
                if (prop.kind === 204 /* PropertyAssignment */ || prop.kind === 205 /* ShorthandPropertyAssignment */ || prop.kind === 128 /* MethodDeclaration */) {
                    currentKind = Property;
                }
                else if (prop.kind === 130 /* GetAccessor */) {
                    currentKind = GetAccessor;
                }
                else if (prop.kind === 131 /* SetAccessor */) {
                    currentKind = SetAccesor;
                }
                else {
                    ts.Debug.fail("Unexpected syntax kind:" + prop.kind);
                }
                if (!ts.hasProperty(seen, name.text)) {
                    seen[name.text] = currentKind;
                }
                else {
                    var existingKind = seen[name.text];
                    if (currentKind === Property && existingKind === Property) {
                        if (inStrictMode) {
                            grammarErrorOnNode(name, ts.Diagnostics.An_object_literal_cannot_have_multiple_properties_with_the_same_name_in_strict_mode);
                        }
                    }
                    else if ((currentKind & GetOrSetAccessor) && (existingKind & GetOrSetAccessor)) {
                        if (existingKind !== GetOrSetAccessor && currentKind !== existingKind) {
                            seen[name.text] = currentKind | existingKind;
                        }
                        else {
                            return grammarErrorOnNode(name, ts.Diagnostics.An_object_literal_cannot_have_multiple_get_Slashset_accessors_with_the_same_name);
                        }
                    }
                    else {
                        return grammarErrorOnNode(name, ts.Diagnostics.An_object_literal_cannot_have_property_and_accessor_with_the_same_name);
                    }
                }
            }
        }
        function checkNumericLiteral(node) {
            if (node.flags & 8192 /* OctalLiteral */) {
                if (node.parserContextFlags & 1 /* StrictMode */) {
                    return grammarErrorOnNode(node, ts.Diagnostics.Octal_literals_are_not_allowed_in_strict_mode);
                }
                else if (languageVersion >= 1 /* ES5 */) {
                    return grammarErrorOnNode(node, ts.Diagnostics.Octal_literals_are_not_available_when_targeting_ECMAScript_5_and_higher);
                }
            }
        }
        function checkModifiers(node) {
            switch (node.kind) {
                case 130 /* GetAccessor */:
                case 131 /* SetAccessor */:
                case 129 /* Constructor */:
                case 126 /* PropertyDeclaration */:
                case 125 /* PropertySignature */:
                case 128 /* MethodDeclaration */:
                case 127 /* MethodSignature */:
                case 134 /* IndexSignature */:
                case 191 /* ClassDeclaration */:
                case 192 /* InterfaceDeclaration */:
                case 195 /* ModuleDeclaration */:
                case 194 /* EnumDeclaration */:
                case 198 /* ExportAssignment */:
                case 170 /* VariableStatement */:
                case 190 /* FunctionDeclaration */:
                case 193 /* TypeAliasDeclaration */:
                case 197 /* ImportDeclaration */:
                case 124 /* Parameter */:
                    break;
                default:
                    return false;
            }
            if (!node.modifiers) {
                return;
            }
            var lastStatic, lastPrivate, lastProtected, lastDeclare;
            var flags = 0;
            for (var i = 0, n = node.modifiers.length; i < n; i++) {
                var modifier = node.modifiers[i];
                switch (modifier.kind) {
                    case 107 /* PublicKeyword */:
                    case 106 /* ProtectedKeyword */:
                    case 105 /* PrivateKeyword */:
                        var text;
                        if (modifier.kind === 107 /* PublicKeyword */) {
                            text = "public";
                        }
                        else if (modifier.kind === 106 /* ProtectedKeyword */) {
                            text = "protected";
                            lastProtected = modifier;
                        }
                        else {
                            text = "private";
                            lastPrivate = modifier;
                        }
                        if (flags & 112 /* AccessibilityModifier */) {
                            return grammarErrorOnNode(modifier, ts.Diagnostics.Accessibility_modifier_already_seen);
                        }
                        else if (flags & 128 /* Static */) {
                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, text, "static");
                        }
                        else if (node.parent.kind === 196 /* ModuleBlock */ || node.parent.kind === 207 /* SourceFile */) {
                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_module_element, text);
                        }
                        flags |= modifierToFlag(modifier.kind);
                        break;
                    case 108 /* StaticKeyword */:
                        if (flags & 128 /* Static */) {
                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_already_seen, "static");
                        }
                        else if (node.parent.kind === 196 /* ModuleBlock */ || node.parent.kind === 207 /* SourceFile */) {
                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_module_element, "static");
                        }
                        else if (node.kind === 124 /* Parameter */) {
                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_parameter, "static");
                        }
                        flags |= 128 /* Static */;
                        lastStatic = modifier;
                        break;
                    case 77 /* ExportKeyword */:
                        if (flags & 1 /* Export */) {
                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_already_seen, "export");
                        }
                        else if (flags & 2 /* Ambient */) {
                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, "export", "declare");
                        }
                        else if (node.parent.kind === 191 /* ClassDeclaration */) {
                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_class_element, "export");
                        }
                        else if (node.kind === 124 /* Parameter */) {
                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_parameter, "export");
                        }
                        flags |= 1 /* Export */;
                        break;
                    case 113 /* DeclareKeyword */:
                        if (flags & 2 /* Ambient */) {
                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_already_seen, "declare");
                        }
                        else if (node.parent.kind === 191 /* ClassDeclaration */) {
                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_class_element, "declare");
                        }
                        else if (node.kind === 124 /* Parameter */) {
                            return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_parameter, "declare");
                        }
                        else if (inAmbientContext && node.parent.kind === 196 /* ModuleBlock */) {
                            return grammarErrorOnNode(modifier, ts.Diagnostics.A_declare_modifier_cannot_be_used_in_an_already_ambient_context);
                        }
                        flags |= 2 /* Ambient */;
                        lastDeclare = modifier;
                        break;
                }
            }
            if (node.kind === 129 /* Constructor */) {
                if (flags & 128 /* Static */) {
                    return grammarErrorOnNode(lastStatic, ts.Diagnostics._0_modifier_cannot_appear_on_a_constructor_declaration, "static");
                }
                else if (flags & 64 /* Protected */) {
                    return grammarErrorOnNode(lastProtected, ts.Diagnostics._0_modifier_cannot_appear_on_a_constructor_declaration, "protected");
                }
                else if (flags & 32 /* Private */) {
                    return grammarErrorOnNode(lastPrivate, ts.Diagnostics._0_modifier_cannot_appear_on_a_constructor_declaration, "private");
                }
            }
            else if (node.kind === 197 /* ImportDeclaration */ && flags & 2 /* Ambient */) {
                return grammarErrorOnNode(lastDeclare, ts.Diagnostics.A_declare_modifier_cannot_be_used_with_an_import_declaration, "declare");
            }
            else if (node.kind === 192 /* InterfaceDeclaration */ && flags & 2 /* Ambient */) {
                return grammarErrorOnNode(lastDeclare, ts.Diagnostics.A_declare_modifier_cannot_be_used_with_an_interface_declaration, "declare");
            }
        }
        function checkParameter(node) {
            if (node.parserContextFlags & 1 /* StrictMode */ && isEvalOrArgumentsIdentifier(node.name)) {
                return reportInvalidUseInStrictMode(node.name);
            }
        }
        function checkTypeParameterList(typeParameters) {
            if (checkForDisallowedTrailingComma(typeParameters)) {
                return true;
            }
            if (typeParameters && typeParameters.length === 0) {
                var start = typeParameters.pos - "<".length;
                var end = ts.skipTrivia(sourceText, typeParameters.end) + ">".length;
                return grammarErrorAtPos(start, end - start, ts.Diagnostics.Type_parameter_list_cannot_be_empty);
            }
        }
        function checkParameterList(parameters) {
            if (checkForDisallowedTrailingComma(parameters)) {
                return true;
            }
            var seenOptionalParameter = false;
            var parameterCount = parameters.length;
            for (var i = 0; i < parameterCount; i++) {
                var parameter = parameters[i];
                if (parameter.dotDotDotToken) {
                    if (i !== (parameterCount - 1)) {
                        return grammarErrorOnNode(parameter.dotDotDotToken, ts.Diagnostics.A_rest_parameter_must_be_last_in_a_parameter_list);
                    }
                    if (parameter.questionToken) {
                        return grammarErrorOnNode(parameter.questionToken, ts.Diagnostics.A_rest_parameter_cannot_be_optional);
                    }
                    if (parameter.initializer) {
                        return grammarErrorOnNode(parameter.name, ts.Diagnostics.A_rest_parameter_cannot_have_an_initializer);
                    }
                }
                else if (parameter.questionToken || parameter.initializer) {
                    seenOptionalParameter = true;
                    if (parameter.questionToken && parameter.initializer) {
                        return grammarErrorOnNode(parameter.name, ts.Diagnostics.Parameter_cannot_have_question_mark_and_initializer);
                    }
                }
                else {
                    if (seenOptionalParameter) {
                        return grammarErrorOnNode(parameter.name, ts.Diagnostics.A_required_parameter_cannot_follow_an_optional_parameter);
                    }
                }
            }
        }
        function checkPostfixUnaryExpression(node) {
            if (node.parserContextFlags & 1 /* StrictMode */ && isEvalOrArgumentsIdentifier(node.operand)) {
                return reportInvalidUseInStrictMode(node.operand);
            }
        }
        function checkPrefixUnaryExpression(node) {
            if (node.parserContextFlags & 1 /* StrictMode */) {
                if ((node.operator === 38 /* PlusPlusToken */ || node.operator === 39 /* MinusMinusToken */) && isEvalOrArgumentsIdentifier(node.operand)) {
                    return reportInvalidUseInStrictMode(node.operand);
                }
            }
        }
        function checkProperty(node) {
            if (node.parent.kind === 191 /* ClassDeclaration */) {
                if (checkForInvalidQuestionMark(node, node.questionToken, ts.Diagnostics.A_class_member_cannot_be_declared_optional) || checkForDisallowedComputedProperty(node.name, ts.Diagnostics.Computed_property_names_are_not_allowed_in_class_property_declarations)) {
                    return true;
                }
            }
            else if (node.parent.kind === 192 /* InterfaceDeclaration */) {
                if (checkForDisallowedComputedProperty(node.name, ts.Diagnostics.Computed_property_names_are_not_allowed_in_interfaces)) {
                    return true;
                }
            }
            else if (node.parent.kind === 139 /* TypeLiteral */) {
                if (checkForDisallowedComputedProperty(node.name, ts.Diagnostics.Computed_property_names_are_not_allowed_in_type_literals)) {
                    return true;
                }
            }
            return checkForInitializerInAmbientContext(node);
        }
        function checkComputedPropertyName(node) {
            return grammarErrorOnNode(node, ts.Diagnostics.Computed_property_names_are_not_currently_supported);
            if (languageVersion < 2 /* ES6 */) {
                return grammarErrorOnNode(node, ts.Diagnostics.Computed_property_names_are_only_available_when_targeting_ECMAScript_6_and_higher);
            }
            else if (node.expression.kind === 163 /* BinaryExpression */ && node.expression.operator === 23 /* CommaToken */) {
                return grammarErrorOnNode(node.expression, ts.Diagnostics.A_comma_expression_is_not_allowed_in_a_computed_property_name);
            }
        }
        function checkForDisallowedComputedProperty(node, message) {
            if (node.kind === 122 /* ComputedPropertyName */) {
                return grammarErrorOnNode(node, message);
            }
        }
        function checkForInitializerInAmbientContext(node) {
            if (inAmbientContext && node.initializer) {
                return grammarErrorOnFirstToken(node.initializer, ts.Diagnostics.Initializers_are_not_allowed_in_ambient_contexts);
            }
        }
        function checkPropertyAssignment(node) {
            return checkForInvalidQuestionMark(node, node.questionToken, ts.Diagnostics.An_object_member_cannot_be_declared_optional);
        }
        function checkForInvalidQuestionMark(node, questionToken, message) {
            if (questionToken) {
                return grammarErrorOnNode(questionToken, message);
            }
        }
        function checkReturnStatement(node) {
            if (!inFunctionBlock) {
                return grammarErrorOnFirstToken(node, ts.Diagnostics.A_return_statement_can_only_be_used_within_a_function_body);
            }
        }
        function checkSetAccessor(node) {
            return checkAnySignatureDeclaration(node) || checkAccessor(node);
        }
        function checkAccessor(accessor) {
            var kind = accessor.kind;
            if (languageVersion < 1 /* ES5 */) {
                return grammarErrorOnNode(accessor.name, ts.Diagnostics.Accessors_are_only_available_when_targeting_ECMAScript_5_and_higher);
            }
            else if (inAmbientContext) {
                return grammarErrorOnNode(accessor.name, ts.Diagnostics.An_accessor_cannot_be_declared_in_an_ambient_context);
            }
            else if (accessor.body === undefined) {
                return grammarErrorAtPos(accessor.end - 1, ";".length, ts.Diagnostics._0_expected, "{");
            }
            else if (accessor.typeParameters) {
                return grammarErrorOnNode(accessor.name, ts.Diagnostics.An_accessor_cannot_have_type_parameters);
            }
            else if (kind === 130 /* GetAccessor */ && accessor.parameters.length) {
                return grammarErrorOnNode(accessor.name, ts.Diagnostics.A_get_accessor_cannot_have_parameters);
            }
            else if (kind === 131 /* SetAccessor */) {
                if (accessor.type) {
                    return grammarErrorOnNode(accessor.name, ts.Diagnostics.A_set_accessor_cannot_have_a_return_type_annotation);
                }
                else if (accessor.parameters.length !== 1) {
                    return grammarErrorOnNode(accessor.name, ts.Diagnostics.A_set_accessor_must_have_exactly_one_parameter);
                }
                else {
                    var parameter = accessor.parameters[0];
                    if (parameter.dotDotDotToken) {
                        return grammarErrorOnNode(parameter.dotDotDotToken, ts.Diagnostics.A_set_accessor_cannot_have_rest_parameter);
                    }
                    else if (parameter.flags & 243 /* Modifier */) {
                        return grammarErrorOnNode(accessor.name, ts.Diagnostics.A_parameter_property_is_only_allowed_in_a_constructor_implementation);
                    }
                    else if (parameter.questionToken) {
                        return grammarErrorOnNode(parameter.questionToken, ts.Diagnostics.A_set_accessor_cannot_have_an_optional_parameter);
                    }
                    else if (parameter.initializer) {
                        return grammarErrorOnNode(accessor.name, ts.Diagnostics.A_set_accessor_parameter_cannot_have_an_initializer);
                    }
                }
            }
        }
        function checkSourceFile(node) {
            return inAmbientContext && checkTopLevelElementsForRequiredDeclareModifier(file);
        }
        function checkTopLevelElementsForRequiredDeclareModifier(file) {
            for (var i = 0, n = file.statements.length; i < n; i++) {
                var decl = file.statements[i];
                if (ts.isDeclaration(decl) || decl.kind === 170 /* VariableStatement */) {
                    if (checkTopLevelElementForRequiredDeclareModifier(decl)) {
                        return true;
                    }
                }
            }
        }
        function checkTopLevelElementForRequiredDeclareModifier(node) {
            if (node.kind === 192 /* InterfaceDeclaration */ || node.kind === 197 /* ImportDeclaration */ || node.kind === 198 /* ExportAssignment */ || (node.flags & 2 /* Ambient */)) {
                return false;
            }
            return grammarErrorOnFirstToken(node, ts.Diagnostics.A_declare_modifier_is_required_for_a_top_level_declaration_in_a_d_ts_file);
        }
        function checkShorthandPropertyAssignment(node) {
            return checkForInvalidQuestionMark(node, node.questionToken, ts.Diagnostics.An_object_member_cannot_be_declared_optional);
        }
        function checkSwitchStatement(node) {
            var firstDefaultClause;
            for (var i = 0, n = node.clauses.length; i < n; i++) {
                var clause = node.clauses[i];
                if (clause.kind === 201 /* DefaultClause */) {
                    if (firstDefaultClause === undefined) {
                        firstDefaultClause = clause;
                    }
                    else {
                        var start = ts.skipTrivia(file.text, clause.pos);
                        var end = clause.statements.length > 0 ? clause.statements[0].pos : clause.end;
                        return grammarErrorAtPos(start, end - start, ts.Diagnostics.A_default_clause_cannot_appear_more_than_once_in_a_switch_statement);
                    }
                }
            }
        }
        function checkTaggedTemplateExpression(node) {
            if (languageVersion < 2 /* ES6 */) {
                return grammarErrorOnFirstToken(node.template, ts.Diagnostics.Tagged_templates_are_only_available_when_targeting_ECMAScript_6_and_higher);
            }
        }
        function checkThrowStatement(node) {
            if (node.expression === undefined) {
                return grammarErrorAfterFirstToken(node, ts.Diagnostics.Line_break_not_permitted_here);
            }
        }
        function checkTupleType(node) {
            return checkForDisallowedTrailingComma(node.elementTypes) || checkForAtLeastOneType(node);
        }
        function checkForAtLeastOneType(node) {
            if (node.elementTypes.length === 0) {
                return grammarErrorOnNode(node, ts.Diagnostics.A_tuple_type_element_list_cannot_be_empty);
            }
        }
        function checkTypeParameter(node) {
            if (node.expression) {
                return grammarErrorOnFirstToken(node.expression, ts.Diagnostics.Type_expected);
            }
        }
        function checkTypeReference(node) {
            return checkTypeArguments(node.typeArguments);
        }
        function checkBindingElement(node) {
            if (node.parserContextFlags & 1 /* StrictMode */ && isEvalOrArgumentsIdentifier(node.name)) {
                return reportInvalidUseInStrictMode(node.name);
            }
        }
        function checkVariableDeclaration(node) {
            if (inAmbientContext) {
                if (ts.isBindingPattern(node.name)) {
                    return grammarErrorOnNode(node, ts.Diagnostics.Destructuring_declarations_are_not_allowed_in_ambient_contexts);
                }
                if (node.initializer) {
                    return grammarErrorAtPos(node.initializer.pos - 1, 1, ts.Diagnostics.Initializers_are_not_allowed_in_ambient_contexts);
                }
            }
            else {
                if (!node.initializer) {
                    if (ts.isBindingPattern(node.name) && !ts.isBindingPattern(node.parent)) {
                        return grammarErrorOnNode(node, ts.Diagnostics.A_destructuring_declaration_must_have_an_initializer);
                    }
                    if (ts.isConst(node)) {
                        return grammarErrorOnNode(node, ts.Diagnostics.const_declarations_must_be_initialized);
                    }
                }
            }
            if (node.parserContextFlags & 1 /* StrictMode */ && isEvalOrArgumentsIdentifier(node.name)) {
                return reportInvalidUseInStrictMode(node.name);
            }
        }
        function checkVariableDeclarations(declarations) {
            if (declarations) {
                if (checkForDisallowedTrailingComma(declarations)) {
                    return true;
                }
                if (!declarations.length) {
                    return grammarErrorAtPos(declarations.pos, declarations.end - declarations.pos, ts.Diagnostics.Variable_declaration_list_cannot_be_empty);
                }
                var decl = declarations[0];
                if (languageVersion < 2 /* ES6 */) {
                    if (ts.isLet(decl)) {
                        return grammarErrorOnFirstToken(decl, ts.Diagnostics.let_declarations_are_only_available_when_targeting_ECMAScript_6_and_higher);
                    }
                    else if (ts.isConst(decl)) {
                        return grammarErrorOnFirstToken(decl, ts.Diagnostics.const_declarations_are_only_available_when_targeting_ECMAScript_6_and_higher);
                    }
                }
            }
        }
        function checkVariableStatement(node) {
            return checkVariableDeclarations(node.declarations) || checkForDisallowedLetOrConstStatement(node);
        }
        function checkForDisallowedLetOrConstStatement(node) {
            if (!allowLetAndConstDeclarations(node.parent)) {
                if (ts.isLet(node)) {
                    return grammarErrorOnNode(node, ts.Diagnostics.let_declarations_can_only_be_declared_inside_a_block);
                }
                else if (ts.isConst(node)) {
                    return grammarErrorOnNode(node, ts.Diagnostics.const_declarations_can_only_be_declared_inside_a_block);
                }
            }
        }
        function allowLetAndConstDeclarations(parent) {
            switch (parent.kind) {
                case 173 /* IfStatement */:
                case 174 /* DoStatement */:
                case 175 /* WhileStatement */:
                case 181 /* WithStatement */:
                case 176 /* ForStatement */:
                case 177 /* ForInStatement */:
                    return false;
                case 183 /* LabeledStatement */:
                    return allowLetAndConstDeclarations(parent.parent);
            }
            return true;
        }
        function checkWithStatement(node) {
            if (node.parserContextFlags & 1 /* StrictMode */) {
                return grammarErrorOnFirstToken(node, ts.Diagnostics.with_statements_are_not_allowed_in_strict_mode);
            }
        }
        function checkYieldExpression(node) {
            if (!(node.parserContextFlags & 4 /* Yield */)) {
                return grammarErrorOnFirstToken(node, ts.Diagnostics.yield_expression_must_be_contained_within_a_generator_declaration);
            }
            return grammarErrorOnFirstToken(node, ts.Diagnostics.yield_expressions_are_not_currently_supported);
        }
    }
    function createProgram(rootNames, options, host) {
        var program;
        var files = [];
        var filesByName = {};
        var errors = [];
        var seenNoDefaultLib = options.noLib;
        var commonSourceDirectory;
        ts.forEach(rootNames, function (name) { return processRootFile(name, false); });
        if (!seenNoDefaultLib) {
            processRootFile(host.getDefaultLibFilename(options), true);
        }
        verifyCompilerOptions();
        errors.sort(ts.compareDiagnostics);
        program = {
            getSourceFile: getSourceFile,
            getSourceFiles: function () { return files; },
            getCompilerOptions: function () { return options; },
            getCompilerHost: function () { return host; },
            getDiagnostics: getDiagnostics,
            getGlobalDiagnostics: getGlobalDiagnostics,
            getTypeChecker: function (fullTypeCheckMode) { return ts.createTypeChecker(program, fullTypeCheckMode); },
            getCommonSourceDirectory: function () { return commonSourceDirectory; }
        };
        return program;
        function getSourceFile(filename) {
            filename = host.getCanonicalFileName(filename);
            return ts.hasProperty(filesByName, filename) ? filesByName[filename] : undefined;
        }
        function getDiagnostics(sourceFile) {
            return sourceFile ? ts.filter(errors, function (e) { return e.file === sourceFile; }) : errors;
        }
        function getGlobalDiagnostics() {
            return ts.filter(errors, function (e) { return !e.file; });
        }
        function hasExtension(filename) {
            return ts.getBaseFilename(filename).indexOf(".") >= 0;
        }
        function processRootFile(filename, isDefaultLib) {
            processSourceFile(ts.normalizePath(filename), isDefaultLib);
        }
        function processSourceFile(filename, isDefaultLib, refFile, refPos, refEnd) {
            if (refEnd !== undefined && refPos !== undefined) {
                var start = refPos;
                var length = refEnd - refPos;
            }
            var diagnostic;
            if (hasExtension(filename)) {
                if (!options.allowNonTsExtensions && !ts.fileExtensionIs(filename, ".ts")) {
                    diagnostic = ts.Diagnostics.File_0_must_have_extension_ts_or_d_ts;
                }
                else if (!findSourceFile(filename, isDefaultLib, refFile, refPos, refEnd)) {
                    diagnostic = ts.Diagnostics.File_0_not_found;
                }
                else if (refFile && host.getCanonicalFileName(filename) === host.getCanonicalFileName(refFile.filename)) {
                    diagnostic = ts.Diagnostics.A_file_cannot_have_a_reference_to_itself;
                }
            }
            else {
                if (!(findSourceFile(filename + ".ts", isDefaultLib, refFile, refPos, refEnd) || findSourceFile(filename + ".d.ts", isDefaultLib, refFile, refPos, refEnd))) {
                    diagnostic = ts.Diagnostics.File_0_not_found;
                    filename += ".ts";
                }
            }
            if (diagnostic) {
                if (refFile) {
                    errors.push(ts.createFileDiagnostic(refFile, start, length, diagnostic, filename));
                }
                else {
                    errors.push(ts.createCompilerDiagnostic(diagnostic, filename));
                }
            }
        }
        function findSourceFile(filename, isDefaultLib, refFile, refStart, refLength) {
            var canonicalName = host.getCanonicalFileName(filename);
            if (ts.hasProperty(filesByName, canonicalName)) {
                return getSourceFileFromCache(filename, canonicalName, false);
            }
            else {
                var normalizedAbsolutePath = ts.getNormalizedAbsolutePath(filename, host.getCurrentDirectory());
                var canonicalAbsolutePath = host.getCanonicalFileName(normalizedAbsolutePath);
                if (ts.hasProperty(filesByName, canonicalAbsolutePath)) {
                    return getSourceFileFromCache(normalizedAbsolutePath, canonicalAbsolutePath, true);
                }
                var file = filesByName[canonicalName] = host.getSourceFile(filename, options.target, function (hostErrorMessage) {
                    errors.push(ts.createFileDiagnostic(refFile, refStart, refLength, ts.Diagnostics.Cannot_read_file_0_Colon_1, filename, hostErrorMessage));
                });
                if (file) {
                    seenNoDefaultLib = seenNoDefaultLib || file.hasNoDefaultLib;
                    filesByName[canonicalAbsolutePath] = file;
                    if (!options.noResolve) {
                        var basePath = ts.getDirectoryPath(filename);
                        processReferencedFiles(file, basePath);
                        processImportedModules(file, basePath);
                    }
                    if (isDefaultLib) {
                        files.unshift(file);
                    }
                    else {
                        files.push(file);
                    }
                    ts.forEach(file.getSyntacticDiagnostics(), function (e) {
                        errors.push(e);
                    });
                }
            }
            return file;
            function getSourceFileFromCache(filename, canonicalName, useAbsolutePath) {
                var file = filesByName[canonicalName];
                if (file && host.useCaseSensitiveFileNames()) {
                    var sourceFileName = useAbsolutePath ? ts.getNormalizedAbsolutePath(file.filename, host.getCurrentDirectory()) : file.filename;
                    if (canonicalName !== sourceFileName) {
                        errors.push(ts.createFileDiagnostic(refFile, refStart, refLength, ts.Diagnostics.Filename_0_differs_from_already_included_filename_1_only_in_casing, filename, sourceFileName));
                    }
                }
                return file;
            }
        }
        function processReferencedFiles(file, basePath) {
            ts.forEach(file.referencedFiles, function (ref) {
                var referencedFilename = ts.isRootedDiskPath(ref.filename) ? ref.filename : ts.combinePaths(basePath, ref.filename);
                processSourceFile(ts.normalizePath(referencedFilename), false, file, ref.pos, ref.end);
            });
        }
        function processImportedModules(file, basePath) {
            ts.forEach(file.statements, function (node) {
                if (ts.isExternalModuleImportDeclaration(node) && ts.getExternalModuleImportDeclarationExpression(node).kind === 8 /* StringLiteral */) {
                    var nameLiteral = ts.getExternalModuleImportDeclarationExpression(node);
                    var moduleName = nameLiteral.text;
                    if (moduleName) {
                        var searchPath = basePath;
                        while (true) {
                            var searchName = ts.normalizePath(ts.combinePaths(searchPath, moduleName));
                            if (findModuleSourceFile(searchName + ".ts", nameLiteral) || findModuleSourceFile(searchName + ".d.ts", nameLiteral)) {
                                break;
                            }
                            var parentPath = ts.getDirectoryPath(searchPath);
                            if (parentPath === searchPath) {
                                break;
                            }
                            searchPath = parentPath;
                        }
                    }
                }
                else if (node.kind === 195 /* ModuleDeclaration */ && node.name.kind === 8 /* StringLiteral */ && (node.flags & 2 /* Ambient */ || ts.isDeclarationFile(file))) {
                    forEachChild(node.body, function (node) {
                        if (ts.isExternalModuleImportDeclaration(node) && ts.getExternalModuleImportDeclarationExpression(node).kind === 8 /* StringLiteral */) {
                            var nameLiteral = ts.getExternalModuleImportDeclarationExpression(node);
                            var moduleName = nameLiteral.text;
                            if (moduleName) {
                                var searchName = ts.normalizePath(ts.combinePaths(basePath, moduleName));
                                var tsFile = findModuleSourceFile(searchName + ".ts", nameLiteral);
                                if (!tsFile) {
                                    findModuleSourceFile(searchName + ".d.ts", nameLiteral);
                                }
                            }
                        }
                    });
                }
            });
            function findModuleSourceFile(filename, nameLiteral) {
                return findSourceFile(filename, false, file, nameLiteral.pos, nameLiteral.end - nameLiteral.pos);
            }
        }
        function verifyCompilerOptions() {
            if (!options.sourceMap && (options.mapRoot || options.sourceRoot)) {
                if (options.mapRoot) {
                    errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Option_mapRoot_cannot_be_specified_without_specifying_sourcemap_option));
                }
                if (options.sourceRoot) {
                    errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Option_sourceRoot_cannot_be_specified_without_specifying_sourcemap_option));
                }
                return;
            }
            var firstExternalModule = ts.forEach(files, function (f) { return ts.isExternalModule(f) ? f : undefined; });
            if (firstExternalModule && options.module === 0 /* None */) {
                var externalModuleErrorSpan = ts.getErrorSpanForNode(firstExternalModule.externalModuleIndicator);
                var errorStart = ts.skipTrivia(firstExternalModule.text, externalModuleErrorSpan.pos);
                var errorLength = externalModuleErrorSpan.end - errorStart;
                errors.push(ts.createFileDiagnostic(firstExternalModule, errorStart, errorLength, ts.Diagnostics.Cannot_compile_external_modules_unless_the_module_flag_is_provided));
            }
            if (options.outDir || options.sourceRoot || (options.mapRoot && (!options.out || firstExternalModule !== undefined))) {
                var commonPathComponents;
                ts.forEach(files, function (sourceFile) {
                    if (!(sourceFile.flags & 1024 /* DeclarationFile */) && !ts.fileExtensionIs(sourceFile.filename, ".js")) {
                        var sourcePathComponents = ts.getNormalizedPathComponents(sourceFile.filename, host.getCurrentDirectory());
                        sourcePathComponents.pop();
                        if (commonPathComponents) {
                            for (var i = 0; i < Math.min(commonPathComponents.length, sourcePathComponents.length); i++) {
                                if (commonPathComponents[i] !== sourcePathComponents[i]) {
                                    if (i === 0) {
                                        errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Cannot_find_the_common_subdirectory_path_for_the_input_files));
                                        return;
                                    }
                                    commonPathComponents.length = i;
                                    break;
                                }
                            }
                            if (sourcePathComponents.length < commonPathComponents.length) {
                                commonPathComponents.length = sourcePathComponents.length;
                            }
                        }
                        else {
                            commonPathComponents = sourcePathComponents;
                        }
                    }
                });
                commonSourceDirectory = ts.getNormalizedPathFromPathComponents(commonPathComponents);
                if (commonSourceDirectory) {
                    commonSourceDirectory += ts.directorySeparator;
                }
            }
        }
    }
    ts.createProgram = createProgram;
})(ts || (ts = {}));
var ts;
(function (ts) {
    (function (ModuleInstanceState) {
        ModuleInstanceState[ModuleInstanceState["NonInstantiated"] = 0] = "NonInstantiated";
        ModuleInstanceState[ModuleInstanceState["Instantiated"] = 1] = "Instantiated";
        ModuleInstanceState[ModuleInstanceState["ConstEnumOnly"] = 2] = "ConstEnumOnly";
    })(ts.ModuleInstanceState || (ts.ModuleInstanceState = {}));
    var ModuleInstanceState = ts.ModuleInstanceState;
    function getModuleInstanceState(node) {
        if (node.kind === 192 /* InterfaceDeclaration */) {
            return 0 /* NonInstantiated */;
        }
        else if (ts.isConstEnumDeclaration(node)) {
            return 2 /* ConstEnumOnly */;
        }
        else if (node.kind === 197 /* ImportDeclaration */ && !(node.flags & 1 /* Export */)) {
            return 0 /* NonInstantiated */;
        }
        else if (node.kind === 196 /* ModuleBlock */) {
            var state = 0 /* NonInstantiated */;
            ts.forEachChild(node, function (n) {
                switch (getModuleInstanceState(n)) {
                    case 0 /* NonInstantiated */:
                        return false;
                    case 2 /* ConstEnumOnly */:
                        state = 2 /* ConstEnumOnly */;
                        return false;
                    case 1 /* Instantiated */:
                        state = 1 /* Instantiated */;
                        return true;
                }
            });
            return state;
        }
        else if (node.kind === 195 /* ModuleDeclaration */) {
            return getModuleInstanceState(node.body);
        }
        else {
            return 1 /* Instantiated */;
        }
    }
    ts.getModuleInstanceState = getModuleInstanceState;
    function hasComputedNameButNotSymbol(declaration) {
        return declaration.name && declaration.name.kind === 122 /* ComputedPropertyName */;
    }
    ts.hasComputedNameButNotSymbol = hasComputedNameButNotSymbol;
    function bindSourceFile(file) {
        var parent;
        var container;
        var blockScopeContainer;
        var lastContainer;
        var symbolCount = 0;
        var Symbol = ts.objectAllocator.getSymbolConstructor();
        if (!file.locals) {
            file.locals = {};
            container = blockScopeContainer = file;
            bind(file);
            file.symbolCount = symbolCount;
        }
        function createSymbol(flags, name) {
            symbolCount++;
            return new Symbol(flags, name);
        }
        function addDeclarationToSymbol(symbol, node, symbolKind) {
            symbol.flags |= symbolKind;
            if (!symbol.declarations)
                symbol.declarations = [];
            symbol.declarations.push(node);
            if (symbolKind & 1952 /* HasExports */ && !symbol.exports)
                symbol.exports = {};
            if (symbolKind & 6240 /* HasMembers */ && !symbol.members)
                symbol.members = {};
            node.symbol = symbol;
            if (symbolKind & 107455 /* Value */ && !symbol.valueDeclaration)
                symbol.valueDeclaration = node;
        }
        function getDeclarationName(node) {
            if (node.name) {
                if (node.kind === 195 /* ModuleDeclaration */ && node.name.kind === 8 /* StringLiteral */) {
                    return '"' + node.name.text + '"';
                }
                ts.Debug.assert(!hasComputedNameButNotSymbol(node));
                return node.name.text;
            }
            switch (node.kind) {
                case 137 /* ConstructorType */:
                case 129 /* Constructor */:
                    return "__constructor";
                case 136 /* FunctionType */:
                case 132 /* CallSignature */:
                    return "__call";
                case 133 /* ConstructSignature */:
                    return "__new";
                case 134 /* IndexSignature */:
                    return "__index";
            }
        }
        function getDisplayName(node) {
            return node.name ? ts.declarationNameToString(node.name) : getDeclarationName(node);
        }
        function declareSymbol(symbols, parent, node, includes, excludes) {
            if (hasComputedNameButNotSymbol(node)) {
                return undefined;
            }
            var name = getDeclarationName(node);
            if (name !== undefined) {
                var symbol = ts.hasProperty(symbols, name) ? symbols[name] : (symbols[name] = createSymbol(0, name));
                if (symbol.flags & excludes) {
                    if (node.name) {
                        node.name.parent = node;
                    }
                    var message = symbol.flags & 2 /* BlockScopedVariable */ ? ts.Diagnostics.Cannot_redeclare_block_scoped_variable_0 : ts.Diagnostics.Duplicate_identifier_0;
                    ts.forEach(symbol.declarations, function (declaration) {
                        file.semanticDiagnostics.push(ts.createDiagnosticForNode(declaration.name, message, getDisplayName(declaration)));
                    });
                    file.semanticDiagnostics.push(ts.createDiagnosticForNode(node.name, message, getDisplayName(node)));
                    symbol = createSymbol(0, name);
                }
            }
            else {
                symbol = createSymbol(0, "__missing");
            }
            addDeclarationToSymbol(symbol, node, includes);
            symbol.parent = parent;
            if (node.kind === 191 /* ClassDeclaration */ && symbol.exports) {
                var prototypeSymbol = createSymbol(4 /* Property */ | 134217728 /* Prototype */, "prototype");
                if (ts.hasProperty(symbol.exports, prototypeSymbol.name)) {
                    if (node.name) {
                        node.name.parent = node;
                    }
                    file.semanticDiagnostics.push(ts.createDiagnosticForNode(symbol.exports[prototypeSymbol.name].declarations[0], ts.Diagnostics.Duplicate_identifier_0, prototypeSymbol.name));
                }
                symbol.exports[prototypeSymbol.name] = prototypeSymbol;
                prototypeSymbol.parent = symbol;
            }
            return symbol;
        }
        function isAmbientContext(node) {
            while (node) {
                if (node.flags & 2 /* Ambient */)
                    return true;
                node = node.parent;
            }
            return false;
        }
        function declareModuleMember(node, symbolKind, symbolExcludes) {
            var exportKind = 0;
            if (symbolKind & 107455 /* Value */) {
                exportKind |= 1048576 /* ExportValue */;
            }
            if (symbolKind & 793056 /* Type */) {
                exportKind |= 2097152 /* ExportType */;
            }
            if (symbolKind & 1536 /* Namespace */) {
                exportKind |= 4194304 /* ExportNamespace */;
            }
            if (node.flags & 1 /* Export */ || (node.kind !== 197 /* ImportDeclaration */ && isAmbientContext(container))) {
                if (exportKind) {
                    var local = declareSymbol(container.locals, undefined, node, exportKind, symbolExcludes);
                    local.exportSymbol = declareSymbol(container.symbol.exports, container.symbol, node, symbolKind, symbolExcludes);
                    node.localSymbol = local;
                }
                else {
                    declareSymbol(container.symbol.exports, container.symbol, node, symbolKind, symbolExcludes);
                }
            }
            else {
                declareSymbol(container.locals, undefined, node, symbolKind, symbolExcludes);
            }
        }
        function bindChildren(node, symbolKind, isBlockScopeContainer) {
            if (symbolKind & 255504 /* HasLocals */) {
                node.locals = {};
            }
            var saveParent = parent;
            var saveContainer = container;
            var savedBlockScopeContainer = blockScopeContainer;
            parent = node;
            if (symbolKind & 262128 /* IsContainer */) {
                container = node;
                if (lastContainer !== container && !container.nextContainer) {
                    if (lastContainer) {
                        lastContainer.nextContainer = container;
                    }
                    lastContainer = container;
                }
            }
            if (isBlockScopeContainer) {
                blockScopeContainer = node;
            }
            ts.forEachChild(node, bind);
            container = saveContainer;
            parent = saveParent;
            blockScopeContainer = savedBlockScopeContainer;
        }
        function bindDeclaration(node, symbolKind, symbolExcludes, isBlockScopeContainer) {
            switch (container.kind) {
                case 195 /* ModuleDeclaration */:
                    declareModuleMember(node, symbolKind, symbolExcludes);
                    break;
                case 207 /* SourceFile */:
                    if (ts.isExternalModule(container)) {
                        declareModuleMember(node, symbolKind, symbolExcludes);
                        break;
                    }
                case 136 /* FunctionType */:
                case 137 /* ConstructorType */:
                case 132 /* CallSignature */:
                case 133 /* ConstructSignature */:
                case 134 /* IndexSignature */:
                case 128 /* MethodDeclaration */:
                case 127 /* MethodSignature */:
                case 129 /* Constructor */:
                case 130 /* GetAccessor */:
                case 131 /* SetAccessor */:
                case 190 /* FunctionDeclaration */:
                case 156 /* FunctionExpression */:
                case 157 /* ArrowFunction */:
                    declareSymbol(container.locals, undefined, node, symbolKind, symbolExcludes);
                    break;
                case 191 /* ClassDeclaration */:
                    if (node.flags & 128 /* Static */) {
                        declareSymbol(container.symbol.exports, container.symbol, node, symbolKind, symbolExcludes);
                        break;
                    }
                case 139 /* TypeLiteral */:
                case 148 /* ObjectLiteralExpression */:
                case 192 /* InterfaceDeclaration */:
                    declareSymbol(container.symbol.members, container.symbol, node, symbolKind, symbolExcludes);
                    break;
                case 194 /* EnumDeclaration */:
                    declareSymbol(container.symbol.exports, container.symbol, node, symbolKind, symbolExcludes);
                    break;
            }
            bindChildren(node, symbolKind, isBlockScopeContainer);
        }
        function bindConstructorDeclaration(node) {
            bindDeclaration(node, 16384 /* Constructor */, 0, true);
            ts.forEach(node.parameters, function (p) {
                if (p.flags & (16 /* Public */ | 32 /* Private */ | 64 /* Protected */)) {
                    bindDeclaration(p, 4 /* Property */, 107455 /* PropertyExcludes */, false);
                }
            });
        }
        function bindModuleDeclaration(node) {
            if (node.name.kind === 8 /* StringLiteral */) {
                bindDeclaration(node, 512 /* ValueModule */, 106639 /* ValueModuleExcludes */, true);
            }
            else {
                var state = getModuleInstanceState(node);
                if (state === 0 /* NonInstantiated */) {
                    bindDeclaration(node, 1024 /* NamespaceModule */, 0 /* NamespaceModuleExcludes */, true);
                }
                else {
                    bindDeclaration(node, 512 /* ValueModule */, 106639 /* ValueModuleExcludes */, true);
                    if (state === 2 /* ConstEnumOnly */) {
                        node.symbol.constEnumOnlyModule = true;
                    }
                    else if (node.symbol.constEnumOnlyModule) {
                        node.symbol.constEnumOnlyModule = false;
                    }
                }
            }
        }
        function bindFunctionOrConstructorType(node) {
            var symbol = createSymbol(131072 /* Signature */, getDeclarationName(node));
            addDeclarationToSymbol(symbol, node, 131072 /* Signature */);
            bindChildren(node, 131072 /* Signature */, false);
            var typeLiteralSymbol = createSymbol(2048 /* TypeLiteral */, "__type");
            addDeclarationToSymbol(typeLiteralSymbol, node, 2048 /* TypeLiteral */);
            typeLiteralSymbol.members = {};
            typeLiteralSymbol.members[node.kind === 136 /* FunctionType */ ? "__call" : "__new"] = symbol;
        }
        function bindAnonymousDeclaration(node, symbolKind, name, isBlockScopeContainer) {
            var symbol = createSymbol(symbolKind, name);
            addDeclarationToSymbol(symbol, node, symbolKind);
            bindChildren(node, symbolKind, isBlockScopeContainer);
        }
        function bindCatchVariableDeclaration(node) {
            var symbol = createSymbol(1 /* FunctionScopedVariable */, node.name.text || "__missing");
            addDeclarationToSymbol(symbol, node, 1 /* FunctionScopedVariable */);
            var saveParent = parent;
            var savedBlockScopeContainer = blockScopeContainer;
            parent = blockScopeContainer = node;
            ts.forEachChild(node, bind);
            parent = saveParent;
            blockScopeContainer = savedBlockScopeContainer;
        }
        function bindBlockScopedVariableDeclaration(node) {
            switch (blockScopeContainer.kind) {
                case 195 /* ModuleDeclaration */:
                    declareModuleMember(node, 2 /* BlockScopedVariable */, 107455 /* BlockScopedVariableExcludes */);
                    break;
                case 207 /* SourceFile */:
                    if (ts.isExternalModule(container)) {
                        declareModuleMember(node, 2 /* BlockScopedVariable */, 107455 /* BlockScopedVariableExcludes */);
                        break;
                    }
                default:
                    if (!blockScopeContainer.locals) {
                        blockScopeContainer.locals = {};
                    }
                    declareSymbol(blockScopeContainer.locals, undefined, node, 2 /* BlockScopedVariable */, 107455 /* BlockScopedVariableExcludes */);
            }
            bindChildren(node, 2 /* BlockScopedVariable */, false);
        }
        function getDestructuringParameterName(node) {
            return "__" + ts.indexOf(node.parent.parameters, node);
        }
        function bind(node) {
            node.parent = parent;
            switch (node.kind) {
                case 123 /* TypeParameter */:
                    bindDeclaration(node, 262144 /* TypeParameter */, 530912 /* TypeParameterExcludes */, false);
                    break;
                case 124 /* Parameter */:
                    if (ts.isBindingPattern(node.name)) {
                        bindAnonymousDeclaration(node, 1 /* FunctionScopedVariable */, getDestructuringParameterName(node), false);
                    }
                    else {
                        bindDeclaration(node, 1 /* FunctionScopedVariable */, 107455 /* ParameterExcludes */, false);
                    }
                    break;
                case 189 /* VariableDeclaration */:
                case 146 /* BindingElement */:
                    if (ts.isBindingPattern(node.name)) {
                        bindChildren(node, 0, false);
                    }
                    else if (node.flags & 6144 /* BlockScoped */) {
                        bindBlockScopedVariableDeclaration(node);
                    }
                    else {
                        bindDeclaration(node, 1 /* FunctionScopedVariable */, 107454 /* FunctionScopedVariableExcludes */, false);
                    }
                    break;
                case 126 /* PropertyDeclaration */:
                case 125 /* PropertySignature */:
                    bindDeclaration(node, 4 /* Property */ | (node.questionToken ? 536870912 /* Optional */ : 0), 107455 /* PropertyExcludes */, false);
                    break;
                case 204 /* PropertyAssignment */:
                case 205 /* ShorthandPropertyAssignment */:
                    bindDeclaration(node, 4 /* Property */, 107455 /* PropertyExcludes */, false);
                    break;
                case 206 /* EnumMember */:
                    bindDeclaration(node, 8 /* EnumMember */, 107455 /* EnumMemberExcludes */, false);
                    break;
                case 132 /* CallSignature */:
                case 133 /* ConstructSignature */:
                case 134 /* IndexSignature */:
                    bindDeclaration(node, 131072 /* Signature */, 0, false);
                    break;
                case 128 /* MethodDeclaration */:
                case 127 /* MethodSignature */:
                    bindDeclaration(node, 8192 /* Method */ | (node.questionToken ? 536870912 /* Optional */ : 0), ts.isObjectLiteralMethod(node) ? 107455 /* PropertyExcludes */ : 99263 /* MethodExcludes */, true);
                    break;
                case 190 /* FunctionDeclaration */:
                    bindDeclaration(node, 16 /* Function */, 106927 /* FunctionExcludes */, true);
                    break;
                case 129 /* Constructor */:
                    bindConstructorDeclaration(node);
                    break;
                case 130 /* GetAccessor */:
                    bindDeclaration(node, 32768 /* GetAccessor */, 41919 /* GetAccessorExcludes */, true);
                    break;
                case 131 /* SetAccessor */:
                    bindDeclaration(node, 65536 /* SetAccessor */, 74687 /* SetAccessorExcludes */, true);
                    break;
                case 136 /* FunctionType */:
                case 137 /* ConstructorType */:
                    bindFunctionOrConstructorType(node);
                    break;
                case 139 /* TypeLiteral */:
                    bindAnonymousDeclaration(node, 2048 /* TypeLiteral */, "__type", false);
                    break;
                case 148 /* ObjectLiteralExpression */:
                    bindAnonymousDeclaration(node, 4096 /* ObjectLiteral */, "__object", false);
                    break;
                case 156 /* FunctionExpression */:
                case 157 /* ArrowFunction */:
                    bindAnonymousDeclaration(node, 16 /* Function */, "__function", true);
                    break;
                case 203 /* CatchClause */:
                    bindCatchVariableDeclaration(node);
                    break;
                case 191 /* ClassDeclaration */:
                    bindDeclaration(node, 32 /* Class */, 899583 /* ClassExcludes */, false);
                    break;
                case 192 /* InterfaceDeclaration */:
                    bindDeclaration(node, 64 /* Interface */, 792992 /* InterfaceExcludes */, false);
                    break;
                case 193 /* TypeAliasDeclaration */:
                    bindDeclaration(node, 524288 /* TypeAlias */, 793056 /* TypeAliasExcludes */, false);
                    break;
                case 194 /* EnumDeclaration */:
                    if (ts.isConst(node)) {
                        bindDeclaration(node, 128 /* ConstEnum */, 899967 /* ConstEnumExcludes */, false);
                    }
                    else {
                        bindDeclaration(node, 256 /* RegularEnum */, 899327 /* RegularEnumExcludes */, false);
                    }
                    break;
                case 195 /* ModuleDeclaration */:
                    bindModuleDeclaration(node);
                    break;
                case 197 /* ImportDeclaration */:
                    bindDeclaration(node, 8388608 /* Import */, 8388608 /* ImportExcludes */, false);
                    break;
                case 207 /* SourceFile */:
                    if (ts.isExternalModule(node)) {
                        bindAnonymousDeclaration(node, 512 /* ValueModule */, '"' + ts.removeFileExtension(node.filename) + '"', true);
                        break;
                    }
                case 169 /* Block */:
                case 186 /* TryBlock */:
                case 203 /* CatchClause */:
                case 187 /* FinallyBlock */:
                case 176 /* ForStatement */:
                case 177 /* ForInStatement */:
                case 182 /* SwitchStatement */:
                    bindChildren(node, 0, true);
                    break;
                default:
                    var saveParent = parent;
                    parent = node;
                    ts.forEachChild(node, bind);
                    parent = saveParent;
            }
        }
    }
    ts.bindSourceFile = bindSourceFile;
})(ts || (ts = {}));
var ts;
(function (ts) {
    var indentStrings = ["", "    "];
    function getIndentString(level) {
        if (indentStrings[level] === undefined) {
            indentStrings[level] = getIndentString(level - 1) + indentStrings[1];
        }
        return indentStrings[level];
    }
    ts.getIndentString = getIndentString;
    function getIndentSize() {
        return indentStrings[1].length;
    }
    function shouldEmitToOwnFile(sourceFile, compilerOptions) {
        if (!ts.isDeclarationFile(sourceFile)) {
            if ((ts.isExternalModule(sourceFile) || !compilerOptions.out) && !ts.fileExtensionIs(sourceFile.filename, ".js")) {
                return true;
            }
            return false;
        }
        return false;
    }
    ts.shouldEmitToOwnFile = shouldEmitToOwnFile;
    function isExternalModuleOrDeclarationFile(sourceFile) {
        return ts.isExternalModule(sourceFile) || ts.isDeclarationFile(sourceFile);
    }
    ts.isExternalModuleOrDeclarationFile = isExternalModuleOrDeclarationFile;
    function createTextWriter(newLine) {
        var output = "";
        var indent = 0;
        var lineStart = true;
        var lineCount = 0;
        var linePos = 0;
        function write(s) {
            if (s && s.length) {
                if (lineStart) {
                    output += getIndentString(indent);
                    lineStart = false;
                }
                output += s;
            }
        }
        function rawWrite(s) {
            if (s !== undefined) {
                if (lineStart) {
                    lineStart = false;
                }
                output += s;
            }
        }
        function writeLiteral(s) {
            if (s && s.length) {
                write(s);
                var lineStartsOfS = ts.computeLineStarts(s);
                if (lineStartsOfS.length > 1) {
                    lineCount = lineCount + lineStartsOfS.length - 1;
                    linePos = output.length - s.length + lineStartsOfS[lineStartsOfS.length - 1];
                }
            }
        }
        function writeLine() {
            if (!lineStart) {
                output += newLine;
                lineCount++;
                linePos = output.length;
                lineStart = true;
            }
        }
        function writeTextOfNode(sourceFile, node) {
            write(ts.getSourceTextOfNodeFromSourceFile(sourceFile, node));
        }
        return {
            write: write,
            rawWrite: rawWrite,
            writeTextOfNode: writeTextOfNode,
            writeLiteral: writeLiteral,
            writeLine: writeLine,
            increaseIndent: function () { return indent++; },
            decreaseIndent: function () { return indent--; },
            getIndent: function () { return indent; },
            getTextPos: function () { return output.length; },
            getLine: function () { return lineCount + 1; },
            getColumn: function () { return lineStart ? indent * getIndentSize() + 1 : output.length - linePos + 1; },
            getText: function () { return output; }
        };
    }
    function getLineOfLocalPosition(currentSourceFile, pos) {
        return currentSourceFile.getLineAndCharacterFromPosition(pos).line;
    }
    function emitNewLineBeforeLeadingComments(currentSourceFile, writer, node, leadingComments) {
        if (leadingComments && leadingComments.length && node.pos !== leadingComments[0].pos && getLineOfLocalPosition(currentSourceFile, node.pos) !== getLineOfLocalPosition(currentSourceFile, leadingComments[0].pos)) {
            writer.writeLine();
        }
    }
    function emitComments(currentSourceFile, writer, comments, trailingSeparator, newLine, writeComment) {
        var emitLeadingSpace = !trailingSeparator;
        ts.forEach(comments, function (comment) {
            if (emitLeadingSpace) {
                writer.write(" ");
                emitLeadingSpace = false;
            }
            writeComment(currentSourceFile, writer, comment, newLine);
            if (comment.hasTrailingNewLine) {
                writer.writeLine();
            }
            else if (trailingSeparator) {
                writer.write(" ");
            }
            else {
                emitLeadingSpace = true;
            }
        });
    }
    function writeCommentRange(currentSourceFile, writer, comment, newLine) {
        if (currentSourceFile.text.charCodeAt(comment.pos + 1) === 42 /* asterisk */) {
            var firstCommentLineAndCharacter = currentSourceFile.getLineAndCharacterFromPosition(comment.pos);
            var firstCommentLineIndent;
            for (var pos = comment.pos, currentLine = firstCommentLineAndCharacter.line; pos < comment.end; currentLine++) {
                var nextLineStart = currentSourceFile.getPositionFromLineAndCharacter(currentLine + 1, 1);
                if (pos !== comment.pos) {
                    if (firstCommentLineIndent === undefined) {
                        firstCommentLineIndent = calculateIndent(currentSourceFile.getPositionFromLineAndCharacter(firstCommentLineAndCharacter.line, 1), comment.pos);
                    }
                    var currentWriterIndentSpacing = writer.getIndent() * getIndentSize();
                    var spacesToEmit = currentWriterIndentSpacing - firstCommentLineIndent + calculateIndent(pos, nextLineStart);
                    if (spacesToEmit > 0) {
                        var numberOfSingleSpacesToEmit = spacesToEmit % getIndentSize();
                        var indentSizeSpaceString = getIndentString((spacesToEmit - numberOfSingleSpacesToEmit) / getIndentSize());
                        writer.rawWrite(indentSizeSpaceString);
                        while (numberOfSingleSpacesToEmit) {
                            writer.rawWrite(" ");
                            numberOfSingleSpacesToEmit--;
                        }
                    }
                    else {
                        writer.rawWrite("");
                    }
                }
                writeTrimmedCurrentLine(pos, nextLineStart);
                pos = nextLineStart;
            }
        }
        else {
            writer.write(currentSourceFile.text.substring(comment.pos, comment.end));
        }
        function writeTrimmedCurrentLine(pos, nextLineStart) {
            var end = Math.min(comment.end, nextLineStart - 1);
            var currentLineText = currentSourceFile.text.substring(pos, end).replace(/^\s+|\s+$/g, '');
            if (currentLineText) {
                writer.write(currentLineText);
                if (end !== comment.end) {
                    writer.writeLine();
                }
            }
            else {
                writer.writeLiteral(newLine);
            }
        }
        function calculateIndent(pos, end) {
            var currentLineIndent = 0;
            for (; pos < end && ts.isWhiteSpace(currentSourceFile.text.charCodeAt(pos)); pos++) {
                if (currentSourceFile.text.charCodeAt(pos) === 9 /* tab */) {
                    currentLineIndent += getIndentSize() - (currentLineIndent % getIndentSize());
                }
                else {
                    currentLineIndent++;
                }
            }
            return currentLineIndent;
        }
    }
    function getFirstConstructorWithBody(node) {
        return ts.forEach(node.members, function (member) {
            if (member.kind === 129 /* Constructor */ && member.body) {
                return member;
            }
        });
    }
    function getAllAccessorDeclarations(node, accessor) {
        var firstAccessor;
        var getAccessor;
        var setAccessor;
        if (accessor.name.kind === 122 /* ComputedPropertyName */) {
            firstAccessor = accessor;
            if (accessor.kind === 130 /* GetAccessor */) {
                getAccessor = accessor;
            }
            else if (accessor.kind === 131 /* SetAccessor */) {
                setAccessor = accessor;
            }
            else {
                ts.Debug.fail("Accessor has wrong kind");
            }
        }
        else {
            ts.forEach(node.members, function (member) {
                if ((member.kind === 130 /* GetAccessor */ || member.kind === 131 /* SetAccessor */) && member.name.text === accessor.name.text && (member.flags & 128 /* Static */) === (accessor.flags & 128 /* Static */)) {
                    if (!firstAccessor) {
                        firstAccessor = member;
                    }
                    if (member.kind === 130 /* GetAccessor */ && !getAccessor) {
                        getAccessor = member;
                    }
                    if (member.kind === 131 /* SetAccessor */ && !setAccessor) {
                        setAccessor = member;
                    }
                }
            });
        }
        return {
            firstAccessor: firstAccessor,
            getAccessor: getAccessor,
            setAccessor: setAccessor
        };
    }
    function getSourceFilePathInNewDir(sourceFile, program, newDirPath) {
        var compilerHost = program.getCompilerHost();
        var sourceFilePath = ts.getNormalizedAbsolutePath(sourceFile.filename, compilerHost.getCurrentDirectory());
        sourceFilePath = sourceFilePath.replace(program.getCommonSourceDirectory(), "");
        return ts.combinePaths(newDirPath, sourceFilePath);
    }
    function getOwnEmitOutputFilePath(sourceFile, program, extension) {
        var compilerOptions = program.getCompilerOptions();
        if (compilerOptions.outDir) {
            var emitOutputFilePathWithoutExtension = ts.removeFileExtension(getSourceFilePathInNewDir(sourceFile, program, compilerOptions.outDir));
        }
        else {
            var emitOutputFilePathWithoutExtension = ts.removeFileExtension(sourceFile.filename);
        }
        return emitOutputFilePathWithoutExtension + extension;
    }
    function writeFile(compilerHost, diagnostics, filename, data, writeByteOrderMark) {
        compilerHost.writeFile(filename, data, writeByteOrderMark, function (hostErrorMessage) {
            diagnostics.push(ts.createCompilerDiagnostic(ts.Diagnostics.Could_not_write_file_0_Colon_1, filename, hostErrorMessage));
        });
    }
    function emitDeclarations(program, resolver, diagnostics, jsFilePath, root) {
        var newLine = program.getCompilerHost().getNewLine();
        var compilerOptions = program.getCompilerOptions();
        var compilerHost = program.getCompilerHost();
        var write;
        var writeLine;
        var increaseIndent;
        var decreaseIndent;
        var writeTextOfNode;
        var writer = createAndSetNewTextWriterWithSymbolWriter();
        var enclosingDeclaration;
        var currentSourceFile;
        var reportedDeclarationError = false;
        var emitJsDocComments = compilerOptions.removeComments ? function (declaration) {
        } : writeJsDocComments;
        var aliasDeclarationEmitInfo = [];
        function createAndSetNewTextWriterWithSymbolWriter() {
            var writer = createTextWriter(newLine);
            writer.trackSymbol = trackSymbol;
            writer.writeKeyword = writer.write;
            writer.writeOperator = writer.write;
            writer.writePunctuation = writer.write;
            writer.writeSpace = writer.write;
            writer.writeStringLiteral = writer.writeLiteral;
            writer.writeParameter = writer.write;
            writer.writeSymbol = writer.write;
            setWriter(writer);
            return writer;
        }
        function setWriter(newWriter) {
            writer = newWriter;
            write = newWriter.write;
            writeTextOfNode = newWriter.writeTextOfNode;
            writeLine = newWriter.writeLine;
            increaseIndent = newWriter.increaseIndent;
            decreaseIndent = newWriter.decreaseIndent;
        }
        function writeAsychronousImportDeclarations(importDeclarations) {
            var oldWriter = writer;
            ts.forEach(importDeclarations, function (aliasToWrite) {
                var aliasEmitInfo = ts.forEach(aliasDeclarationEmitInfo, function (declEmitInfo) { return declEmitInfo.declaration === aliasToWrite ? declEmitInfo : undefined; });
                if (aliasEmitInfo) {
                    createAndSetNewTextWriterWithSymbolWriter();
                    for (var declarationIndent = aliasEmitInfo.indent; declarationIndent; declarationIndent--) {
                        increaseIndent();
                    }
                    writeImportDeclaration(aliasToWrite);
                    aliasEmitInfo.asynchronousOutput = writer.getText();
                }
            });
            setWriter(oldWriter);
        }
        function handleSymbolAccessibilityError(symbolAccesibilityResult) {
            if (symbolAccesibilityResult.accessibility === 0 /* Accessible */) {
                if (symbolAccesibilityResult && symbolAccesibilityResult.aliasesToMakeVisible) {
                    writeAsychronousImportDeclarations(symbolAccesibilityResult.aliasesToMakeVisible);
                }
            }
            else {
                reportedDeclarationError = true;
                var errorInfo = writer.getSymbolAccessibilityDiagnostic(symbolAccesibilityResult);
                if (errorInfo) {
                    if (errorInfo.typeName) {
                        diagnostics.push(ts.createDiagnosticForNode(symbolAccesibilityResult.errorNode || errorInfo.errorNode, errorInfo.diagnosticMessage, ts.getSourceTextOfNodeFromSourceFile(currentSourceFile, errorInfo.typeName), symbolAccesibilityResult.errorSymbolName, symbolAccesibilityResult.errorModuleName));
                    }
                    else {
                        diagnostics.push(ts.createDiagnosticForNode(symbolAccesibilityResult.errorNode || errorInfo.errorNode, errorInfo.diagnosticMessage, symbolAccesibilityResult.errorSymbolName, symbolAccesibilityResult.errorModuleName));
                    }
                }
            }
        }
        function trackSymbol(symbol, enclosingDeclaration, meaning) {
            handleSymbolAccessibilityError(resolver.isSymbolAccessible(symbol, enclosingDeclaration, meaning));
        }
        function writeTypeOfDeclaration(declaration, type, getSymbolAccessibilityDiagnostic) {
            writer.getSymbolAccessibilityDiagnostic = getSymbolAccessibilityDiagnostic;
            write(": ");
            if (type) {
                emitType(type);
            }
            else {
                resolver.writeTypeOfDeclaration(declaration, enclosingDeclaration, 2 /* UseTypeOfFunction */, writer);
            }
        }
        function writeReturnTypeAtSignature(signature, getSymbolAccessibilityDiagnostic) {
            writer.getSymbolAccessibilityDiagnostic = getSymbolAccessibilityDiagnostic;
            write(": ");
            if (signature.type) {
                emitType(signature.type);
            }
            else {
                resolver.writeReturnTypeOfSignatureDeclaration(signature, enclosingDeclaration, 2 /* UseTypeOfFunction */, writer);
            }
        }
        function emitLines(nodes) {
            for (var i = 0, n = nodes.length; i < n; i++) {
                emitNode(nodes[i]);
            }
        }
        function emitSeparatedList(nodes, separator, eachNodeEmitFn) {
            var currentWriterPos = writer.getTextPos();
            for (var i = 0, n = nodes.length; i < n; i++) {
                if (currentWriterPos !== writer.getTextPos()) {
                    write(separator);
                }
                currentWriterPos = writer.getTextPos();
                eachNodeEmitFn(nodes[i]);
            }
        }
        function emitCommaList(nodes, eachNodeEmitFn) {
            emitSeparatedList(nodes, ", ", eachNodeEmitFn);
        }
        function writeJsDocComments(declaration) {
            if (declaration) {
                var jsDocComments = ts.getJsDocComments(declaration, currentSourceFile);
                emitNewLineBeforeLeadingComments(currentSourceFile, writer, declaration, jsDocComments);
                emitComments(currentSourceFile, writer, jsDocComments, true, newLine, writeCommentRange);
            }
        }
        function emitTypeWithNewGetSymbolAccessibilityDiagnostic(type, getSymbolAccessibilityDiagnostic) {
            writer.getSymbolAccessibilityDiagnostic = getSymbolAccessibilityDiagnostic;
            emitType(type);
        }
        function emitType(type) {
            switch (type.kind) {
                case 110 /* AnyKeyword */:
                case 119 /* StringKeyword */:
                case 117 /* NumberKeyword */:
                case 111 /* BooleanKeyword */:
                case 98 /* VoidKeyword */:
                case 8 /* StringLiteral */:
                    return writeTextOfNode(currentSourceFile, type);
                case 135 /* TypeReference */:
                    return emitTypeReference(type);
                case 138 /* TypeQuery */:
                    return emitTypeQuery(type);
                case 140 /* ArrayType */:
                    return emitArrayType(type);
                case 141 /* TupleType */:
                    return emitTupleType(type);
                case 142 /* UnionType */:
                    return emitUnionType(type);
                case 143 /* ParenthesizedType */:
                    return emitParenType(type);
                case 136 /* FunctionType */:
                case 137 /* ConstructorType */:
                    return emitSignatureDeclarationWithJsDocComments(type);
                case 139 /* TypeLiteral */:
                    return emitTypeLiteral(type);
                case 64 /* Identifier */:
                    return emitEntityName(type);
                case 121 /* QualifiedName */:
                    return emitEntityName(type);
                default:
                    ts.Debug.fail("Unknown type annotation: " + type.kind);
            }
            function emitEntityName(entityName) {
                var visibilityResult = resolver.isEntityNameVisible(entityName, entityName.parent.kind === 197 /* ImportDeclaration */ ? entityName.parent : enclosingDeclaration);
                handleSymbolAccessibilityError(visibilityResult);
                writeEntityName(entityName);
                function writeEntityName(entityName) {
                    if (entityName.kind === 64 /* Identifier */) {
                        writeTextOfNode(currentSourceFile, entityName);
                    }
                    else {
                        var qualifiedName = entityName;
                        writeEntityName(qualifiedName.left);
                        write(".");
                        writeTextOfNode(currentSourceFile, qualifiedName.right);
                    }
                }
            }
            function emitTypeReference(type) {
                emitEntityName(type.typeName);
                if (type.typeArguments) {
                    write("<");
                    emitCommaList(type.typeArguments, emitType);
                    write(">");
                }
            }
            function emitTypeQuery(type) {
                write("typeof ");
                emitEntityName(type.exprName);
            }
            function emitArrayType(type) {
                emitType(type.elementType);
                write("[]");
            }
            function emitTupleType(type) {
                write("[");
                emitCommaList(type.elementTypes, emitType);
                write("]");
            }
            function emitUnionType(type) {
                emitSeparatedList(type.types, " | ", emitType);
            }
            function emitParenType(type) {
                write("(");
                emitType(type.type);
                write(")");
            }
            function emitTypeLiteral(type) {
                write("{");
                if (type.members.length) {
                    writeLine();
                    increaseIndent();
                    emitLines(type.members);
                    decreaseIndent();
                }
                write("}");
            }
        }
        function emitSourceFile(node) {
            currentSourceFile = node;
            enclosingDeclaration = node;
            emitLines(node.statements);
        }
        function emitExportAssignment(node) {
            write("export = ");
            writeTextOfNode(currentSourceFile, node.exportName);
            write(";");
            writeLine();
        }
        function emitModuleElementDeclarationFlags(node) {
            if (node.parent === currentSourceFile) {
                if (node.flags & 1 /* Export */) {
                    write("export ");
                }
                if (node.kind !== 192 /* InterfaceDeclaration */) {
                    write("declare ");
                }
            }
        }
        function emitClassMemberDeclarationFlags(node) {
            if (node.flags & 32 /* Private */) {
                write("private ");
            }
            else if (node.flags & 64 /* Protected */) {
                write("protected ");
            }
            if (node.flags & 128 /* Static */) {
                write("static ");
            }
        }
        function emitImportDeclaration(node) {
            var nodeEmitInfo = {
                declaration: node,
                outputPos: writer.getTextPos(),
                indent: writer.getIndent(),
                hasWritten: resolver.isDeclarationVisible(node)
            };
            aliasDeclarationEmitInfo.push(nodeEmitInfo);
            if (nodeEmitInfo.hasWritten) {
                writeImportDeclaration(node);
            }
        }
        function writeImportDeclaration(node) {
            emitJsDocComments(node);
            if (node.flags & 1 /* Export */) {
                write("export ");
            }
            write("import ");
            writeTextOfNode(currentSourceFile, node.name);
            write(" = ");
            if (ts.isInternalModuleImportDeclaration(node)) {
                emitTypeWithNewGetSymbolAccessibilityDiagnostic(node.moduleReference, getImportEntityNameVisibilityError);
                write(";");
            }
            else {
                write("require(");
                writeTextOfNode(currentSourceFile, ts.getExternalModuleImportDeclarationExpression(node));
                write(");");
            }
            writer.writeLine();
            function getImportEntityNameVisibilityError(symbolAccesibilityResult) {
                return {
                    diagnosticMessage: ts.Diagnostics.Import_declaration_0_is_using_private_name_1,
                    errorNode: node,
                    typeName: node.name
                };
            }
        }
        function emitModuleDeclaration(node) {
            if (resolver.isDeclarationVisible(node)) {
                emitJsDocComments(node);
                emitModuleElementDeclarationFlags(node);
                write("module ");
                writeTextOfNode(currentSourceFile, node.name);
                while (node.body.kind !== 196 /* ModuleBlock */) {
                    node = node.body;
                    write(".");
                    writeTextOfNode(currentSourceFile, node.name);
                }
                var prevEnclosingDeclaration = enclosingDeclaration;
                enclosingDeclaration = node;
                write(" {");
                writeLine();
                increaseIndent();
                emitLines(node.body.statements);
                decreaseIndent();
                write("}");
                writeLine();
                enclosingDeclaration = prevEnclosingDeclaration;
            }
        }
        function emitTypeAliasDeclaration(node) {
            if (resolver.isDeclarationVisible(node)) {
                emitJsDocComments(node);
                emitModuleElementDeclarationFlags(node);
                write("type ");
                writeTextOfNode(currentSourceFile, node.name);
                write(" = ");
                emitTypeWithNewGetSymbolAccessibilityDiagnostic(node.type, getTypeAliasDeclarationVisibilityError);
                write(";");
                writeLine();
            }
            function getTypeAliasDeclarationVisibilityError(symbolAccesibilityResult) {
                return {
                    diagnosticMessage: ts.Diagnostics.Exported_type_alias_0_has_or_is_using_private_name_1,
                    errorNode: node.type,
                    typeName: node.name
                };
            }
        }
        function emitEnumDeclaration(node) {
            if (resolver.isDeclarationVisible(node)) {
                emitJsDocComments(node);
                emitModuleElementDeclarationFlags(node);
                if (ts.isConst(node)) {
                    write("const ");
                }
                write("enum ");
                writeTextOfNode(currentSourceFile, node.name);
                write(" {");
                writeLine();
                increaseIndent();
                emitLines(node.members);
                decreaseIndent();
                write("}");
                writeLine();
            }
        }
        function emitEnumMemberDeclaration(node) {
            emitJsDocComments(node);
            writeTextOfNode(currentSourceFile, node.name);
            var enumMemberValue = resolver.getEnumMemberValue(node);
            if (enumMemberValue !== undefined) {
                write(" = ");
                write(enumMemberValue.toString());
            }
            write(",");
            writeLine();
        }
        function isPrivateMethodTypeParameter(node) {
            return node.parent.kind === 128 /* MethodDeclaration */ && (node.parent.flags & 32 /* Private */);
        }
        function emitTypeParameters(typeParameters) {
            function emitTypeParameter(node) {
                increaseIndent();
                emitJsDocComments(node);
                decreaseIndent();
                writeTextOfNode(currentSourceFile, node.name);
                if (node.constraint && !isPrivateMethodTypeParameter(node)) {
                    write(" extends ");
                    if (node.parent.kind === 136 /* FunctionType */ || node.parent.kind === 137 /* ConstructorType */ || (node.parent.parent && node.parent.parent.kind === 139 /* TypeLiteral */)) {
                        ts.Debug.assert(node.parent.kind === 128 /* MethodDeclaration */ || node.parent.kind === 127 /* MethodSignature */ || node.parent.kind === 136 /* FunctionType */ || node.parent.kind === 137 /* ConstructorType */ || node.parent.kind === 132 /* CallSignature */ || node.parent.kind === 133 /* ConstructSignature */);
                        emitType(node.constraint);
                    }
                    else {
                        emitTypeWithNewGetSymbolAccessibilityDiagnostic(node.constraint, getTypeParameterConstraintVisibilityError);
                    }
                }
                function getTypeParameterConstraintVisibilityError(symbolAccesibilityResult) {
                    var diagnosticMessage;
                    switch (node.parent.kind) {
                        case 191 /* ClassDeclaration */:
                            diagnosticMessage = ts.Diagnostics.Type_parameter_0_of_exported_class_has_or_is_using_private_name_1;
                            break;
                        case 192 /* InterfaceDeclaration */:
                            diagnosticMessage = ts.Diagnostics.Type_parameter_0_of_exported_interface_has_or_is_using_private_name_1;
                            break;
                        case 133 /* ConstructSignature */:
                            diagnosticMessage = ts.Diagnostics.Type_parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1;
                            break;
                        case 132 /* CallSignature */:
                            diagnosticMessage = ts.Diagnostics.Type_parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1;
                            break;
                        case 128 /* MethodDeclaration */:
                        case 127 /* MethodSignature */:
                            if (node.parent.flags & 128 /* Static */) {
                                diagnosticMessage = ts.Diagnostics.Type_parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1;
                            }
                            else if (node.parent.parent.kind === 191 /* ClassDeclaration */) {
                                diagnosticMessage = ts.Diagnostics.Type_parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1;
                            }
                            else {
                                diagnosticMessage = ts.Diagnostics.Type_parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1;
                            }
                            break;
                        case 190 /* FunctionDeclaration */:
                            diagnosticMessage = ts.Diagnostics.Type_parameter_0_of_exported_function_has_or_is_using_private_name_1;
                            break;
                        default:
                            ts.Debug.fail("This is unknown parent for type parameter: " + node.parent.kind);
                    }
                    return {
                        diagnosticMessage: diagnosticMessage,
                        errorNode: node,
                        typeName: node.name
                    };
                }
            }
            if (typeParameters) {
                write("<");
                emitCommaList(typeParameters, emitTypeParameter);
                write(">");
            }
        }
        function emitHeritageClause(typeReferences, isImplementsList) {
            if (typeReferences) {
                write(isImplementsList ? " implements " : " extends ");
                emitCommaList(typeReferences, emitTypeOfTypeReference);
            }
            function emitTypeOfTypeReference(node) {
                emitTypeWithNewGetSymbolAccessibilityDiagnostic(node, getHeritageClauseVisibilityError);
                function getHeritageClauseVisibilityError(symbolAccesibilityResult) {
                    var diagnosticMessage;
                    if (node.parent.parent.kind === 191 /* ClassDeclaration */) {
                        diagnosticMessage = isImplementsList ? ts.Diagnostics.Implements_clause_of_exported_class_0_has_or_is_using_private_name_1 : ts.Diagnostics.Extends_clause_of_exported_class_0_has_or_is_using_private_name_1;
                    }
                    else {
                        diagnosticMessage = ts.Diagnostics.Extends_clause_of_exported_interface_0_has_or_is_using_private_name_1;
                    }
                    return {
                        diagnosticMessage: diagnosticMessage,
                        errorNode: node,
                        typeName: node.parent.parent.name
                    };
                }
            }
        }
        function emitClassDeclaration(node) {
            function emitParameterProperties(constructorDeclaration) {
                if (constructorDeclaration) {
                    ts.forEach(constructorDeclaration.parameters, function (param) {
                        if (param.flags & 112 /* AccessibilityModifier */) {
                            emitPropertyDeclaration(param);
                        }
                    });
                }
            }
            if (resolver.isDeclarationVisible(node)) {
                emitJsDocComments(node);
                emitModuleElementDeclarationFlags(node);
                write("class ");
                writeTextOfNode(currentSourceFile, node.name);
                var prevEnclosingDeclaration = enclosingDeclaration;
                enclosingDeclaration = node;
                emitTypeParameters(node.typeParameters);
                var baseTypeNode = ts.getClassBaseTypeNode(node);
                if (baseTypeNode) {
                    emitHeritageClause([baseTypeNode], false);
                }
                emitHeritageClause(ts.getClassImplementedTypeNodes(node), true);
                write(" {");
                writeLine();
                increaseIndent();
                emitParameterProperties(getFirstConstructorWithBody(node));
                emitLines(node.members);
                decreaseIndent();
                write("}");
                writeLine();
                enclosingDeclaration = prevEnclosingDeclaration;
            }
        }
        function emitInterfaceDeclaration(node) {
            if (resolver.isDeclarationVisible(node)) {
                emitJsDocComments(node);
                emitModuleElementDeclarationFlags(node);
                write("interface ");
                writeTextOfNode(currentSourceFile, node.name);
                var prevEnclosingDeclaration = enclosingDeclaration;
                enclosingDeclaration = node;
                emitTypeParameters(node.typeParameters);
                emitHeritageClause(ts.getInterfaceBaseTypeNodes(node), false);
                write(" {");
                writeLine();
                increaseIndent();
                emitLines(node.members);
                decreaseIndent();
                write("}");
                writeLine();
                enclosingDeclaration = prevEnclosingDeclaration;
            }
        }
        function emitPropertyDeclaration(node) {
            emitJsDocComments(node);
            emitClassMemberDeclarationFlags(node);
            emitVariableDeclaration(node);
            write(";");
            writeLine();
        }
        function emitVariableDeclaration(node) {
            if (node.kind !== 189 /* VariableDeclaration */ || resolver.isDeclarationVisible(node)) {
                writeTextOfNode(currentSourceFile, node.name);
                if ((node.kind === 126 /* PropertyDeclaration */ || node.kind === 125 /* PropertySignature */) && ts.hasQuestionToken(node)) {
                    write("?");
                }
                if ((node.kind === 126 /* PropertyDeclaration */ || node.kind === 125 /* PropertySignature */) && node.parent.kind === 139 /* TypeLiteral */) {
                    emitTypeOfVariableDeclarationFromTypeLiteral(node);
                }
                else if (!(node.flags & 32 /* Private */)) {
                    writeTypeOfDeclaration(node, node.type, getVariableDeclarationTypeVisibilityError);
                }
            }
            function getVariableDeclarationTypeVisibilityError(symbolAccesibilityResult) {
                var diagnosticMessage;
                if (node.kind === 189 /* VariableDeclaration */) {
                    diagnosticMessage = symbolAccesibilityResult.errorModuleName ? symbolAccesibilityResult.accessibility === 2 /* CannotBeNamed */ ? ts.Diagnostics.Exported_variable_0_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named : ts.Diagnostics.Exported_variable_0_has_or_is_using_name_1_from_private_module_2 : ts.Diagnostics.Exported_variable_0_has_or_is_using_private_name_1;
                }
                else if (node.kind === 126 /* PropertyDeclaration */ || node.kind === 125 /* PropertySignature */) {
                    if (node.flags & 128 /* Static */) {
                        diagnosticMessage = symbolAccesibilityResult.errorModuleName ? symbolAccesibilityResult.accessibility === 2 /* CannotBeNamed */ ? ts.Diagnostics.Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named : ts.Diagnostics.Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2 : ts.Diagnostics.Public_static_property_0_of_exported_class_has_or_is_using_private_name_1;
                    }
                    else if (node.parent.kind === 191 /* ClassDeclaration */) {
                        diagnosticMessage = symbolAccesibilityResult.errorModuleName ? symbolAccesibilityResult.accessibility === 2 /* CannotBeNamed */ ? ts.Diagnostics.Public_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named : ts.Diagnostics.Public_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2 : ts.Diagnostics.Public_property_0_of_exported_class_has_or_is_using_private_name_1;
                    }
                    else {
                        diagnosticMessage = symbolAccesibilityResult.errorModuleName ? ts.Diagnostics.Property_0_of_exported_interface_has_or_is_using_name_1_from_private_module_2 : ts.Diagnostics.Property_0_of_exported_interface_has_or_is_using_private_name_1;
                    }
                }
                return diagnosticMessage !== undefined ? {
                    diagnosticMessage: diagnosticMessage,
                    errorNode: node,
                    typeName: node.name
                } : undefined;
            }
        }
        function emitTypeOfVariableDeclarationFromTypeLiteral(node) {
            if (node.type) {
                write(": ");
                emitType(node.type);
            }
        }
        function emitVariableStatement(node) {
            var hasDeclarationWithEmit = ts.forEach(node.declarations, function (varDeclaration) { return resolver.isDeclarationVisible(varDeclaration); });
            if (hasDeclarationWithEmit) {
                emitJsDocComments(node);
                emitModuleElementDeclarationFlags(node);
                if (ts.isLet(node)) {
                    write("let ");
                }
                else if (ts.isConst(node)) {
                    write("const ");
                }
                else {
                    write("var ");
                }
                emitCommaList(node.declarations, emitVariableDeclaration);
                write(";");
                writeLine();
            }
        }
        function emitAccessorDeclaration(node) {
            var accessors = getAllAccessorDeclarations(node.parent, node);
            if (node === accessors.firstAccessor) {
                emitJsDocComments(accessors.getAccessor);
                emitJsDocComments(accessors.setAccessor);
                emitClassMemberDeclarationFlags(node);
                writeTextOfNode(currentSourceFile, node.name);
                if (!(node.flags & 32 /* Private */)) {
                    var accessorWithTypeAnnotation = node;
                    var type = getTypeAnnotationFromAccessor(node);
                    if (!type) {
                        var anotherAccessor = node.kind === 130 /* GetAccessor */ ? accessors.setAccessor : accessors.getAccessor;
                        type = getTypeAnnotationFromAccessor(anotherAccessor);
                        if (type) {
                            accessorWithTypeAnnotation = anotherAccessor;
                        }
                    }
                    writeTypeOfDeclaration(node, type, getAccessorDeclarationTypeVisibilityError);
                }
                write(";");
                writeLine();
            }
            function getTypeAnnotationFromAccessor(accessor) {
                if (accessor) {
                    return accessor.kind === 130 /* GetAccessor */ ? accessor.type : accessor.parameters[0].type;
                }
            }
            function getAccessorDeclarationTypeVisibilityError(symbolAccesibilityResult) {
                var diagnosticMessage;
                if (accessorWithTypeAnnotation.kind === 131 /* SetAccessor */) {
                    if (accessorWithTypeAnnotation.parent.flags & 128 /* Static */) {
                        diagnosticMessage = symbolAccesibilityResult.errorModuleName ? ts.Diagnostics.Parameter_0_of_public_static_property_setter_from_exported_class_has_or_is_using_name_1_from_private_module_2 : ts.Diagnostics.Parameter_0_of_public_static_property_setter_from_exported_class_has_or_is_using_private_name_1;
                    }
                    else {
                        diagnosticMessage = symbolAccesibilityResult.errorModuleName ? ts.Diagnostics.Parameter_0_of_public_property_setter_from_exported_class_has_or_is_using_name_1_from_private_module_2 : ts.Diagnostics.Parameter_0_of_public_property_setter_from_exported_class_has_or_is_using_private_name_1;
                    }
                    return {
                        diagnosticMessage: diagnosticMessage,
                        errorNode: accessorWithTypeAnnotation.parameters[0],
                        typeName: accessorWithTypeAnnotation.name
                    };
                }
                else {
                    if (accessorWithTypeAnnotation.flags & 128 /* Static */) {
                        diagnosticMessage = symbolAccesibilityResult.errorModuleName ? symbolAccesibilityResult.accessibility === 2 /* CannotBeNamed */ ? ts.Diagnostics.Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named : ts.Diagnostics.Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_name_0_from_private_module_1 : ts.Diagnostics.Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_private_name_0;
                    }
                    else {
                        diagnosticMessage = symbolAccesibilityResult.errorModuleName ? symbolAccesibilityResult.accessibility === 2 /* CannotBeNamed */ ? ts.Diagnostics.Return_type_of_public_property_getter_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named : ts.Diagnostics.Return_type_of_public_property_getter_from_exported_class_has_or_is_using_name_0_from_private_module_1 : ts.Diagnostics.Return_type_of_public_property_getter_from_exported_class_has_or_is_using_private_name_0;
                    }
                    return {
                        diagnosticMessage: diagnosticMessage,
                        errorNode: accessorWithTypeAnnotation.name,
                        typeName: undefined
                    };
                }
            }
        }
        function emitFunctionDeclaration(node) {
            if ((node.kind !== 190 /* FunctionDeclaration */ || resolver.isDeclarationVisible(node)) && !resolver.isImplementationOfOverload(node)) {
                emitJsDocComments(node);
                if (node.kind === 190 /* FunctionDeclaration */) {
                    emitModuleElementDeclarationFlags(node);
                }
                else if (node.kind === 128 /* MethodDeclaration */) {
                    emitClassMemberDeclarationFlags(node);
                }
                if (node.kind === 190 /* FunctionDeclaration */) {
                    write("function ");
                    writeTextOfNode(currentSourceFile, node.name);
                }
                else if (node.kind === 129 /* Constructor */) {
                    write("constructor");
                }
                else {
                    writeTextOfNode(currentSourceFile, node.name);
                    if (ts.hasQuestionToken(node)) {
                        write("?");
                    }
                }
                emitSignatureDeclaration(node);
            }
        }
        function emitSignatureDeclarationWithJsDocComments(node) {
            emitJsDocComments(node);
            emitSignatureDeclaration(node);
        }
        function emitSignatureDeclaration(node) {
            if (node.kind === 133 /* ConstructSignature */ || node.kind === 137 /* ConstructorType */) {
                write("new ");
            }
            emitTypeParameters(node.typeParameters);
            if (node.kind === 134 /* IndexSignature */) {
                write("[");
            }
            else {
                write("(");
            }
            var prevEnclosingDeclaration = enclosingDeclaration;
            enclosingDeclaration = node;
            emitCommaList(node.parameters, emitParameterDeclaration);
            if (node.kind === 134 /* IndexSignature */) {
                write("]");
            }
            else {
                write(")");
            }
            var isFunctionTypeOrConstructorType = node.kind === 136 /* FunctionType */ || node.kind === 137 /* ConstructorType */;
            if (isFunctionTypeOrConstructorType || node.parent.kind === 139 /* TypeLiteral */) {
                if (node.type) {
                    write(isFunctionTypeOrConstructorType ? " => " : ": ");
                    emitType(node.type);
                }
            }
            else if (node.kind !== 129 /* Constructor */ && !(node.flags & 32 /* Private */)) {
                writeReturnTypeAtSignature(node, getReturnTypeVisibilityError);
            }
            enclosingDeclaration = prevEnclosingDeclaration;
            if (!isFunctionTypeOrConstructorType) {
                write(";");
                writeLine();
            }
            function getReturnTypeVisibilityError(symbolAccesibilityResult) {
                var diagnosticMessage;
                switch (node.kind) {
                    case 133 /* ConstructSignature */:
                        diagnosticMessage = symbolAccesibilityResult.errorModuleName ? ts.Diagnostics.Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1 : ts.Diagnostics.Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_0;
                        break;
                    case 132 /* CallSignature */:
                        diagnosticMessage = symbolAccesibilityResult.errorModuleName ? ts.Diagnostics.Return_type_of_call_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1 : ts.Diagnostics.Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_name_0;
                        break;
                    case 134 /* IndexSignature */:
                        diagnosticMessage = symbolAccesibilityResult.errorModuleName ? ts.Diagnostics.Return_type_of_index_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1 : ts.Diagnostics.Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_name_0;
                        break;
                    case 128 /* MethodDeclaration */:
                    case 127 /* MethodSignature */:
                        if (node.flags & 128 /* Static */) {
                            diagnosticMessage = symbolAccesibilityResult.errorModuleName ? symbolAccesibilityResult.accessibility === 2 /* CannotBeNamed */ ? ts.Diagnostics.Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named : ts.Diagnostics.Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_private_module_1 : ts.Diagnostics.Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_name_0;
                        }
                        else if (node.parent.kind === 191 /* ClassDeclaration */) {
                            diagnosticMessage = symbolAccesibilityResult.errorModuleName ? symbolAccesibilityResult.accessibility === 2 /* CannotBeNamed */ ? ts.Diagnostics.Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named : ts.Diagnostics.Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_private_module_1 : ts.Diagnostics.Return_type_of_public_method_from_exported_class_has_or_is_using_private_name_0;
                        }
                        else {
                            diagnosticMessage = symbolAccesibilityResult.errorModuleName ? ts.Diagnostics.Return_type_of_method_from_exported_interface_has_or_is_using_name_0_from_private_module_1 : ts.Diagnostics.Return_type_of_method_from_exported_interface_has_or_is_using_private_name_0;
                        }
                        break;
                    case 190 /* FunctionDeclaration */:
                        diagnosticMessage = symbolAccesibilityResult.errorModuleName ? symbolAccesibilityResult.accessibility === 2 /* CannotBeNamed */ ? ts.Diagnostics.Return_type_of_exported_function_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named : ts.Diagnostics.Return_type_of_exported_function_has_or_is_using_name_0_from_private_module_1 : ts.Diagnostics.Return_type_of_exported_function_has_or_is_using_private_name_0;
                        break;
                    default:
                        ts.Debug.fail("This is unknown kind for signature: " + node.kind);
                }
                return {
                    diagnosticMessage: diagnosticMessage,
                    errorNode: node.name || node
                };
            }
        }
        function emitParameterDeclaration(node) {
            increaseIndent();
            emitJsDocComments(node);
            if (node.dotDotDotToken) {
                write("...");
            }
            if (ts.isBindingPattern(node.name)) {
                write("_" + ts.indexOf(node.parent.parameters, node));
            }
            else {
                writeTextOfNode(currentSourceFile, node.name);
            }
            if (node.initializer || ts.hasQuestionToken(node)) {
                write("?");
            }
            decreaseIndent();
            if (node.parent.kind === 136 /* FunctionType */ || node.parent.kind === 137 /* ConstructorType */ || node.parent.parent.kind === 139 /* TypeLiteral */) {
                emitTypeOfVariableDeclarationFromTypeLiteral(node);
            }
            else if (!(node.parent.flags & 32 /* Private */)) {
                writeTypeOfDeclaration(node, node.type, getParameterDeclarationTypeVisibilityError);
            }
            function getParameterDeclarationTypeVisibilityError(symbolAccesibilityResult) {
                var diagnosticMessage;
                switch (node.parent.kind) {
                    case 129 /* Constructor */:
                        diagnosticMessage = symbolAccesibilityResult.errorModuleName ? symbolAccesibilityResult.accessibility === 2 /* CannotBeNamed */ ? ts.Diagnostics.Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named : ts.Diagnostics.Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_private_module_2 : ts.Diagnostics.Parameter_0_of_constructor_from_exported_class_has_or_is_using_private_name_1;
                        break;
                    case 133 /* ConstructSignature */:
                        diagnosticMessage = symbolAccesibilityResult.errorModuleName ? ts.Diagnostics.Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2 : ts.Diagnostics.Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1;
                        break;
                    case 132 /* CallSignature */:
                        diagnosticMessage = symbolAccesibilityResult.errorModuleName ? ts.Diagnostics.Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2 : ts.Diagnostics.Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1;
                        break;
                    case 128 /* MethodDeclaration */:
                    case 127 /* MethodSignature */:
                        if (node.parent.flags & 128 /* Static */) {
                            diagnosticMessage = symbolAccesibilityResult.errorModuleName ? symbolAccesibilityResult.accessibility === 2 /* CannotBeNamed */ ? ts.Diagnostics.Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named : ts.Diagnostics.Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_private_module_2 : ts.Diagnostics.Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1;
                        }
                        else if (node.parent.parent.kind === 191 /* ClassDeclaration */) {
                            diagnosticMessage = symbolAccesibilityResult.errorModuleName ? symbolAccesibilityResult.accessibility === 2 /* CannotBeNamed */ ? ts.Diagnostics.Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named : ts.Diagnostics.Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_private_module_2 : ts.Diagnostics.Parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1;
                        }
                        else {
                            diagnosticMessage = symbolAccesibilityResult.errorModuleName ? ts.Diagnostics.Parameter_0_of_method_from_exported_interface_has_or_is_using_name_1_from_private_module_2 : ts.Diagnostics.Parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1;
                        }
                        break;
                    case 190 /* FunctionDeclaration */:
                        diagnosticMessage = symbolAccesibilityResult.errorModuleName ? symbolAccesibilityResult.accessibility === 2 /* CannotBeNamed */ ? ts.Diagnostics.Parameter_0_of_exported_function_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named : ts.Diagnostics.Parameter_0_of_exported_function_has_or_is_using_name_1_from_private_module_2 : ts.Diagnostics.Parameter_0_of_exported_function_has_or_is_using_private_name_1;
                        break;
                    default:
                        ts.Debug.fail("This is unknown parent for parameter: " + node.parent.kind);
                }
                return {
                    diagnosticMessage: diagnosticMessage,
                    errorNode: node,
                    typeName: node.name
                };
            }
        }
        function emitNode(node) {
            switch (node.kind) {
                case 129 /* Constructor */:
                case 190 /* FunctionDeclaration */:
                case 128 /* MethodDeclaration */:
                case 127 /* MethodSignature */:
                    return emitFunctionDeclaration(node);
                case 133 /* ConstructSignature */:
                case 132 /* CallSignature */:
                case 134 /* IndexSignature */:
                    return emitSignatureDeclarationWithJsDocComments(node);
                case 130 /* GetAccessor */:
                case 131 /* SetAccessor */:
                    return emitAccessorDeclaration(node);
                case 170 /* VariableStatement */:
                    return emitVariableStatement(node);
                case 126 /* PropertyDeclaration */:
                case 125 /* PropertySignature */:
                    return emitPropertyDeclaration(node);
                case 192 /* InterfaceDeclaration */:
                    return emitInterfaceDeclaration(node);
                case 191 /* ClassDeclaration */:
                    return emitClassDeclaration(node);
                case 193 /* TypeAliasDeclaration */:
                    return emitTypeAliasDeclaration(node);
                case 206 /* EnumMember */:
                    return emitEnumMemberDeclaration(node);
                case 194 /* EnumDeclaration */:
                    return emitEnumDeclaration(node);
                case 195 /* ModuleDeclaration */:
                    return emitModuleDeclaration(node);
                case 197 /* ImportDeclaration */:
                    return emitImportDeclaration(node);
                case 198 /* ExportAssignment */:
                    return emitExportAssignment(node);
                case 207 /* SourceFile */:
                    return emitSourceFile(node);
            }
        }
        var referencePathsOutput = "";
        function writeReferencePath(referencedFile) {
            var declFileName = referencedFile.flags & 1024 /* DeclarationFile */ ? referencedFile.filename : shouldEmitToOwnFile(referencedFile, compilerOptions) ? getOwnEmitOutputFilePath(referencedFile, program, ".d.ts") : ts.removeFileExtension(compilerOptions.out) + ".d.ts";
            declFileName = ts.getRelativePathToDirectoryOrUrl(ts.getDirectoryPath(ts.normalizeSlashes(jsFilePath)), declFileName, compilerHost.getCurrentDirectory(), compilerHost.getCanonicalFileName, false);
            referencePathsOutput += "/// <reference path=\"" + declFileName + "\" />" + newLine;
        }
        if (root) {
            if (!compilerOptions.noResolve) {
                var addedGlobalFileReference = false;
                ts.forEach(root.referencedFiles, function (fileReference) {
                    var referencedFile = ts.tryResolveScriptReference(program, root, fileReference);
                    if (referencedFile && ((referencedFile.flags & 1024 /* DeclarationFile */) || shouldEmitToOwnFile(referencedFile, compilerOptions) || !addedGlobalFileReference)) {
                        writeReferencePath(referencedFile);
                        if (!isExternalModuleOrDeclarationFile(referencedFile)) {
                            addedGlobalFileReference = true;
                        }
                    }
                });
            }
            emitNode(root);
        }
        else {
            var emittedReferencedFiles = [];
            ts.forEach(program.getSourceFiles(), function (sourceFile) {
                if (!isExternalModuleOrDeclarationFile(sourceFile)) {
                    if (!compilerOptions.noResolve) {
                        ts.forEach(sourceFile.referencedFiles, function (fileReference) {
                            var referencedFile = ts.tryResolveScriptReference(program, sourceFile, fileReference);
                            if (referencedFile && (isExternalModuleOrDeclarationFile(referencedFile) && !ts.contains(emittedReferencedFiles, referencedFile))) {
                                writeReferencePath(referencedFile);
                                emittedReferencedFiles.push(referencedFile);
                            }
                        });
                    }
                    emitNode(sourceFile);
                }
            });
        }
        return {
            reportedDeclarationError: reportedDeclarationError,
            aliasDeclarationEmitInfo: aliasDeclarationEmitInfo,
            synchronousDeclarationOutput: writer.getText(),
            referencePathsOutput: referencePathsOutput
        };
    }
    function getDeclarationDiagnostics(program, resolver, targetSourceFile) {
        var diagnostics = [];
        var jsFilePath = getOwnEmitOutputFilePath(targetSourceFile, program, ".js");
        emitDeclarations(program, resolver, diagnostics, jsFilePath, targetSourceFile);
        return diagnostics;
    }
    ts.getDeclarationDiagnostics = getDeclarationDiagnostics;
    function emitFiles(resolver, targetSourceFile) {
        var program = resolver.getProgram();
        var compilerHost = program.getCompilerHost();
        var compilerOptions = program.getCompilerOptions();
        var sourceMapDataList = compilerOptions.sourceMap ? [] : undefined;
        var diagnostics = [];
        var newLine = program.getCompilerHost().getNewLine();
        function emitJavaScript(jsFilePath, root) {
            var writer = createTextWriter(newLine);
            var write = writer.write;
            var writeTextOfNode = writer.writeTextOfNode;
            var writeLine = writer.writeLine;
            var increaseIndent = writer.increaseIndent;
            var decreaseIndent = writer.decreaseIndent;
            var currentSourceFile;
            var extendsEmitted = false;
            var tempCount = 0;
            var tempVariables;
            var tempParameters;
            var writeEmittedFiles = writeJavaScriptFile;
            var emitLeadingComments = compilerOptions.removeComments ? function (node) {
            } : emitLeadingDeclarationComments;
            var emitTrailingComments = compilerOptions.removeComments ? function (node) {
            } : emitTrailingDeclarationComments;
            var emitLeadingCommentsOfPosition = compilerOptions.removeComments ? function (pos) {
            } : emitLeadingCommentsOfLocalPosition;
            var detachedCommentsInfo;
            var emitDetachedComments = compilerOptions.removeComments ? function (node) {
            } : emitDetachedCommentsAtPosition;
            var emitPinnedOrTripleSlashComments = compilerOptions.removeComments ? function (node) {
            } : emitPinnedOrTripleSlashCommentsOfNode;
            var writeComment = writeCommentRange;
            var emit = emitNode;
            var emitStart = function (node) {
            };
            var emitEnd = function (node) {
            };
            var emitToken = emitTokenText;
            var scopeEmitStart = function (scopeDeclaration, scopeName) {
            };
            var scopeEmitEnd = function () {
            };
            var sourceMapData;
            function initializeEmitterWithSourceMaps() {
                var sourceMapDir;
                var sourceMapSourceIndex = -1;
                var sourceMapNameIndexMap = {};
                var sourceMapNameIndices = [];
                function getSourceMapNameIndex() {
                    return sourceMapNameIndices.length ? sourceMapNameIndices[sourceMapNameIndices.length - 1] : -1;
                }
                var lastRecordedSourceMapSpan;
                var lastEncodedSourceMapSpan = {
                    emittedLine: 1,
                    emittedColumn: 1,
                    sourceLine: 1,
                    sourceColumn: 1,
                    sourceIndex: 0
                };
                var lastEncodedNameIndex = 0;
                function encodeLastRecordedSourceMapSpan() {
                    if (!lastRecordedSourceMapSpan || lastRecordedSourceMapSpan === lastEncodedSourceMapSpan) {
                        return;
                    }
                    var prevEncodedEmittedColumn = lastEncodedSourceMapSpan.emittedColumn;
                    if (lastEncodedSourceMapSpan.emittedLine == lastRecordedSourceMapSpan.emittedLine) {
                        if (sourceMapData.sourceMapMappings) {
                            sourceMapData.sourceMapMappings += ",";
                        }
                    }
                    else {
                        for (var encodedLine = lastEncodedSourceMapSpan.emittedLine; encodedLine < lastRecordedSourceMapSpan.emittedLine; encodedLine++) {
                            sourceMapData.sourceMapMappings += ";";
                        }
                        prevEncodedEmittedColumn = 1;
                    }
                    sourceMapData.sourceMapMappings += base64VLQFormatEncode(lastRecordedSourceMapSpan.emittedColumn - prevEncodedEmittedColumn);
                    sourceMapData.sourceMapMappings += base64VLQFormatEncode(lastRecordedSourceMapSpan.sourceIndex - lastEncodedSourceMapSpan.sourceIndex);
                    sourceMapData.sourceMapMappings += base64VLQFormatEncode(lastRecordedSourceMapSpan.sourceLine - lastEncodedSourceMapSpan.sourceLine);
                    sourceMapData.sourceMapMappings += base64VLQFormatEncode(lastRecordedSourceMapSpan.sourceColumn - lastEncodedSourceMapSpan.sourceColumn);
                    if (lastRecordedSourceMapSpan.nameIndex >= 0) {
                        sourceMapData.sourceMapMappings += base64VLQFormatEncode(lastRecordedSourceMapSpan.nameIndex - lastEncodedNameIndex);
                        lastEncodedNameIndex = lastRecordedSourceMapSpan.nameIndex;
                    }
                    lastEncodedSourceMapSpan = lastRecordedSourceMapSpan;
                    sourceMapData.sourceMapDecodedMappings.push(lastEncodedSourceMapSpan);
                    function base64VLQFormatEncode(inValue) {
                        function base64FormatEncode(inValue) {
                            if (inValue < 64) {
                                return 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.charAt(inValue);
                            }
                            throw TypeError(inValue + ": not a 64 based value");
                        }
                        if (inValue < 0) {
                            inValue = ((-inValue) << 1) + 1;
                        }
                        else {
                            inValue = inValue << 1;
                        }
                        var encodedStr = "";
                        do {
                            var currentDigit = inValue & 31;
                            inValue = inValue >> 5;
                            if (inValue > 0) {
                                currentDigit = currentDigit | 32;
                            }
                            encodedStr = encodedStr + base64FormatEncode(currentDigit);
                        } while (inValue > 0);
                        return encodedStr;
                    }
                }
                function recordSourceMapSpan(pos) {
                    var sourceLinePos = currentSourceFile.getLineAndCharacterFromPosition(pos);
                    var emittedLine = writer.getLine();
                    var emittedColumn = writer.getColumn();
                    if (!lastRecordedSourceMapSpan || lastRecordedSourceMapSpan.emittedLine != emittedLine || lastRecordedSourceMapSpan.emittedColumn != emittedColumn || (lastRecordedSourceMapSpan.sourceIndex === sourceMapSourceIndex && (lastRecordedSourceMapSpan.sourceLine > sourceLinePos.line || (lastRecordedSourceMapSpan.sourceLine === sourceLinePos.line && lastRecordedSourceMapSpan.sourceColumn > sourceLinePos.character)))) {
                        encodeLastRecordedSourceMapSpan();
                        lastRecordedSourceMapSpan = {
                            emittedLine: emittedLine,
                            emittedColumn: emittedColumn,
                            sourceLine: sourceLinePos.line,
                            sourceColumn: sourceLinePos.character,
                            nameIndex: getSourceMapNameIndex(),
                            sourceIndex: sourceMapSourceIndex
                        };
                    }
                    else {
                        lastRecordedSourceMapSpan.sourceLine = sourceLinePos.line;
                        lastRecordedSourceMapSpan.sourceColumn = sourceLinePos.character;
                        lastRecordedSourceMapSpan.sourceIndex = sourceMapSourceIndex;
                    }
                }
                function recordEmitNodeStartSpan(node) {
                    recordSourceMapSpan(ts.skipTrivia(currentSourceFile.text, node.pos));
                }
                function recordEmitNodeEndSpan(node) {
                    recordSourceMapSpan(node.end);
                }
                function writeTextWithSpanRecord(tokenKind, startPos, emitFn) {
                    var tokenStartPos = ts.skipTrivia(currentSourceFile.text, startPos);
                    recordSourceMapSpan(tokenStartPos);
                    var tokenEndPos = emitTokenText(tokenKind, tokenStartPos, emitFn);
                    recordSourceMapSpan(tokenEndPos);
                    return tokenEndPos;
                }
                function recordNewSourceFileStart(node) {
                    var sourcesDirectoryPath = compilerOptions.sourceRoot ? program.getCommonSourceDirectory() : sourceMapDir;
                    sourceMapData.sourceMapSources.push(ts.getRelativePathToDirectoryOrUrl(sourcesDirectoryPath, node.filename, compilerHost.getCurrentDirectory(), compilerHost.getCanonicalFileName, true));
                    sourceMapSourceIndex = sourceMapData.sourceMapSources.length - 1;
                    sourceMapData.inputSourceFileNames.push(node.filename);
                }
                function recordScopeNameOfNode(node, scopeName) {
                    function recordScopeNameIndex(scopeNameIndex) {
                        sourceMapNameIndices.push(scopeNameIndex);
                    }
                    function recordScopeNameStart(scopeName) {
                        var scopeNameIndex = -1;
                        if (scopeName) {
                            var parentIndex = getSourceMapNameIndex();
                            if (parentIndex !== -1) {
                                scopeName = sourceMapData.sourceMapNames[parentIndex] + "." + scopeName;
                            }
                            scopeNameIndex = ts.getProperty(sourceMapNameIndexMap, scopeName);
                            if (scopeNameIndex === undefined) {
                                scopeNameIndex = sourceMapData.sourceMapNames.length;
                                sourceMapData.sourceMapNames.push(scopeName);
                                sourceMapNameIndexMap[scopeName] = scopeNameIndex;
                            }
                        }
                        recordScopeNameIndex(scopeNameIndex);
                    }
                    if (scopeName) {
                        recordScopeNameStart(scopeName);
                    }
                    else if (node.kind === 190 /* FunctionDeclaration */ || node.kind === 156 /* FunctionExpression */ || node.kind === 128 /* MethodDeclaration */ || node.kind === 127 /* MethodSignature */ || node.kind === 130 /* GetAccessor */ || node.kind === 131 /* SetAccessor */ || node.kind === 195 /* ModuleDeclaration */ || node.kind === 191 /* ClassDeclaration */ || node.kind === 194 /* EnumDeclaration */) {
                        if (node.name) {
                            scopeName = node.name.text;
                        }
                        recordScopeNameStart(scopeName);
                    }
                    else {
                        recordScopeNameIndex(getSourceMapNameIndex());
                    }
                }
                function recordScopeNameEnd() {
                    sourceMapNameIndices.pop();
                }
                ;
                function writeCommentRangeWithMap(curentSourceFile, writer, comment, newLine) {
                    recordSourceMapSpan(comment.pos);
                    writeCommentRange(currentSourceFile, writer, comment, newLine);
                    recordSourceMapSpan(comment.end);
                }
                function serializeSourceMapContents(version, file, sourceRoot, sources, names, mappings) {
                    if (typeof JSON !== "undefined") {
                        return JSON.stringify({
                            version: version,
                            file: file,
                            sourceRoot: sourceRoot,
                            sources: sources,
                            names: names,
                            mappings: mappings
                        });
                    }
                    return "{\"version\":" + version + ",\"file\":\"" + ts.escapeString(file) + "\",\"sourceRoot\":\"" + ts.escapeString(sourceRoot) + "\",\"sources\":[" + serializeStringArray(sources) + "],\"names\":[" + serializeStringArray(names) + "],\"mappings\":\"" + ts.escapeString(mappings) + "\"}";
                    function serializeStringArray(list) {
                        var output = "";
                        for (var i = 0, n = list.length; i < n; i++) {
                            if (i) {
                                output += ",";
                            }
                            output += "\"" + ts.escapeString(list[i]) + "\"";
                        }
                        return output;
                    }
                }
                function writeJavaScriptAndSourceMapFile(emitOutput, writeByteOrderMark) {
                    encodeLastRecordedSourceMapSpan();
                    writeFile(compilerHost, diagnostics, sourceMapData.sourceMapFilePath, serializeSourceMapContents(3, sourceMapData.sourceMapFile, sourceMapData.sourceMapSourceRoot, sourceMapData.sourceMapSources, sourceMapData.sourceMapNames, sourceMapData.sourceMapMappings), false);
                    sourceMapDataList.push(sourceMapData);
                    writeJavaScriptFile(emitOutput + "//# sourceMappingURL=" + sourceMapData.jsSourceMappingURL, writeByteOrderMark);
                }
                var sourceMapJsFile = ts.getBaseFilename(ts.normalizeSlashes(jsFilePath));
                sourceMapData = {
                    sourceMapFilePath: jsFilePath + ".map",
                    jsSourceMappingURL: sourceMapJsFile + ".map",
                    sourceMapFile: sourceMapJsFile,
                    sourceMapSourceRoot: compilerOptions.sourceRoot || "",
                    sourceMapSources: [],
                    inputSourceFileNames: [],
                    sourceMapNames: [],
                    sourceMapMappings: "",
                    sourceMapDecodedMappings: []
                };
                sourceMapData.sourceMapSourceRoot = ts.normalizeSlashes(sourceMapData.sourceMapSourceRoot);
                if (sourceMapData.sourceMapSourceRoot.length && sourceMapData.sourceMapSourceRoot.charCodeAt(sourceMapData.sourceMapSourceRoot.length - 1) !== 47 /* slash */) {
                    sourceMapData.sourceMapSourceRoot += ts.directorySeparator;
                }
                if (compilerOptions.mapRoot) {
                    sourceMapDir = ts.normalizeSlashes(compilerOptions.mapRoot);
                    if (root) {
                        sourceMapDir = ts.getDirectoryPath(getSourceFilePathInNewDir(root, program, sourceMapDir));
                    }
                    if (!ts.isRootedDiskPath(sourceMapDir) && !ts.isUrl(sourceMapDir)) {
                        sourceMapDir = ts.combinePaths(program.getCommonSourceDirectory(), sourceMapDir);
                        sourceMapData.jsSourceMappingURL = ts.getRelativePathToDirectoryOrUrl(ts.getDirectoryPath(ts.normalizePath(jsFilePath)), ts.combinePaths(sourceMapDir, sourceMapData.jsSourceMappingURL), compilerHost.getCurrentDirectory(), compilerHost.getCanonicalFileName, true);
                    }
                    else {
                        sourceMapData.jsSourceMappingURL = ts.combinePaths(sourceMapDir, sourceMapData.jsSourceMappingURL);
                    }
                }
                else {
                    sourceMapDir = ts.getDirectoryPath(ts.normalizePath(jsFilePath));
                }
                function emitNodeWithMap(node) {
                    if (node) {
                        if (node.kind != 207 /* SourceFile */) {
                            recordEmitNodeStartSpan(node);
                            emitNode(node);
                            recordEmitNodeEndSpan(node);
                        }
                        else {
                            recordNewSourceFileStart(node);
                            emitNode(node);
                        }
                    }
                }
                writeEmittedFiles = writeJavaScriptAndSourceMapFile;
                emit = emitNodeWithMap;
                emitStart = recordEmitNodeStartSpan;
                emitEnd = recordEmitNodeEndSpan;
                emitToken = writeTextWithSpanRecord;
                scopeEmitStart = recordScopeNameOfNode;
                scopeEmitEnd = recordScopeNameEnd;
                writeComment = writeCommentRangeWithMap;
            }
            function writeJavaScriptFile(emitOutput, writeByteOrderMark) {
                writeFile(compilerHost, diagnostics, jsFilePath, emitOutput, writeByteOrderMark);
            }
            function createTempVariable(location, forLoopVariable) {
                var name = forLoopVariable ? "_i" : undefined;
                while (true) {
                    if (name && resolver.isUnknownIdentifier(location, name)) {
                        break;
                    }
                    name = "_" + (tempCount < 25 ? String.fromCharCode(tempCount + (tempCount < 8 ? 0 : 1) + 97 /* a */) : tempCount - 25);
                    tempCount++;
                }
                var result = ts.createNode(64 /* Identifier */);
                result.text = name;
                return result;
            }
            function recordTempDeclaration(name) {
                if (!tempVariables) {
                    tempVariables = [];
                }
                tempVariables.push(name);
            }
            function emitTempDeclarations(newLine) {
                if (tempVariables) {
                    if (newLine) {
                        writeLine();
                    }
                    else {
                        write(" ");
                    }
                    write("var ");
                    emitCommaList(tempVariables);
                    write(";");
                }
            }
            function emitTokenText(tokenKind, startPos, emitFn) {
                var tokenString = ts.tokenToString(tokenKind);
                if (emitFn) {
                    emitFn();
                }
                else {
                    write(tokenString);
                }
                return startPos + tokenString.length;
            }
            function emitOptional(prefix, node) {
                if (node) {
                    write(prefix);
                    emit(node);
                }
            }
            function emitTrailingCommaIfPresent(nodeList) {
                if (nodeList.hasTrailingComma) {
                    write(",");
                }
            }
            function emitCommaList(nodes, count) {
                if (!(count >= 0)) {
                    count = nodes.length;
                }
                if (nodes) {
                    for (var i = 0; i < count; i++) {
                        if (i) {
                            write(", ");
                        }
                        emit(nodes[i]);
                    }
                }
            }
            function emitMultiLineList(nodes) {
                if (nodes) {
                    for (var i = 0; i < nodes.length; i++) {
                        if (i) {
                            write(",");
                        }
                        writeLine();
                        emit(nodes[i]);
                    }
                }
            }
            function emitLines(nodes) {
                emitLinesStartingAt(nodes, 0);
            }
            function emitLinesStartingAt(nodes, startIndex) {
                for (var i = startIndex; i < nodes.length; i++) {
                    writeLine();
                    emit(nodes[i]);
                }
            }
            function isBinaryOrOctalIntegerLiteral(text) {
                if (text.length <= 0) {
                    return false;
                }
                if (text.charCodeAt(1) === 66 /* B */ || text.charCodeAt(1) === 98 /* b */ || text.charCodeAt(1) === 79 /* O */ || text.charCodeAt(1) === 111 /* o */) {
                    return true;
                }
                return false;
            }
            function emitLiteral(node) {
                var text = compilerOptions.target < 2 /* ES6 */ && ts.isTemplateLiteralKind(node.kind) ? getTemplateLiteralAsStringLiteral(node) : node.parent ? ts.getSourceTextOfNodeFromSourceFile(currentSourceFile, node) : node.text;
                if (compilerOptions.sourceMap && (node.kind === 8 /* StringLiteral */ || ts.isTemplateLiteralKind(node.kind))) {
                    writer.writeLiteral(text);
                }
                else if (compilerOptions.target < 2 /* ES6 */ && node.kind === 7 /* NumericLiteral */ && isBinaryOrOctalIntegerLiteral(text)) {
                    write(node.text);
                }
                else {
                    write(text);
                }
            }
            function getTemplateLiteralAsStringLiteral(node) {
                return '"' + ts.escapeString(node.text) + '"';
            }
            function emitTemplateExpression(node) {
                if (compilerOptions.target >= 2 /* ES6 */) {
                    ts.forEachChild(node, emit);
                    return;
                }
                ts.Debug.assert(node.parent.kind !== 153 /* TaggedTemplateExpression */);
                var emitOuterParens = ts.isExpression(node.parent) && templateNeedsParens(node, node.parent);
                if (emitOuterParens) {
                    write("(");
                }
                emitLiteral(node.head);
                ts.forEach(node.templateSpans, function (templateSpan) {
                    var needsParens = templateSpan.expression.kind !== 155 /* ParenthesizedExpression */ && comparePrecedenceToBinaryPlus(templateSpan.expression) !== 1 /* GreaterThan */;
                    write(" + ");
                    if (needsParens) {
                        write("(");
                    }
                    emit(templateSpan.expression);
                    if (needsParens) {
                        write(")");
                    }
                    if (templateSpan.literal.text.length !== 0) {
                        write(" + ");
                        emitLiteral(templateSpan.literal);
                    }
                });
                if (emitOuterParens) {
                    write(")");
                }
                function templateNeedsParens(template, parent) {
                    switch (parent.kind) {
                        case 151 /* CallExpression */:
                        case 152 /* NewExpression */:
                            return parent.expression === template;
                        case 155 /* ParenthesizedExpression */:
                            return false;
                        case 153 /* TaggedTemplateExpression */:
                            ts.Debug.fail("Path should be unreachable; tagged templates not supported pre-ES6.");
                        default:
                            return comparePrecedenceToBinaryPlus(parent) !== -1 /* LessThan */;
                    }
                }
                function comparePrecedenceToBinaryPlus(expression) {
                    ts.Debug.assert(compilerOptions.target <= 1 /* ES5 */);
                    switch (expression.kind) {
                        case 163 /* BinaryExpression */:
                            switch (expression.operator) {
                                case 35 /* AsteriskToken */:
                                case 36 /* SlashToken */:
                                case 37 /* PercentToken */:
                                    return 1 /* GreaterThan */;
                                case 33 /* PlusToken */:
                                    return 0 /* EqualTo */;
                                default:
                                    return -1 /* LessThan */;
                            }
                        case 164 /* ConditionalExpression */:
                            return -1 /* LessThan */;
                        default:
                            return 1 /* GreaterThan */;
                    }
                }
            }
            function emitTemplateSpan(span) {
                emit(span.expression);
                emit(span.literal);
            }
            function emitExpressionForPropertyName(node) {
                if (node.kind === 8 /* StringLiteral */) {
                    emitLiteral(node);
                }
                else if (node.kind === 122 /* ComputedPropertyName */) {
                    emit(node.expression);
                }
                else {
                    write("\"");
                    if (node.kind === 7 /* NumericLiteral */) {
                        write(node.text);
                    }
                    else {
                        writeTextOfNode(currentSourceFile, node);
                    }
                    write("\"");
                }
            }
            function isNotExpressionIdentifier(node) {
                var parent = node.parent;
                switch (parent.kind) {
                    case 124 /* Parameter */:
                    case 189 /* VariableDeclaration */:
                    case 146 /* BindingElement */:
                    case 126 /* PropertyDeclaration */:
                    case 125 /* PropertySignature */:
                    case 204 /* PropertyAssignment */:
                    case 205 /* ShorthandPropertyAssignment */:
                    case 206 /* EnumMember */:
                    case 128 /* MethodDeclaration */:
                    case 127 /* MethodSignature */:
                    case 190 /* FunctionDeclaration */:
                    case 130 /* GetAccessor */:
                    case 131 /* SetAccessor */:
                    case 156 /* FunctionExpression */:
                    case 191 /* ClassDeclaration */:
                    case 192 /* InterfaceDeclaration */:
                    case 194 /* EnumDeclaration */:
                    case 195 /* ModuleDeclaration */:
                    case 197 /* ImportDeclaration */:
                        return parent.name === node;
                    case 179 /* BreakStatement */:
                    case 178 /* ContinueStatement */:
                    case 198 /* ExportAssignment */:
                        return false;
                    case 183 /* LabeledStatement */:
                        return node.parent.label === node;
                    case 203 /* CatchClause */:
                        return node.parent.name === node;
                }
            }
            function emitExpressionIdentifier(node) {
                var prefix = resolver.getExpressionNamePrefix(node);
                if (prefix) {
                    write(prefix);
                    write(".");
                }
                writeTextOfNode(currentSourceFile, node);
            }
            function emitIdentifier(node) {
                if (!node.parent) {
                    write(node.text);
                }
                else if (!isNotExpressionIdentifier(node)) {
                    emitExpressionIdentifier(node);
                }
                else {
                    writeTextOfNode(currentSourceFile, node);
                }
            }
            function emitThis(node) {
                if (resolver.getNodeCheckFlags(node) & 2 /* LexicalThis */) {
                    write("_this");
                }
                else {
                    write("this");
                }
            }
            function emitSuper(node) {
                var flags = resolver.getNodeCheckFlags(node);
                if (flags & 16 /* SuperInstance */) {
                    write("_super.prototype");
                }
                else if (flags & 32 /* SuperStatic */) {
                    write("_super");
                }
                else {
                    write("super");
                }
            }
            function emitObjectBindingPattern(node) {
                write("{ ");
                emitCommaList(node.elements);
                emitTrailingCommaIfPresent(node.elements);
                write(" }");
            }
            function emitArrayBindingPattern(node) {
                write("[");
                emitCommaList(node.elements);
                emitTrailingCommaIfPresent(node.elements);
                write("]");
            }
            function emitArrayLiteral(node) {
                if (node.flags & 256 /* MultiLine */) {
                    write("[");
                    increaseIndent();
                    emitMultiLineList(node.elements);
                    emitTrailingCommaIfPresent(node.elements);
                    decreaseIndent();
                    writeLine();
                    write("]");
                }
                else {
                    write("[");
                    emitCommaList(node.elements);
                    emitTrailingCommaIfPresent(node.elements);
                    write("]");
                }
            }
            function emitObjectLiteral(node) {
                if (!node.properties.length) {
                    write("{}");
                }
                else if (node.flags & 256 /* MultiLine */) {
                    write("{");
                    increaseIndent();
                    emitMultiLineList(node.properties);
                    if (compilerOptions.target >= 1 /* ES5 */) {
                        emitTrailingCommaIfPresent(node.properties);
                    }
                    decreaseIndent();
                    writeLine();
                    write("}");
                }
                else {
                    write("{ ");
                    emitCommaList(node.properties);
                    if (compilerOptions.target >= 1 /* ES5 */) {
                        emitTrailingCommaIfPresent(node.properties);
                    }
                    write(" }");
                }
            }
            function emitComputedPropertyName(node) {
                write("[");
                emit(node.expression);
                write("]");
            }
            function emitMethod(node) {
                if (!ts.isObjectLiteralMethod(node)) {
                    return;
                }
                emitLeadingComments(node);
                emit(node.name);
                if (compilerOptions.target < 2 /* ES6 */) {
                    write(": function ");
                }
                emitSignatureAndBody(node);
                emitTrailingComments(node);
            }
            function emitPropertyAssignment(node) {
                emitLeadingComments(node);
                emit(node.name);
                write(": ");
                emit(node.initializer);
                emitTrailingComments(node);
            }
            function emitShorthandPropertyAssignment(node) {
                emitLeadingComments(node);
                emit(node.name);
                if (compilerOptions.target < 2 /* ES6 */ || resolver.getExpressionNamePrefix(node.name)) {
                    write(": ");
                    emitExpressionIdentifier(node.name);
                }
                emitTrailingComments(node);
            }
            function tryEmitConstantValue(node) {
                var constantValue = resolver.getConstantValue(node);
                if (constantValue !== undefined) {
                    var propertyName = node.kind === 149 /* PropertyAccessExpression */ ? ts.declarationNameToString(node.name) : ts.getTextOfNode(node.argumentExpression);
                    write(constantValue.toString() + " /* " + propertyName + " */");
                    return true;
                }
                return false;
            }
            function emitPropertyAccess(node) {
                if (tryEmitConstantValue(node)) {
                    return;
                }
                emit(node.expression);
                write(".");
                emit(node.name);
            }
            function emitQualifiedName(node) {
                emit(node.left);
                write(".");
                emit(node.right);
            }
            function emitIndexedAccess(node) {
                if (tryEmitConstantValue(node)) {
                    return;
                }
                emit(node.expression);
                write("[");
                emit(node.argumentExpression);
                write("]");
            }
            function emitCallExpression(node) {
                var superCall = false;
                if (node.expression.kind === 90 /* SuperKeyword */) {
                    write("_super");
                    superCall = true;
                }
                else {
                    emit(node.expression);
                    superCall = node.expression.kind === 149 /* PropertyAccessExpression */ && node.expression.expression.kind === 90 /* SuperKeyword */;
                }
                if (superCall) {
                    write(".call(");
                    emitThis(node.expression);
                    if (node.arguments.length) {
                        write(", ");
                        emitCommaList(node.arguments);
                    }
                    write(")");
                }
                else {
                    write("(");
                    emitCommaList(node.arguments);
                    write(")");
                }
            }
            function emitNewExpression(node) {
                write("new ");
                emit(node.expression);
                if (node.arguments) {
                    write("(");
                    emitCommaList(node.arguments);
                    write(")");
                }
            }
            function emitTaggedTemplateExpression(node) {
                ts.Debug.assert(compilerOptions.target >= 2 /* ES6 */, "Trying to emit a tagged template in pre-ES6 mode.");
                emit(node.tag);
                write(" ");
                emit(node.template);
            }
            function emitParenExpression(node) {
                if (node.expression.kind === 154 /* TypeAssertionExpression */) {
                    var operand = node.expression.expression;
                    while (operand.kind == 154 /* TypeAssertionExpression */) {
                        operand = operand.expression;
                    }
                    if (operand.kind !== 161 /* PrefixUnaryExpression */ && operand.kind !== 160 /* VoidExpression */ && operand.kind !== 159 /* TypeOfExpression */ && operand.kind !== 158 /* DeleteExpression */ && operand.kind !== 162 /* PostfixUnaryExpression */ && operand.kind !== 152 /* NewExpression */ && !(operand.kind === 151 /* CallExpression */ && node.parent.kind === 152 /* NewExpression */) && !(operand.kind === 156 /* FunctionExpression */ && node.parent.kind === 151 /* CallExpression */)) {
                        emit(operand);
                        return;
                    }
                }
                write("(");
                emit(node.expression);
                write(")");
            }
            function emitDeleteExpression(node) {
                write(ts.tokenToString(73 /* DeleteKeyword */));
                write(" ");
                emit(node.expression);
            }
            function emitVoidExpression(node) {
                write(ts.tokenToString(98 /* VoidKeyword */));
                write(" ");
                emit(node.expression);
            }
            function emitTypeOfExpression(node) {
                write(ts.tokenToString(96 /* TypeOfKeyword */));
                write(" ");
                emit(node.expression);
            }
            function emitPrefixUnaryExpression(node) {
                write(ts.tokenToString(node.operator));
                if (node.operand.kind === 161 /* PrefixUnaryExpression */) {
                    var operand = node.operand;
                    if (node.operator === 33 /* PlusToken */ && (operand.operator === 33 /* PlusToken */ || operand.operator === 38 /* PlusPlusToken */)) {
                        write(" ");
                    }
                    else if (node.operator === 34 /* MinusToken */ && (operand.operator === 34 /* MinusToken */ || operand.operator === 39 /* MinusMinusToken */)) {
                        write(" ");
                    }
                }
                emit(node.operand);
            }
            function emitPostfixUnaryExpression(node) {
                emit(node.operand);
                write(ts.tokenToString(node.operator));
            }
            function emitBinaryExpression(node) {
                if (node.operator === 52 /* EqualsToken */ && (node.left.kind === 148 /* ObjectLiteralExpression */ || node.left.kind === 147 /* ArrayLiteralExpression */)) {
                    emitDestructuring(node);
                }
                else {
                    emit(node.left);
                    if (node.operator !== 23 /* CommaToken */)
                        write(" ");
                    write(ts.tokenToString(node.operator));
                    write(" ");
                    emit(node.right);
                }
            }
            function emitConditionalExpression(node) {
                emit(node.condition);
                write(" ? ");
                emit(node.whenTrue);
                write(" : ");
                emit(node.whenFalse);
            }
            function emitBlock(node) {
                emitToken(14 /* OpenBraceToken */, node.pos);
                increaseIndent();
                scopeEmitStart(node.parent);
                if (node.kind === 196 /* ModuleBlock */) {
                    ts.Debug.assert(node.parent.kind === 195 /* ModuleDeclaration */);
                    emitCaptureThisForNodeIfNecessary(node.parent);
                }
                emitLines(node.statements);
                if (node.kind === 196 /* ModuleBlock */) {
                    emitTempDeclarations(true);
                }
                decreaseIndent();
                writeLine();
                emitToken(15 /* CloseBraceToken */, node.statements.end);
                scopeEmitEnd();
            }
            function emitEmbeddedStatement(node) {
                if (node.kind === 169 /* Block */) {
                    write(" ");
                    emit(node);
                }
                else {
                    increaseIndent();
                    writeLine();
                    emit(node);
                    decreaseIndent();
                }
            }
            function emitExpressionStatement(node) {
                var isArrowExpression = node.expression.kind === 157 /* ArrowFunction */;
                emitLeadingComments(node);
                if (isArrowExpression)
                    write("(");
                emit(node.expression);
                if (isArrowExpression)
                    write(")");
                write(";");
                emitTrailingComments(node);
            }
            function emitIfStatement(node) {
                emitLeadingComments(node);
                var endPos = emitToken(83 /* IfKeyword */, node.pos);
                write(" ");
                endPos = emitToken(16 /* OpenParenToken */, endPos);
                emit(node.expression);
                emitToken(17 /* CloseParenToken */, node.expression.end);
                emitEmbeddedStatement(node.thenStatement);
                if (node.elseStatement) {
                    writeLine();
                    emitToken(75 /* ElseKeyword */, node.thenStatement.end);
                    if (node.elseStatement.kind === 173 /* IfStatement */) {
                        write(" ");
                        emit(node.elseStatement);
                    }
                    else {
                        emitEmbeddedStatement(node.elseStatement);
                    }
                }
                emitTrailingComments(node);
            }
            function emitDoStatement(node) {
                write("do");
                emitEmbeddedStatement(node.statement);
                if (node.statement.kind === 169 /* Block */) {
                    write(" ");
                }
                else {
                    writeLine();
                }
                write("while (");
                emit(node.expression);
                write(");");
            }
            function emitWhileStatement(node) {
                write("while (");
                emit(node.expression);
                write(")");
                emitEmbeddedStatement(node.statement);
            }
            function emitForStatement(node) {
                var endPos = emitToken(81 /* ForKeyword */, node.pos);
                write(" ");
                endPos = emitToken(16 /* OpenParenToken */, endPos);
                if (node.declarations) {
                    if (node.declarations[0] && ts.isLet(node.declarations[0])) {
                        emitToken(103 /* LetKeyword */, endPos);
                    }
                    else if (node.declarations[0] && ts.isConst(node.declarations[0])) {
                        emitToken(69 /* ConstKeyword */, endPos);
                    }
                    else {
                        emitToken(97 /* VarKeyword */, endPos);
                    }
                    write(" ");
                    emitCommaList(node.declarations);
                }
                if (node.initializer) {
                    emit(node.initializer);
                }
                write(";");
                emitOptional(" ", node.condition);
                write(";");
                emitOptional(" ", node.iterator);
                write(")");
                emitEmbeddedStatement(node.statement);
            }
            function emitForInStatement(node) {
                var endPos = emitToken(81 /* ForKeyword */, node.pos);
                write(" ");
                endPos = emitToken(16 /* OpenParenToken */, endPos);
                if (node.declarations) {
                    if (node.declarations.length >= 1) {
                        var decl = node.declarations[0];
                        if (ts.isLet(decl)) {
                            emitToken(103 /* LetKeyword */, endPos);
                        }
                        else {
                            emitToken(97 /* VarKeyword */, endPos);
                        }
                        write(" ");
                        emit(decl);
                    }
                }
                else {
                    emit(node.variable);
                }
                write(" in ");
                emit(node.expression);
                emitToken(17 /* CloseParenToken */, node.expression.end);
                emitEmbeddedStatement(node.statement);
            }
            function emitBreakOrContinueStatement(node) {
                emitToken(node.kind === 179 /* BreakStatement */ ? 65 /* BreakKeyword */ : 70 /* ContinueKeyword */, node.pos);
                emitOptional(" ", node.label);
                write(";");
            }
            function emitReturnStatement(node) {
                emitLeadingComments(node);
                emitToken(89 /* ReturnKeyword */, node.pos);
                emitOptional(" ", node.expression);
                write(";");
                emitTrailingComments(node);
            }
            function emitWithStatement(node) {
                write("with (");
                emit(node.expression);
                write(")");
                emitEmbeddedStatement(node.statement);
            }
            function emitSwitchStatement(node) {
                var endPos = emitToken(91 /* SwitchKeyword */, node.pos);
                write(" ");
                emitToken(16 /* OpenParenToken */, endPos);
                emit(node.expression);
                endPos = emitToken(17 /* CloseParenToken */, node.expression.end);
                write(" ");
                emitToken(14 /* OpenBraceToken */, endPos);
                increaseIndent();
                emitLines(node.clauses);
                decreaseIndent();
                writeLine();
                emitToken(15 /* CloseBraceToken */, node.clauses.end);
            }
            function isOnSameLine(node1, node2) {
                return getLineOfLocalPosition(currentSourceFile, ts.skipTrivia(currentSourceFile.text, node1.pos)) === getLineOfLocalPosition(currentSourceFile, ts.skipTrivia(currentSourceFile.text, node2.pos));
            }
            function emitCaseOrDefaultClause(node) {
                if (node.kind === 200 /* CaseClause */) {
                    write("case ");
                    emit(node.expression);
                    write(":");
                }
                else {
                    write("default:");
                }
                if (node.statements.length === 1 && isOnSameLine(node, node.statements[0])) {
                    write(" ");
                    emit(node.statements[0]);
                }
                else {
                    increaseIndent();
                    emitLines(node.statements);
                    decreaseIndent();
                }
            }
            function emitThrowStatement(node) {
                write("throw ");
                emit(node.expression);
                write(";");
            }
            function emitTryStatement(node) {
                write("try ");
                emit(node.tryBlock);
                emit(node.catchClause);
                if (node.finallyBlock) {
                    writeLine();
                    write("finally ");
                    emit(node.finallyBlock);
                }
            }
            function emitCatchClause(node) {
                writeLine();
                var endPos = emitToken(67 /* CatchKeyword */, node.pos);
                write(" ");
                emitToken(16 /* OpenParenToken */, endPos);
                emit(node.name);
                emitToken(17 /* CloseParenToken */, node.name.end);
                write(" ");
                emitBlock(node.block);
            }
            function emitDebuggerStatement(node) {
                emitToken(71 /* DebuggerKeyword */, node.pos);
                write(";");
            }
            function emitLabelledStatement(node) {
                emit(node.label);
                write(": ");
                emit(node.statement);
            }
            function getContainingModule(node) {
                do {
                    node = node.parent;
                } while (node && node.kind !== 195 /* ModuleDeclaration */);
                return node;
            }
            function emitModuleMemberName(node) {
                emitStart(node.name);
                if (node.flags & 1 /* Export */) {
                    var container = getContainingModule(node);
                    write(container ? resolver.getLocalNameOfContainer(container) : "exports");
                    write(".");
                }
                emitNode(node.name);
                emitEnd(node.name);
            }
            function emitDestructuring(root, value) {
                var emitCount = 0;
                var isDeclaration = (root.kind === 189 /* VariableDeclaration */ && !(root.flags & 1 /* Export */)) || root.kind === 124 /* Parameter */;
                if (root.kind === 163 /* BinaryExpression */) {
                    emitAssignmentExpression(root);
                }
                else {
                    emitBindingElement(root, value);
                }
                function emitAssignment(name, value) {
                    if (emitCount++) {
                        write(", ");
                    }
                    if (name.parent && (name.parent.kind === 189 /* VariableDeclaration */ || name.parent.kind === 146 /* BindingElement */)) {
                        emitModuleMemberName(name.parent);
                    }
                    else {
                        emit(name);
                    }
                    write(" = ");
                    emit(value);
                }
                function ensureIdentifier(expr) {
                    if (expr.kind !== 64 /* Identifier */) {
                        var identifier = createTempVariable(root);
                        if (!isDeclaration) {
                            recordTempDeclaration(identifier);
                        }
                        emitAssignment(identifier, expr);
                        expr = identifier;
                    }
                    return expr;
                }
                function createVoidZero() {
                    var zero = ts.createNode(7 /* NumericLiteral */);
                    zero.text = "0";
                    var result = ts.createNode(161 /* PrefixUnaryExpression */);
                    result.operator = 98 /* VoidKeyword */;
                    result.operand = zero;
                    return result;
                }
                function createDefaultValueCheck(value, defaultValue) {
                    value = ensureIdentifier(value);
                    var equals = ts.createNode(163 /* BinaryExpression */);
                    equals.left = value;
                    equals.operator = 30 /* EqualsEqualsEqualsToken */;
                    equals.right = createVoidZero();
                    var cond = ts.createNode(164 /* ConditionalExpression */);
                    cond.condition = equals;
                    cond.whenTrue = defaultValue;
                    cond.whenFalse = value;
                    return cond;
                }
                function createNumericLiteral(value) {
                    var node = ts.createNode(7 /* NumericLiteral */);
                    node.text = "" + value;
                    return node;
                }
                function parenthesizeForAccess(expr) {
                    if (expr.kind === 64 /* Identifier */ || expr.kind === 149 /* PropertyAccessExpression */ || expr.kind === 150 /* ElementAccessExpression */) {
                        return expr;
                    }
                    var node = ts.createNode(155 /* ParenthesizedExpression */);
                    node.expression = expr;
                    return node;
                }
                function createPropertyAccess(object, propName) {
                    if (propName.kind !== 64 /* Identifier */) {
                        return createElementAccess(object, propName);
                    }
                    var node = ts.createNode(149 /* PropertyAccessExpression */);
                    node.expression = parenthesizeForAccess(object);
                    node.name = propName;
                    return node;
                }
                function createElementAccess(object, index) {
                    var node = ts.createNode(150 /* ElementAccessExpression */);
                    node.expression = parenthesizeForAccess(object);
                    node.argumentExpression = index;
                    return node;
                }
                function emitObjectLiteralAssignment(target, value) {
                    var properties = target.properties;
                    if (properties.length !== 1) {
                        value = ensureIdentifier(value);
                    }
                    for (var i = 0; i < properties.length; i++) {
                        var p = properties[i];
                        if (p.kind === 204 /* PropertyAssignment */ || p.kind === 205 /* ShorthandPropertyAssignment */) {
                            var propName = (p.name);
                            emitDestructuringAssignment(p.initializer || propName, createPropertyAccess(value, propName));
                        }
                    }
                }
                function emitArrayLiteralAssignment(target, value) {
                    var elements = target.elements;
                    if (elements.length !== 1) {
                        value = ensureIdentifier(value);
                    }
                    for (var i = 0; i < elements.length; i++) {
                        var e = elements[i];
                        if (e.kind !== 167 /* OmittedExpression */) {
                            emitDestructuringAssignment(e, createElementAccess(value, createNumericLiteral(i)));
                        }
                    }
                }
                function emitDestructuringAssignment(target, value) {
                    if (target.kind === 163 /* BinaryExpression */ && target.operator === 52 /* EqualsToken */) {
                        value = createDefaultValueCheck(value, target.right);
                        target = target.left;
                    }
                    if (target.kind === 148 /* ObjectLiteralExpression */) {
                        emitObjectLiteralAssignment(target, value);
                    }
                    else if (target.kind === 147 /* ArrayLiteralExpression */) {
                        emitArrayLiteralAssignment(target, value);
                    }
                    else {
                        emitAssignment(target, value);
                    }
                }
                function emitAssignmentExpression(root) {
                    var target = root.left;
                    var value = root.right;
                    if (root.parent.kind === 172 /* ExpressionStatement */) {
                        emitDestructuringAssignment(target, value);
                    }
                    else {
                        if (root.parent.kind !== 155 /* ParenthesizedExpression */) {
                            write("(");
                        }
                        value = ensureIdentifier(value);
                        emitDestructuringAssignment(target, value);
                        write(", ");
                        emit(value);
                        if (root.parent.kind !== 155 /* ParenthesizedExpression */) {
                            write(")");
                        }
                    }
                }
                function emitBindingElement(target, value) {
                    if (target.initializer) {
                        value = value ? createDefaultValueCheck(value, target.initializer) : target.initializer;
                    }
                    else if (!value) {
                        value = createVoidZero();
                    }
                    if (ts.isBindingPattern(target.name)) {
                        var pattern = target.name;
                        var elements = pattern.elements;
                        if (elements.length !== 1) {
                            value = ensureIdentifier(value);
                        }
                        for (var i = 0; i < elements.length; i++) {
                            var element = elements[i];
                            if (pattern.kind === 144 /* ObjectBindingPattern */) {
                                var propName = element.propertyName || element.name;
                                emitBindingElement(element, createPropertyAccess(value, propName));
                            }
                            else if (element.kind !== 167 /* OmittedExpression */) {
                                emitBindingElement(element, createElementAccess(value, createNumericLiteral(i)));
                            }
                        }
                    }
                    else {
                        emitAssignment(target.name, value);
                    }
                }
            }
            function emitVariableDeclaration(node) {
                emitLeadingComments(node);
                if (ts.isBindingPattern(node.name)) {
                    emitDestructuring(node);
                }
                else {
                    emitModuleMemberName(node);
                    emitOptional(" = ", node.initializer);
                }
                emitTrailingComments(node);
            }
            function emitVariableStatement(node) {
                emitLeadingComments(node);
                if (!(node.flags & 1 /* Export */)) {
                    if (ts.isLet(node)) {
                        write("let ");
                    }
                    else if (ts.isConst(node)) {
                        write("const ");
                    }
                    else {
                        write("var ");
                    }
                }
                emitCommaList(node.declarations);
                write(";");
                emitTrailingComments(node);
            }
            function emitParameter(node) {
                emitLeadingComments(node);
                if (ts.isBindingPattern(node.name)) {
                    var name = createTempVariable(node);
                    if (!tempParameters) {
                        tempParameters = [];
                    }
                    tempParameters.push(name);
                    emit(name);
                }
                else {
                    emit(node.name);
                }
                emitTrailingComments(node);
            }
            function emitDefaultValueAssignments(node) {
                var tempIndex = 0;
                ts.forEach(node.parameters, function (p) {
                    if (ts.isBindingPattern(p.name)) {
                        writeLine();
                        write("var ");
                        emitDestructuring(p, tempParameters[tempIndex]);
                        write(";");
                        tempIndex++;
                    }
                    else if (p.initializer) {
                        writeLine();
                        emitStart(p);
                        write("if (");
                        emitNode(p.name);
                        write(" === void 0)");
                        emitEnd(p);
                        write(" { ");
                        emitStart(p);
                        emitNode(p.name);
                        write(" = ");
                        emitNode(p.initializer);
                        emitEnd(p);
                        write("; }");
                    }
                });
            }
            function emitRestParameter(node) {
                if (ts.hasRestParameters(node)) {
                    var restIndex = node.parameters.length - 1;
                    var restParam = node.parameters[restIndex];
                    var tempName = createTempVariable(node, true).text;
                    writeLine();
                    emitLeadingComments(restParam);
                    emitStart(restParam);
                    write("var ");
                    emitNode(restParam.name);
                    write(" = [];");
                    emitEnd(restParam);
                    emitTrailingComments(restParam);
                    writeLine();
                    write("for (");
                    emitStart(restParam);
                    write("var " + tempName + " = " + restIndex + ";");
                    emitEnd(restParam);
                    write(" ");
                    emitStart(restParam);
                    write(tempName + " < arguments.length;");
                    emitEnd(restParam);
                    write(" ");
                    emitStart(restParam);
                    write(tempName + "++");
                    emitEnd(restParam);
                    write(") {");
                    increaseIndent();
                    writeLine();
                    emitStart(restParam);
                    emitNode(restParam.name);
                    write("[" + tempName + " - " + restIndex + "] = arguments[" + tempName + "];");
                    emitEnd(restParam);
                    decreaseIndent();
                    writeLine();
                    write("}");
                }
            }
            function emitAccessor(node) {
                emitLeadingComments(node);
                write(node.kind === 130 /* GetAccessor */ ? "get " : "set ");
                emit(node.name);
                emitSignatureAndBody(node);
                emitTrailingComments(node);
            }
            function emitFunctionDeclaration(node) {
                if (!node.body) {
                    return emitPinnedOrTripleSlashComments(node);
                }
                if (node.kind !== 128 /* MethodDeclaration */ && node.kind !== 127 /* MethodSignature */) {
                    emitLeadingComments(node);
                }
                write("function ");
                if (node.kind === 190 /* FunctionDeclaration */ || (node.kind === 156 /* FunctionExpression */ && node.name)) {
                    emit(node.name);
                }
                emitSignatureAndBody(node);
                if (node.kind !== 128 /* MethodDeclaration */ && node.kind !== 127 /* MethodSignature */) {
                    emitTrailingComments(node);
                }
            }
            function emitCaptureThisForNodeIfNecessary(node) {
                if (resolver.getNodeCheckFlags(node) & 4 /* CaptureThis */) {
                    writeLine();
                    emitStart(node);
                    write("var _this = this;");
                    emitEnd(node);
                }
            }
            function emitSignatureParameters(node) {
                increaseIndent();
                write("(");
                if (node) {
                    emitCommaList(node.parameters, node.parameters.length - (ts.hasRestParameters(node) ? 1 : 0));
                }
                write(")");
                decreaseIndent();
            }
            function emitSignatureAndBody(node) {
                var saveTempCount = tempCount;
                var saveTempVariables = tempVariables;
                var saveTempParameters = tempParameters;
                tempCount = 0;
                tempVariables = undefined;
                tempParameters = undefined;
                emitSignatureParameters(node);
                write(" {");
                scopeEmitStart(node);
                increaseIndent();
                emitDetachedComments(node.body.kind === 169 /* Block */ ? node.body.statements : node.body);
                var startIndex = 0;
                if (node.body.kind === 169 /* Block */) {
                    startIndex = emitDirectivePrologues(node.body.statements, true);
                }
                var outPos = writer.getTextPos();
                emitCaptureThisForNodeIfNecessary(node);
                emitDefaultValueAssignments(node);
                emitRestParameter(node);
                if (node.body.kind !== 169 /* Block */ && outPos === writer.getTextPos()) {
                    decreaseIndent();
                    write(" ");
                    emitStart(node.body);
                    write("return ");
                    emitNode(node.body);
                    emitEnd(node.body);
                    write(";");
                    emitTempDeclarations(false);
                    write(" ");
                    emitStart(node.body);
                    write("}");
                    emitEnd(node.body);
                }
                else {
                    if (node.body.kind === 169 /* Block */) {
                        emitLinesStartingAt(node.body.statements, startIndex);
                    }
                    else {
                        writeLine();
                        emitLeadingComments(node.body);
                        write("return ");
                        emit(node.body);
                        write(";");
                        emitTrailingComments(node.body);
                    }
                    emitTempDeclarations(true);
                    writeLine();
                    if (node.body.kind === 169 /* Block */) {
                        emitLeadingCommentsOfPosition(node.body.statements.end);
                        decreaseIndent();
                        emitToken(15 /* CloseBraceToken */, node.body.statements.end);
                    }
                    else {
                        decreaseIndent();
                        emitStart(node.body);
                        write("}");
                        emitEnd(node.body);
                    }
                }
                scopeEmitEnd();
                if (node.flags & 1 /* Export */) {
                    writeLine();
                    emitStart(node);
                    emitModuleMemberName(node);
                    write(" = ");
                    emit(node.name);
                    emitEnd(node);
                    write(";");
                }
                tempCount = saveTempCount;
                tempVariables = saveTempVariables;
                tempParameters = saveTempParameters;
            }
            function findInitialSuperCall(ctor) {
                if (ctor.body) {
                    var statement = ctor.body.statements[0];
                    if (statement && statement.kind === 172 /* ExpressionStatement */) {
                        var expr = statement.expression;
                        if (expr && expr.kind === 151 /* CallExpression */) {
                            var func = expr.expression;
                            if (func && func.kind === 90 /* SuperKeyword */) {
                                return statement;
                            }
                        }
                    }
                }
            }
            function emitParameterPropertyAssignments(node) {
                ts.forEach(node.parameters, function (param) {
                    if (param.flags & 112 /* AccessibilityModifier */) {
                        writeLine();
                        emitStart(param);
                        emitStart(param.name);
                        write("this.");
                        emitNode(param.name);
                        emitEnd(param.name);
                        write(" = ");
                        emit(param.name);
                        write(";");
                        emitEnd(param);
                    }
                });
            }
            function emitMemberAccessForPropertyName(memberName) {
                if (memberName.kind === 8 /* StringLiteral */ || memberName.kind === 7 /* NumericLiteral */) {
                    write("[");
                    emitNode(memberName);
                    write("]");
                }
                else if (memberName.kind === 122 /* ComputedPropertyName */) {
                    emitComputedPropertyName(memberName);
                }
                else {
                    write(".");
                    emitNode(memberName);
                }
            }
            function emitMemberAssignments(node, staticFlag) {
                ts.forEach(node.members, function (member) {
                    if (member.kind === 126 /* PropertyDeclaration */ && (member.flags & 128 /* Static */) === staticFlag && member.initializer) {
                        writeLine();
                        emitLeadingComments(member);
                        emitStart(member);
                        emitStart(member.name);
                        if (staticFlag) {
                            emitNode(node.name);
                        }
                        else {
                            write("this");
                        }
                        emitMemberAccessForPropertyName(member.name);
                        emitEnd(member.name);
                        write(" = ");
                        emit(member.initializer);
                        write(";");
                        emitEnd(member);
                        emitTrailingComments(member);
                    }
                });
            }
            function emitMemberFunctions(node) {
                ts.forEach(node.members, function (member) {
                    if (member.kind === 128 /* MethodDeclaration */ || node.kind === 127 /* MethodSignature */) {
                        if (!member.body) {
                            return emitPinnedOrTripleSlashComments(member);
                        }
                        writeLine();
                        emitLeadingComments(member);
                        emitStart(member);
                        emitStart(member.name);
                        emitNode(node.name);
                        if (!(member.flags & 128 /* Static */)) {
                            write(".prototype");
                        }
                        emitMemberAccessForPropertyName(member.name);
                        emitEnd(member.name);
                        write(" = ");
                        emitStart(member);
                        emitFunctionDeclaration(member);
                        emitEnd(member);
                        emitEnd(member);
                        write(";");
                        emitTrailingComments(member);
                    }
                    else if (member.kind === 130 /* GetAccessor */ || member.kind === 131 /* SetAccessor */) {
                        var accessors = getAllAccessorDeclarations(node, member);
                        if (member === accessors.firstAccessor) {
                            writeLine();
                            emitStart(member);
                            write("Object.defineProperty(");
                            emitStart(member.name);
                            emitNode(node.name);
                            if (!(member.flags & 128 /* Static */)) {
                                write(".prototype");
                            }
                            write(", ");
                            emitExpressionForPropertyName(member.name);
                            emitEnd(member.name);
                            write(", {");
                            increaseIndent();
                            if (accessors.getAccessor) {
                                writeLine();
                                emitLeadingComments(accessors.getAccessor);
                                write("get: ");
                                emitStart(accessors.getAccessor);
                                write("function ");
                                emitSignatureAndBody(accessors.getAccessor);
                                emitEnd(accessors.getAccessor);
                                emitTrailingComments(accessors.getAccessor);
                                write(",");
                            }
                            if (accessors.setAccessor) {
                                writeLine();
                                emitLeadingComments(accessors.setAccessor);
                                write("set: ");
                                emitStart(accessors.setAccessor);
                                write("function ");
                                emitSignatureAndBody(accessors.setAccessor);
                                emitEnd(accessors.setAccessor);
                                emitTrailingComments(accessors.setAccessor);
                                write(",");
                            }
                            writeLine();
                            write("enumerable: true,");
                            writeLine();
                            write("configurable: true");
                            decreaseIndent();
                            writeLine();
                            write("});");
                            emitEnd(member);
                        }
                    }
                });
            }
            function emitClassDeclaration(node) {
                emitLeadingComments(node);
                write("var ");
                emit(node.name);
                write(" = (function (");
                var baseTypeNode = ts.getClassBaseTypeNode(node);
                if (baseTypeNode) {
                    write("_super");
                }
                write(") {");
                increaseIndent();
                scopeEmitStart(node);
                if (baseTypeNode) {
                    writeLine();
                    emitStart(baseTypeNode);
                    write("__extends(");
                    emit(node.name);
                    write(", _super);");
                    emitEnd(baseTypeNode);
                }
                writeLine();
                emitConstructorOfClass();
                emitMemberFunctions(node);
                emitMemberAssignments(node, 128 /* Static */);
                writeLine();
                function emitClassReturnStatement() {
                    write("return ");
                    emitNode(node.name);
                }
                emitToken(15 /* CloseBraceToken */, node.members.end, emitClassReturnStatement);
                write(";");
                decreaseIndent();
                writeLine();
                emitToken(15 /* CloseBraceToken */, node.members.end);
                scopeEmitEnd();
                emitStart(node);
                write(")(");
                if (baseTypeNode) {
                    emit(baseTypeNode.typeName);
                }
                write(");");
                emitEnd(node);
                if (node.flags & 1 /* Export */) {
                    writeLine();
                    emitStart(node);
                    emitModuleMemberName(node);
                    write(" = ");
                    emit(node.name);
                    emitEnd(node);
                    write(";");
                }
                emitTrailingComments(node);
                function emitConstructorOfClass() {
                    var saveTempCount = tempCount;
                    var saveTempVariables = tempVariables;
                    var saveTempParameters = tempParameters;
                    tempCount = 0;
                    tempVariables = undefined;
                    tempParameters = undefined;
                    ts.forEach(node.members, function (member) {
                        if (member.kind === 129 /* Constructor */ && !member.body) {
                            emitPinnedOrTripleSlashComments(member);
                        }
                    });
                    var ctor = getFirstConstructorWithBody(node);
                    if (ctor) {
                        emitLeadingComments(ctor);
                    }
                    emitStart(ctor || node);
                    write("function ");
                    emit(node.name);
                    emitSignatureParameters(ctor);
                    write(" {");
                    scopeEmitStart(node, "constructor");
                    increaseIndent();
                    if (ctor) {
                        emitDetachedComments(ctor.body.statements);
                    }
                    emitCaptureThisForNodeIfNecessary(node);
                    if (ctor) {
                        emitDefaultValueAssignments(ctor);
                        emitRestParameter(ctor);
                        if (baseTypeNode) {
                            var superCall = findInitialSuperCall(ctor);
                            if (superCall) {
                                writeLine();
                                emit(superCall);
                            }
                        }
                        emitParameterPropertyAssignments(ctor);
                    }
                    else {
                        if (baseTypeNode) {
                            writeLine();
                            emitStart(baseTypeNode);
                            write("_super.apply(this, arguments);");
                            emitEnd(baseTypeNode);
                        }
                    }
                    emitMemberAssignments(node, 0);
                    if (ctor) {
                        var statements = ctor.body.statements;
                        if (superCall)
                            statements = statements.slice(1);
                        emitLines(statements);
                    }
                    emitTempDeclarations(true);
                    writeLine();
                    if (ctor) {
                        emitLeadingCommentsOfPosition(ctor.body.statements.end);
                    }
                    decreaseIndent();
                    emitToken(15 /* CloseBraceToken */, ctor ? ctor.body.statements.end : node.members.end);
                    scopeEmitEnd();
                    emitEnd(ctor || node);
                    if (ctor) {
                        emitTrailingComments(ctor);
                    }
                    tempCount = saveTempCount;
                    tempVariables = saveTempVariables;
                    tempParameters = saveTempParameters;
                }
            }
            function emitInterfaceDeclaration(node) {
                emitPinnedOrTripleSlashComments(node);
            }
            function emitEnumDeclaration(node) {
                var isConstEnum = ts.isConst(node);
                if (isConstEnum && !compilerOptions.preserveConstEnums) {
                    return;
                }
                emitLeadingComments(node);
                if (!(node.flags & 1 /* Export */)) {
                    emitStart(node);
                    write("var ");
                    emit(node.name);
                    emitEnd(node);
                    write(";");
                }
                writeLine();
                emitStart(node);
                write("(function (");
                emitStart(node.name);
                write(resolver.getLocalNameOfContainer(node));
                emitEnd(node.name);
                write(") {");
                increaseIndent();
                scopeEmitStart(node);
                emitEnumMemberDeclarations(isConstEnum);
                decreaseIndent();
                writeLine();
                emitToken(15 /* CloseBraceToken */, node.members.end);
                scopeEmitEnd();
                write(")(");
                emitModuleMemberName(node);
                write(" || (");
                emitModuleMemberName(node);
                write(" = {}));");
                emitEnd(node);
                if (node.flags & 1 /* Export */) {
                    writeLine();
                    emitStart(node);
                    write("var ");
                    emit(node.name);
                    write(" = ");
                    emitModuleMemberName(node);
                    emitEnd(node);
                    write(";");
                }
                emitTrailingComments(node);
                function emitEnumMemberDeclarations(isConstEnum) {
                    ts.forEach(node.members, function (member) {
                        writeLine();
                        emitLeadingComments(member);
                        emitStart(member);
                        write(resolver.getLocalNameOfContainer(node));
                        write("[");
                        write(resolver.getLocalNameOfContainer(node));
                        write("[");
                        emitExpressionForPropertyName(member.name);
                        write("] = ");
                        if (member.initializer && !isConstEnum) {
                            emit(member.initializer);
                        }
                        else {
                            write(resolver.getEnumMemberValue(member).toString());
                        }
                        write("] = ");
                        emitExpressionForPropertyName(member.name);
                        emitEnd(member);
                        write(";");
                        emitTrailingComments(member);
                    });
                }
            }
            function getInnerMostModuleDeclarationFromDottedModule(moduleDeclaration) {
                if (moduleDeclaration.body.kind === 195 /* ModuleDeclaration */) {
                    var recursiveInnerModule = getInnerMostModuleDeclarationFromDottedModule(moduleDeclaration.body);
                    return recursiveInnerModule || moduleDeclaration.body;
                }
            }
            function emitModuleDeclaration(node) {
                var shouldEmit = ts.getModuleInstanceState(node) === 1 /* Instantiated */ || (ts.getModuleInstanceState(node) === 2 /* ConstEnumOnly */ && compilerOptions.preserveConstEnums);
                if (!shouldEmit) {
                    return emitPinnedOrTripleSlashComments(node);
                }
                emitLeadingComments(node);
                emitStart(node);
                write("var ");
                emit(node.name);
                write(";");
                emitEnd(node);
                writeLine();
                emitStart(node);
                write("(function (");
                emitStart(node.name);
                write(resolver.getLocalNameOfContainer(node));
                emitEnd(node.name);
                write(") ");
                if (node.body.kind === 196 /* ModuleBlock */) {
                    var saveTempCount = tempCount;
                    var saveTempVariables = tempVariables;
                    tempCount = 0;
                    tempVariables = undefined;
                    emit(node.body);
                    tempCount = saveTempCount;
                    tempVariables = saveTempVariables;
                }
                else {
                    write("{");
                    increaseIndent();
                    scopeEmitStart(node);
                    emitCaptureThisForNodeIfNecessary(node);
                    writeLine();
                    emit(node.body);
                    decreaseIndent();
                    writeLine();
                    var moduleBlock = getInnerMostModuleDeclarationFromDottedModule(node).body;
                    emitToken(15 /* CloseBraceToken */, moduleBlock.statements.end);
                    scopeEmitEnd();
                }
                write(")(");
                if (node.flags & 1 /* Export */) {
                    emit(node.name);
                    write(" = ");
                }
                emitModuleMemberName(node);
                write(" || (");
                emitModuleMemberName(node);
                write(" = {}));");
                emitEnd(node);
                emitTrailingComments(node);
            }
            function emitImportDeclaration(node) {
                var emitImportDeclaration = resolver.isReferencedImportDeclaration(node);
                if (!emitImportDeclaration) {
                    emitImportDeclaration = !ts.isExternalModule(currentSourceFile) && resolver.isTopLevelValueImportWithEntityName(node);
                }
                if (emitImportDeclaration) {
                    if (ts.isExternalModuleImportDeclaration(node) && node.parent.kind === 207 /* SourceFile */ && compilerOptions.module === 2 /* AMD */) {
                        if (node.flags & 1 /* Export */) {
                            writeLine();
                            emitLeadingComments(node);
                            emitStart(node);
                            emitModuleMemberName(node);
                            write(" = ");
                            emit(node.name);
                            write(";");
                            emitEnd(node);
                            emitTrailingComments(node);
                        }
                    }
                    else {
                        writeLine();
                        emitLeadingComments(node);
                        emitStart(node);
                        if (!(node.flags & 1 /* Export */))
                            write("var ");
                        emitModuleMemberName(node);
                        write(" = ");
                        if (ts.isInternalModuleImportDeclaration(node)) {
                            emit(node.moduleReference);
                        }
                        else {
                            var literal = ts.getExternalModuleImportDeclarationExpression(node);
                            write("require(");
                            emitStart(literal);
                            emitLiteral(literal);
                            emitEnd(literal);
                            emitToken(17 /* CloseParenToken */, literal.end);
                        }
                        write(";");
                        emitEnd(node);
                        emitTrailingComments(node);
                    }
                }
            }
            function getExternalImportDeclarations(node) {
                var result = [];
                ts.forEach(node.statements, function (statement) {
                    if (ts.isExternalModuleImportDeclaration(statement) && resolver.isReferencedImportDeclaration(statement)) {
                        result.push(statement);
                    }
                });
                return result;
            }
            function getFirstExportAssignment(sourceFile) {
                return ts.forEach(sourceFile.statements, function (node) {
                    if (node.kind === 198 /* ExportAssignment */) {
                        return node;
                    }
                });
            }
            function emitAMDModule(node, startIndex) {
                var imports = getExternalImportDeclarations(node);
                writeLine();
                write("define(");
                if (node.amdModuleName) {
                    write("\"" + node.amdModuleName + "\", ");
                }
                write("[\"require\", \"exports\"");
                ts.forEach(imports, function (imp) {
                    write(", ");
                    emitLiteral(ts.getExternalModuleImportDeclarationExpression(imp));
                });
                ts.forEach(node.amdDependencies, function (amdDependency) {
                    var text = "\"" + amdDependency + "\"";
                    write(", ");
                    write(text);
                });
                write("], function (require, exports");
                ts.forEach(imports, function (imp) {
                    write(", ");
                    emit(imp.name);
                });
                write(") {");
                increaseIndent();
                emitCaptureThisForNodeIfNecessary(node);
                emitLinesStartingAt(node.statements, startIndex);
                var exportName = resolver.getExportAssignmentName(node);
                if (exportName) {
                    writeLine();
                    var exportAssignement = getFirstExportAssignment(node);
                    emitStart(exportAssignement);
                    write("return ");
                    emitStart(exportAssignement.exportName);
                    write(exportName);
                    emitEnd(exportAssignement.exportName);
                    write(";");
                    emitEnd(exportAssignement);
                }
                decreaseIndent();
                writeLine();
                write("});");
            }
            function emitCommonJSModule(node, startIndex) {
                emitCaptureThisForNodeIfNecessary(node);
                emitLinesStartingAt(node.statements, startIndex);
                var exportName = resolver.getExportAssignmentName(node);
                if (exportName) {
                    writeLine();
                    var exportAssignement = getFirstExportAssignment(node);
                    emitStart(exportAssignement);
                    write("module.exports = ");
                    emitStart(exportAssignement.exportName);
                    write(exportName);
                    emitEnd(exportAssignement.exportName);
                    write(";");
                    emitEnd(exportAssignement);
                }
            }
            function emitDirectivePrologues(statements, startWithNewLine) {
                for (var i = 0; i < statements.length; ++i) {
                    if (ts.isPrologueDirective(statements[i])) {
                        if (startWithNewLine || i > 0) {
                            writeLine();
                        }
                        emit(statements[i]);
                    }
                    else {
                        return i;
                    }
                }
                return statements.length;
            }
            function emitSourceFile(node) {
                currentSourceFile = node;
                writeLine();
                emitDetachedComments(node);
                var startIndex = emitDirectivePrologues(node.statements, false);
                if (!extendsEmitted && resolver.getNodeCheckFlags(node) & 8 /* EmitExtends */) {
                    writeLine();
                    write("var __extends = this.__extends || function (d, b) {");
                    increaseIndent();
                    writeLine();
                    write("for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];");
                    writeLine();
                    write("function __() { this.constructor = d; }");
                    writeLine();
                    write("__.prototype = b.prototype;");
                    writeLine();
                    write("d.prototype = new __();");
                    decreaseIndent();
                    writeLine();
                    write("};");
                    extendsEmitted = true;
                }
                if (ts.isExternalModule(node)) {
                    if (compilerOptions.module === 2 /* AMD */) {
                        emitAMDModule(node, startIndex);
                    }
                    else {
                        emitCommonJSModule(node, startIndex);
                    }
                }
                else {
                    emitCaptureThisForNodeIfNecessary(node);
                    emitLinesStartingAt(node.statements, startIndex);
                }
                emitLeadingComments(node.endOfFileToken);
            }
            function emitNode(node) {
                if (!node) {
                    return;
                }
                if (node.flags & 2 /* Ambient */) {
                    return emitPinnedOrTripleSlashComments(node);
                }
                switch (node.kind) {
                    case 64 /* Identifier */:
                        return emitIdentifier(node);
                    case 124 /* Parameter */:
                        return emitParameter(node);
                    case 128 /* MethodDeclaration */:
                    case 127 /* MethodSignature */:
                        return emitMethod(node);
                    case 130 /* GetAccessor */:
                    case 131 /* SetAccessor */:
                        return emitAccessor(node);
                    case 92 /* ThisKeyword */:
                        return emitThis(node);
                    case 90 /* SuperKeyword */:
                        return emitSuper(node);
                    case 88 /* NullKeyword */:
                        return write("null");
                    case 94 /* TrueKeyword */:
                        return write("true");
                    case 79 /* FalseKeyword */:
                        return write("false");
                    case 7 /* NumericLiteral */:
                    case 8 /* StringLiteral */:
                    case 9 /* RegularExpressionLiteral */:
                    case 10 /* NoSubstitutionTemplateLiteral */:
                    case 11 /* TemplateHead */:
                    case 12 /* TemplateMiddle */:
                    case 13 /* TemplateTail */:
                        return emitLiteral(node);
                    case 165 /* TemplateExpression */:
                        return emitTemplateExpression(node);
                    case 168 /* TemplateSpan */:
                        return emitTemplateSpan(node);
                    case 121 /* QualifiedName */:
                        return emitQualifiedName(node);
                    case 144 /* ObjectBindingPattern */:
                        return emitObjectBindingPattern(node);
                    case 145 /* ArrayBindingPattern */:
                        return emitArrayBindingPattern(node);
                    case 147 /* ArrayLiteralExpression */:
                        return emitArrayLiteral(node);
                    case 148 /* ObjectLiteralExpression */:
                        return emitObjectLiteral(node);
                    case 204 /* PropertyAssignment */:
                        return emitPropertyAssignment(node);
                    case 205 /* ShorthandPropertyAssignment */:
                        return emitShorthandPropertyAssignment(node);
                    case 122 /* ComputedPropertyName */:
                        return emitComputedPropertyName(node);
                    case 149 /* PropertyAccessExpression */:
                        return emitPropertyAccess(node);
                    case 150 /* ElementAccessExpression */:
                        return emitIndexedAccess(node);
                    case 151 /* CallExpression */:
                        return emitCallExpression(node);
                    case 152 /* NewExpression */:
                        return emitNewExpression(node);
                    case 153 /* TaggedTemplateExpression */:
                        return emitTaggedTemplateExpression(node);
                    case 154 /* TypeAssertionExpression */:
                        return emit(node.expression);
                    case 155 /* ParenthesizedExpression */:
                        return emitParenExpression(node);
                    case 190 /* FunctionDeclaration */:
                    case 156 /* FunctionExpression */:
                    case 157 /* ArrowFunction */:
                        return emitFunctionDeclaration(node);
                    case 158 /* DeleteExpression */:
                        return emitDeleteExpression(node);
                    case 159 /* TypeOfExpression */:
                        return emitTypeOfExpression(node);
                    case 160 /* VoidExpression */:
                        return emitVoidExpression(node);
                    case 161 /* PrefixUnaryExpression */:
                        return emitPrefixUnaryExpression(node);
                    case 162 /* PostfixUnaryExpression */:
                        return emitPostfixUnaryExpression(node);
                    case 163 /* BinaryExpression */:
                        return emitBinaryExpression(node);
                    case 164 /* ConditionalExpression */:
                        return emitConditionalExpression(node);
                    case 167 /* OmittedExpression */:
                        return;
                    case 169 /* Block */:
                    case 186 /* TryBlock */:
                    case 187 /* FinallyBlock */:
                    case 196 /* ModuleBlock */:
                        return emitBlock(node);
                    case 170 /* VariableStatement */:
                        return emitVariableStatement(node);
                    case 171 /* EmptyStatement */:
                        return write(";");
                    case 172 /* ExpressionStatement */:
                        return emitExpressionStatement(node);
                    case 173 /* IfStatement */:
                        return emitIfStatement(node);
                    case 174 /* DoStatement */:
                        return emitDoStatement(node);
                    case 175 /* WhileStatement */:
                        return emitWhileStatement(node);
                    case 176 /* ForStatement */:
                        return emitForStatement(node);
                    case 177 /* ForInStatement */:
                        return emitForInStatement(node);
                    case 178 /* ContinueStatement */:
                    case 179 /* BreakStatement */:
                        return emitBreakOrContinueStatement(node);
                    case 180 /* ReturnStatement */:
                        return emitReturnStatement(node);
                    case 181 /* WithStatement */:
                        return emitWithStatement(node);
                    case 182 /* SwitchStatement */:
                        return emitSwitchStatement(node);
                    case 200 /* CaseClause */:
                    case 201 /* DefaultClause */:
                        return emitCaseOrDefaultClause(node);
                    case 183 /* LabeledStatement */:
                        return emitLabelledStatement(node);
                    case 184 /* ThrowStatement */:
                        return emitThrowStatement(node);
                    case 185 /* TryStatement */:
                        return emitTryStatement(node);
                    case 203 /* CatchClause */:
                        return emitCatchClause(node);
                    case 188 /* DebuggerStatement */:
                        return emitDebuggerStatement(node);
                    case 189 /* VariableDeclaration */:
                        return emitVariableDeclaration(node);
                    case 191 /* ClassDeclaration */:
                        return emitClassDeclaration(node);
                    case 192 /* InterfaceDeclaration */:
                        return emitInterfaceDeclaration(node);
                    case 194 /* EnumDeclaration */:
                        return emitEnumDeclaration(node);
                    case 195 /* ModuleDeclaration */:
                        return emitModuleDeclaration(node);
                    case 197 /* ImportDeclaration */:
                        return emitImportDeclaration(node);
                    case 207 /* SourceFile */:
                        return emitSourceFile(node);
                }
            }
            function hasDetachedComments(pos) {
                return detachedCommentsInfo !== undefined && detachedCommentsInfo[detachedCommentsInfo.length - 1].nodePos === pos;
            }
            function getLeadingCommentsWithoutDetachedComments() {
                var leadingComments = ts.getLeadingCommentRanges(currentSourceFile.text, detachedCommentsInfo[detachedCommentsInfo.length - 1].detachedCommentEndPos);
                if (detachedCommentsInfo.length - 1) {
                    detachedCommentsInfo.pop();
                }
                else {
                    detachedCommentsInfo = undefined;
                }
                return leadingComments;
            }
            function getLeadingCommentsToEmit(node) {
                if (node.parent.kind === 207 /* SourceFile */ || node.pos !== node.parent.pos) {
                    var leadingComments;
                    if (hasDetachedComments(node.pos)) {
                        leadingComments = getLeadingCommentsWithoutDetachedComments();
                    }
                    else {
                        leadingComments = ts.getLeadingCommentRangesOfNode(node, currentSourceFile);
                    }
                    return leadingComments;
                }
            }
            function emitLeadingDeclarationComments(node) {
                var leadingComments = getLeadingCommentsToEmit(node);
                emitNewLineBeforeLeadingComments(currentSourceFile, writer, node, leadingComments);
                emitComments(currentSourceFile, writer, leadingComments, true, newLine, writeComment);
            }
            function emitTrailingDeclarationComments(node) {
                if (node.parent.kind === 207 /* SourceFile */ || node.end !== node.parent.end) {
                    var trailingComments = ts.getTrailingCommentRanges(currentSourceFile.text, node.end);
                    emitComments(currentSourceFile, writer, trailingComments, false, newLine, writeComment);
                }
            }
            function emitLeadingCommentsOfLocalPosition(pos) {
                var leadingComments;
                if (hasDetachedComments(pos)) {
                    leadingComments = getLeadingCommentsWithoutDetachedComments();
                }
                else {
                    leadingComments = ts.getLeadingCommentRanges(currentSourceFile.text, pos);
                }
                emitNewLineBeforeLeadingComments(currentSourceFile, writer, { pos: pos, end: pos }, leadingComments);
                emitComments(currentSourceFile, writer, leadingComments, true, newLine, writeComment);
            }
            function emitDetachedCommentsAtPosition(node) {
                var leadingComments = ts.getLeadingCommentRanges(currentSourceFile.text, node.pos);
                if (leadingComments) {
                    var detachedComments = [];
                    var lastComment;
                    ts.forEach(leadingComments, function (comment) {
                        if (lastComment) {
                            var lastCommentLine = getLineOfLocalPosition(currentSourceFile, lastComment.end);
                            var commentLine = getLineOfLocalPosition(currentSourceFile, comment.pos);
                            if (commentLine >= lastCommentLine + 2) {
                                return detachedComments;
                            }
                        }
                        detachedComments.push(comment);
                        lastComment = comment;
                    });
                    if (detachedComments.length) {
                        var lastCommentLine = getLineOfLocalPosition(currentSourceFile, detachedComments[detachedComments.length - 1].end);
                        var astLine = getLineOfLocalPosition(currentSourceFile, ts.skipTrivia(currentSourceFile.text, node.pos));
                        if (astLine >= lastCommentLine + 2) {
                            emitNewLineBeforeLeadingComments(currentSourceFile, writer, node, leadingComments);
                            emitComments(currentSourceFile, writer, detachedComments, true, newLine, writeComment);
                            var currentDetachedCommentInfo = { nodePos: node.pos, detachedCommentEndPos: detachedComments[detachedComments.length - 1].end };
                            if (detachedCommentsInfo) {
                                detachedCommentsInfo.push(currentDetachedCommentInfo);
                            }
                            else {
                                detachedCommentsInfo = [currentDetachedCommentInfo];
                            }
                        }
                    }
                }
            }
            function emitPinnedOrTripleSlashCommentsOfNode(node) {
                var pinnedComments = ts.filter(getLeadingCommentsToEmit(node), isPinnedOrTripleSlashComment);
                function isPinnedOrTripleSlashComment(comment) {
                    if (currentSourceFile.text.charCodeAt(comment.pos + 1) === 42 /* asterisk */) {
                        return currentSourceFile.text.charCodeAt(comment.pos + 2) === 33 /* exclamation */;
                    }
                    else if (currentSourceFile.text.charCodeAt(comment.pos + 1) === 47 /* slash */ && comment.pos + 2 < comment.end && currentSourceFile.text.charCodeAt(comment.pos + 2) === 47 /* slash */ && currentSourceFile.text.substring(comment.pos, comment.end).match(ts.fullTripleSlashReferencePathRegEx)) {
                        return true;
                    }
                }
                emitNewLineBeforeLeadingComments(currentSourceFile, writer, node, pinnedComments);
                emitComments(currentSourceFile, writer, pinnedComments, true, newLine, writeComment);
            }
            if (compilerOptions.sourceMap) {
                initializeEmitterWithSourceMaps();
            }
            if (root) {
                emit(root);
            }
            else {
                ts.forEach(program.getSourceFiles(), function (sourceFile) {
                    if (!isExternalModuleOrDeclarationFile(sourceFile)) {
                        emit(sourceFile);
                    }
                });
            }
            writeLine();
            writeEmittedFiles(writer.getText(), compilerOptions.emitBOM);
        }
        function writeDeclarationFile(jsFilePath, sourceFile) {
            var emitDeclarationResult = emitDeclarations(program, resolver, diagnostics, jsFilePath, sourceFile);
            if (!emitDeclarationResult.reportedDeclarationError) {
                var declarationOutput = emitDeclarationResult.referencePathsOutput;
                var appliedSyncOutputPos = 0;
                ts.forEach(emitDeclarationResult.aliasDeclarationEmitInfo, function (aliasEmitInfo) {
                    if (aliasEmitInfo.asynchronousOutput) {
                        declarationOutput += emitDeclarationResult.synchronousDeclarationOutput.substring(appliedSyncOutputPos, aliasEmitInfo.outputPos);
                        declarationOutput += aliasEmitInfo.asynchronousOutput;
                        appliedSyncOutputPos = aliasEmitInfo.outputPos;
                    }
                });
                declarationOutput += emitDeclarationResult.synchronousDeclarationOutput.substring(appliedSyncOutputPos);
                writeFile(compilerHost, diagnostics, ts.removeFileExtension(jsFilePath) + ".d.ts", declarationOutput, compilerOptions.emitBOM);
            }
        }
        var hasSemanticErrors = false;
        var isEmitBlocked = false;
        if (targetSourceFile === undefined) {
            hasSemanticErrors = resolver.hasSemanticErrors();
            isEmitBlocked = resolver.isEmitBlocked();
            ts.forEach(program.getSourceFiles(), function (sourceFile) {
                if (shouldEmitToOwnFile(sourceFile, compilerOptions)) {
                    var jsFilePath = getOwnEmitOutputFilePath(sourceFile, program, ".js");
                    emitFile(jsFilePath, sourceFile);
                }
            });
            if (compilerOptions.out) {
                emitFile(compilerOptions.out);
            }
        }
        else {
            if (shouldEmitToOwnFile(targetSourceFile, compilerOptions)) {
                hasSemanticErrors = resolver.hasSemanticErrors(targetSourceFile);
                isEmitBlocked = resolver.isEmitBlocked(targetSourceFile);
                var jsFilePath = getOwnEmitOutputFilePath(targetSourceFile, program, ".js");
                emitFile(jsFilePath, targetSourceFile);
            }
            else if (!ts.isDeclarationFile(targetSourceFile) && compilerOptions.out) {
                ts.forEach(program.getSourceFiles(), function (sourceFile) {
                    if (!shouldEmitToOwnFile(sourceFile, compilerOptions)) {
                        hasSemanticErrors = hasSemanticErrors || resolver.hasSemanticErrors(sourceFile);
                        isEmitBlocked = isEmitBlocked || resolver.isEmitBlocked(sourceFile);
                    }
                });
                emitFile(compilerOptions.out);
            }
        }
        function emitFile(jsFilePath, sourceFile) {
            if (!isEmitBlocked) {
                emitJavaScript(jsFilePath, sourceFile);
                if (!hasSemanticErrors && compilerOptions.declaration) {
                    writeDeclarationFile(jsFilePath, sourceFile);
                }
            }
        }
        diagnostics.sort(ts.compareDiagnostics);
        diagnostics = ts.deduplicateSortedDiagnostics(diagnostics);
        var hasEmitterError = ts.forEach(diagnostics, function (diagnostic) { return diagnostic.category === 1 /* Error */; });
        var emitResultStatus;
        if (isEmitBlocked) {
            emitResultStatus = 1 /* AllOutputGenerationSkipped */;
        }
        else if (hasEmitterError) {
            emitResultStatus = 4 /* EmitErrorsEncountered */;
        }
        else if (hasSemanticErrors && compilerOptions.declaration) {
            emitResultStatus = 3 /* DeclarationGenerationSkipped */;
        }
        else if (hasSemanticErrors && !compilerOptions.declaration) {
            emitResultStatus = 2 /* JSGeneratedWithSemanticErrors */;
        }
        else {
            emitResultStatus = 0 /* Succeeded */;
        }
        return {
            emitResultStatus: emitResultStatus,
            diagnostics: diagnostics,
            sourceMaps: sourceMapDataList
        };
    }
    ts.emitFiles = emitFiles;
})(ts || (ts = {}));
var ts;
(function (ts) {
    var nextSymbolId = 1;
    var nextNodeId = 1;
    var nextMergeId = 1;
    function createTypeChecker(program, fullTypeCheck) {
        var Symbol = ts.objectAllocator.getSymbolConstructor();
        var Type = ts.objectAllocator.getTypeConstructor();
        var Signature = ts.objectAllocator.getSignatureConstructor();
        var typeCount = 0;
        var emptyArray = [];
        var emptySymbols = {};
        var compilerOptions = program.getCompilerOptions();
        var checker = {
            getProgram: function () { return program; },
            getNodeCount: function () { return ts.sum(program.getSourceFiles(), "nodeCount"); },
            getIdentifierCount: function () { return ts.sum(program.getSourceFiles(), "identifierCount"); },
            getSymbolCount: function () { return ts.sum(program.getSourceFiles(), "symbolCount"); },
            getTypeCount: function () { return typeCount; },
            isUndefinedSymbol: function (symbol) { return symbol === undefinedSymbol; },
            isArgumentsSymbol: function (symbol) { return symbol === argumentsSymbol; },
            emitFiles: invokeEmitter,
            getDiagnostics: getDiagnostics,
            getDeclarationDiagnostics: getDeclarationDiagnostics,
            getGlobalDiagnostics: getGlobalDiagnostics,
            getTypeOfSymbolAtLocation: getTypeOfSymbolAtLocation,
            getDeclaredTypeOfSymbol: getDeclaredTypeOfSymbol,
            getPropertiesOfType: getPropertiesOfType,
            getPropertyOfType: getPropertyOfType,
            getSignaturesOfType: getSignaturesOfType,
            getIndexTypeOfType: getIndexTypeOfType,
            getReturnTypeOfSignature: getReturnTypeOfSignature,
            getSymbolsInScope: getSymbolsInScope,
            getSymbolAtLocation: getSymbolAtLocation,
            getShorthandAssignmentValueSymbol: getShorthandAssignmentValueSymbol,
            getTypeAtLocation: getTypeAtLocation,
            typeToString: typeToString,
            getSymbolDisplayBuilder: getSymbolDisplayBuilder,
            symbolToString: symbolToString,
            getAugmentedPropertiesOfType: getAugmentedPropertiesOfType,
            getRootSymbols: getRootSymbols,
            getContextualType: getContextualType,
            getFullyQualifiedName: getFullyQualifiedName,
            getResolvedSignature: getResolvedSignature,
            getEnumMemberValue: getEnumMemberValue,
            isValidPropertyAccess: isValidPropertyAccess,
            getSignatureFromDeclaration: getSignatureFromDeclaration,
            isImplementationOfOverload: isImplementationOfOverload,
            getAliasedSymbol: resolveImport,
            hasEarlyErrors: hasEarlyErrors,
            isEmitBlocked: isEmitBlocked
        };
        var undefinedSymbol = createSymbol(4 /* Property */ | 67108864 /* Transient */, "undefined");
        var argumentsSymbol = createSymbol(4 /* Property */ | 67108864 /* Transient */, "arguments");
        var unknownSymbol = createSymbol(4 /* Property */ | 67108864 /* Transient */, "unknown");
        var resolvingSymbol = createSymbol(67108864 /* Transient */, "__resolving__");
        var anyType = createIntrinsicType(1 /* Any */, "any");
        var stringType = createIntrinsicType(2 /* String */, "string");
        var numberType = createIntrinsicType(4 /* Number */, "number");
        var booleanType = createIntrinsicType(8 /* Boolean */, "boolean");
        var voidType = createIntrinsicType(16 /* Void */, "void");
        var undefinedType = createIntrinsicType(32 /* Undefined */ | 131072 /* Unwidened */, "undefined");
        var nullType = createIntrinsicType(64 /* Null */ | 131072 /* Unwidened */, "null");
        var unknownType = createIntrinsicType(1 /* Any */, "unknown");
        var resolvingType = createIntrinsicType(1 /* Any */, "__resolving__");
        var emptyObjectType = createAnonymousType(undefined, emptySymbols, emptyArray, emptyArray, undefined, undefined);
        var anyFunctionType = createAnonymousType(undefined, emptySymbols, emptyArray, emptyArray, undefined, undefined);
        var noConstraintType = createAnonymousType(undefined, emptySymbols, emptyArray, emptyArray, undefined, undefined);
        var inferenceFailureType = createAnonymousType(undefined, emptySymbols, emptyArray, emptyArray, undefined, undefined);
        var anySignature = createSignature(undefined, undefined, emptyArray, anyType, 0, false, false);
        var unknownSignature = createSignature(undefined, undefined, emptyArray, unknownType, 0, false, false);
        var globals = {};
        var globalArraySymbol;
        var globalObjectType;
        var globalFunctionType;
        var globalArrayType;
        var globalStringType;
        var globalNumberType;
        var globalBooleanType;
        var globalRegExpType;
        var globalTemplateStringsArrayType;
        var anyArrayType;
        var tupleTypes = {};
        var unionTypes = {};
        var stringLiteralTypes = {};
        var emitExtends = false;
        var mergedSymbols = [];
        var symbolLinks = [];
        var nodeLinks = [];
        var potentialThisCollisions = [];
        var diagnostics = [];
        var diagnosticsModified = false;
        function addDiagnostic(diagnostic) {
            diagnostics.push(diagnostic);
            diagnosticsModified = true;
        }
        function error(location, message, arg0, arg1, arg2) {
            var diagnostic = location ? ts.createDiagnosticForNode(location, message, arg0, arg1, arg2) : ts.createCompilerDiagnostic(message, arg0, arg1, arg2);
            addDiagnostic(diagnostic);
        }
        function createSymbol(flags, name) {
            return new Symbol(flags, name);
        }
        function getExcludedSymbolFlags(flags) {
            var result = 0;
            if (flags & 2 /* BlockScopedVariable */)
                result |= 107455 /* BlockScopedVariableExcludes */;
            if (flags & 1 /* FunctionScopedVariable */)
                result |= 107454 /* FunctionScopedVariableExcludes */;
            if (flags & 4 /* Property */)
                result |= 107455 /* PropertyExcludes */;
            if (flags & 8 /* EnumMember */)
                result |= 107455 /* EnumMemberExcludes */;
            if (flags & 16 /* Function */)
                result |= 106927 /* FunctionExcludes */;
            if (flags & 32 /* Class */)
                result |= 899583 /* ClassExcludes */;
            if (flags & 64 /* Interface */)
                result |= 792992 /* InterfaceExcludes */;
            if (flags & 256 /* RegularEnum */)
                result |= 899327 /* RegularEnumExcludes */;
            if (flags & 128 /* ConstEnum */)
                result |= 899967 /* ConstEnumExcludes */;
            if (flags & 512 /* ValueModule */)
                result |= 106639 /* ValueModuleExcludes */;
            if (flags & 8192 /* Method */)
                result |= 99263 /* MethodExcludes */;
            if (flags & 32768 /* GetAccessor */)
                result |= 41919 /* GetAccessorExcludes */;
            if (flags & 65536 /* SetAccessor */)
                result |= 74687 /* SetAccessorExcludes */;
            if (flags & 262144 /* TypeParameter */)
                result |= 530912 /* TypeParameterExcludes */;
            if (flags & 524288 /* TypeAlias */)
                result |= 793056 /* TypeAliasExcludes */;
            if (flags & 8388608 /* Import */)
                result |= 8388608 /* ImportExcludes */;
            return result;
        }
        function recordMergedSymbol(target, source) {
            if (!source.mergeId)
                source.mergeId = nextMergeId++;
            mergedSymbols[source.mergeId] = target;
        }
        function cloneSymbol(symbol) {
            var result = createSymbol(symbol.flags | 33554432 /* Merged */, symbol.name);
            result.declarations = symbol.declarations.slice(0);
            result.parent = symbol.parent;
            if (symbol.valueDeclaration)
                result.valueDeclaration = symbol.valueDeclaration;
            if (symbol.constEnumOnlyModule)
                result.constEnumOnlyModule = true;
            if (symbol.members)
                result.members = cloneSymbolTable(symbol.members);
            if (symbol.exports)
                result.exports = cloneSymbolTable(symbol.exports);
            recordMergedSymbol(result, symbol);
            return result;
        }
        function extendSymbol(target, source) {
            if (!(target.flags & getExcludedSymbolFlags(source.flags))) {
                if (source.flags & 512 /* ValueModule */ && target.flags & 512 /* ValueModule */ && target.constEnumOnlyModule && !source.constEnumOnlyModule) {
                    target.constEnumOnlyModule = false;
                }
                target.flags |= source.flags;
                if (!target.valueDeclaration && source.valueDeclaration)
                    target.valueDeclaration = source.valueDeclaration;
                ts.forEach(source.declarations, function (node) {
                    target.declarations.push(node);
                });
                if (source.members) {
                    if (!target.members)
                        target.members = {};
                    extendSymbolTable(target.members, source.members);
                }
                if (source.exports) {
                    if (!target.exports)
                        target.exports = {};
                    extendSymbolTable(target.exports, source.exports);
                }
                recordMergedSymbol(target, source);
            }
            else {
                var message = target.flags & 2 /* BlockScopedVariable */ || source.flags & 2 /* BlockScopedVariable */ ? ts.Diagnostics.Cannot_redeclare_block_scoped_variable_0 : ts.Diagnostics.Duplicate_identifier_0;
                ts.forEach(source.declarations, function (node) {
                    error(node.name ? node.name : node, message, symbolToString(source));
                });
                ts.forEach(target.declarations, function (node) {
                    error(node.name ? node.name : node, message, symbolToString(source));
                });
            }
        }
        function cloneSymbolTable(symbolTable) {
            var result = {};
            for (var id in symbolTable) {
                if (ts.hasProperty(symbolTable, id)) {
                    result[id] = symbolTable[id];
                }
            }
            return result;
        }
        function extendSymbolTable(target, source) {
            for (var id in source) {
                if (ts.hasProperty(source, id)) {
                    if (!ts.hasProperty(target, id)) {
                        target[id] = source[id];
                    }
                    else {
                        var symbol = target[id];
                        if (!(symbol.flags & 33554432 /* Merged */)) {
                            target[id] = symbol = cloneSymbol(symbol);
                        }
                        extendSymbol(symbol, source[id]);
                    }
                }
            }
        }
        function getSymbolLinks(symbol) {
            if (symbol.flags & 67108864 /* Transient */)
                return symbol;
            if (!symbol.id)
                symbol.id = nextSymbolId++;
            return symbolLinks[symbol.id] || (symbolLinks[symbol.id] = {});
        }
        function getNodeLinks(node) {
            if (!node.id)
                node.id = nextNodeId++;
            return nodeLinks[node.id] || (nodeLinks[node.id] = {});
        }
        function getSourceFile(node) {
            return ts.getAncestor(node, 207 /* SourceFile */);
        }
        function isGlobalSourceFile(node) {
            return node.kind === 207 /* SourceFile */ && !ts.isExternalModule(node);
        }
        function getSymbol(symbols, name, meaning) {
            if (meaning && ts.hasProperty(symbols, name)) {
                var symbol = symbols[name];
                ts.Debug.assert((symbol.flags & 16777216 /* Instantiated */) === 0, "Should never get an instantiated symbol here.");
                if (symbol.flags & meaning) {
                    return symbol;
                }
                if (symbol.flags & 8388608 /* Import */) {
                    var target = resolveImport(symbol);
                    if (target === unknownSymbol || target.flags & meaning) {
                        return symbol;
                    }
                }
            }
        }
        function isDefinedBefore(node1, node2) {
            var file1 = ts.getSourceFileOfNode(node1);
            var file2 = ts.getSourceFileOfNode(node2);
            if (file1 === file2) {
                return node1.pos <= node2.pos;
            }
            if (!compilerOptions.out) {
                return true;
            }
            var sourceFiles = program.getSourceFiles();
            return sourceFiles.indexOf(file1) <= sourceFiles.indexOf(file2);
        }
        function resolveName(location, name, meaning, nameNotFoundMessage, nameArg) {
            var result;
            var lastLocation;
            var propertyWithInvalidInitializer;
            var errorLocation = location;
            loop: while (location) {
                if (location.locals && !isGlobalSourceFile(location)) {
                    if (result = getSymbol(location.locals, name, meaning)) {
                        break loop;
                    }
                }
                switch (location.kind) {
                    case 207 /* SourceFile */:
                        if (!ts.isExternalModule(location))
                            break;
                    case 195 /* ModuleDeclaration */:
                        if (result = getSymbol(getSymbolOfNode(location).exports, name, meaning & 8914931 /* ModuleMember */)) {
                            break loop;
                        }
                        break;
                    case 194 /* EnumDeclaration */:
                        if (result = getSymbol(getSymbolOfNode(location).exports, name, meaning & 8 /* EnumMember */)) {
                            break loop;
                        }
                        break;
                    case 126 /* PropertyDeclaration */:
                    case 125 /* PropertySignature */:
                        if (location.parent.kind === 191 /* ClassDeclaration */ && !(location.flags & 128 /* Static */)) {
                            var ctor = findConstructorDeclaration(location.parent);
                            if (ctor && ctor.locals) {
                                if (getSymbol(ctor.locals, name, meaning & 107455 /* Value */)) {
                                    propertyWithInvalidInitializer = location;
                                }
                            }
                        }
                        break;
                    case 191 /* ClassDeclaration */:
                    case 192 /* InterfaceDeclaration */:
                        if (result = getSymbol(getSymbolOfNode(location).members, name, meaning & 793056 /* Type */)) {
                            if (lastLocation && lastLocation.flags & 128 /* Static */) {
                                error(errorLocation, ts.Diagnostics.Static_members_cannot_reference_class_type_parameters);
                                return undefined;
                            }
                            break loop;
                        }
                        break;
                    case 128 /* MethodDeclaration */:
                    case 127 /* MethodSignature */:
                    case 129 /* Constructor */:
                    case 130 /* GetAccessor */:
                    case 131 /* SetAccessor */:
                    case 190 /* FunctionDeclaration */:
                    case 157 /* ArrowFunction */:
                        if (name === "arguments") {
                            result = argumentsSymbol;
                            break loop;
                        }
                        break;
                    case 156 /* FunctionExpression */:
                        if (name === "arguments") {
                            result = argumentsSymbol;
                            break loop;
                        }
                        var id = location.name;
                        if (id && name === id.text) {
                            result = location.symbol;
                            break loop;
                        }
                        break;
                    case 203 /* CatchClause */:
                        var id = location.name;
                        if (name === id.text) {
                            result = location.symbol;
                            break loop;
                        }
                        break;
                }
                lastLocation = location;
                location = location.parent;
            }
            if (!result) {
                result = getSymbol(globals, name, meaning);
            }
            if (!result) {
                if (nameNotFoundMessage) {
                    error(errorLocation, nameNotFoundMessage, typeof nameArg === "string" ? nameArg : ts.declarationNameToString(nameArg));
                }
                return undefined;
            }
            if (nameNotFoundMessage) {
                if (propertyWithInvalidInitializer) {
                    var propertyName = propertyWithInvalidInitializer.name;
                    error(errorLocation, ts.Diagnostics.Initializer_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor, ts.declarationNameToString(propertyName), typeof nameArg === "string" ? nameArg : ts.declarationNameToString(nameArg));
                    return undefined;
                }
                if (result.flags & 2 /* BlockScopedVariable */) {
                    var declaration = ts.forEach(result.declarations, function (d) { return d.flags & 6144 /* BlockScoped */ ? d : undefined; });
                    ts.Debug.assert(declaration !== undefined, "Block-scoped variable declaration is undefined");
                    if (!isDefinedBefore(declaration, errorLocation)) {
                        error(errorLocation, ts.Diagnostics.Block_scoped_variable_0_used_before_its_declaration, ts.declarationNameToString(declaration.name));
                    }
                }
            }
            return result;
        }
        function resolveImport(symbol) {
            ts.Debug.assert((symbol.flags & 8388608 /* Import */) !== 0, "Should only get Imports here.");
            var links = getSymbolLinks(symbol);
            if (!links.target) {
                links.target = resolvingSymbol;
                var node = ts.getDeclarationOfKind(symbol, 197 /* ImportDeclaration */);
                var target = node.moduleReference.kind === 199 /* ExternalModuleReference */ ? resolveExternalModuleName(node, ts.getExternalModuleImportDeclarationExpression(node)) : getSymbolOfPartOfRightHandSideOfImport(node.moduleReference, node);
                if (links.target === resolvingSymbol) {
                    links.target = target || unknownSymbol;
                }
                else {
                    error(node, ts.Diagnostics.Circular_definition_of_import_alias_0, symbolToString(symbol));
                }
            }
            else if (links.target === resolvingSymbol) {
                links.target = unknownSymbol;
            }
            return links.target;
        }
        function getSymbolOfPartOfRightHandSideOfImport(entityName, importDeclaration) {
            if (!importDeclaration) {
                importDeclaration = ts.getAncestor(entityName, 197 /* ImportDeclaration */);
                ts.Debug.assert(importDeclaration !== undefined);
            }
            if (entityName.kind === 64 /* Identifier */ && isRightSideOfQualifiedNameOrPropertyAccess(entityName)) {
                entityName = entityName.parent;
            }
            if (entityName.kind === 64 /* Identifier */ || entityName.parent.kind === 121 /* QualifiedName */) {
                return resolveEntityName(importDeclaration, entityName, 1536 /* Namespace */);
            }
            else {
                ts.Debug.assert(entityName.parent.kind === 197 /* ImportDeclaration */);
                return resolveEntityName(importDeclaration, entityName, 107455 /* Value */ | 793056 /* Type */ | 1536 /* Namespace */);
            }
        }
        function getFullyQualifiedName(symbol) {
            return symbol.parent ? getFullyQualifiedName(symbol.parent) + "." + symbolToString(symbol) : symbolToString(symbol);
        }
        function resolveEntityName(location, name, meaning) {
            if (ts.getFullWidth(name) === 0) {
                return undefined;
            }
            if (name.kind === 64 /* Identifier */) {
                var symbol = resolveName(location, name.text, meaning, ts.Diagnostics.Cannot_find_name_0, name);
                if (!symbol) {
                    return;
                }
            }
            else if (name.kind === 121 /* QualifiedName */) {
                var namespace = resolveEntityName(location, name.left, 1536 /* Namespace */);
                if (!namespace || namespace === unknownSymbol || ts.getFullWidth(name.right) === 0)
                    return;
                var symbol = getSymbol(namespace.exports, name.right.text, meaning);
                if (!symbol) {
                    error(location, ts.Diagnostics.Module_0_has_no_exported_member_1, getFullyQualifiedName(namespace), ts.declarationNameToString(name.right));
                    return;
                }
            }
            ts.Debug.assert((symbol.flags & 16777216 /* Instantiated */) === 0, "Should never get an instantiated symbol here.");
            return symbol.flags & meaning ? symbol : resolveImport(symbol);
        }
        function isExternalModuleNameRelative(moduleName) {
            return moduleName.substr(0, 2) === "./" || moduleName.substr(0, 3) === "../" || moduleName.substr(0, 2) === ".\\" || moduleName.substr(0, 3) === "..\\";
        }
        function resolveExternalModuleName(location, moduleReferenceExpression) {
            if (moduleReferenceExpression.kind !== 8 /* StringLiteral */) {
                return;
            }
            var moduleReferenceLiteral = moduleReferenceExpression;
            var searchPath = ts.getDirectoryPath(getSourceFile(location).filename);
            var moduleName = ts.escapeIdentifier(moduleReferenceLiteral.text);
            if (!moduleName)
                return;
            var isRelative = isExternalModuleNameRelative(moduleName);
            if (!isRelative) {
                var symbol = getSymbol(globals, '"' + moduleName + '"', 512 /* ValueModule */);
                if (symbol) {
                    return getResolvedExportSymbol(symbol);
                }
            }
            while (true) {
                var filename = ts.normalizePath(ts.combinePaths(searchPath, moduleName));
                var sourceFile = program.getSourceFile(filename + ".ts") || program.getSourceFile(filename + ".d.ts");
                if (sourceFile || isRelative)
                    break;
                var parentPath = ts.getDirectoryPath(searchPath);
                if (parentPath === searchPath)
                    break;
                searchPath = parentPath;
            }
            if (sourceFile) {
                if (sourceFile.symbol) {
                    return getResolvedExportSymbol(sourceFile.symbol);
                }
                error(moduleReferenceLiteral, ts.Diagnostics.File_0_is_not_an_external_module, sourceFile.filename);
                return;
            }
            error(moduleReferenceLiteral, ts.Diagnostics.Cannot_find_external_module_0, moduleName);
        }
        function getResolvedExportSymbol(moduleSymbol) {
            var symbol = getExportAssignmentSymbol(moduleSymbol);
            if (symbol) {
                if (symbol.flags & (107455 /* Value */ | 793056 /* Type */ | 1536 /* Namespace */)) {
                    return symbol;
                }
                if (symbol.flags & 8388608 /* Import */) {
                    return resolveImport(symbol);
                }
            }
            return moduleSymbol;
        }
        function getExportAssignmentSymbol(symbol) {
            checkTypeOfExportAssignmentSymbol(symbol);
            var symbolLinks = getSymbolLinks(symbol);
            return symbolLinks.exportAssignSymbol === unknownSymbol ? undefined : symbolLinks.exportAssignSymbol;
        }
        function checkTypeOfExportAssignmentSymbol(containerSymbol) {
            var symbolLinks = getSymbolLinks(containerSymbol);
            if (!symbolLinks.exportAssignSymbol) {
                var exportInformation = collectExportInformationForSourceFileOrModule(containerSymbol);
                if (exportInformation.exportAssignments.length) {
                    if (exportInformation.exportAssignments.length > 1) {
                        ts.forEach(exportInformation.exportAssignments, function (node) { return error(node, ts.Diagnostics.A_module_cannot_have_more_than_one_export_assignment); });
                    }
                    var node = exportInformation.exportAssignments[0];
                    if (exportInformation.hasExportedMember) {
                        error(node, ts.Diagnostics.An_export_assignment_cannot_be_used_in_a_module_with_other_exported_elements);
                    }
                    if (node.exportName.text) {
                        var meaning = 107455 /* Value */ | 793056 /* Type */ | 1536 /* Namespace */;
                        var exportSymbol = resolveName(node, node.exportName.text, meaning, ts.Diagnostics.Cannot_find_name_0, node.exportName);
                    }
                }
                symbolLinks.exportAssignSymbol = exportSymbol || unknownSymbol;
            }
        }
        function collectExportInformationForSourceFileOrModule(symbol) {
            var seenExportedMember = false;
            var result = [];
            ts.forEach(symbol.declarations, function (declaration) {
                var block = (declaration.kind === 207 /* SourceFile */ ? declaration : declaration.body);
                ts.forEach(block.statements, function (node) {
                    if (node.kind === 198 /* ExportAssignment */) {
                        result.push(node);
                    }
                    else {
                        seenExportedMember = seenExportedMember || (node.flags & 1 /* Export */) !== 0;
                    }
                });
            });
            return {
                hasExportedMember: seenExportedMember,
                exportAssignments: result
            };
        }
        function getMergedSymbol(symbol) {
            var merged;
            return symbol && symbol.mergeId && (merged = mergedSymbols[symbol.mergeId]) ? merged : symbol;
        }
        function getSymbolOfNode(node) {
            return getMergedSymbol(node.symbol);
        }
        function getParentOfSymbol(symbol) {
            return getMergedSymbol(symbol.parent);
        }
        function getExportSymbolOfValueSymbolIfExported(symbol) {
            return symbol && (symbol.flags & 1048576 /* ExportValue */) !== 0 ? getMergedSymbol(symbol.exportSymbol) : symbol;
        }
        function symbolIsValue(symbol) {
            if (symbol.flags & 16777216 /* Instantiated */) {
                return symbolIsValue(getSymbolLinks(symbol).target);
            }
            if (symbol.flags & 107455 /* Value */) {
                return true;
            }
            if (symbol.flags & 8388608 /* Import */) {
                return (resolveImport(symbol).flags & 107455 /* Value */) !== 0;
            }
            return false;
        }
        function findConstructorDeclaration(node) {
            var members = node.members;
            for (var i = 0; i < members.length; i++) {
                var member = members[i];
                if (member.kind === 129 /* Constructor */ && member.body) {
                    return member;
                }
            }
        }
        function createType(flags) {
            var result = new Type(checker, flags);
            result.id = typeCount++;
            return result;
        }
        function createIntrinsicType(kind, intrinsicName) {
            var type = createType(kind);
            type.intrinsicName = intrinsicName;
            return type;
        }
        function createObjectType(kind, symbol) {
            var type = createType(kind);
            type.symbol = symbol;
            return type;
        }
        function isReservedMemberName(name) {
            return name.charCodeAt(0) === 95 /* _ */ && name.charCodeAt(1) === 95 /* _ */ && name.charCodeAt(2) !== 95 /* _ */;
        }
        function getNamedMembers(members) {
            var result;
            for (var id in members) {
                if (ts.hasProperty(members, id)) {
                    if (!isReservedMemberName(id)) {
                        if (!result)
                            result = [];
                        var symbol = members[id];
                        if (symbolIsValue(symbol)) {
                            result.push(symbol);
                        }
                    }
                }
            }
            return result || emptyArray;
        }
        function setObjectTypeMembers(type, members, callSignatures, constructSignatures, stringIndexType, numberIndexType) {
            type.members = members;
            type.properties = getNamedMembers(members);
            type.callSignatures = callSignatures;
            type.constructSignatures = constructSignatures;
            if (stringIndexType)
                type.stringIndexType = stringIndexType;
            if (numberIndexType)
                type.numberIndexType = numberIndexType;
            return type;
        }
        function createAnonymousType(symbol, members, callSignatures, constructSignatures, stringIndexType, numberIndexType) {
            return setObjectTypeMembers(createObjectType(32768 /* Anonymous */, symbol), members, callSignatures, constructSignatures, stringIndexType, numberIndexType);
        }
        function forEachSymbolTableInScope(enclosingDeclaration, callback) {
            var result;
            for (var location = enclosingDeclaration; location; location = location.parent) {
                if (location.locals && !isGlobalSourceFile(location)) {
                    if (result = callback(location.locals)) {
                        return result;
                    }
                }
                switch (location.kind) {
                    case 207 /* SourceFile */:
                        if (!ts.isExternalModule(location)) {
                            break;
                        }
                    case 195 /* ModuleDeclaration */:
                        if (result = callback(getSymbolOfNode(location).exports)) {
                            return result;
                        }
                        break;
                    case 191 /* ClassDeclaration */:
                    case 192 /* InterfaceDeclaration */:
                        if (result = callback(getSymbolOfNode(location).members)) {
                            return result;
                        }
                        break;
                }
            }
            return callback(globals);
        }
        function getQualifiedLeftMeaning(rightMeaning) {
            return rightMeaning === 107455 /* Value */ ? 107455 /* Value */ : 1536 /* Namespace */;
        }
        function getAccessibleSymbolChain(symbol, enclosingDeclaration, meaning, useOnlyExternalAliasing) {
            function getAccessibleSymbolChainFromSymbolTable(symbols) {
                function canQualifySymbol(symbolFromSymbolTable, meaning) {
                    if (!needsQualification(symbolFromSymbolTable, enclosingDeclaration, meaning)) {
                        return true;
                    }
                    var accessibleParent = getAccessibleSymbolChain(symbolFromSymbolTable.parent, enclosingDeclaration, getQualifiedLeftMeaning(meaning), useOnlyExternalAliasing);
                    return !!accessibleParent;
                }
                function isAccessible(symbolFromSymbolTable, resolvedAliasSymbol) {
                    if (symbol === (resolvedAliasSymbol || symbolFromSymbolTable)) {
                        return !ts.forEach(symbolFromSymbolTable.declarations, function (declaration) { return hasExternalModuleSymbol(declaration); }) && canQualifySymbol(symbolFromSymbolTable, meaning);
                    }
                }
                if (isAccessible(ts.lookUp(symbols, symbol.name))) {
                    return [symbol];
                }
                return ts.forEachValue(symbols, function (symbolFromSymbolTable) {
                    if (symbolFromSymbolTable.flags & 8388608 /* Import */) {
                        if (!useOnlyExternalAliasing || ts.forEach(symbolFromSymbolTable.declarations, ts.isExternalModuleImportDeclaration)) {
                            var resolvedImportedSymbol = resolveImport(symbolFromSymbolTable);
                            if (isAccessible(symbolFromSymbolTable, resolveImport(symbolFromSymbolTable))) {
                                return [symbolFromSymbolTable];
                            }
                            var accessibleSymbolsFromExports = resolvedImportedSymbol.exports ? getAccessibleSymbolChainFromSymbolTable(resolvedImportedSymbol.exports) : undefined;
                            if (accessibleSymbolsFromExports && canQualifySymbol(symbolFromSymbolTable, getQualifiedLeftMeaning(meaning))) {
                                return [symbolFromSymbolTable].concat(accessibleSymbolsFromExports);
                            }
                        }
                    }
                });
            }
            if (symbol) {
                return forEachSymbolTableInScope(enclosingDeclaration, getAccessibleSymbolChainFromSymbolTable);
            }
        }
        function needsQualification(symbol, enclosingDeclaration, meaning) {
            var qualify = false;
            forEachSymbolTableInScope(enclosingDeclaration, function (symbolTable) {
                if (!ts.hasProperty(symbolTable, symbol.name)) {
                    return false;
                }
                var symbolFromSymbolTable = symbolTable[symbol.name];
                if (symbolFromSymbolTable === symbol) {
                    return true;
                }
                symbolFromSymbolTable = (symbolFromSymbolTable.flags & 8388608 /* Import */) ? resolveImport(symbolFromSymbolTable) : symbolFromSymbolTable;
                if (symbolFromSymbolTable.flags & meaning) {
                    qualify = true;
                    return true;
                }
                return false;
            });
            return qualify;
        }
        function isSymbolAccessible(symbol, enclosingDeclaration, meaning) {
            if (symbol && enclosingDeclaration && !(symbol.flags & 262144 /* TypeParameter */)) {
                var initialSymbol = symbol;
                var meaningToLook = meaning;
                while (symbol) {
                    var accessibleSymbolChain = getAccessibleSymbolChain(symbol, enclosingDeclaration, meaningToLook, false);
                    if (accessibleSymbolChain) {
                        var hasAccessibleDeclarations = hasVisibleDeclarations(accessibleSymbolChain[0]);
                        if (!hasAccessibleDeclarations) {
                            return {
                                accessibility: 1 /* NotAccessible */,
                                errorSymbolName: symbolToString(initialSymbol, enclosingDeclaration, meaning),
                                errorModuleName: symbol !== initialSymbol ? symbolToString(symbol, enclosingDeclaration, 1536 /* Namespace */) : undefined
                            };
                        }
                        return hasAccessibleDeclarations;
                    }
                    meaningToLook = getQualifiedLeftMeaning(meaning);
                    symbol = getParentOfSymbol(symbol);
                }
                var symbolExternalModule = ts.forEach(initialSymbol.declarations, function (declaration) { return getExternalModuleContainer(declaration); });
                if (symbolExternalModule) {
                    var enclosingExternalModule = getExternalModuleContainer(enclosingDeclaration);
                    if (symbolExternalModule !== enclosingExternalModule) {
                        return {
                            accessibility: 2 /* CannotBeNamed */,
                            errorSymbolName: symbolToString(initialSymbol, enclosingDeclaration, meaning),
                            errorModuleName: symbolToString(symbolExternalModule)
                        };
                    }
                }
                return {
                    accessibility: 1 /* NotAccessible */,
                    errorSymbolName: symbolToString(initialSymbol, enclosingDeclaration, meaning)
                };
            }
            return { accessibility: 0 /* Accessible */ };
            function getExternalModuleContainer(declaration) {
                for (; declaration; declaration = declaration.parent) {
                    if (hasExternalModuleSymbol(declaration)) {
                        return getSymbolOfNode(declaration);
                    }
                }
            }
        }
        function hasExternalModuleSymbol(declaration) {
            return (declaration.kind === 195 /* ModuleDeclaration */ && declaration.name.kind === 8 /* StringLiteral */) || (declaration.kind === 207 /* SourceFile */ && ts.isExternalModule(declaration));
        }
        function hasVisibleDeclarations(symbol) {
            var aliasesToMakeVisible;
            if (ts.forEach(symbol.declarations, function (declaration) { return !getIsDeclarationVisible(declaration); })) {
                return undefined;
            }
            return { accessibility: 0 /* Accessible */, aliasesToMakeVisible: aliasesToMakeVisible };
            function getIsDeclarationVisible(declaration) {
                if (!isDeclarationVisible(declaration)) {
                    if (declaration.kind === 197 /* ImportDeclaration */ && !(declaration.flags & 1 /* Export */) && isDeclarationVisible(declaration.parent)) {
                        getNodeLinks(declaration).isVisible = true;
                        if (aliasesToMakeVisible) {
                            if (!ts.contains(aliasesToMakeVisible, declaration)) {
                                aliasesToMakeVisible.push(declaration);
                            }
                        }
                        else {
                            aliasesToMakeVisible = [declaration];
                        }
                        return true;
                    }
                    return false;
                }
                return true;
            }
        }
        function isEntityNameVisible(entityName, enclosingDeclaration) {
            var meaning;
            if (entityName.parent.kind === 138 /* TypeQuery */) {
                meaning = 107455 /* Value */ | 1048576 /* ExportValue */;
            }
            else if (entityName.kind === 121 /* QualifiedName */ || entityName.parent.kind === 197 /* ImportDeclaration */) {
                meaning = 1536 /* Namespace */;
            }
            else {
                meaning = 793056 /* Type */;
            }
            var firstIdentifier = getFirstIdentifier(entityName);
            var symbol = resolveName(enclosingDeclaration, firstIdentifier.text, meaning, undefined, undefined);
            return (symbol && hasVisibleDeclarations(symbol)) || {
                accessibility: 1 /* NotAccessible */,
                errorSymbolName: ts.getTextOfNode(firstIdentifier),
                errorNode: firstIdentifier
            };
        }
        function writeKeyword(writer, kind) {
            writer.writeKeyword(ts.tokenToString(kind));
        }
        function writePunctuation(writer, kind) {
            writer.writePunctuation(ts.tokenToString(kind));
        }
        function writeSpace(writer) {
            writer.writeSpace(" ");
        }
        function symbolToString(symbol, enclosingDeclaration, meaning) {
            var writer = ts.getSingleLineStringWriter();
            getSymbolDisplayBuilder().buildSymbolDisplay(symbol, writer, enclosingDeclaration, meaning);
            var result = writer.string();
            ts.releaseStringWriter(writer);
            return result;
        }
        function typeToString(type, enclosingDeclaration, flags) {
            var writer = ts.getSingleLineStringWriter();
            getSymbolDisplayBuilder().buildTypeDisplay(type, writer, enclosingDeclaration, flags);
            var result = writer.string();
            ts.releaseStringWriter(writer);
            var maxLength = compilerOptions.noErrorTruncation || flags & 4 /* NoTruncation */ ? undefined : 100;
            if (maxLength && result.length >= maxLength) {
                result = result.substr(0, maxLength - "...".length) + "...";
            }
            return result;
        }
        function getTypeAliasForTypeLiteral(type) {
            if (type.symbol && type.symbol.flags & 2048 /* TypeLiteral */) {
                var node = type.symbol.declarations[0].parent;
                while (node.kind === 143 /* ParenthesizedType */) {
                    node = node.parent;
                }
                if (node.kind === 193 /* TypeAliasDeclaration */) {
                    return getSymbolOfNode(node);
                }
            }
            return undefined;
        }
        var _displayBuilder;
        function getSymbolDisplayBuilder() {
            function appendSymbolNameOnly(symbol, writer) {
                if (symbol.declarations && symbol.declarations.length > 0) {
                    var declaration = symbol.declarations[0];
                    if (declaration.name) {
                        writer.writeSymbol(ts.declarationNameToString(declaration.name), symbol);
                        return;
                    }
                }
                writer.writeSymbol(symbol.name, symbol);
            }
            function buildSymbolDisplay(symbol, writer, enclosingDeclaration, meaning, flags) {
                var parentSymbol;
                function appendParentTypeArgumentsAndSymbolName(symbol) {
                    if (parentSymbol) {
                        if (flags & 1 /* WriteTypeParametersOrArguments */) {
                            if (symbol.flags & 16777216 /* Instantiated */) {
                                buildDisplayForTypeArgumentsAndDelimiters(getTypeParametersOfClassOrInterface(parentSymbol), symbol.mapper, writer, enclosingDeclaration);
                            }
                            else {
                                buildTypeParameterDisplayFromSymbol(parentSymbol, writer, enclosingDeclaration);
                            }
                        }
                        writePunctuation(writer, 20 /* DotToken */);
                    }
                    parentSymbol = symbol;
                    appendSymbolNameOnly(symbol, writer);
                }
                writer.trackSymbol(symbol, enclosingDeclaration, meaning);
                function walkSymbol(symbol, meaning) {
                    if (symbol) {
                        var accessibleSymbolChain = getAccessibleSymbolChain(symbol, enclosingDeclaration, meaning, !!(flags & 2 /* UseOnlyExternalAliasing */));
                        if (!accessibleSymbolChain || needsQualification(accessibleSymbolChain[0], enclosingDeclaration, accessibleSymbolChain.length === 1 ? meaning : getQualifiedLeftMeaning(meaning))) {
                            walkSymbol(getParentOfSymbol(accessibleSymbolChain ? accessibleSymbolChain[0] : symbol), getQualifiedLeftMeaning(meaning));
                        }
                        if (accessibleSymbolChain) {
                            for (var i = 0, n = accessibleSymbolChain.length; i < n; i++) {
                                appendParentTypeArgumentsAndSymbolName(accessibleSymbolChain[i]);
                            }
                        }
                        else {
                            if (!parentSymbol && ts.forEach(symbol.declarations, function (declaration) { return hasExternalModuleSymbol(declaration); })) {
                                return;
                            }
                            if (symbol.flags & 2048 /* TypeLiteral */ || symbol.flags & 4096 /* ObjectLiteral */) {
                                return;
                            }
                            appendParentTypeArgumentsAndSymbolName(symbol);
                        }
                    }
                }
                if (enclosingDeclaration && !(symbol.flags & 262144 /* TypeParameter */)) {
                    walkSymbol(symbol, meaning);
                    return;
                }
                return appendParentTypeArgumentsAndSymbolName(symbol);
            }
            function buildTypeDisplay(type, writer, enclosingDeclaration, globalFlags, typeStack) {
                var globalFlagsToPass = globalFlags & 16 /* WriteOwnNameForAnyLike */;
                return writeType(type, globalFlags);
                function writeType(type, flags) {
                    if (type.flags & 127 /* Intrinsic */) {
                        writer.writeKeyword(!(globalFlags & 16 /* WriteOwnNameForAnyLike */) && (type.flags & 1 /* Any */) ? "any" : type.intrinsicName);
                    }
                    else if (type.flags & 4096 /* Reference */) {
                        writeTypeReference(type, flags);
                    }
                    else if (type.flags & (1024 /* Class */ | 2048 /* Interface */ | 128 /* Enum */ | 512 /* TypeParameter */)) {
                        buildSymbolDisplay(type.symbol, writer, enclosingDeclaration, 793056 /* Type */);
                    }
                    else if (type.flags & 8192 /* Tuple */) {
                        writeTupleType(type);
                    }
                    else if (type.flags & 16384 /* Union */) {
                        writeUnionType(type, flags);
                    }
                    else if (type.flags & 32768 /* Anonymous */) {
                        writeAnonymousType(type, flags);
                    }
                    else if (type.flags & 256 /* StringLiteral */) {
                        writer.writeStringLiteral(type.text);
                    }
                    else {
                        writePunctuation(writer, 14 /* OpenBraceToken */);
                        writeSpace(writer);
                        writePunctuation(writer, 21 /* DotDotDotToken */);
                        writeSpace(writer);
                        writePunctuation(writer, 15 /* CloseBraceToken */);
                    }
                }
                function writeTypeList(types, union) {
                    for (var i = 0; i < types.length; i++) {
                        if (i > 0) {
                            if (union) {
                                writeSpace(writer);
                            }
                            writePunctuation(writer, union ? 44 /* BarToken */ : 23 /* CommaToken */);
                            writeSpace(writer);
                        }
                        writeType(types[i], union ? 64 /* InElementType */ : 0 /* None */);
                    }
                }
                function writeTypeReference(type, flags) {
                    if (type.target === globalArrayType && !(flags & 1 /* WriteArrayAsGenericType */)) {
                        writeType(type.typeArguments[0], 64 /* InElementType */);
                        writePunctuation(writer, 18 /* OpenBracketToken */);
                        writePunctuation(writer, 19 /* CloseBracketToken */);
                    }
                    else {
                        buildSymbolDisplay(type.target.symbol, writer, enclosingDeclaration, 793056 /* Type */);
                        writePunctuation(writer, 24 /* LessThanToken */);
                        writeTypeList(type.typeArguments, false);
                        writePunctuation(writer, 25 /* GreaterThanToken */);
                    }
                }
                function writeTupleType(type) {
                    writePunctuation(writer, 18 /* OpenBracketToken */);
                    writeTypeList(type.elementTypes, false);
                    writePunctuation(writer, 19 /* CloseBracketToken */);
                }
                function writeUnionType(type, flags) {
                    if (flags & 64 /* InElementType */) {
                        writePunctuation(writer, 16 /* OpenParenToken */);
                    }
                    writeTypeList(type.types, true);
                    if (flags & 64 /* InElementType */) {
                        writePunctuation(writer, 17 /* CloseParenToken */);
                    }
                }
                function writeAnonymousType(type, flags) {
                    if (type.symbol && type.symbol.flags & (32 /* Class */ | 384 /* Enum */ | 512 /* ValueModule */)) {
                        writeTypeofSymbol(type);
                    }
                    else if (shouldWriteTypeOfFunctionSymbol()) {
                        writeTypeofSymbol(type);
                    }
                    else if (typeStack && ts.contains(typeStack, type)) {
                        var typeAlias = getTypeAliasForTypeLiteral(type);
                        if (typeAlias) {
                            buildSymbolDisplay(typeAlias, writer, enclosingDeclaration, 793056 /* Type */);
                        }
                        else {
                            writeKeyword(writer, 110 /* AnyKeyword */);
                        }
                    }
                    else {
                        if (!typeStack) {
                            typeStack = [];
                        }
                        typeStack.push(type);
                        writeLiteralType(type, flags);
                        typeStack.pop();
                    }
                    function shouldWriteTypeOfFunctionSymbol() {
                        if (type.symbol) {
                            var isStaticMethodSymbol = !!(type.symbol.flags & 8192 /* Method */ && ts.forEach(type.symbol.declarations, function (declaration) { return declaration.flags & 128 /* Static */; }));
                            var isNonLocalFunctionSymbol = !!(type.symbol.flags & 16 /* Function */) && (type.symbol.parent || ts.forEach(type.symbol.declarations, function (declaration) { return declaration.parent.kind === 207 /* SourceFile */ || declaration.parent.kind === 196 /* ModuleBlock */; }));
                            if (isStaticMethodSymbol || isNonLocalFunctionSymbol) {
                                return !!(flags & 2 /* UseTypeOfFunction */) || (typeStack && ts.contains(typeStack, type));
                            }
                        }
                    }
                }
                function writeTypeofSymbol(type) {
                    writeKeyword(writer, 96 /* TypeOfKeyword */);
                    writeSpace(writer);
                    buildSymbolDisplay(type.symbol, writer, enclosingDeclaration, 107455 /* Value */);
                }
                function getIndexerParameterName(type, indexKind, fallbackName) {
                    var declaration = getIndexDeclarationOfSymbol(type.symbol, indexKind);
                    if (!declaration) {
                        return fallbackName;
                    }
                    ts.Debug.assert(declaration.parameters.length !== 0);
                    return ts.declarationNameToString(declaration.parameters[0].name);
                }
                function writeLiteralType(type, flags) {
                    var resolved = resolveObjectOrUnionTypeMembers(type);
                    if (!resolved.properties.length && !resolved.stringIndexType && !resolved.numberIndexType) {
                        if (!resolved.callSignatures.length && !resolved.constructSignatures.length) {
                            writePunctuation(writer, 14 /* OpenBraceToken */);
                            writePunctuation(writer, 15 /* CloseBraceToken */);
                            return;
                        }
                        if (resolved.callSignatures.length === 1 && !resolved.constructSignatures.length) {
                            if (flags & 64 /* InElementType */) {
                                writePunctuation(writer, 16 /* OpenParenToken */);
                            }
                            buildSignatureDisplay(resolved.callSignatures[0], writer, enclosingDeclaration, globalFlagsToPass | 8 /* WriteArrowStyleSignature */, typeStack);
                            if (flags & 64 /* InElementType */) {
                                writePunctuation(writer, 17 /* CloseParenToken */);
                            }
                            return;
                        }
                        if (resolved.constructSignatures.length === 1 && !resolved.callSignatures.length) {
                            if (flags & 64 /* InElementType */) {
                                writePunctuation(writer, 16 /* OpenParenToken */);
                            }
                            writeKeyword(writer, 87 /* NewKeyword */);
                            writeSpace(writer);
                            buildSignatureDisplay(resolved.constructSignatures[0], writer, enclosingDeclaration, globalFlagsToPass | 8 /* WriteArrowStyleSignature */, typeStack);
                            if (flags & 64 /* InElementType */) {
                                writePunctuation(writer, 17 /* CloseParenToken */);
                            }
                            return;
                        }
                    }
                    writePunctuation(writer, 14 /* OpenBraceToken */);
                    writer.writeLine();
                    writer.increaseIndent();
                    for (var i = 0; i < resolved.callSignatures.length; i++) {
                        buildSignatureDisplay(resolved.callSignatures[i], writer, enclosingDeclaration, globalFlagsToPass, typeStack);
                        writePunctuation(writer, 22 /* SemicolonToken */);
                        writer.writeLine();
                    }
                    for (var i = 0; i < resolved.constructSignatures.length; i++) {
                        writeKeyword(writer, 87 /* NewKeyword */);
                        writeSpace(writer);
                        buildSignatureDisplay(resolved.constructSignatures[i], writer, enclosingDeclaration, globalFlagsToPass, typeStack);
                        writePunctuation(writer, 22 /* SemicolonToken */);
                        writer.writeLine();
                    }
                    if (resolved.stringIndexType) {
                        writePunctuation(writer, 18 /* OpenBracketToken */);
                        writer.writeParameter(getIndexerParameterName(resolved, 0 /* String */, "x"));
                        writePunctuation(writer, 51 /* ColonToken */);
                        writeSpace(writer);
                        writeKeyword(writer, 119 /* StringKeyword */);
                        writePunctuation(writer, 19 /* CloseBracketToken */);
                        writePunctuation(writer, 51 /* ColonToken */);
                        writeSpace(writer);
                        writeType(resolved.stringIndexType, 0 /* None */);
                        writePunctuation(writer, 22 /* SemicolonToken */);
                        writer.writeLine();
                    }
                    if (resolved.numberIndexType) {
                        writePunctuation(writer, 18 /* OpenBracketToken */);
                        writer.writeParameter(getIndexerParameterName(resolved, 1 /* Number */, "x"));
                        writePunctuation(writer, 51 /* ColonToken */);
                        writeSpace(writer);
                        writeKeyword(writer, 117 /* NumberKeyword */);
                        writePunctuation(writer, 19 /* CloseBracketToken */);
                        writePunctuation(writer, 51 /* ColonToken */);
                        writeSpace(writer);
                        writeType(resolved.numberIndexType, 0 /* None */);
                        writePunctuation(writer, 22 /* SemicolonToken */);
                        writer.writeLine();
                    }
                    for (var i = 0; i < resolved.properties.length; i++) {
                        var p = resolved.properties[i];
                        var t = getTypeOfSymbol(p);
                        if (p.flags & (16 /* Function */ | 8192 /* Method */) && !getPropertiesOfObjectType(t).length) {
                            var signatures = getSignaturesOfType(t, 0 /* Call */);
                            for (var j = 0; j < signatures.length; j++) {
                                buildSymbolDisplay(p, writer);
                                if (p.flags & 536870912 /* Optional */) {
                                    writePunctuation(writer, 50 /* QuestionToken */);
                                }
                                buildSignatureDisplay(signatures[j], writer, enclosingDeclaration, globalFlagsToPass, typeStack);
                                writePunctuation(writer, 22 /* SemicolonToken */);
                                writer.writeLine();
                            }
                        }
                        else {
                            buildSymbolDisplay(p, writer);
                            if (p.flags & 536870912 /* Optional */) {
                                writePunctuation(writer, 50 /* QuestionToken */);
                            }
                            writePunctuation(writer, 51 /* ColonToken */);
                            writeSpace(writer);
                            writeType(t, 0 /* None */);
                            writePunctuation(writer, 22 /* SemicolonToken */);
                            writer.writeLine();
                        }
                    }
                    writer.decreaseIndent();
                    writePunctuation(writer, 15 /* CloseBraceToken */);
                }
            }
            function buildTypeParameterDisplayFromSymbol(symbol, writer, enclosingDeclaraiton, flags) {
                var targetSymbol = getTargetSymbol(symbol);
                if (targetSymbol.flags & 32 /* Class */ || targetSymbol.flags & 64 /* Interface */) {
                    buildDisplayForTypeParametersAndDelimiters(getTypeParametersOfClassOrInterface(symbol), writer, enclosingDeclaraiton, flags);
                }
            }
            function buildTypeParameterDisplay(tp, writer, enclosingDeclaration, flags, typeStack) {
                appendSymbolNameOnly(tp.symbol, writer);
                var constraint = getConstraintOfTypeParameter(tp);
                if (constraint) {
                    writeSpace(writer);
                    writeKeyword(writer, 78 /* ExtendsKeyword */);
                    writeSpace(writer);
                    buildTypeDisplay(constraint, writer, enclosingDeclaration, flags, typeStack);
                }
            }
            function buildParameterDisplay(p, writer, enclosingDeclaration, flags, typeStack) {
                if (ts.hasDotDotDotToken(p.valueDeclaration)) {
                    writePunctuation(writer, 21 /* DotDotDotToken */);
                }
                appendSymbolNameOnly(p, writer);
                if (ts.hasQuestionToken(p.valueDeclaration) || p.valueDeclaration.initializer) {
                    writePunctuation(writer, 50 /* QuestionToken */);
                }
                writePunctuation(writer, 51 /* ColonToken */);
                writeSpace(writer);
                buildTypeDisplay(getTypeOfSymbol(p), writer, enclosingDeclaration, flags, typeStack);
            }
            function buildDisplayForTypeParametersAndDelimiters(typeParameters, writer, enclosingDeclaration, flags, typeStack) {
                if (typeParameters && typeParameters.length) {
                    writePunctuation(writer, 24 /* LessThanToken */);
                    for (var i = 0; i < typeParameters.length; i++) {
                        if (i > 0) {
                            writePunctuation(writer, 23 /* CommaToken */);
                            writeSpace(writer);
                        }
                        buildTypeParameterDisplay(typeParameters[i], writer, enclosingDeclaration, flags, typeStack);
                    }
                    writePunctuation(writer, 25 /* GreaterThanToken */);
                }
            }
            function buildDisplayForTypeArgumentsAndDelimiters(typeParameters, mapper, writer, enclosingDeclaration, flags, typeStack) {
                if (typeParameters && typeParameters.length) {
                    writePunctuation(writer, 24 /* LessThanToken */);
                    for (var i = 0; i < typeParameters.length; i++) {
                        if (i > 0) {
                            writePunctuation(writer, 23 /* CommaToken */);
                            writeSpace(writer);
                        }
                        buildTypeDisplay(mapper(typeParameters[i]), writer, enclosingDeclaration, 0 /* None */);
                    }
                    writePunctuation(writer, 25 /* GreaterThanToken */);
                }
            }
            function buildDisplayForParametersAndDelimiters(parameters, writer, enclosingDeclaration, flags, typeStack) {
                writePunctuation(writer, 16 /* OpenParenToken */);
                for (var i = 0; i < parameters.length; i++) {
                    if (i > 0) {
                        writePunctuation(writer, 23 /* CommaToken */);
                        writeSpace(writer);
                    }
                    buildParameterDisplay(parameters[i], writer, enclosingDeclaration, flags, typeStack);
                }
                writePunctuation(writer, 17 /* CloseParenToken */);
            }
            function buildReturnTypeDisplay(signature, writer, enclosingDeclaration, flags, typeStack) {
                if (flags & 8 /* WriteArrowStyleSignature */) {
                    writeSpace(writer);
                    writePunctuation(writer, 32 /* EqualsGreaterThanToken */);
                }
                else {
                    writePunctuation(writer, 51 /* ColonToken */);
                }
                writeSpace(writer);
                buildTypeDisplay(getReturnTypeOfSignature(signature), writer, enclosingDeclaration, flags, typeStack);
            }
            function buildSignatureDisplay(signature, writer, enclosingDeclaration, flags, typeStack) {
                if (signature.target && (flags & 32 /* WriteTypeArgumentsOfSignature */)) {
                    buildDisplayForTypeArgumentsAndDelimiters(signature.target.typeParameters, signature.mapper, writer, enclosingDeclaration);
                }
                else {
                    buildDisplayForTypeParametersAndDelimiters(signature.typeParameters, writer, enclosingDeclaration, flags, typeStack);
                }
                buildDisplayForParametersAndDelimiters(signature.parameters, writer, enclosingDeclaration, flags, typeStack);
                buildReturnTypeDisplay(signature, writer, enclosingDeclaration, flags, typeStack);
            }
            return _displayBuilder || (_displayBuilder = {
                symbolToString: symbolToString,
                typeToString: typeToString,
                buildSymbolDisplay: buildSymbolDisplay,
                buildTypeDisplay: buildTypeDisplay,
                buildTypeParameterDisplay: buildTypeParameterDisplay,
                buildParameterDisplay: buildParameterDisplay,
                buildDisplayForParametersAndDelimiters: buildDisplayForParametersAndDelimiters,
                buildDisplayForTypeParametersAndDelimiters: buildDisplayForTypeParametersAndDelimiters,
                buildDisplayForTypeArgumentsAndDelimiters: buildDisplayForTypeArgumentsAndDelimiters,
                buildTypeParameterDisplayFromSymbol: buildTypeParameterDisplayFromSymbol,
                buildSignatureDisplay: buildSignatureDisplay,
                buildReturnTypeDisplay: buildReturnTypeDisplay
            });
        }
        function isDeclarationVisible(node) {
            function getContainingExternalModule(node) {
                for (; node; node = node.parent) {
                    if (node.kind === 195 /* ModuleDeclaration */) {
                        if (node.name.kind === 8 /* StringLiteral */) {
                            return node;
                        }
                    }
                    else if (node.kind === 207 /* SourceFile */) {
                        return ts.isExternalModule(node) ? node : undefined;
                    }
                }
                ts.Debug.fail("getContainingModule cant reach here");
            }
            function isUsedInExportAssignment(node) {
                var externalModule = getContainingExternalModule(node);
                if (externalModule) {
                    var externalModuleSymbol = getSymbolOfNode(externalModule);
                    var exportAssignmentSymbol = getExportAssignmentSymbol(externalModuleSymbol);
                    var resolvedExportSymbol;
                    var symbolOfNode = getSymbolOfNode(node);
                    if (isSymbolUsedInExportAssignment(symbolOfNode)) {
                        return true;
                    }
                    if (symbolOfNode.flags & 8388608 /* Import */) {
                        return isSymbolUsedInExportAssignment(resolveImport(symbolOfNode));
                    }
                }
                function isSymbolUsedInExportAssignment(symbol) {
                    if (exportAssignmentSymbol === symbol) {
                        return true;
                    }
                    if (exportAssignmentSymbol && !!(exportAssignmentSymbol.flags & 8388608 /* Import */)) {
                        resolvedExportSymbol = resolvedExportSymbol || resolveImport(exportAssignmentSymbol);
                        if (resolvedExportSymbol === symbol) {
                            return true;
                        }
                        return ts.forEach(resolvedExportSymbol.declarations, function (current) {
                            while (current) {
                                if (current === node) {
                                    return true;
                                }
                                current = current.parent;
                            }
                        });
                    }
                }
            }
            function determineIfDeclarationIsVisible() {
                switch (node.kind) {
                    case 189 /* VariableDeclaration */:
                    case 146 /* BindingElement */:
                    case 195 /* ModuleDeclaration */:
                    case 191 /* ClassDeclaration */:
                    case 192 /* InterfaceDeclaration */:
                    case 193 /* TypeAliasDeclaration */:
                    case 190 /* FunctionDeclaration */:
                    case 194 /* EnumDeclaration */:
                    case 197 /* ImportDeclaration */:
                        var parent = getDeclarationContainer(node);
                        if (!(node.flags & 1 /* Export */) && !(node.kind !== 197 /* ImportDeclaration */ && parent.kind !== 207 /* SourceFile */ && ts.isInAmbientContext(parent))) {
                            return isGlobalSourceFile(parent) || isUsedInExportAssignment(node);
                        }
                        return isDeclarationVisible(parent);
                    case 126 /* PropertyDeclaration */:
                    case 125 /* PropertySignature */:
                    case 130 /* GetAccessor */:
                    case 131 /* SetAccessor */:
                    case 128 /* MethodDeclaration */:
                    case 127 /* MethodSignature */:
                        if (node.flags & (32 /* Private */ | 64 /* Protected */)) {
                            return false;
                        }
                    case 129 /* Constructor */:
                    case 133 /* ConstructSignature */:
                    case 132 /* CallSignature */:
                    case 134 /* IndexSignature */:
                    case 124 /* Parameter */:
                    case 196 /* ModuleBlock */:
                    case 123 /* TypeParameter */:
                    case 136 /* FunctionType */:
                    case 137 /* ConstructorType */:
                    case 139 /* TypeLiteral */:
                    case 135 /* TypeReference */:
                    case 140 /* ArrayType */:
                    case 141 /* TupleType */:
                    case 142 /* UnionType */:
                    case 143 /* ParenthesizedType */:
                        return isDeclarationVisible(node.parent);
                    case 207 /* SourceFile */:
                        return true;
                    default:
                        ts.Debug.fail("isDeclarationVisible unknown: SyntaxKind: " + node.kind);
                }
            }
            if (node) {
                var links = getNodeLinks(node);
                if (links.isVisible === undefined) {
                    links.isVisible = !!determineIfDeclarationIsVisible();
                }
                return links.isVisible;
            }
        }
        function getRootDeclaration(node) {
            while (node.kind === 146 /* BindingElement */) {
                node = node.parent.parent;
            }
            return node;
        }
        function getDeclarationContainer(node) {
            node = getRootDeclaration(node);
            return node.kind === 189 /* VariableDeclaration */ ? node.parent.parent : node.parent;
        }
        function getTypeOfPrototypeProperty(prototype) {
            var classType = getDeclaredTypeOfSymbol(prototype.parent);
            return classType.typeParameters ? createTypeReference(classType, ts.map(classType.typeParameters, function (_) { return anyType; })) : classType;
        }
        function getTypeOfPropertyOfType(type, name) {
            var prop = getPropertyOfType(type, name);
            return prop ? getTypeOfSymbol(prop) : undefined;
        }
        function getTypeForBindingElement(declaration) {
            var pattern = declaration.parent;
            var parentType = getTypeForVariableLikeDeclaration(pattern.parent);
            if (parentType === unknownType) {
                return unknownType;
            }
            if (!parentType || parentType === anyType) {
                if (declaration.initializer) {
                    return checkExpressionCached(declaration.initializer);
                }
                return parentType;
            }
            if (pattern.kind === 144 /* ObjectBindingPattern */) {
                var name = declaration.propertyName || declaration.name;
                var type = getTypeOfPropertyOfType(parentType, name.text) || isNumericName(name.text) && getIndexTypeOfType(parentType, 1 /* Number */) || getIndexTypeOfType(parentType, 0 /* String */);
                if (!type) {
                    error(name, ts.Diagnostics.Type_0_has_no_property_1_and_no_string_index_signature, typeToString(parentType), ts.declarationNameToString(name));
                    return unknownType;
                }
                return type;
            }
            if (!isTypeAssignableTo(parentType, anyArrayType)) {
                error(pattern, ts.Diagnostics.Type_0_is_not_an_array_type, typeToString(parentType));
                return unknownType;
            }
            var propName = "" + ts.indexOf(pattern.elements, declaration);
            var type = isTupleLikeType(parentType) ? getTypeOfPropertyOfType(parentType, propName) : getIndexTypeOfType(parentType, 1 /* Number */);
            if (!type) {
                error(declaration, ts.Diagnostics.Type_0_has_no_property_1, typeToString(parentType), propName);
                return unknownType;
            }
            return type;
        }
        function getTypeForVariableLikeDeclaration(declaration) {
            if (declaration.parent.kind === 177 /* ForInStatement */) {
                return anyType;
            }
            if (ts.isBindingPattern(declaration.parent)) {
                return getTypeForBindingElement(declaration);
            }
            if (declaration.type) {
                return getTypeFromTypeNode(declaration.type);
            }
            if (declaration.kind === 124 /* Parameter */) {
                var func = declaration.parent;
                if (func.kind === 131 /* SetAccessor */ && !ts.hasComputedNameButNotSymbol(func)) {
                    var getter = ts.getDeclarationOfKind(declaration.parent.symbol, 130 /* GetAccessor */);
                    if (getter) {
                        return getReturnTypeOfSignature(getSignatureFromDeclaration(getter));
                    }
                }
                var type = getContextuallyTypedParameterType(declaration);
                if (type) {
                    return type;
                }
            }
            if (declaration.initializer) {
                return checkExpressionCached(declaration.initializer);
            }
            if (declaration.kind === 205 /* ShorthandPropertyAssignment */) {
                return checkIdentifier(declaration.name);
            }
            return undefined;
        }
        function getTypeFromBindingElement(element) {
            if (element.initializer) {
                return getWidenedType(checkExpressionCached(element.initializer));
            }
            if (ts.isBindingPattern(element.name)) {
                return getTypeFromBindingPattern(element.name);
            }
            return anyType;
        }
        function getTypeFromBindingPattern(pattern) {
            if (pattern.kind === 145 /* ArrayBindingPattern */) {
                return createTupleType(ts.map(pattern.elements, function (e) { return e.kind === 167 /* OmittedExpression */ ? anyType : getTypeFromBindingElement(e); }));
            }
            var members = {};
            ts.forEach(pattern.elements, function (e) {
                var flags = 4 /* Property */ | 67108864 /* Transient */ | (e.initializer ? 536870912 /* Optional */ : 0);
                var name = e.propertyName || e.name;
                var symbol = createSymbol(flags, name.text);
                symbol.type = getTypeFromBindingElement(e);
                members[symbol.name] = symbol;
            });
            return createAnonymousType(undefined, members, emptyArray, emptyArray, undefined, undefined);
        }
        function getWidenedTypeForVariableLikeDeclaration(declaration, reportErrors) {
            var type = getTypeForVariableLikeDeclaration(declaration);
            if (type) {
                if (reportErrors) {
                    reportErrorsFromWidening(declaration, type);
                }
                return declaration.kind !== 204 /* PropertyAssignment */ ? getWidenedType(type) : type;
            }
            if (ts.isBindingPattern(declaration.name)) {
                return getTypeFromBindingPattern(declaration.name);
            }
            type = declaration.dotDotDotToken ? anyArrayType : anyType;
            if (reportErrors && compilerOptions.noImplicitAny) {
                var root = getRootDeclaration(declaration);
                if (!isPrivateWithinAmbient(root) && !(root.kind === 124 /* Parameter */ && isPrivateWithinAmbient(root.parent))) {
                    reportImplicitAnyError(declaration, type);
                }
            }
            return type;
        }
        function getTypeOfVariableOrParameterOrProperty(symbol) {
            var links = getSymbolLinks(symbol);
            if (!links.type) {
                if (symbol.flags & 134217728 /* Prototype */) {
                    return links.type = getTypeOfPrototypeProperty(symbol);
                }
                var declaration = symbol.valueDeclaration;
                if (declaration.kind === 203 /* CatchClause */) {
                    return links.type = anyType;
                }
                links.type = resolvingType;
                var type = getWidenedTypeForVariableLikeDeclaration(declaration, true);
                if (links.type === resolvingType) {
                    links.type = type;
                }
            }
            else if (links.type === resolvingType) {
                links.type = anyType;
                if (compilerOptions.noImplicitAny) {
                    var diagnostic = symbol.valueDeclaration.type ? ts.Diagnostics._0_implicitly_has_type_any_because_it_is_referenced_directly_or_indirectly_in_its_own_type_annotation : ts.Diagnostics._0_implicitly_has_type_any_because_it_is_does_not_have_a_type_annotation_and_is_referenced_directly_or_indirectly_in_its_own_initializer;
                    error(symbol.valueDeclaration, diagnostic, symbolToString(symbol));
                }
            }
            return links.type;
        }
        function getSetAccessorTypeAnnotationNode(accessor) {
            return accessor && accessor.parameters.length > 0 && accessor.parameters[0].type;
        }
        function getAnnotatedAccessorType(accessor) {
            if (accessor) {
                if (accessor.kind === 130 /* GetAccessor */) {
                    return accessor.type && getTypeFromTypeNode(accessor.type);
                }
                else {
                    var setterTypeAnnotation = getSetAccessorTypeAnnotationNode(accessor);
                    return setterTypeAnnotation && getTypeFromTypeNode(setterTypeAnnotation);
                }
            }
            return undefined;
        }
        function getTypeOfAccessors(symbol) {
            var links = getSymbolLinks(symbol);
            checkAndStoreTypeOfAccessors(symbol, links);
            return links.type;
        }
        function checkAndStoreTypeOfAccessors(symbol, links) {
            links = links || getSymbolLinks(symbol);
            if (!links.type) {
                links.type = resolvingType;
                var getter = ts.getDeclarationOfKind(symbol, 130 /* GetAccessor */);
                var setter = ts.getDeclarationOfKind(symbol, 131 /* SetAccessor */);
                var type;
                var getterReturnType = getAnnotatedAccessorType(getter);
                if (getterReturnType) {
                    type = getterReturnType;
                }
                else {
                    var setterParameterType = getAnnotatedAccessorType(setter);
                    if (setterParameterType) {
                        type = setterParameterType;
                    }
                    else {
                        if (getter && getter.body) {
                            type = getReturnTypeFromBody(getter);
                        }
                        else {
                            if (compilerOptions.noImplicitAny) {
                                error(setter, ts.Diagnostics.Property_0_implicitly_has_type_any_because_its_set_accessor_lacks_a_type_annotation, symbolToString(symbol));
                            }
                            type = anyType;
                        }
                    }
                }
                if (links.type === resolvingType) {
                    links.type = type;
                }
            }
            else if (links.type === resolvingType) {
                links.type = anyType;
                if (compilerOptions.noImplicitAny) {
                    var getter = ts.getDeclarationOfKind(symbol, 130 /* GetAccessor */);
                    error(getter, ts.Diagnostics._0_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions, symbolToString(symbol));
                }
            }
        }
        function getTypeOfFuncClassEnumModule(symbol) {
            var links = getSymbolLinks(symbol);
            if (!links.type) {
                links.type = createObjectType(32768 /* Anonymous */, symbol);
            }
            return links.type;
        }
        function getTypeOfEnumMember(symbol) {
            var links = getSymbolLinks(symbol);
            if (!links.type) {
                links.type = getDeclaredTypeOfEnum(getParentOfSymbol(symbol));
            }
            return links.type;
        }
        function getTypeOfImport(symbol) {
            var links = getSymbolLinks(symbol);
            if (!links.type) {
                links.type = getTypeOfSymbol(resolveImport(symbol));
            }
            return links.type;
        }
        function getTypeOfInstantiatedSymbol(symbol) {
            var links = getSymbolLinks(symbol);
            if (!links.type) {
                links.type = instantiateType(getTypeOfSymbol(links.target), links.mapper);
            }
            return links.type;
        }
        function getTypeOfSymbol(symbol) {
            if (symbol.flags & 16777216 /* Instantiated */) {
                return getTypeOfInstantiatedSymbol(symbol);
            }
            if (symbol.flags & (3 /* Variable */ | 4 /* Property */)) {
                return getTypeOfVariableOrParameterOrProperty(symbol);
            }
            if (symbol.flags & (16 /* Function */ | 8192 /* Method */ | 32 /* Class */ | 384 /* Enum */ | 512 /* ValueModule */)) {
                return getTypeOfFuncClassEnumModule(symbol);
            }
            if (symbol.flags & 8 /* EnumMember */) {
                return getTypeOfEnumMember(symbol);
            }
            if (symbol.flags & 98304 /* Accessor */) {
                return getTypeOfAccessors(symbol);
            }
            if (symbol.flags & 8388608 /* Import */) {
                return getTypeOfImport(symbol);
            }
            return unknownType;
        }
        function getTargetType(type) {
            return type.flags & 4096 /* Reference */ ? type.target : type;
        }
        function hasBaseType(type, checkBase) {
            return check(type);
            function check(type) {
                var target = getTargetType(type);
                return target === checkBase || ts.forEach(target.baseTypes, check);
            }
        }
        function getTypeParametersOfClassOrInterface(symbol) {
            var result;
            ts.forEach(symbol.declarations, function (node) {
                if (node.kind === 192 /* InterfaceDeclaration */ || node.kind === 191 /* ClassDeclaration */) {
                    var declaration = node;
                    if (declaration.typeParameters && declaration.typeParameters.length) {
                        ts.forEach(declaration.typeParameters, function (node) {
                            var tp = getDeclaredTypeOfTypeParameter(getSymbolOfNode(node));
                            if (!result) {
                                result = [tp];
                            }
                            else if (!ts.contains(result, tp)) {
                                result.push(tp);
                            }
                        });
                    }
                }
            });
            return result;
        }
        function getDeclaredTypeOfClass(symbol) {
            var links = getSymbolLinks(symbol);
            if (!links.declaredType) {
                var type = links.declaredType = createObjectType(1024 /* Class */, symbol);
                var typeParameters = getTypeParametersOfClassOrInterface(symbol);
                if (typeParameters) {
                    type.flags |= 4096 /* Reference */;
                    type.typeParameters = typeParameters;
                    type.instantiations = {};
                    type.instantiations[getTypeListId(type.typeParameters)] = type;
                    type.target = type;
                    type.typeArguments = type.typeParameters;
                }
                type.baseTypes = [];
                var declaration = ts.getDeclarationOfKind(symbol, 191 /* ClassDeclaration */);
                var baseTypeNode = ts.getClassBaseTypeNode(declaration);
                if (baseTypeNode) {
                    var baseType = getTypeFromTypeReferenceNode(baseTypeNode);
                    if (baseType !== unknownType) {
                        if (getTargetType(baseType).flags & 1024 /* Class */) {
                            if (type !== baseType && !hasBaseType(baseType, type)) {
                                type.baseTypes.push(baseType);
                            }
                            else {
                                error(declaration, ts.Diagnostics.Type_0_recursively_references_itself_as_a_base_type, typeToString(type, undefined, 1 /* WriteArrayAsGenericType */));
                            }
                        }
                        else {
                            error(baseTypeNode, ts.Diagnostics.A_class_may_only_extend_another_class);
                        }
                    }
                }
                type.declaredProperties = getNamedMembers(symbol.members);
                type.declaredCallSignatures = emptyArray;
                type.declaredConstructSignatures = emptyArray;
                type.declaredStringIndexType = getIndexTypeOfSymbol(symbol, 0 /* String */);
                type.declaredNumberIndexType = getIndexTypeOfSymbol(symbol, 1 /* Number */);
            }
            return links.declaredType;
        }
        function getDeclaredTypeOfInterface(symbol) {
            var links = getSymbolLinks(symbol);
            if (!links.declaredType) {
                var type = links.declaredType = createObjectType(2048 /* Interface */, symbol);
                var typeParameters = getTypeParametersOfClassOrInterface(symbol);
                if (typeParameters) {
                    type.flags |= 4096 /* Reference */;
                    type.typeParameters = typeParameters;
                    type.instantiations = {};
                    type.instantiations[getTypeListId(type.typeParameters)] = type;
                    type.target = type;
                    type.typeArguments = type.typeParameters;
                }
                type.baseTypes = [];
                ts.forEach(symbol.declarations, function (declaration) {
                    if (declaration.kind === 192 /* InterfaceDeclaration */ && ts.getInterfaceBaseTypeNodes(declaration)) {
                        ts.forEach(ts.getInterfaceBaseTypeNodes(declaration), function (node) {
                            var baseType = getTypeFromTypeReferenceNode(node);
                            if (baseType !== unknownType) {
                                if (getTargetType(baseType).flags & (1024 /* Class */ | 2048 /* Interface */)) {
                                    if (type !== baseType && !hasBaseType(baseType, type)) {
                                        type.baseTypes.push(baseType);
                                    }
                                    else {
                                        error(declaration, ts.Diagnostics.Type_0_recursively_references_itself_as_a_base_type, typeToString(type, undefined, 1 /* WriteArrayAsGenericType */));
                                    }
                                }
                                else {
                                    error(node, ts.Diagnostics.An_interface_may_only_extend_a_class_or_another_interface);
                                }
                            }
                        });
                    }
                });
                type.declaredProperties = getNamedMembers(symbol.members);
                type.declaredCallSignatures = getSignaturesOfSymbol(symbol.members["__call"]);
                type.declaredConstructSignatures = getSignaturesOfSymbol(symbol.members["__new"]);
                type.declaredStringIndexType = getIndexTypeOfSymbol(symbol, 0 /* String */);
                type.declaredNumberIndexType = getIndexTypeOfSymbol(symbol, 1 /* Number */);
            }
            return links.declaredType;
        }
        function getDeclaredTypeOfTypeAlias(symbol) {
            var links = getSymbolLinks(symbol);
            if (!links.declaredType) {
                links.declaredType = resolvingType;
                var declaration = ts.getDeclarationOfKind(symbol, 193 /* TypeAliasDeclaration */);
                var type = getTypeFromTypeNode(declaration.type);
                if (links.declaredType === resolvingType) {
                    links.declaredType = type;
                }
            }
            else if (links.declaredType === resolvingType) {
                links.declaredType = unknownType;
                var declaration = ts.getDeclarationOfKind(symbol, 193 /* TypeAliasDeclaration */);
                error(declaration.name, ts.Diagnostics.Type_alias_0_circularly_references_itself, symbolToString(symbol));
            }
            return links.declaredType;
        }
        function getDeclaredTypeOfEnum(symbol) {
            var links = getSymbolLinks(symbol);
            if (!links.declaredType) {
                var type = createType(128 /* Enum */);
                type.symbol = symbol;
                links.declaredType = type;
            }
            return links.declaredType;
        }
        function getDeclaredTypeOfTypeParameter(symbol) {
            var links = getSymbolLinks(symbol);
            if (!links.declaredType) {
                var type = createType(512 /* TypeParameter */);
                type.symbol = symbol;
                if (!ts.getDeclarationOfKind(symbol, 123 /* TypeParameter */).constraint) {
                    type.constraint = noConstraintType;
                }
                links.declaredType = type;
            }
            return links.declaredType;
        }
        function getDeclaredTypeOfImport(symbol) {
            var links = getSymbolLinks(symbol);
            if (!links.declaredType) {
                links.declaredType = getDeclaredTypeOfSymbol(resolveImport(symbol));
            }
            return links.declaredType;
        }
        function getDeclaredTypeOfSymbol(symbol) {
            ts.Debug.assert((symbol.flags & 16777216 /* Instantiated */) === 0);
            if (symbol.flags & 32 /* Class */) {
                return getDeclaredTypeOfClass(symbol);
            }
            if (symbol.flags & 64 /* Interface */) {
                return getDeclaredTypeOfInterface(symbol);
            }
            if (symbol.flags & 524288 /* TypeAlias */) {
                return getDeclaredTypeOfTypeAlias(symbol);
            }
            if (symbol.flags & 384 /* Enum */) {
                return getDeclaredTypeOfEnum(symbol);
            }
            if (symbol.flags & 262144 /* TypeParameter */) {
                return getDeclaredTypeOfTypeParameter(symbol);
            }
            if (symbol.flags & 8388608 /* Import */) {
                return getDeclaredTypeOfImport(symbol);
            }
            return unknownType;
        }
        function createSymbolTable(symbols) {
            var result = {};
            for (var i = 0; i < symbols.length; i++) {
                var symbol = symbols[i];
                result[symbol.name] = symbol;
            }
            return result;
        }
        function createInstantiatedSymbolTable(symbols, mapper) {
            var result = {};
            for (var i = 0; i < symbols.length; i++) {
                var symbol = symbols[i];
                result[symbol.name] = instantiateSymbol(symbol, mapper);
            }
            return result;
        }
        function addInheritedMembers(symbols, baseSymbols) {
            for (var i = 0; i < baseSymbols.length; i++) {
                var s = baseSymbols[i];
                if (!ts.hasProperty(symbols, s.name)) {
                    symbols[s.name] = s;
                }
            }
        }
        function addInheritedSignatures(signatures, baseSignatures) {
            if (baseSignatures) {
                for (var i = 0; i < baseSignatures.length; i++) {
                    signatures.push(baseSignatures[i]);
                }
            }
        }
        function resolveClassOrInterfaceMembers(type) {
            var members = type.symbol.members;
            var callSignatures = type.declaredCallSignatures;
            var constructSignatures = type.declaredConstructSignatures;
            var stringIndexType = type.declaredStringIndexType;
            var numberIndexType = type.declaredNumberIndexType;
            if (type.baseTypes.length) {
                members = createSymbolTable(type.declaredProperties);
                ts.forEach(type.baseTypes, function (baseType) {
                    addInheritedMembers(members, getPropertiesOfObjectType(baseType));
                    callSignatures = ts.concatenate(callSignatures, getSignaturesOfType(baseType, 0 /* Call */));
                    constructSignatures = ts.concatenate(constructSignatures, getSignaturesOfType(baseType, 1 /* Construct */));
                    stringIndexType = stringIndexType || getIndexTypeOfType(baseType, 0 /* String */);
                    numberIndexType = numberIndexType || getIndexTypeOfType(baseType, 1 /* Number */);
                });
            }
            setObjectTypeMembers(type, members, callSignatures, constructSignatures, stringIndexType, numberIndexType);
        }
        function resolveTypeReferenceMembers(type) {
            var target = type.target;
            var mapper = createTypeMapper(target.typeParameters, type.typeArguments);
            var members = createInstantiatedSymbolTable(target.declaredProperties, mapper);
            var callSignatures = instantiateList(target.declaredCallSignatures, mapper, instantiateSignature);
            var constructSignatures = instantiateList(target.declaredConstructSignatures, mapper, instantiateSignature);
            var stringIndexType = target.declaredStringIndexType ? instantiateType(target.declaredStringIndexType, mapper) : undefined;
            var numberIndexType = target.declaredNumberIndexType ? instantiateType(target.declaredNumberIndexType, mapper) : undefined;
            ts.forEach(target.baseTypes, function (baseType) {
                var instantiatedBaseType = instantiateType(baseType, mapper);
                addInheritedMembers(members, getPropertiesOfObjectType(instantiatedBaseType));
                callSignatures = ts.concatenate(callSignatures, getSignaturesOfType(instantiatedBaseType, 0 /* Call */));
                constructSignatures = ts.concatenate(constructSignatures, getSignaturesOfType(instantiatedBaseType, 1 /* Construct */));
                stringIndexType = stringIndexType || getIndexTypeOfType(instantiatedBaseType, 0 /* String */);
                numberIndexType = numberIndexType || getIndexTypeOfType(instantiatedBaseType, 1 /* Number */);
            });
            setObjectTypeMembers(type, members, callSignatures, constructSignatures, stringIndexType, numberIndexType);
        }
        function createSignature(declaration, typeParameters, parameters, resolvedReturnType, minArgumentCount, hasRestParameter, hasStringLiterals) {
            var sig = new Signature(checker);
            sig.declaration = declaration;
            sig.typeParameters = typeParameters;
            sig.parameters = parameters;
            sig.resolvedReturnType = resolvedReturnType;
            sig.minArgumentCount = minArgumentCount;
            sig.hasRestParameter = hasRestParameter;
            sig.hasStringLiterals = hasStringLiterals;
            return sig;
        }
        function cloneSignature(sig) {
            return createSignature(sig.declaration, sig.typeParameters, sig.parameters, sig.resolvedReturnType, sig.minArgumentCount, sig.hasRestParameter, sig.hasStringLiterals);
        }
        function getDefaultConstructSignatures(classType) {
            if (classType.baseTypes.length) {
                var baseType = classType.baseTypes[0];
                var baseSignatures = getSignaturesOfType(getTypeOfSymbol(baseType.symbol), 1 /* Construct */);
                return ts.map(baseSignatures, function (baseSignature) {
                    var signature = baseType.flags & 4096 /* Reference */ ? getSignatureInstantiation(baseSignature, baseType.typeArguments) : cloneSignature(baseSignature);
                    signature.typeParameters = classType.typeParameters;
                    signature.resolvedReturnType = classType;
                    return signature;
                });
            }
            return [createSignature(undefined, classType.typeParameters, emptyArray, classType, 0, false, false)];
        }
        function createTupleTypeMemberSymbols(memberTypes) {
            var members = {};
            for (var i = 0; i < memberTypes.length; i++) {
                var symbol = createSymbol(4 /* Property */ | 67108864 /* Transient */, "" + i);
                symbol.type = memberTypes[i];
                members[i] = symbol;
            }
            return members;
        }
        function resolveTupleTypeMembers(type) {
            var arrayType = resolveObjectOrUnionTypeMembers(createArrayType(getUnionType(type.elementTypes)));
            var members = createTupleTypeMemberSymbols(type.elementTypes);
            addInheritedMembers(members, arrayType.properties);
            setObjectTypeMembers(type, members, arrayType.callSignatures, arrayType.constructSignatures, arrayType.stringIndexType, arrayType.numberIndexType);
        }
        function signatureListsIdentical(s, t) {
            if (s.length !== t.length) {
                return false;
            }
            for (var i = 0; i < s.length; i++) {
                if (!compareSignatures(s[i], t[i], false, compareTypes)) {
                    return false;
                }
            }
            return true;
        }
        function getUnionSignatures(types, kind) {
            var signatureLists = ts.map(types, function (t) { return getSignaturesOfType(t, kind); });
            var signatures = signatureLists[0];
            for (var i = 0; i < signatures.length; i++) {
                if (signatures[i].typeParameters) {
                    return emptyArray;
                }
            }
            for (var i = 1; i < signatureLists.length; i++) {
                if (!signatureListsIdentical(signatures, signatureLists[i])) {
                    return emptyArray;
                }
            }
            var result = ts.map(signatures, cloneSignature);
            for (var i = 0; i < result.length; i++) {
                var s = result[i];
                s.resolvedReturnType = undefined;
                s.unionSignatures = ts.map(signatureLists, function (signatures) { return signatures[i]; });
            }
            return result;
        }
        function getUnionIndexType(types, kind) {
            var indexTypes = [];
            for (var i = 0; i < types.length; i++) {
                var indexType = getIndexTypeOfType(types[i], kind);
                if (!indexType) {
                    return undefined;
                }
                indexTypes.push(indexType);
            }
            return getUnionType(indexTypes);
        }
        function resolveUnionTypeMembers(type) {
            var callSignatures = getUnionSignatures(type.types, 0 /* Call */);
            var constructSignatures = getUnionSignatures(type.types, 1 /* Construct */);
            var stringIndexType = getUnionIndexType(type.types, 0 /* String */);
            var numberIndexType = getUnionIndexType(type.types, 1 /* Number */);
            setObjectTypeMembers(type, emptySymbols, callSignatures, constructSignatures, stringIndexType, numberIndexType);
        }
        function resolveAnonymousTypeMembers(type) {
            var symbol = type.symbol;
            if (symbol.flags & 2048 /* TypeLiteral */) {
                var members = symbol.members;
                var callSignatures = getSignaturesOfSymbol(members["__call"]);
                var constructSignatures = getSignaturesOfSymbol(members["__new"]);
                var stringIndexType = getIndexTypeOfSymbol(symbol, 0 /* String */);
                var numberIndexType = getIndexTypeOfSymbol(symbol, 1 /* Number */);
            }
            else {
                var members = emptySymbols;
                var callSignatures = emptyArray;
                var constructSignatures = emptyArray;
                if (symbol.flags & 1952 /* HasExports */) {
                    members = symbol.exports;
                }
                if (symbol.flags & (16 /* Function */ | 8192 /* Method */)) {
                    callSignatures = getSignaturesOfSymbol(symbol);
                }
                if (symbol.flags & 32 /* Class */) {
                    var classType = getDeclaredTypeOfClass(symbol);
                    constructSignatures = getSignaturesOfSymbol(symbol.members["__constructor"]);
                    if (!constructSignatures.length) {
                        constructSignatures = getDefaultConstructSignatures(classType);
                    }
                    if (classType.baseTypes.length) {
                        members = createSymbolTable(getNamedMembers(members));
                        addInheritedMembers(members, getPropertiesOfObjectType(getTypeOfSymbol(classType.baseTypes[0].symbol)));
                    }
                }
                var stringIndexType = undefined;
                var numberIndexType = (symbol.flags & 384 /* Enum */) ? stringType : undefined;
            }
            setObjectTypeMembers(type, members, callSignatures, constructSignatures, stringIndexType, numberIndexType);
        }
        function resolveObjectOrUnionTypeMembers(type) {
            if (!type.members) {
                if (type.flags & (1024 /* Class */ | 2048 /* Interface */)) {
                    resolveClassOrInterfaceMembers(type);
                }
                else if (type.flags & 32768 /* Anonymous */) {
                    resolveAnonymousTypeMembers(type);
                }
                else if (type.flags & 8192 /* Tuple */) {
                    resolveTupleTypeMembers(type);
                }
                else if (type.flags & 16384 /* Union */) {
                    resolveUnionTypeMembers(type);
                }
                else {
                    resolveTypeReferenceMembers(type);
                }
            }
            return type;
        }
        function getPropertiesOfObjectType(type) {
            if (type.flags & 48128 /* ObjectType */) {
                return resolveObjectOrUnionTypeMembers(type).properties;
            }
            return emptyArray;
        }
        function getPropertyOfObjectType(type, name) {
            if (type.flags & 48128 /* ObjectType */) {
                var resolved = resolveObjectOrUnionTypeMembers(type);
                if (ts.hasProperty(resolved.members, name)) {
                    var symbol = resolved.members[name];
                    if (symbolIsValue(symbol)) {
                        return symbol;
                    }
                }
            }
        }
        function getPropertiesOfUnionType(type) {
            var result = [];
            ts.forEach(getPropertiesOfType(type.types[0]), function (prop) {
                var unionProp = getPropertyOfUnionType(type, prop.name);
                if (unionProp) {
                    result.push(unionProp);
                }
            });
            return result;
        }
        function getPropertiesOfType(type) {
            if (type.flags & 16384 /* Union */) {
                return getPropertiesOfUnionType(type);
            }
            return getPropertiesOfObjectType(getApparentType(type));
        }
        function getApparentType(type) {
            if (type.flags & 512 /* TypeParameter */) {
                do {
                    type = getConstraintOfTypeParameter(type);
                } while (type && type.flags & 512 /* TypeParameter */);
                if (!type) {
                    type = emptyObjectType;
                }
            }
            if (type.flags & 258 /* StringLike */) {
                type = globalStringType;
            }
            else if (type.flags & 132 /* NumberLike */) {
                type = globalNumberType;
            }
            else if (type.flags & 8 /* Boolean */) {
                type = globalBooleanType;
            }
            return type;
        }
        function createUnionProperty(unionType, name) {
            var types = unionType.types;
            var props;
            for (var i = 0; i < types.length; i++) {
                var type = getApparentType(types[i]);
                if (type !== unknownType) {
                    var prop = getPropertyOfType(type, name);
                    if (!prop) {
                        return undefined;
                    }
                    if (!props) {
                        props = [prop];
                    }
                    else {
                        props.push(prop);
                    }
                }
            }
            var propTypes = [];
            var declarations = [];
            for (var i = 0; i < props.length; i++) {
                var prop = props[i];
                if (prop.declarations) {
                    declarations.push.apply(declarations, prop.declarations);
                }
                propTypes.push(getTypeOfSymbol(prop));
            }
            var result = createSymbol(4 /* Property */ | 67108864 /* Transient */ | 268435456 /* UnionProperty */, name);
            result.unionType = unionType;
            result.declarations = declarations;
            result.type = getUnionType(propTypes);
            return result;
        }
        function getPropertyOfUnionType(type, name) {
            var properties = type.resolvedProperties || (type.resolvedProperties = {});
            if (ts.hasProperty(properties, name)) {
                return properties[name];
            }
            var property = createUnionProperty(type, name);
            if (property) {
                properties[name] = property;
            }
            return property;
        }
        function getPropertyOfType(type, name) {
            if (type.flags & 16384 /* Union */) {
                return getPropertyOfUnionType(type, name);
            }
            if (!(type.flags & 48128 /* ObjectType */)) {
                type = getApparentType(type);
                if (!(type.flags & 48128 /* ObjectType */)) {
                    return undefined;
                }
            }
            var resolved = resolveObjectOrUnionTypeMembers(type);
            if (ts.hasProperty(resolved.members, name)) {
                var symbol = resolved.members[name];
                if (symbolIsValue(symbol)) {
                    return symbol;
                }
            }
            if (resolved === anyFunctionType || resolved.callSignatures.length || resolved.constructSignatures.length) {
                var symbol = getPropertyOfObjectType(globalFunctionType, name);
                if (symbol)
                    return symbol;
            }
            return getPropertyOfObjectType(globalObjectType, name);
        }
        function getSignaturesOfObjectOrUnionType(type, kind) {
            if (type.flags & (48128 /* ObjectType */ | 16384 /* Union */)) {
                var resolved = resolveObjectOrUnionTypeMembers(type);
                return kind === 0 /* Call */ ? resolved.callSignatures : resolved.constructSignatures;
            }
            return emptyArray;
        }
        function getSignaturesOfType(type, kind) {
            return getSignaturesOfObjectOrUnionType(getApparentType(type), kind);
        }
        function getIndexTypeOfObjectOrUnionType(type, kind) {
            if (type.flags & (48128 /* ObjectType */ | 16384 /* Union */)) {
                var resolved = resolveObjectOrUnionTypeMembers(type);
                return kind === 0 /* String */ ? resolved.stringIndexType : resolved.numberIndexType;
            }
        }
        function getIndexTypeOfType(type, kind) {
            return getIndexTypeOfObjectOrUnionType(getApparentType(type), kind);
        }
        function getTypeParametersFromDeclaration(typeParameterDeclarations) {
            var result = [];
            ts.forEach(typeParameterDeclarations, function (node) {
                var tp = getDeclaredTypeOfTypeParameter(node.symbol);
                if (!ts.contains(result, tp)) {
                    result.push(tp);
                }
            });
            return result;
        }
        function getSignatureFromDeclaration(declaration) {
            var links = getNodeLinks(declaration);
            if (!links.resolvedSignature) {
                var classType = declaration.kind === 129 /* Constructor */ ? getDeclaredTypeOfClass(declaration.parent.symbol) : undefined;
                var typeParameters = classType ? classType.typeParameters : declaration.typeParameters ? getTypeParametersFromDeclaration(declaration.typeParameters) : undefined;
                var parameters = [];
                var hasStringLiterals = false;
                var minArgumentCount = -1;
                for (var i = 0, n = declaration.parameters.length; i < n; i++) {
                    var param = declaration.parameters[i];
                    parameters.push(param.symbol);
                    if (param.type && param.type.kind === 8 /* StringLiteral */) {
                        hasStringLiterals = true;
                    }
                    if (minArgumentCount < 0) {
                        if (param.initializer || param.questionToken || param.dotDotDotToken) {
                            minArgumentCount = i;
                        }
                    }
                }
                if (minArgumentCount < 0) {
                    minArgumentCount = declaration.parameters.length;
                }
                var returnType;
                if (classType) {
                    returnType = classType;
                }
                else if (declaration.type) {
                    returnType = getTypeFromTypeNode(declaration.type);
                }
                else {
                    if (declaration.kind === 130 /* GetAccessor */ && !ts.hasComputedNameButNotSymbol(declaration)) {
                        var setter = ts.getDeclarationOfKind(declaration.symbol, 131 /* SetAccessor */);
                        returnType = getAnnotatedAccessorType(setter);
                    }
                    if (!returnType && !declaration.body) {
                        returnType = anyType;
                    }
                }
                links.resolvedSignature = createSignature(declaration, typeParameters, parameters, returnType, minArgumentCount, ts.hasRestParameters(declaration), hasStringLiterals);
            }
            return links.resolvedSignature;
        }
        function getSignaturesOfSymbol(symbol) {
            if (!symbol)
                return emptyArray;
            var result = [];
            for (var i = 0, len = symbol.declarations.length; i < len; i++) {
                var node = symbol.declarations[i];
                switch (node.kind) {
                    case 136 /* FunctionType */:
                    case 137 /* ConstructorType */:
                    case 190 /* FunctionDeclaration */:
                    case 128 /* MethodDeclaration */:
                    case 127 /* MethodSignature */:
                    case 129 /* Constructor */:
                    case 132 /* CallSignature */:
                    case 133 /* ConstructSignature */:
                    case 134 /* IndexSignature */:
                    case 130 /* GetAccessor */:
                    case 131 /* SetAccessor */:
                    case 156 /* FunctionExpression */:
                    case 157 /* ArrowFunction */:
                        if (i > 0 && node.body) {
                            var previous = symbol.declarations[i - 1];
                            if (node.parent === previous.parent && node.kind === previous.kind && node.pos === previous.end) {
                                break;
                            }
                        }
                        result.push(getSignatureFromDeclaration(node));
                }
            }
            return result;
        }
        function getReturnTypeOfSignature(signature) {
            if (!signature.resolvedReturnType) {
                signature.resolvedReturnType = resolvingType;
                if (signature.target) {
                    var type = instantiateType(getReturnTypeOfSignature(signature.target), signature.mapper);
                }
                else if (signature.unionSignatures) {
                    var type = getUnionType(ts.map(signature.unionSignatures, getReturnTypeOfSignature));
                }
                else {
                    var type = getReturnTypeFromBody(signature.declaration);
                }
                if (signature.resolvedReturnType === resolvingType) {
                    signature.resolvedReturnType = type;
                }
            }
            else if (signature.resolvedReturnType === resolvingType) {
                signature.resolvedReturnType = anyType;
                if (compilerOptions.noImplicitAny) {
                    var declaration = signature.declaration;
                    if (declaration.name) {
                        error(declaration.name, ts.Diagnostics._0_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions, ts.declarationNameToString(declaration.name));
                    }
                    else {
                        error(declaration, ts.Diagnostics.Function_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions);
                    }
                }
            }
            return signature.resolvedReturnType;
        }
        function getRestTypeOfSignature(signature) {
            if (signature.hasRestParameter) {
                var type = getTypeOfSymbol(signature.parameters[signature.parameters.length - 1]);
                if (type.flags & 4096 /* Reference */ && type.target === globalArrayType) {
                    return type.typeArguments[0];
                }
            }
            return anyType;
        }
        function getSignatureInstantiation(signature, typeArguments) {
            return instantiateSignature(signature, createTypeMapper(signature.typeParameters, typeArguments), true);
        }
        function getErasedSignature(signature) {
            if (!signature.typeParameters)
                return signature;
            if (!signature.erasedSignatureCache) {
                if (signature.target) {
                    signature.erasedSignatureCache = instantiateSignature(getErasedSignature(signature.target), signature.mapper);
                }
                else {
                    signature.erasedSignatureCache = instantiateSignature(signature, createTypeEraser(signature.typeParameters), true);
                }
            }
            return signature.erasedSignatureCache;
        }
        function getOrCreateTypeFromSignature(signature) {
            if (!signature.isolatedSignatureType) {
                var isConstructor = signature.declaration.kind === 129 /* Constructor */ || signature.declaration.kind === 133 /* ConstructSignature */;
                var type = createObjectType(32768 /* Anonymous */ | 65536 /* FromSignature */);
                type.members = emptySymbols;
                type.properties = emptyArray;
                type.callSignatures = !isConstructor ? [signature] : emptyArray;
                type.constructSignatures = isConstructor ? [signature] : emptyArray;
                signature.isolatedSignatureType = type;
            }
            return signature.isolatedSignatureType;
        }
        function getIndexSymbol(symbol) {
            return symbol.members["__index"];
        }
        function getIndexDeclarationOfSymbol(symbol, kind) {
            var syntaxKind = kind === 1 /* Number */ ? 117 /* NumberKeyword */ : 119 /* StringKeyword */;
            var indexSymbol = getIndexSymbol(symbol);
            if (indexSymbol) {
                var len = indexSymbol.declarations.length;
                for (var i = 0; i < len; i++) {
                    var node = indexSymbol.declarations[i];
                    if (node.parameters.length === 1) {
                        var parameter = node.parameters[0];
                        if (parameter && parameter.type && parameter.type.kind === syntaxKind) {
                            return node;
                        }
                    }
                }
            }
            return undefined;
        }
        function getIndexTypeOfSymbol(symbol, kind) {
            var declaration = getIndexDeclarationOfSymbol(symbol, kind);
            return declaration ? declaration.type ? getTypeFromTypeNode(declaration.type) : anyType : undefined;
        }
        function getConstraintOfTypeParameter(type) {
            if (!type.constraint) {
                if (type.target) {
                    var targetConstraint = getConstraintOfTypeParameter(type.target);
                    type.constraint = targetConstraint ? instantiateType(targetConstraint, type.mapper) : noConstraintType;
                }
                else {
                    type.constraint = getTypeFromTypeNode(ts.getDeclarationOfKind(type.symbol, 123 /* TypeParameter */).constraint);
                }
            }
            return type.constraint === noConstraintType ? undefined : type.constraint;
        }
        function getTypeListId(types) {
            switch (types.length) {
                case 1:
                    return "" + types[0].id;
                case 2:
                    return types[0].id + "," + types[1].id;
                default:
                    var result = "";
                    for (var i = 0; i < types.length; i++) {
                        if (i > 0)
                            result += ",";
                        result += types[i].id;
                    }
                    return result;
            }
        }
        function getUnwidenedFlagOfTypes(types) {
            return ts.forEach(types, function (t) { return t.flags & 131072 /* Unwidened */; }) || 0;
        }
        function createTypeReference(target, typeArguments) {
            var id = getTypeListId(typeArguments);
            var type = target.instantiations[id];
            if (!type) {
                var flags = 4096 /* Reference */ | getUnwidenedFlagOfTypes(typeArguments);
                type = target.instantiations[id] = createObjectType(flags, target.symbol);
                type.target = target;
                type.typeArguments = typeArguments;
            }
            return type;
        }
        function isTypeParameterReferenceIllegalInConstraint(typeReferenceNode, typeParameterSymbol) {
            var links = getNodeLinks(typeReferenceNode);
            if (links.isIllegalTypeReferenceInConstraint !== undefined) {
                return links.isIllegalTypeReferenceInConstraint;
            }
            var currentNode = typeReferenceNode;
            while (!ts.forEach(typeParameterSymbol.declarations, function (d) { return d.parent === currentNode.parent; })) {
                currentNode = currentNode.parent;
            }
            links.isIllegalTypeReferenceInConstraint = currentNode.kind === 123 /* TypeParameter */;
            return links.isIllegalTypeReferenceInConstraint;
        }
        function checkTypeParameterHasIllegalReferencesInConstraint(typeParameter) {
            var typeParameterSymbol;
            function check(n) {
                if (n.kind === 135 /* TypeReference */ && n.typeName.kind === 64 /* Identifier */) {
                    var links = getNodeLinks(n);
                    if (links.isIllegalTypeReferenceInConstraint === undefined) {
                        var symbol = resolveName(typeParameter, n.typeName.text, 793056 /* Type */, undefined, undefined);
                        if (symbol && (symbol.flags & 262144 /* TypeParameter */)) {
                            links.isIllegalTypeReferenceInConstraint = ts.forEach(symbol.declarations, function (d) { return d.parent == typeParameter.parent; });
                        }
                    }
                    if (links.isIllegalTypeReferenceInConstraint) {
                        error(typeParameter, ts.Diagnostics.Constraint_of_a_type_parameter_cannot_reference_any_type_parameter_from_the_same_type_parameter_list);
                    }
                }
                ts.forEachChild(n, check);
            }
            if (typeParameter.constraint) {
                typeParameterSymbol = getSymbolOfNode(typeParameter);
                check(typeParameter.constraint);
            }
        }
        function getTypeFromTypeReferenceNode(node) {
            var links = getNodeLinks(node);
            if (!links.resolvedType) {
                var symbol = resolveEntityName(node, node.typeName, 793056 /* Type */);
                if (symbol) {
                    var type;
                    if ((symbol.flags & 262144 /* TypeParameter */) && isTypeParameterReferenceIllegalInConstraint(node, symbol)) {
                        type = unknownType;
                    }
                    else {
                        type = getDeclaredTypeOfSymbol(symbol);
                        if (type.flags & (1024 /* Class */ | 2048 /* Interface */) && type.flags & 4096 /* Reference */) {
                            var typeParameters = type.typeParameters;
                            if (node.typeArguments && node.typeArguments.length === typeParameters.length) {
                                type = createTypeReference(type, ts.map(node.typeArguments, getTypeFromTypeNode));
                            }
                            else {
                                error(node, ts.Diagnostics.Generic_type_0_requires_1_type_argument_s, typeToString(type, undefined, 1 /* WriteArrayAsGenericType */), typeParameters.length);
                                type = undefined;
                            }
                        }
                        else {
                            if (node.typeArguments) {
                                error(node, ts.Diagnostics.Type_0_is_not_generic, typeToString(type));
                                type = undefined;
                            }
                        }
                    }
                }
                links.resolvedType = type || unknownType;
            }
            return links.resolvedType;
        }
        function getTypeFromTypeQueryNode(node) {
            var links = getNodeLinks(node);
            if (!links.resolvedType) {
                links.resolvedType = getWidenedType(checkExpressionOrQualifiedName(node.exprName));
            }
            return links.resolvedType;
        }
        function getTypeOfGlobalSymbol(symbol, arity) {
            function getTypeDeclaration(symbol) {
                var declarations = symbol.declarations;
                for (var i = 0; i < declarations.length; i++) {
                    var declaration = declarations[i];
                    switch (declaration.kind) {
                        case 191 /* ClassDeclaration */:
                        case 192 /* InterfaceDeclaration */:
                        case 194 /* EnumDeclaration */:
                            return declaration;
                    }
                }
            }
            if (!symbol) {
                return emptyObjectType;
            }
            var type = getDeclaredTypeOfSymbol(symbol);
            if (!(type.flags & 48128 /* ObjectType */)) {
                error(getTypeDeclaration(symbol), ts.Diagnostics.Global_type_0_must_be_a_class_or_interface_type, symbol.name);
                return emptyObjectType;
            }
            if ((type.typeParameters ? type.typeParameters.length : 0) !== arity) {
                error(getTypeDeclaration(symbol), ts.Diagnostics.Global_type_0_must_have_1_type_parameter_s, symbol.name, arity);
                return emptyObjectType;
            }
            return type;
        }
        function getGlobalSymbol(name) {
            return resolveName(undefined, name, 793056 /* Type */, ts.Diagnostics.Cannot_find_global_type_0, name);
        }
        function getGlobalType(name) {
            return getTypeOfGlobalSymbol(getGlobalSymbol(name), 0);
        }
        function createArrayType(elementType) {
            var arrayType = globalArrayType || getDeclaredTypeOfSymbol(globalArraySymbol);
            return arrayType !== emptyObjectType ? createTypeReference(arrayType, [elementType]) : emptyObjectType;
        }
        function getTypeFromArrayTypeNode(node) {
            var links = getNodeLinks(node);
            if (!links.resolvedType) {
                links.resolvedType = createArrayType(getTypeFromTypeNode(node.elementType));
            }
            return links.resolvedType;
        }
        function createTupleType(elementTypes) {
            var id = getTypeListId(elementTypes);
            var type = tupleTypes[id];
            if (!type) {
                type = tupleTypes[id] = createObjectType(8192 /* Tuple */);
                type.elementTypes = elementTypes;
            }
            return type;
        }
        function getTypeFromTupleTypeNode(node) {
            var links = getNodeLinks(node);
            if (!links.resolvedType) {
                links.resolvedType = createTupleType(ts.map(node.elementTypes, getTypeFromTypeNode));
            }
            return links.resolvedType;
        }
        function addTypeToSortedSet(sortedSet, type) {
            if (type.flags & 16384 /* Union */) {
                addTypesToSortedSet(sortedSet, type.types);
            }
            else {
                var i = 0;
                var id = type.id;
                while (i < sortedSet.length && sortedSet[i].id < id) {
                    i++;
                }
                if (i === sortedSet.length || sortedSet[i].id !== id) {
                    sortedSet.splice(i, 0, type);
                }
            }
        }
        function addTypesToSortedSet(sortedTypes, types) {
            for (var i = 0, len = types.length; i < len; i++) {
                addTypeToSortedSet(sortedTypes, types[i]);
            }
        }
        function isSubtypeOfAny(candidate, types) {
            for (var i = 0, len = types.length; i < len; i++) {
                if (candidate !== types[i] && isTypeSubtypeOf(candidate, types[i])) {
                    return true;
                }
            }
            return false;
        }
        function removeSubtypes(types) {
            var i = types.length;
            while (i > 0) {
                i--;
                if (isSubtypeOfAny(types[i], types)) {
                    types.splice(i, 1);
                }
            }
        }
        function containsAnyType(types) {
            for (var i = 0; i < types.length; i++) {
                if (types[i].flags & 1 /* Any */) {
                    return true;
                }
            }
            return false;
        }
        function removeAllButLast(types, typeToRemove) {
            var i = types.length;
            while (i > 0 && types.length > 1) {
                i--;
                if (types[i] === typeToRemove) {
                    types.splice(i, 1);
                }
            }
        }
        function getUnionType(types, noSubtypeReduction) {
            if (types.length === 0) {
                return emptyObjectType;
            }
            var sortedTypes = [];
            addTypesToSortedSet(sortedTypes, types);
            if (noSubtypeReduction) {
                if (containsAnyType(sortedTypes)) {
                    return anyType;
                }
                removeAllButLast(sortedTypes, undefinedType);
                removeAllButLast(sortedTypes, nullType);
            }
            else {
                removeSubtypes(sortedTypes);
            }
            if (sortedTypes.length === 1) {
                return sortedTypes[0];
            }
            var id = getTypeListId(sortedTypes);
            var type = unionTypes[id];
            if (!type) {
                type = unionTypes[id] = createObjectType(16384 /* Union */ | getUnwidenedFlagOfTypes(sortedTypes));
                type.types = sortedTypes;
            }
            return type;
        }
        function getTypeFromUnionTypeNode(node) {
            var links = getNodeLinks(node);
            if (!links.resolvedType) {
                links.resolvedType = getUnionType(ts.map(node.types, getTypeFromTypeNode), true);
            }
            return links.resolvedType;
        }
        function getTypeFromTypeLiteralOrFunctionOrConstructorTypeNode(node) {
            var links = getNodeLinks(node);
            if (!links.resolvedType) {
                links.resolvedType = createObjectType(32768 /* Anonymous */, node.symbol);
            }
            return links.resolvedType;
        }
        function getStringLiteralType(node) {
            if (ts.hasProperty(stringLiteralTypes, node.text)) {
                return stringLiteralTypes[node.text];
            }
            var type = stringLiteralTypes[node.text] = createType(256 /* StringLiteral */);
            type.text = ts.getTextOfNode(node);
            return type;
        }
        function getTypeFromStringLiteral(node) {
            var links = getNodeLinks(node);
            if (!links.resolvedType) {
                links.resolvedType = getStringLiteralType(node);
            }
            return links.resolvedType;
        }
        function getTypeFromTypeNode(node) {
            switch (node.kind) {
                case 110 /* AnyKeyword */:
                    return anyType;
                case 119 /* StringKeyword */:
                    return stringType;
                case 117 /* NumberKeyword */:
                    return numberType;
                case 111 /* BooleanKeyword */:
                    return booleanType;
                case 98 /* VoidKeyword */:
                    return voidType;
                case 8 /* StringLiteral */:
                    return getTypeFromStringLiteral(node);
                case 135 /* TypeReference */:
                    return getTypeFromTypeReferenceNode(node);
                case 138 /* TypeQuery */:
                    return getTypeFromTypeQueryNode(node);
                case 140 /* ArrayType */:
                    return getTypeFromArrayTypeNode(node);
                case 141 /* TupleType */:
                    return getTypeFromTupleTypeNode(node);
                case 142 /* UnionType */:
                    return getTypeFromUnionTypeNode(node);
                case 143 /* ParenthesizedType */:
                    return getTypeFromTypeNode(node.type);
                case 136 /* FunctionType */:
                case 137 /* ConstructorType */:
                case 139 /* TypeLiteral */:
                    return getTypeFromTypeLiteralOrFunctionOrConstructorTypeNode(node);
                case 64 /* Identifier */:
                case 121 /* QualifiedName */:
                    var symbol = getSymbolInfo(node);
                    return symbol && getDeclaredTypeOfSymbol(symbol);
                default:
                    return unknownType;
            }
        }
        function instantiateList(items, mapper, instantiator) {
            if (items && items.length) {
                var result = [];
                for (var i = 0; i < items.length; i++) {
                    result.push(instantiator(items[i], mapper));
                }
                return result;
            }
            return items;
        }
        function createUnaryTypeMapper(source, target) {
            return function (t) { return t === source ? target : t; };
        }
        function createBinaryTypeMapper(source1, target1, source2, target2) {
            return function (t) { return t === source1 ? target1 : t === source2 ? target2 : t; };
        }
        function createTypeMapper(sources, targets) {
            switch (sources.length) {
                case 1: return createUnaryTypeMapper(sources[0], targets[0]);
                case 2: return createBinaryTypeMapper(sources[0], targets[0], sources[1], targets[1]);
            }
            return function (t) {
                for (var i = 0; i < sources.length; i++) {
                    if (t === sources[i])
                        return targets[i];
                }
                return t;
            };
        }
        function createUnaryTypeEraser(source) {
            return function (t) { return t === source ? anyType : t; };
        }
        function createBinaryTypeEraser(source1, source2) {
            return function (t) { return t === source1 || t === source2 ? anyType : t; };
        }
        function createTypeEraser(sources) {
            switch (sources.length) {
                case 1: return createUnaryTypeEraser(sources[0]);
                case 2: return createBinaryTypeEraser(sources[0], sources[1]);
            }
            return function (t) {
                for (var i = 0; i < sources.length; i++) {
                    if (t === sources[i])
                        return anyType;
                }
                return t;
            };
        }
        function createInferenceMapper(context) {
            return function (t) {
                for (var i = 0; i < context.typeParameters.length; i++) {
                    if (t === context.typeParameters[i]) {
                        return getInferredType(context, i);
                    }
                }
                return t;
            };
        }
        function identityMapper(type) {
            return type;
        }
        function combineTypeMappers(mapper1, mapper2) {
            return function (t) { return mapper2(mapper1(t)); };
        }
        function instantiateTypeParameter(typeParameter, mapper) {
            var result = createType(512 /* TypeParameter */);
            result.symbol = typeParameter.symbol;
            if (typeParameter.constraint) {
                result.constraint = instantiateType(typeParameter.constraint, mapper);
            }
            else {
                result.target = typeParameter;
                result.mapper = mapper;
            }
            return result;
        }
        function instantiateSignature(signature, mapper, eraseTypeParameters) {
            if (signature.typeParameters && !eraseTypeParameters) {
                var freshTypeParameters = instantiateList(signature.typeParameters, mapper, instantiateTypeParameter);
                mapper = combineTypeMappers(createTypeMapper(signature.typeParameters, freshTypeParameters), mapper);
            }
            var result = createSignature(signature.declaration, freshTypeParameters, instantiateList(signature.parameters, mapper, instantiateSymbol), signature.resolvedReturnType ? instantiateType(signature.resolvedReturnType, mapper) : undefined, signature.minArgumentCount, signature.hasRestParameter, signature.hasStringLiterals);
            result.target = signature;
            result.mapper = mapper;
            return result;
        }
        function instantiateSymbol(symbol, mapper) {
            if (symbol.flags & 16777216 /* Instantiated */) {
                var links = getSymbolLinks(symbol);
                symbol = links.target;
                mapper = combineTypeMappers(links.mapper, mapper);
            }
            var result = createSymbol(16777216 /* Instantiated */ | 67108864 /* Transient */ | symbol.flags, symbol.name);
            result.declarations = symbol.declarations;
            result.parent = symbol.parent;
            result.target = symbol;
            result.mapper = mapper;
            if (symbol.valueDeclaration) {
                result.valueDeclaration = symbol.valueDeclaration;
            }
            return result;
        }
        function instantiateAnonymousType(type, mapper) {
            var result = createObjectType(32768 /* Anonymous */, type.symbol);
            result.properties = instantiateList(getPropertiesOfObjectType(type), mapper, instantiateSymbol);
            result.members = createSymbolTable(result.properties);
            result.callSignatures = instantiateList(getSignaturesOfType(type, 0 /* Call */), mapper, instantiateSignature);
            result.constructSignatures = instantiateList(getSignaturesOfType(type, 1 /* Construct */), mapper, instantiateSignature);
            var stringIndexType = getIndexTypeOfType(type, 0 /* String */);
            var numberIndexType = getIndexTypeOfType(type, 1 /* Number */);
            if (stringIndexType)
                result.stringIndexType = instantiateType(stringIndexType, mapper);
            if (numberIndexType)
                result.numberIndexType = instantiateType(numberIndexType, mapper);
            return result;
        }
        function instantiateType(type, mapper) {
            if (mapper !== identityMapper) {
                if (type.flags & 512 /* TypeParameter */) {
                    return mapper(type);
                }
                if (type.flags & 32768 /* Anonymous */) {
                    return type.symbol && type.symbol.flags & (16 /* Function */ | 8192 /* Method */ | 2048 /* TypeLiteral */ | 4096 /* ObjectLiteral */) ? instantiateAnonymousType(type, mapper) : type;
                }
                if (type.flags & 4096 /* Reference */) {
                    return createTypeReference(type.target, instantiateList(type.typeArguments, mapper, instantiateType));
                }
                if (type.flags & 8192 /* Tuple */) {
                    return createTupleType(instantiateList(type.elementTypes, mapper, instantiateType));
                }
                if (type.flags & 16384 /* Union */) {
                    return getUnionType(instantiateList(type.types, mapper, instantiateType), true);
                }
            }
            return type;
        }
        function isContextSensitive(node) {
            ts.Debug.assert(node.kind !== 128 /* MethodDeclaration */ || ts.isObjectLiteralMethod(node));
            switch (node.kind) {
                case 156 /* FunctionExpression */:
                case 157 /* ArrowFunction */:
                    return isContextSensitiveFunctionLikeDeclaration(node);
                case 148 /* ObjectLiteralExpression */:
                    return ts.forEach(node.properties, isContextSensitive);
                case 147 /* ArrayLiteralExpression */:
                    return ts.forEach(node.elements, isContextSensitive);
                case 164 /* ConditionalExpression */:
                    return isContextSensitive(node.whenTrue) || isContextSensitive(node.whenFalse);
                case 163 /* BinaryExpression */:
                    return node.operator === 49 /* BarBarToken */ && (isContextSensitive(node.left) || isContextSensitive(node.right));
                case 204 /* PropertyAssignment */:
                    return isContextSensitive(node.initializer);
                case 128 /* MethodDeclaration */:
                case 127 /* MethodSignature */:
                    return isContextSensitiveFunctionLikeDeclaration(node);
            }
            return false;
        }
        function isContextSensitiveFunctionLikeDeclaration(node) {
            return !node.typeParameters && !ts.forEach(node.parameters, function (p) { return p.type; });
        }
        function getTypeWithoutConstructors(type) {
            if (type.flags & 48128 /* ObjectType */) {
                var resolved = resolveObjectOrUnionTypeMembers(type);
                if (resolved.constructSignatures.length) {
                    var result = createObjectType(32768 /* Anonymous */, type.symbol);
                    result.members = resolved.members;
                    result.properties = resolved.properties;
                    result.callSignatures = resolved.callSignatures;
                    result.constructSignatures = emptyArray;
                    type = result;
                }
            }
            return type;
        }
        var subtypeRelation = {};
        var assignableRelation = {};
        var identityRelation = {};
        function isTypeIdenticalTo(source, target) {
            return checkTypeRelatedTo(source, target, identityRelation, undefined);
        }
        function compareTypes(source, target) {
            return checkTypeRelatedTo(source, target, identityRelation, undefined) ? -1 /* True */ : 0 /* False */;
        }
        function isTypeSubtypeOf(source, target) {
            return checkTypeSubtypeOf(source, target, undefined);
        }
        function isTypeAssignableTo(source, target) {
            return checkTypeAssignableTo(source, target, undefined);
        }
        function checkTypeSubtypeOf(source, target, errorNode, headMessage, containingMessageChain) {
            return checkTypeRelatedTo(source, target, subtypeRelation, errorNode, headMessage, containingMessageChain);
        }
        function checkTypeAssignableTo(source, target, errorNode, headMessage) {
            return checkTypeRelatedTo(source, target, assignableRelation, errorNode, headMessage);
        }
        function isSignatureAssignableTo(source, target) {
            var sourceType = getOrCreateTypeFromSignature(source);
            var targetType = getOrCreateTypeFromSignature(target);
            return checkTypeRelatedTo(sourceType, targetType, assignableRelation, undefined);
        }
        function checkTypeRelatedTo(source, target, relation, errorNode, headMessage, containingMessageChain) {
            var errorInfo;
            var sourceStack;
            var targetStack;
            var maybeStack;
            var expandingFlags;
            var depth = 0;
            var overflow = false;
            ts.Debug.assert(relation !== identityRelation || !errorNode, "no error reporting in identity checking");
            var result = isRelatedTo(source, target, errorNode !== undefined, headMessage);
            if (overflow) {
                error(errorNode, ts.Diagnostics.Excessive_stack_depth_comparing_types_0_and_1, typeToString(source), typeToString(target));
            }
            else if (errorInfo) {
                if (containingMessageChain) {
                    errorInfo = ts.concatenateDiagnosticMessageChains(containingMessageChain, errorInfo);
                }
                addDiagnostic(ts.createDiagnosticForNodeFromMessageChain(errorNode, errorInfo, program.getCompilerHost().getNewLine()));
            }
            return result !== 0 /* False */;
            function reportError(message, arg0, arg1, arg2) {
                errorInfo = ts.chainDiagnosticMessages(errorInfo, message, arg0, arg1, arg2);
            }
            function isRelatedTo(source, target, reportErrors, headMessage) {
                var result;
                if (source === target)
                    return -1 /* True */;
                if (relation !== identityRelation) {
                    if (target.flags & 1 /* Any */)
                        return -1 /* True */;
                    if (source === undefinedType)
                        return -1 /* True */;
                    if (source === nullType && target !== undefinedType)
                        return -1 /* True */;
                    if (source.flags & 128 /* Enum */ && target === numberType)
                        return -1 /* True */;
                    if (source.flags & 256 /* StringLiteral */ && target === stringType)
                        return -1 /* True */;
                    if (relation === assignableRelation) {
                        if (source.flags & 1 /* Any */)
                            return -1 /* True */;
                        if (source === numberType && target.flags & 128 /* Enum */)
                            return -1 /* True */;
                    }
                }
                if (source.flags & 16384 /* Union */ || target.flags & 16384 /* Union */) {
                    if (relation === identityRelation) {
                        if (source.flags & 16384 /* Union */ && target.flags & 16384 /* Union */) {
                            if (result = unionTypeRelatedToUnionType(source, target)) {
                                if (result &= unionTypeRelatedToUnionType(target, source)) {
                                    return result;
                                }
                            }
                        }
                        else if (source.flags & 16384 /* Union */) {
                            if (result = unionTypeRelatedToType(source, target, reportErrors)) {
                                return result;
                            }
                        }
                        else {
                            if (result = unionTypeRelatedToType(target, source, reportErrors)) {
                                return result;
                            }
                        }
                    }
                    else {
                        if (source.flags & 16384 /* Union */) {
                            if (result = unionTypeRelatedToType(source, target, reportErrors)) {
                                return result;
                            }
                        }
                        else {
                            if (result = typeRelatedToUnionType(source, target, reportErrors)) {
                                return result;
                            }
                        }
                    }
                }
                else if (source.flags & 512 /* TypeParameter */ && target.flags & 512 /* TypeParameter */) {
                    if (result = typeParameterRelatedTo(source, target, reportErrors)) {
                        return result;
                    }
                }
                else {
                    var saveErrorInfo = errorInfo;
                    if (source.flags & 4096 /* Reference */ && target.flags & 4096 /* Reference */ && source.target === target.target) {
                        if (result = typesRelatedTo(source.typeArguments, target.typeArguments, reportErrors)) {
                            return result;
                        }
                    }
                    var reportStructuralErrors = reportErrors && errorInfo === saveErrorInfo;
                    var sourceOrApparentType = relation === identityRelation ? source : getApparentType(source);
                    if (sourceOrApparentType.flags & 48128 /* ObjectType */ && target.flags & 48128 /* ObjectType */ && (result = objectTypeRelatedTo(sourceOrApparentType, target, reportStructuralErrors))) {
                        errorInfo = saveErrorInfo;
                        return result;
                    }
                }
                if (reportErrors) {
                    headMessage = headMessage || ts.Diagnostics.Type_0_is_not_assignable_to_type_1;
                    reportError(headMessage, typeToString(source), typeToString(target));
                }
                return 0 /* False */;
            }
            function unionTypeRelatedToUnionType(source, target) {
                var result = -1 /* True */;
                var sourceTypes = source.types;
                for (var i = 0, len = sourceTypes.length; i < len; i++) {
                    var related = typeRelatedToUnionType(sourceTypes[i], target, false);
                    if (!related) {
                        return 0 /* False */;
                    }
                    result &= related;
                }
                return result;
            }
            function typeRelatedToUnionType(source, target, reportErrors) {
                var targetTypes = target.types;
                for (var i = 0, len = targetTypes.length; i < len; i++) {
                    var related = isRelatedTo(source, targetTypes[i], reportErrors && i === len - 1);
                    if (related) {
                        return related;
                    }
                }
                return 0 /* False */;
            }
            function unionTypeRelatedToType(source, target, reportErrors) {
                var result = -1 /* True */;
                var sourceTypes = source.types;
                for (var i = 0, len = sourceTypes.length; i < len; i++) {
                    var related = isRelatedTo(sourceTypes[i], target, reportErrors);
                    if (!related) {
                        return 0 /* False */;
                    }
                    result &= related;
                }
                return result;
            }
            function typesRelatedTo(sources, targets, reportErrors) {
                var result = -1 /* True */;
                for (var i = 0, len = sources.length; i < len; i++) {
                    var related = isRelatedTo(sources[i], targets[i], reportErrors);
                    if (!related) {
                        return 0 /* False */;
                    }
                    result &= related;
                }
                return result;
            }
            function typeParameterRelatedTo(source, target, reportErrors) {
                if (relation === identityRelation) {
                    if (source.symbol.name !== target.symbol.name) {
                        return 0 /* False */;
                    }
                    if (source.constraint === target.constraint) {
                        return -1 /* True */;
                    }
                    if (source.constraint === noConstraintType || target.constraint === noConstraintType) {
                        return 0 /* False */;
                    }
                    return isRelatedTo(source.constraint, target.constraint, reportErrors);
                }
                else {
                    while (true) {
                        var constraint = getConstraintOfTypeParameter(source);
                        if (constraint === target)
                            return -1 /* True */;
                        if (!(constraint && constraint.flags & 512 /* TypeParameter */))
                            break;
                        source = constraint;
                    }
                    return 0 /* False */;
                }
            }
            function objectTypeRelatedTo(source, target, reportErrors) {
                if (overflow) {
                    return 0 /* False */;
                }
                var id = relation !== identityRelation || source.id < target.id ? source.id + "," + target.id : target.id + "," + source.id;
                var related = relation[id];
                if (related !== undefined) {
                    return related ? -1 /* True */ : 0 /* False */;
                }
                if (depth > 0) {
                    for (var i = 0; i < depth; i++) {
                        if (maybeStack[i][id]) {
                            return 1 /* Maybe */;
                        }
                    }
                    if (depth === 100) {
                        overflow = true;
                        return 0 /* False */;
                    }
                }
                else {
                    sourceStack = [];
                    targetStack = [];
                    maybeStack = [];
                    expandingFlags = 0;
                }
                sourceStack[depth] = source;
                targetStack[depth] = target;
                maybeStack[depth] = {};
                maybeStack[depth][id] = true;
                depth++;
                var saveExpandingFlags = expandingFlags;
                if (!(expandingFlags & 1) && isDeeplyNestedGeneric(source, sourceStack))
                    expandingFlags |= 1;
                if (!(expandingFlags & 2) && isDeeplyNestedGeneric(target, targetStack))
                    expandingFlags |= 2;
                if (expandingFlags === 3) {
                    var result = 1 /* Maybe */;
                }
                else {
                    var result = propertiesRelatedTo(source, target, reportErrors);
                    if (result) {
                        result &= signaturesRelatedTo(source, target, 0 /* Call */, reportErrors);
                        if (result) {
                            result &= signaturesRelatedTo(source, target, 1 /* Construct */, reportErrors);
                            if (result) {
                                result &= stringIndexTypesRelatedTo(source, target, reportErrors);
                                if (result) {
                                    result &= numberIndexTypesRelatedTo(source, target, reportErrors);
                                }
                            }
                        }
                    }
                }
                expandingFlags = saveExpandingFlags;
                depth--;
                if (result) {
                    var maybeCache = maybeStack[depth];
                    var destinationCache = result === -1 /* True */ || depth === 0 ? relation : maybeStack[depth - 1];
                    for (var p in maybeCache) {
                        destinationCache[p] = maybeCache[p];
                    }
                }
                else {
                    relation[id] = false;
                }
                return result;
            }
            function isDeeplyNestedGeneric(type, stack) {
                if (type.flags & 4096 /* Reference */ && depth >= 10) {
                    var target = type.target;
                    var count = 0;
                    for (var i = 0; i < depth; i++) {
                        var t = stack[i];
                        if (t.flags & 4096 /* Reference */ && t.target === target) {
                            count++;
                            if (count >= 10)
                                return true;
                        }
                    }
                }
                return false;
            }
            function propertiesRelatedTo(source, target, reportErrors) {
                if (relation === identityRelation) {
                    return propertiesIdenticalTo(source, target);
                }
                var result = -1 /* True */;
                var properties = getPropertiesOfObjectType(target);
                for (var i = 0; i < properties.length; i++) {
                    var targetProp = properties[i];
                    var sourceProp = getPropertyOfType(source, targetProp.name);
                    if (sourceProp !== targetProp) {
                        if (!sourceProp) {
                            if (relation === subtypeRelation || !(targetProp.flags & 536870912 /* Optional */)) {
                                if (reportErrors) {
                                    reportError(ts.Diagnostics.Property_0_is_missing_in_type_1, symbolToString(targetProp), typeToString(source));
                                }
                                return 0 /* False */;
                            }
                        }
                        else if (!(targetProp.flags & 134217728 /* Prototype */)) {
                            var sourceFlags = getDeclarationFlagsFromSymbol(sourceProp);
                            var targetFlags = getDeclarationFlagsFromSymbol(targetProp);
                            if (sourceFlags & 32 /* Private */ || targetFlags & 32 /* Private */) {
                                if (sourceProp.valueDeclaration !== targetProp.valueDeclaration) {
                                    if (reportErrors) {
                                        if (sourceFlags & 32 /* Private */ && targetFlags & 32 /* Private */) {
                                            reportError(ts.Diagnostics.Types_have_separate_declarations_of_a_private_property_0, symbolToString(targetProp));
                                        }
                                        else {
                                            reportError(ts.Diagnostics.Property_0_is_private_in_type_1_but_not_in_type_2, symbolToString(targetProp), typeToString(sourceFlags & 32 /* Private */ ? source : target), typeToString(sourceFlags & 32 /* Private */ ? target : source));
                                        }
                                    }
                                    return 0 /* False */;
                                }
                            }
                            else if (targetFlags & 64 /* Protected */) {
                                var sourceDeclaredInClass = sourceProp.parent && sourceProp.parent.flags & 32 /* Class */;
                                var sourceClass = sourceDeclaredInClass ? getDeclaredTypeOfSymbol(sourceProp.parent) : undefined;
                                var targetClass = getDeclaredTypeOfSymbol(targetProp.parent);
                                if (!sourceClass || !hasBaseType(sourceClass, targetClass)) {
                                    if (reportErrors) {
                                        reportError(ts.Diagnostics.Property_0_is_protected_but_type_1_is_not_a_class_derived_from_2, symbolToString(targetProp), typeToString(sourceClass || source), typeToString(targetClass));
                                    }
                                    return 0 /* False */;
                                }
                            }
                            else if (sourceFlags & 64 /* Protected */) {
                                if (reportErrors) {
                                    reportError(ts.Diagnostics.Property_0_is_protected_in_type_1_but_public_in_type_2, symbolToString(targetProp), typeToString(source), typeToString(target));
                                }
                                return 0 /* False */;
                            }
                            var related = isRelatedTo(getTypeOfSymbol(sourceProp), getTypeOfSymbol(targetProp), reportErrors);
                            if (!related) {
                                if (reportErrors) {
                                    reportError(ts.Diagnostics.Types_of_property_0_are_incompatible, symbolToString(targetProp));
                                }
                                return 0 /* False */;
                            }
                            result &= related;
                            if (sourceProp.flags & 536870912 /* Optional */ && !(targetProp.flags & 536870912 /* Optional */)) {
                                if (reportErrors) {
                                    reportError(ts.Diagnostics.Property_0_is_optional_in_type_1_but_required_in_type_2, symbolToString(targetProp), typeToString(source), typeToString(target));
                                }
                                return 0 /* False */;
                            }
                        }
                    }
                }
                return result;
            }
            function propertiesIdenticalTo(source, target) {
                var sourceProperties = getPropertiesOfObjectType(source);
                var targetProperties = getPropertiesOfObjectType(target);
                if (sourceProperties.length !== targetProperties.length) {
                    return 0 /* False */;
                }
                var result = -1 /* True */;
                for (var i = 0, len = sourceProperties.length; i < len; ++i) {
                    var sourceProp = sourceProperties[i];
                    var targetProp = getPropertyOfObjectType(target, sourceProp.name);
                    if (!targetProp) {
                        return 0 /* False */;
                    }
                    var related = compareProperties(sourceProp, targetProp, isRelatedTo);
                    if (!related) {
                        return 0 /* False */;
                    }
                    result &= related;
                }
                return result;
            }
            function signaturesRelatedTo(source, target, kind, reportErrors) {
                if (relation === identityRelation) {
                    return signaturesIdenticalTo(source, target, kind);
                }
                if (target === anyFunctionType || source === anyFunctionType) {
                    return -1 /* True */;
                }
                var sourceSignatures = getSignaturesOfType(source, kind);
                var targetSignatures = getSignaturesOfType(target, kind);
                var result = -1 /* True */;
                var saveErrorInfo = errorInfo;
                outer: for (var i = 0; i < targetSignatures.length; i++) {
                    var t = targetSignatures[i];
                    if (!t.hasStringLiterals || target.flags & 65536 /* FromSignature */) {
                        var localErrors = reportErrors;
                        for (var j = 0; j < sourceSignatures.length; j++) {
                            var s = sourceSignatures[j];
                            if (!s.hasStringLiterals || source.flags & 65536 /* FromSignature */) {
                                var related = signatureRelatedTo(s, t, localErrors);
                                if (related) {
                                    result &= related;
                                    errorInfo = saveErrorInfo;
                                    continue outer;
                                }
                                localErrors = false;
                            }
                        }
                        return 0 /* False */;
                    }
                }
                return result;
            }
            function signatureRelatedTo(source, target, reportErrors) {
                if (source === target) {
                    return -1 /* True */;
                }
                if (!target.hasRestParameter && source.minArgumentCount > target.parameters.length) {
                    return 0 /* False */;
                }
                var sourceMax = source.parameters.length;
                var targetMax = target.parameters.length;
                var checkCount;
                if (source.hasRestParameter && target.hasRestParameter) {
                    checkCount = sourceMax > targetMax ? sourceMax : targetMax;
                    sourceMax--;
                    targetMax--;
                }
                else if (source.hasRestParameter) {
                    sourceMax--;
                    checkCount = targetMax;
                }
                else if (target.hasRestParameter) {
                    targetMax--;
                    checkCount = sourceMax;
                }
                else {
                    checkCount = sourceMax < targetMax ? sourceMax : targetMax;
                }
                source = getErasedSignature(source);
                target = getErasedSignature(target);
                var result = -1 /* True */;
                for (var i = 0; i < checkCount; i++) {
                    var s = i < sourceMax ? getTypeOfSymbol(source.parameters[i]) : getRestTypeOfSignature(source);
                    var t = i < targetMax ? getTypeOfSymbol(target.parameters[i]) : getRestTypeOfSignature(target);
                    var saveErrorInfo = errorInfo;
                    var related = isRelatedTo(s, t, reportErrors);
                    if (!related) {
                        related = isRelatedTo(t, s, false);
                        if (!related) {
                            if (reportErrors) {
                                reportError(ts.Diagnostics.Types_of_parameters_0_and_1_are_incompatible, source.parameters[i < sourceMax ? i : sourceMax].name, target.parameters[i < targetMax ? i : targetMax].name);
                            }
                            return 0 /* False */;
                        }
                        errorInfo = saveErrorInfo;
                    }
                    result &= related;
                }
                var t = getReturnTypeOfSignature(target);
                if (t === voidType)
                    return result;
                var s = getReturnTypeOfSignature(source);
                return result & isRelatedTo(s, t, reportErrors);
            }
            function signaturesIdenticalTo(source, target, kind) {
                var sourceSignatures = getSignaturesOfType(source, kind);
                var targetSignatures = getSignaturesOfType(target, kind);
                if (sourceSignatures.length !== targetSignatures.length) {
                    return 0 /* False */;
                }
                var result = -1 /* True */;
                for (var i = 0, len = sourceSignatures.length; i < len; ++i) {
                    var related = compareSignatures(sourceSignatures[i], targetSignatures[i], true, isRelatedTo);
                    if (!related) {
                        return 0 /* False */;
                    }
                    result &= related;
                }
                return result;
            }
            function stringIndexTypesRelatedTo(source, target, reportErrors) {
                if (relation === identityRelation) {
                    return indexTypesIdenticalTo(0 /* String */, source, target);
                }
                var targetType = getIndexTypeOfType(target, 0 /* String */);
                if (targetType) {
                    var sourceType = getIndexTypeOfType(source, 0 /* String */);
                    if (!sourceType) {
                        if (reportErrors) {
                            reportError(ts.Diagnostics.Index_signature_is_missing_in_type_0, typeToString(source));
                        }
                        return 0 /* False */;
                    }
                    var related = isRelatedTo(sourceType, targetType, reportErrors);
                    if (!related) {
                        if (reportErrors) {
                            reportError(ts.Diagnostics.Index_signatures_are_incompatible);
                        }
                        return 0 /* False */;
                    }
                    return related;
                }
                return -1 /* True */;
            }
            function numberIndexTypesRelatedTo(source, target, reportErrors) {
                if (relation === identityRelation) {
                    return indexTypesIdenticalTo(1 /* Number */, source, target);
                }
                var targetType = getIndexTypeOfType(target, 1 /* Number */);
                if (targetType) {
                    var sourceStringType = getIndexTypeOfType(source, 0 /* String */);
                    var sourceNumberType = getIndexTypeOfType(source, 1 /* Number */);
                    if (!(sourceStringType || sourceNumberType)) {
                        if (reportErrors) {
                            reportError(ts.Diagnostics.Index_signature_is_missing_in_type_0, typeToString(source));
                        }
                        return 0 /* False */;
                    }
                    if (sourceStringType && sourceNumberType) {
                        var related = isRelatedTo(sourceStringType, targetType, false) || isRelatedTo(sourceNumberType, targetType, reportErrors);
                    }
                    else {
                        var related = isRelatedTo(sourceStringType || sourceNumberType, targetType, reportErrors);
                    }
                    if (!related) {
                        if (reportErrors) {
                            reportError(ts.Diagnostics.Index_signatures_are_incompatible);
                        }
                        return 0 /* False */;
                    }
                    return related;
                }
                return -1 /* True */;
            }
            function indexTypesIdenticalTo(indexKind, source, target) {
                var targetType = getIndexTypeOfType(target, indexKind);
                var sourceType = getIndexTypeOfType(source, indexKind);
                if (!sourceType && !targetType) {
                    return -1 /* True */;
                }
                if (sourceType && targetType) {
                    return isRelatedTo(sourceType, targetType);
                }
                return 0 /* False */;
            }
        }
        function isPropertyIdenticalTo(sourceProp, targetProp) {
            return compareProperties(sourceProp, targetProp, compareTypes) !== 0 /* False */;
        }
        function compareProperties(sourceProp, targetProp, compareTypes) {
            if (sourceProp === targetProp) {
                return -1 /* True */;
            }
            var sourcePropAccessibility = getDeclarationFlagsFromSymbol(sourceProp) & (32 /* Private */ | 64 /* Protected */);
            var targetPropAccessibility = getDeclarationFlagsFromSymbol(targetProp) & (32 /* Private */ | 64 /* Protected */);
            if (sourcePropAccessibility !== targetPropAccessibility) {
                return 0 /* False */;
            }
            if (sourcePropAccessibility) {
                if (getTargetSymbol(sourceProp) !== getTargetSymbol(targetProp)) {
                    return 0 /* False */;
                }
            }
            else {
                if ((sourceProp.flags & 536870912 /* Optional */) !== (targetProp.flags & 536870912 /* Optional */)) {
                    return 0 /* False */;
                }
            }
            return compareTypes(getTypeOfSymbol(sourceProp), getTypeOfSymbol(targetProp));
        }
        function compareSignatures(source, target, compareReturnTypes, compareTypes) {
            if (source === target) {
                return -1 /* True */;
            }
            if (source.parameters.length !== target.parameters.length || source.minArgumentCount !== target.minArgumentCount || source.hasRestParameter !== target.hasRestParameter) {
                return 0 /* False */;
            }
            var result = -1 /* True */;
            if (source.typeParameters && target.typeParameters) {
                if (source.typeParameters.length !== target.typeParameters.length) {
                    return 0 /* False */;
                }
                for (var i = 0, len = source.typeParameters.length; i < len; ++i) {
                    var related = compareTypes(source.typeParameters[i], target.typeParameters[i]);
                    if (!related) {
                        return 0 /* False */;
                    }
                    result &= related;
                }
            }
            else if (source.typeParameters || source.typeParameters) {
                return 0 /* False */;
            }
            source = getErasedSignature(source);
            target = getErasedSignature(target);
            for (var i = 0, len = source.parameters.length; i < len; i++) {
                var s = source.hasRestParameter && i === len - 1 ? getRestTypeOfSignature(source) : getTypeOfSymbol(source.parameters[i]);
                var t = target.hasRestParameter && i === len - 1 ? getRestTypeOfSignature(target) : getTypeOfSymbol(target.parameters[i]);
                var related = compareTypes(s, t);
                if (!related) {
                    return 0 /* False */;
                }
                result &= related;
            }
            if (compareReturnTypes) {
                result &= compareTypes(getReturnTypeOfSignature(source), getReturnTypeOfSignature(target));
            }
            return result;
        }
        function isSupertypeOfEach(candidate, types) {
            for (var i = 0, len = types.length; i < len; i++) {
                if (candidate !== types[i] && !isTypeSubtypeOf(types[i], candidate))
                    return false;
            }
            return true;
        }
        function getCommonSupertype(types) {
            return ts.forEach(types, function (t) { return isSupertypeOfEach(t, types) ? t : undefined; });
        }
        function reportNoCommonSupertypeError(types, errorLocation, errorMessageChainHead) {
            var bestSupertype;
            var bestSupertypeDownfallType;
            var bestSupertypeScore = 0;
            for (var i = 0; i < types.length; i++) {
                var score = 0;
                var downfallType = undefined;
                for (var j = 0; j < types.length; j++) {
                    if (isTypeSubtypeOf(types[j], types[i])) {
                        score++;
                    }
                    else if (!downfallType) {
                        downfallType = types[j];
                    }
                }
                if (score > bestSupertypeScore) {
                    bestSupertype = types[i];
                    bestSupertypeDownfallType = downfallType;
                    bestSupertypeScore = score;
                }
                if (bestSupertypeScore === types.length - 1) {
                    break;
                }
            }
            checkTypeSubtypeOf(bestSupertypeDownfallType, bestSupertype, errorLocation, ts.Diagnostics.Type_argument_candidate_1_is_not_a_valid_type_argument_because_it_is_not_a_supertype_of_candidate_0, errorMessageChainHead);
        }
        function isTypeOfObjectLiteral(type) {
            return (type.flags & 32768 /* Anonymous */) && type.symbol && (type.symbol.flags & 4096 /* ObjectLiteral */) ? true : false;
        }
        function isArrayType(type) {
            return type.flags & 4096 /* Reference */ && type.target === globalArrayType;
        }
        function isTupleLikeType(type) {
            return !!getPropertyOfType(type, "0");
        }
        function getWidenedTypeOfObjectLiteral(type) {
            var properties = getPropertiesOfObjectType(type);
            var members = {};
            ts.forEach(properties, function (p) {
                var symbol = createSymbol(p.flags | 67108864 /* Transient */, p.name);
                symbol.declarations = p.declarations;
                symbol.parent = p.parent;
                symbol.type = getWidenedType(getTypeOfSymbol(p));
                symbol.target = p;
                if (p.valueDeclaration)
                    symbol.valueDeclaration = p.valueDeclaration;
                members[symbol.name] = symbol;
            });
            var stringIndexType = getIndexTypeOfType(type, 0 /* String */);
            var numberIndexType = getIndexTypeOfType(type, 1 /* Number */);
            if (stringIndexType)
                stringIndexType = getWidenedType(stringIndexType);
            if (numberIndexType)
                numberIndexType = getWidenedType(numberIndexType);
            return createAnonymousType(type.symbol, members, emptyArray, emptyArray, stringIndexType, numberIndexType);
        }
        function getWidenedType(type) {
            if (type.flags & 131072 /* Unwidened */) {
                if (type.flags & (32 /* Undefined */ | 64 /* Null */)) {
                    return anyType;
                }
                if (type.flags & 16384 /* Union */) {
                    return getUnionType(ts.map(type.types, function (t) { return getWidenedType(t); }));
                }
                if (isTypeOfObjectLiteral(type)) {
                    return getWidenedTypeOfObjectLiteral(type);
                }
                if (isArrayType(type)) {
                    return createArrayType(getWidenedType(type.typeArguments[0]));
                }
            }
            return type;
        }
        function reportWideningErrorsInType(type) {
            if (type.flags & 16384 /* Union */) {
                var errorReported = false;
                ts.forEach(type.types, function (t) {
                    if (reportWideningErrorsInType(t)) {
                        errorReported = true;
                    }
                });
                return errorReported;
            }
            if (isArrayType(type)) {
                return reportWideningErrorsInType(type.typeArguments[0]);
            }
            if (isTypeOfObjectLiteral(type)) {
                var errorReported = false;
                ts.forEach(getPropertiesOfObjectType(type), function (p) {
                    var t = getTypeOfSymbol(p);
                    if (t.flags & 131072 /* Unwidened */) {
                        if (!reportWideningErrorsInType(t)) {
                            error(p.valueDeclaration, ts.Diagnostics.Object_literal_s_property_0_implicitly_has_an_1_type, p.name, typeToString(getWidenedType(t)));
                        }
                        errorReported = true;
                    }
                });
                return errorReported;
            }
            return false;
        }
        function reportImplicitAnyError(declaration, type) {
            var typeAsString = typeToString(getWidenedType(type));
            switch (declaration.kind) {
                case 126 /* PropertyDeclaration */:
                case 125 /* PropertySignature */:
                    var diagnostic = ts.Diagnostics.Member_0_implicitly_has_an_1_type;
                    break;
                case 124 /* Parameter */:
                    var diagnostic = declaration.dotDotDotToken ? ts.Diagnostics.Rest_parameter_0_implicitly_has_an_any_type : ts.Diagnostics.Parameter_0_implicitly_has_an_1_type;
                    break;
                case 190 /* FunctionDeclaration */:
                case 128 /* MethodDeclaration */:
                case 127 /* MethodSignature */:
                case 130 /* GetAccessor */:
                case 131 /* SetAccessor */:
                case 156 /* FunctionExpression */:
                case 157 /* ArrowFunction */:
                    if (!declaration.name) {
                        error(declaration, ts.Diagnostics.Function_expression_which_lacks_return_type_annotation_implicitly_has_an_0_return_type, typeAsString);
                        return;
                    }
                    var diagnostic = ts.Diagnostics._0_which_lacks_return_type_annotation_implicitly_has_an_1_return_type;
                    break;
                default:
                    var diagnostic = ts.Diagnostics.Variable_0_implicitly_has_an_1_type;
            }
            error(declaration, diagnostic, ts.declarationNameToString(declaration.name), typeAsString);
        }
        function reportErrorsFromWidening(declaration, type) {
            if (fullTypeCheck && compilerOptions.noImplicitAny && type.flags & 131072 /* Unwidened */) {
                if (!reportWideningErrorsInType(type)) {
                    reportImplicitAnyError(declaration, type);
                }
            }
        }
        function forEachMatchingParameterType(source, target, callback) {
            var sourceMax = source.parameters.length;
            var targetMax = target.parameters.length;
            var count;
            if (source.hasRestParameter && target.hasRestParameter) {
                count = sourceMax > targetMax ? sourceMax : targetMax;
                sourceMax--;
                targetMax--;
            }
            else if (source.hasRestParameter) {
                sourceMax--;
                count = targetMax;
            }
            else if (target.hasRestParameter) {
                targetMax--;
                count = sourceMax;
            }
            else {
                count = sourceMax < targetMax ? sourceMax : targetMax;
            }
            for (var i = 0; i < count; i++) {
                var s = i < sourceMax ? getTypeOfSymbol(source.parameters[i]) : getRestTypeOfSignature(source);
                var t = i < targetMax ? getTypeOfSymbol(target.parameters[i]) : getRestTypeOfSignature(target);
                callback(s, t);
            }
        }
        function createInferenceContext(typeParameters, inferUnionTypes) {
            var inferences = [];
            for (var i = 0; i < typeParameters.length; i++) {
                inferences.push({ primary: undefined, secondary: undefined });
            }
            return {
                typeParameters: typeParameters,
                inferUnionTypes: inferUnionTypes,
                inferenceCount: 0,
                inferences: inferences,
                inferredTypes: new Array(typeParameters.length)
            };
        }
        function inferTypes(context, source, target) {
            var sourceStack;
            var targetStack;
            var depth = 0;
            var inferiority = 0;
            inferFromTypes(source, target);
            function isInProcess(source, target) {
                for (var i = 0; i < depth; i++) {
                    if (source === sourceStack[i] && target === targetStack[i])
                        return true;
                }
                return false;
            }
            function isWithinDepthLimit(type, stack) {
                if (depth >= 5) {
                    var target = type.target;
                    var count = 0;
                    for (var i = 0; i < depth; i++) {
                        var t = stack[i];
                        if (t.flags & 4096 /* Reference */ && t.target === target)
                            count++;
                    }
                    return count < 5;
                }
                return true;
            }
            function inferFromTypes(source, target) {
                if (target.flags & 512 /* TypeParameter */) {
                    var typeParameters = context.typeParameters;
                    for (var i = 0; i < typeParameters.length; i++) {
                        if (target === typeParameters[i]) {
                            var inferences = context.inferences[i];
                            var candidates = inferiority ? inferences.secondary || (inferences.secondary = []) : inferences.primary || (inferences.primary = []);
                            if (!ts.contains(candidates, source))
                                candidates.push(source);
                            break;
                        }
                    }
                }
                else if (source.flags & 4096 /* Reference */ && target.flags & 4096 /* Reference */ && source.target === target.target) {
                    var sourceTypes = source.typeArguments;
                    var targetTypes = target.typeArguments;
                    for (var i = 0; i < sourceTypes.length; i++) {
                        inferFromTypes(sourceTypes[i], targetTypes[i]);
                    }
                }
                else if (target.flags & 16384 /* Union */) {
                    var targetTypes = target.types;
                    var typeParameterCount = 0;
                    var typeParameter;
                    for (var i = 0; i < targetTypes.length; i++) {
                        var t = targetTypes[i];
                        if (t.flags & 512 /* TypeParameter */ && ts.contains(context.typeParameters, t)) {
                            typeParameter = t;
                            typeParameterCount++;
                        }
                        else {
                            inferFromTypes(source, t);
                        }
                    }
                    if (typeParameterCount === 1) {
                        inferiority++;
                        inferFromTypes(source, typeParameter);
                        inferiority--;
                    }
                }
                else if (source.flags & 16384 /* Union */) {
                    var sourceTypes = source.types;
                    for (var i = 0; i < sourceTypes.length; i++) {
                        inferFromTypes(sourceTypes[i], target);
                    }
                }
                else if (source.flags & 48128 /* ObjectType */ && (target.flags & (4096 /* Reference */ | 8192 /* Tuple */) || (target.flags & 32768 /* Anonymous */) && target.symbol && target.symbol.flags & (8192 /* Method */ | 2048 /* TypeLiteral */))) {
                    if (!isInProcess(source, target) && isWithinDepthLimit(source, sourceStack) && isWithinDepthLimit(target, targetStack)) {
                        if (depth === 0) {
                            sourceStack = [];
                            targetStack = [];
                        }
                        sourceStack[depth] = source;
                        targetStack[depth] = target;
                        depth++;
                        inferFromProperties(source, target);
                        inferFromSignatures(source, target, 0 /* Call */);
                        inferFromSignatures(source, target, 1 /* Construct */);
                        inferFromIndexTypes(source, target, 0 /* String */, 0 /* String */);
                        inferFromIndexTypes(source, target, 1 /* Number */, 1 /* Number */);
                        inferFromIndexTypes(source, target, 0 /* String */, 1 /* Number */);
                        depth--;
                    }
                }
            }
            function inferFromProperties(source, target) {
                var properties = getPropertiesOfObjectType(target);
                for (var i = 0; i < properties.length; i++) {
                    var targetProp = properties[i];
                    var sourceProp = getPropertyOfObjectType(source, targetProp.name);
                    if (sourceProp) {
                        inferFromTypes(getTypeOfSymbol(sourceProp), getTypeOfSymbol(targetProp));
                    }
                }
            }
            function inferFromSignatures(source, target, kind) {
                var sourceSignatures = getSignaturesOfType(source, kind);
                var targetSignatures = getSignaturesOfType(target, kind);
                var sourceLen = sourceSignatures.length;
                var targetLen = targetSignatures.length;
                var len = sourceLen < targetLen ? sourceLen : targetLen;
                for (var i = 0; i < len; i++) {
                    inferFromSignature(getErasedSignature(sourceSignatures[sourceLen - len + i]), getErasedSignature(targetSignatures[targetLen - len + i]));
                }
            }
            function inferFromSignature(source, target) {
                forEachMatchingParameterType(source, target, inferFromTypes);
                inferFromTypes(getReturnTypeOfSignature(source), getReturnTypeOfSignature(target));
            }
            function inferFromIndexTypes(source, target, sourceKind, targetKind) {
                var targetIndexType = getIndexTypeOfType(target, targetKind);
                if (targetIndexType) {
                    var sourceIndexType = getIndexTypeOfType(source, sourceKind);
                    if (sourceIndexType) {
                        inferFromTypes(sourceIndexType, targetIndexType);
                    }
                }
            }
        }
        function getInferenceCandidates(context, index) {
            var inferences = context.inferences[index];
            return inferences.primary || inferences.secondary || emptyArray;
        }
        function getInferredType(context, index) {
            var inferredType = context.inferredTypes[index];
            if (!inferredType) {
                var inferences = getInferenceCandidates(context, index);
                if (inferences.length) {
                    var unionOrSuperType = context.inferUnionTypes ? getUnionType(inferences) : getCommonSupertype(inferences);
                    inferredType = unionOrSuperType ? getWidenedType(unionOrSuperType) : inferenceFailureType;
                }
                else {
                    inferredType = emptyObjectType;
                }
                if (inferredType !== inferenceFailureType) {
                    var constraint = getConstraintOfTypeParameter(context.typeParameters[index]);
                    inferredType = constraint && !isTypeAssignableTo(inferredType, constraint) ? constraint : inferredType;
                }
                context.inferredTypes[index] = inferredType;
            }
            return inferredType;
        }
        function getInferredTypes(context) {
            for (var i = 0; i < context.inferredTypes.length; i++) {
                getInferredType(context, i);
            }
            return context.inferredTypes;
        }
        function hasAncestor(node, kind) {
            return ts.getAncestor(node, kind) !== undefined;
        }
        function getResolvedSymbol(node) {
            var links = getNodeLinks(node);
            if (!links.resolvedSymbol) {
                links.resolvedSymbol = (ts.getFullWidth(node) > 0 && resolveName(node, node.text, 107455 /* Value */ | 1048576 /* ExportValue */, ts.Diagnostics.Cannot_find_name_0, node)) || unknownSymbol;
            }
            return links.resolvedSymbol;
        }
        function isInTypeQuery(node) {
            while (node) {
                switch (node.kind) {
                    case 138 /* TypeQuery */:
                        return true;
                    case 64 /* Identifier */:
                    case 121 /* QualifiedName */:
                        node = node.parent;
                        continue;
                    default:
                        return false;
                }
            }
            ts.Debug.fail("should not get here");
        }
        function subtractPrimitiveTypes(type, subtractMask) {
            if (type.flags & 16384 /* Union */) {
                var types = type.types;
                if (ts.forEach(types, function (t) { return t.flags & subtractMask; })) {
                    return getUnionType(ts.filter(types, function (t) { return !(t.flags & subtractMask); }));
                }
            }
            return type;
        }
        function hasInitializer(node) {
            return !!(node.initializer || ts.isBindingPattern(node.parent) && hasInitializer(node.parent.parent));
        }
        function isVariableAssignedWithin(symbol, node) {
            var links = getNodeLinks(node);
            if (links.assignmentChecks) {
                var cachedResult = links.assignmentChecks[symbol.id];
                if (cachedResult !== undefined) {
                    return cachedResult;
                }
            }
            else {
                links.assignmentChecks = {};
            }
            return links.assignmentChecks[symbol.id] = isAssignedIn(node);
            function isAssignedInBinaryExpression(node) {
                if (node.operator >= 52 /* FirstAssignment */ && node.operator <= 63 /* LastAssignment */) {
                    var n = node.left;
                    while (n.kind === 155 /* ParenthesizedExpression */) {
                        n = n.expression;
                    }
                    if (n.kind === 64 /* Identifier */ && getResolvedSymbol(n) === symbol) {
                        return true;
                    }
                }
                return ts.forEachChild(node, isAssignedIn);
            }
            function isAssignedInVariableDeclaration(node) {
                if (!ts.isBindingPattern(node.name) && getSymbolOfNode(node) === symbol && hasInitializer(node)) {
                    return true;
                }
                return ts.forEachChild(node, isAssignedIn);
            }
            function isAssignedIn(node) {
                switch (node.kind) {
                    case 163 /* BinaryExpression */:
                        return isAssignedInBinaryExpression(node);
                    case 189 /* VariableDeclaration */:
                    case 146 /* BindingElement */:
                        return isAssignedInVariableDeclaration(node);
                    case 144 /* ObjectBindingPattern */:
                    case 145 /* ArrayBindingPattern */:
                    case 147 /* ArrayLiteralExpression */:
                    case 148 /* ObjectLiteralExpression */:
                    case 149 /* PropertyAccessExpression */:
                    case 150 /* ElementAccessExpression */:
                    case 151 /* CallExpression */:
                    case 152 /* NewExpression */:
                    case 154 /* TypeAssertionExpression */:
                    case 155 /* ParenthesizedExpression */:
                    case 161 /* PrefixUnaryExpression */:
                    case 158 /* DeleteExpression */:
                    case 159 /* TypeOfExpression */:
                    case 160 /* VoidExpression */:
                    case 162 /* PostfixUnaryExpression */:
                    case 164 /* ConditionalExpression */:
                    case 169 /* Block */:
                    case 170 /* VariableStatement */:
                    case 172 /* ExpressionStatement */:
                    case 173 /* IfStatement */:
                    case 174 /* DoStatement */:
                    case 175 /* WhileStatement */:
                    case 176 /* ForStatement */:
                    case 177 /* ForInStatement */:
                    case 180 /* ReturnStatement */:
                    case 181 /* WithStatement */:
                    case 182 /* SwitchStatement */:
                    case 200 /* CaseClause */:
                    case 201 /* DefaultClause */:
                    case 183 /* LabeledStatement */:
                    case 184 /* ThrowStatement */:
                    case 185 /* TryStatement */:
                    case 186 /* TryBlock */:
                    case 203 /* CatchClause */:
                    case 187 /* FinallyBlock */:
                        return ts.forEachChild(node, isAssignedIn);
                }
                return false;
            }
        }
        function resolveLocation(node) {
            var containerNodes = [];
            for (var parent = node.parent; parent; parent = parent.parent) {
                if ((ts.isExpression(parent) || ts.isObjectLiteralMethod(node)) && isContextSensitive(parent)) {
                    containerNodes.unshift(parent);
                }
            }
            ts.forEach(containerNodes, function (node) {
                getTypeOfNode(node);
            });
        }
        function getSymbolAtLocation(node) {
            resolveLocation(node);
            return getSymbolInfo(node);
        }
        function getTypeAtLocation(node) {
            resolveLocation(node);
            return getTypeOfNode(node);
        }
        function getTypeOfSymbolAtLocation(symbol, node) {
            resolveLocation(node);
            return getNarrowedTypeOfSymbol(symbol, node);
        }
        function getNarrowedTypeOfSymbol(symbol, node) {
            var type = getTypeOfSymbol(symbol);
            if (node && symbol.flags & 3 /* Variable */ && type.flags & (48128 /* ObjectType */ | 16384 /* Union */ | 512 /* TypeParameter */)) {
                loop: while (node.parent) {
                    var child = node;
                    node = node.parent;
                    var narrowedType = type;
                    switch (node.kind) {
                        case 173 /* IfStatement */:
                            if (child !== node.expression) {
                                narrowedType = narrowType(type, node.expression, child === node.thenStatement);
                            }
                            break;
                        case 164 /* ConditionalExpression */:
                            if (child !== node.condition) {
                                narrowedType = narrowType(type, node.condition, child === node.whenTrue);
                            }
                            break;
                        case 163 /* BinaryExpression */:
                            if (child === node.right) {
                                if (node.operator === 48 /* AmpersandAmpersandToken */) {
                                    narrowedType = narrowType(type, node.left, true);
                                }
                                else if (node.operator === 49 /* BarBarToken */) {
                                    narrowedType = narrowType(type, node.left, false);
                                }
                            }
                            break;
                        case 207 /* SourceFile */:
                        case 195 /* ModuleDeclaration */:
                        case 190 /* FunctionDeclaration */:
                        case 128 /* MethodDeclaration */:
                        case 127 /* MethodSignature */:
                        case 130 /* GetAccessor */:
                        case 131 /* SetAccessor */:
                        case 129 /* Constructor */:
                            break loop;
                    }
                    if (narrowedType !== type && isTypeSubtypeOf(narrowedType, type)) {
                        if (isVariableAssignedWithin(symbol, node)) {
                            break;
                        }
                        type = narrowedType;
                    }
                }
            }
            return type;
            function narrowTypeByEquality(type, expr, assumeTrue) {
                if (expr.left.kind !== 159 /* TypeOfExpression */ || expr.right.kind !== 8 /* StringLiteral */) {
                    return type;
                }
                var left = expr.left;
                var right = expr.right;
                if (left.expression.kind !== 64 /* Identifier */ || getResolvedSymbol(left.expression) !== symbol) {
                    return type;
                }
                var t = right.text;
                var checkType = t === "string" ? stringType : t === "number" ? numberType : t === "boolean" ? booleanType : emptyObjectType;
                if (expr.operator === 31 /* ExclamationEqualsEqualsToken */) {
                    assumeTrue = !assumeTrue;
                }
                if (assumeTrue) {
                    return checkType === emptyObjectType ? subtractPrimitiveTypes(type, 2 /* String */ | 4 /* Number */ | 8 /* Boolean */) : checkType;
                }
                else {
                    return checkType === emptyObjectType ? type : subtractPrimitiveTypes(type, checkType.flags);
                }
            }
            function narrowTypeByAnd(type, expr, assumeTrue) {
                if (assumeTrue) {
                    return narrowType(narrowType(type, expr.left, true), expr.right, true);
                }
                else {
                    return getUnionType([
                        narrowType(type, expr.left, false),
                        narrowType(narrowType(type, expr.left, true), expr.right, false)
                    ]);
                }
            }
            function narrowTypeByOr(type, expr, assumeTrue) {
                if (assumeTrue) {
                    return getUnionType([
                        narrowType(type, expr.left, true),
                        narrowType(narrowType(type, expr.left, false), expr.right, true)
                    ]);
                }
                else {
                    return narrowType(narrowType(type, expr.left, false), expr.right, false);
                }
            }
            function narrowTypeByInstanceof(type, expr, assumeTrue) {
                if (!assumeTrue || expr.left.kind !== 64 /* Identifier */ || getResolvedSymbol(expr.left) !== symbol) {
                    return type;
                }
                var rightType = checkExpression(expr.right);
                if (!isTypeSubtypeOf(rightType, globalFunctionType)) {
                    return type;
                }
                var prototypeProperty = getPropertyOfType(rightType, "prototype");
                if (!prototypeProperty) {
                    return type;
                }
                var prototypeType = getTypeOfSymbol(prototypeProperty);
                return isTypeSubtypeOf(prototypeType, type) ? prototypeType : type;
            }
            function narrowType(type, expr, assumeTrue) {
                switch (expr.kind) {
                    case 155 /* ParenthesizedExpression */:
                        return narrowType(type, expr.expression, assumeTrue);
                    case 163 /* BinaryExpression */:
                        var operator = expr.operator;
                        if (operator === 30 /* EqualsEqualsEqualsToken */ || operator === 31 /* ExclamationEqualsEqualsToken */) {
                            return narrowTypeByEquality(type, expr, assumeTrue);
                        }
                        else if (operator === 48 /* AmpersandAmpersandToken */) {
                            return narrowTypeByAnd(type, expr, assumeTrue);
                        }
                        else if (operator === 49 /* BarBarToken */) {
                            return narrowTypeByOr(type, expr, assumeTrue);
                        }
                        else if (operator === 86 /* InstanceOfKeyword */) {
                            return narrowTypeByInstanceof(type, expr, assumeTrue);
                        }
                        break;
                    case 161 /* PrefixUnaryExpression */:
                        if (expr.operator === 46 /* ExclamationToken */) {
                            return narrowType(type, expr.operand, !assumeTrue);
                        }
                        break;
                }
                return type;
            }
        }
        function checkIdentifier(node) {
            var symbol = getResolvedSymbol(node);
            if (symbol.flags & 8388608 /* Import */) {
                getSymbolLinks(symbol).referenced = getSymbolLinks(symbol).referenced || (!isInTypeQuery(node) && !isConstEnumOrConstEnumOnlyModule(resolveImport(symbol)));
            }
            checkCollisionWithCapturedSuperVariable(node, node);
            checkCollisionWithCapturedThisVariable(node, node);
            return getNarrowedTypeOfSymbol(getExportSymbolOfValueSymbolIfExported(symbol), node);
        }
        function captureLexicalThis(node, container) {
            var classNode = container.parent && container.parent.kind === 191 /* ClassDeclaration */ ? container.parent : undefined;
            getNodeLinks(node).flags |= 2 /* LexicalThis */;
            if (container.kind === 126 /* PropertyDeclaration */ || container.kind === 129 /* Constructor */) {
                getNodeLinks(classNode).flags |= 4 /* CaptureThis */;
            }
            else {
                getNodeLinks(container).flags |= 4 /* CaptureThis */;
            }
        }
        function checkThisExpression(node) {
            var container = ts.getThisContainer(node, true);
            var needToCaptureLexicalThis = false;
            if (container.kind === 157 /* ArrowFunction */) {
                container = ts.getThisContainer(container, false);
                needToCaptureLexicalThis = true;
            }
            switch (container.kind) {
                case 195 /* ModuleDeclaration */:
                    error(node, ts.Diagnostics.this_cannot_be_referenced_in_a_module_body);
                    break;
                case 194 /* EnumDeclaration */:
                    error(node, ts.Diagnostics.this_cannot_be_referenced_in_current_location);
                    break;
                case 129 /* Constructor */:
                    if (isInConstructorArgumentInitializer(node, container)) {
                        error(node, ts.Diagnostics.this_cannot_be_referenced_in_constructor_arguments);
                    }
                    break;
                case 126 /* PropertyDeclaration */:
                case 125 /* PropertySignature */:
                    if (container.flags & 128 /* Static */) {
                        error(node, ts.Diagnostics.this_cannot_be_referenced_in_a_static_property_initializer);
                    }
                    break;
            }
            if (needToCaptureLexicalThis) {
                captureLexicalThis(node, container);
            }
            var classNode = container.parent && container.parent.kind === 191 /* ClassDeclaration */ ? container.parent : undefined;
            if (classNode) {
                var symbol = getSymbolOfNode(classNode);
                return container.flags & 128 /* Static */ ? getTypeOfSymbol(symbol) : getDeclaredTypeOfSymbol(symbol);
            }
            return anyType;
        }
        function getSuperContainer(node) {
            while (true) {
                node = node.parent;
                if (!node)
                    return node;
                switch (node.kind) {
                    case 190 /* FunctionDeclaration */:
                    case 156 /* FunctionExpression */:
                    case 157 /* ArrowFunction */:
                    case 126 /* PropertyDeclaration */:
                    case 125 /* PropertySignature */:
                    case 128 /* MethodDeclaration */:
                    case 127 /* MethodSignature */:
                    case 129 /* Constructor */:
                    case 130 /* GetAccessor */:
                    case 131 /* SetAccessor */:
                        return node;
                }
            }
        }
        function isInConstructorArgumentInitializer(node, constructorDecl) {
            for (var n = node; n && n !== constructorDecl; n = n.parent) {
                if (n.kind === 124 /* Parameter */) {
                    return true;
                }
            }
            return false;
        }
        function checkSuperExpression(node) {
            var isCallExpression = node.parent.kind === 151 /* CallExpression */ && node.parent.expression === node;
            var enclosingClass = ts.getAncestor(node, 191 /* ClassDeclaration */);
            var baseClass;
            if (enclosingClass && ts.getClassBaseTypeNode(enclosingClass)) {
                var classType = getDeclaredTypeOfSymbol(getSymbolOfNode(enclosingClass));
                baseClass = classType.baseTypes.length && classType.baseTypes[0];
            }
            if (!baseClass) {
                error(node, ts.Diagnostics.super_can_only_be_referenced_in_a_derived_class);
                return unknownType;
            }
            var container = getSuperContainer(node);
            if (container) {
                var canUseSuperExpression = false;
                if (isCallExpression) {
                    canUseSuperExpression = container.kind === 129 /* Constructor */;
                }
                else {
                    var needToCaptureLexicalThis = false;
                    while (container && container.kind === 157 /* ArrowFunction */) {
                        container = getSuperContainer(container);
                        needToCaptureLexicalThis = true;
                    }
                    if (container && container.parent && container.parent.kind === 191 /* ClassDeclaration */) {
                        if (container.flags & 128 /* Static */) {
                            canUseSuperExpression = container.kind === 128 /* MethodDeclaration */ || container.kind === 127 /* MethodSignature */ || container.kind === 130 /* GetAccessor */ || container.kind === 131 /* SetAccessor */;
                        }
                        else {
                            canUseSuperExpression = container.kind === 128 /* MethodDeclaration */ || container.kind === 127 /* MethodSignature */ || container.kind === 130 /* GetAccessor */ || container.kind === 131 /* SetAccessor */ || container.kind === 126 /* PropertyDeclaration */ || container.kind === 125 /* PropertySignature */ || container.kind === 129 /* Constructor */;
                        }
                    }
                }
                if (canUseSuperExpression) {
                    var returnType;
                    if ((container.flags & 128 /* Static */) || isCallExpression) {
                        getNodeLinks(node).flags |= 32 /* SuperStatic */;
                        returnType = getTypeOfSymbol(baseClass.symbol);
                    }
                    else {
                        getNodeLinks(node).flags |= 16 /* SuperInstance */;
                        returnType = baseClass;
                    }
                    if (container.kind === 129 /* Constructor */ && isInConstructorArgumentInitializer(node, container)) {
                        error(node, ts.Diagnostics.super_cannot_be_referenced_in_constructor_arguments);
                        returnType = unknownType;
                    }
                    if (!isCallExpression && needToCaptureLexicalThis) {
                        captureLexicalThis(node.parent, container);
                    }
                    return returnType;
                }
            }
            if (isCallExpression) {
                error(node, ts.Diagnostics.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors);
            }
            else {
                error(node, ts.Diagnostics.super_property_access_is_permitted_only_in_a_constructor_member_function_or_member_accessor_of_a_derived_class);
            }
            return unknownType;
        }
        function getContextuallyTypedParameterType(parameter) {
            if (isFunctionExpressionOrArrowFunction(parameter.parent)) {
                var func = parameter.parent;
                if (isContextSensitive(func)) {
                    var contextualSignature = getContextualSignature(func);
                    if (contextualSignature) {
                        var funcHasRestParameters = ts.hasRestParameters(func);
                        var len = func.parameters.length - (funcHasRestParameters ? 1 : 0);
                        var indexOfParameter = ts.indexOf(func.parameters, parameter);
                        if (indexOfParameter < len) {
                            return getTypeAtPosition(contextualSignature, indexOfParameter);
                        }
                        if (indexOfParameter === (func.parameters.length - 1) && funcHasRestParameters && contextualSignature.hasRestParameter && func.parameters.length >= contextualSignature.parameters.length) {
                            return getTypeOfSymbol(contextualSignature.parameters[contextualSignature.parameters.length - 1]);
                        }
                    }
                }
            }
            return undefined;
        }
        function getContextualTypeForInitializerExpression(node) {
            var declaration = node.parent;
            if (node === declaration.initializer) {
                if (declaration.type) {
                    return getTypeFromTypeNode(declaration.type);
                }
                if (declaration.kind === 124 /* Parameter */) {
                    var type = getContextuallyTypedParameterType(declaration);
                    if (type) {
                        return type;
                    }
                }
                if (ts.isBindingPattern(declaration.name)) {
                    return getTypeFromBindingPattern(declaration.name);
                }
            }
            return undefined;
        }
        function getContextualTypeForReturnExpression(node) {
            var func = ts.getContainingFunction(node);
            if (func) {
                if (func.type || func.kind === 129 /* Constructor */ || func.kind === 130 /* GetAccessor */ && getSetAccessorTypeAnnotationNode(ts.getDeclarationOfKind(func.symbol, 131 /* SetAccessor */))) {
                    return getReturnTypeOfSignature(getSignatureFromDeclaration(func));
                }
                var signature = getContextualSignatureForFunctionLikeDeclaration(func);
                if (signature) {
                    return getReturnTypeOfSignature(signature);
                }
            }
            return undefined;
        }
        function getContextualTypeForArgument(node) {
            var callExpression = node.parent;
            var argIndex = ts.indexOf(callExpression.arguments, node);
            if (argIndex >= 0) {
                var signature = getResolvedSignature(callExpression);
                return getTypeAtPosition(signature, argIndex);
            }
            return undefined;
        }
        function getContextualTypeForBinaryOperand(node) {
            var binaryExpression = node.parent;
            var operator = binaryExpression.operator;
            if (operator >= 52 /* FirstAssignment */ && operator <= 63 /* LastAssignment */) {
                if (node === binaryExpression.right) {
                    return checkExpression(binaryExpression.left);
                }
            }
            else if (operator === 49 /* BarBarToken */) {
                var type = getContextualType(binaryExpression);
                if (!type && node === binaryExpression.right) {
                    type = checkExpression(binaryExpression.left);
                }
                return type;
            }
            return undefined;
        }
        function applyToContextualType(type, mapper) {
            if (!(type.flags & 16384 /* Union */)) {
                return mapper(type);
            }
            var types = type.types;
            var mappedType;
            var mappedTypes;
            for (var i = 0; i < types.length; i++) {
                var t = mapper(types[i]);
                if (t) {
                    if (!mappedType) {
                        mappedType = t;
                    }
                    else if (!mappedTypes) {
                        mappedTypes = [mappedType, t];
                    }
                    else {
                        mappedTypes.push(t);
                    }
                }
            }
            return mappedTypes ? getUnionType(mappedTypes) : mappedType;
        }
        function getTypeOfPropertyOfContextualType(type, name) {
            return applyToContextualType(type, function (t) {
                var prop = getPropertyOfObjectType(t, name);
                return prop ? getTypeOfSymbol(prop) : undefined;
            });
        }
        function getIndexTypeOfContextualType(type, kind) {
            return applyToContextualType(type, function (t) { return getIndexTypeOfObjectOrUnionType(t, kind); });
        }
        function contextualTypeIsTupleLikeType(type) {
            return !!(type.flags & 16384 /* Union */ ? ts.forEach(type.types, function (t) { return isTupleLikeType(t); }) : isTupleLikeType(type));
        }
        function contextualTypeHasIndexSignature(type, kind) {
            return !!(type.flags & 16384 /* Union */ ? ts.forEach(type.types, function (t) { return getIndexTypeOfObjectOrUnionType(t, kind); }) : getIndexTypeOfObjectOrUnionType(type, kind));
        }
        function getContextualTypeForObjectLiteralMethod(node) {
            ts.Debug.assert(ts.isObjectLiteralMethod(node));
            if (isInsideWithStatementBody(node)) {
                return undefined;
            }
            return getContextualTypeForObjectLiteralElement(node);
        }
        function getContextualTypeForObjectLiteralElement(element) {
            var objectLiteral = element.parent;
            var type = getContextualType(objectLiteral);
            var name = element.name.text;
            if (type && name) {
                return getTypeOfPropertyOfContextualType(type, name) || isNumericName(name) && getIndexTypeOfContextualType(type, 1 /* Number */) || getIndexTypeOfContextualType(type, 0 /* String */);
            }
            return undefined;
        }
        function getContextualTypeForElementExpression(node) {
            var arrayLiteral = node.parent;
            var type = getContextualType(arrayLiteral);
            if (type) {
                var index = ts.indexOf(arrayLiteral.elements, node);
                return getTypeOfPropertyOfContextualType(type, "" + index) || getIndexTypeOfContextualType(type, 1 /* Number */);
            }
            return undefined;
        }
        function getContextualTypeForConditionalOperand(node) {
            var conditional = node.parent;
            return node === conditional.whenTrue || node === conditional.whenFalse ? getContextualType(conditional) : undefined;
        }
        function getContextualType(node) {
            if (isInsideWithStatementBody(node)) {
                return undefined;
            }
            if (node.contextualType) {
                return node.contextualType;
            }
            var parent = node.parent;
            switch (parent.kind) {
                case 189 /* VariableDeclaration */:
                case 124 /* Parameter */:
                case 126 /* PropertyDeclaration */:
                case 125 /* PropertySignature */:
                case 146 /* BindingElement */:
                    return getContextualTypeForInitializerExpression(node);
                case 157 /* ArrowFunction */:
                case 180 /* ReturnStatement */:
                    return getContextualTypeForReturnExpression(node);
                case 151 /* CallExpression */:
                case 152 /* NewExpression */:
                    return getContextualTypeForArgument(node);
                case 154 /* TypeAssertionExpression */:
                    return getTypeFromTypeNode(parent.type);
                case 163 /* BinaryExpression */:
                    return getContextualTypeForBinaryOperand(node);
                case 204 /* PropertyAssignment */:
                    return getContextualTypeForObjectLiteralElement(parent);
                case 147 /* ArrayLiteralExpression */:
                    return getContextualTypeForElementExpression(node);
                case 164 /* ConditionalExpression */:
                    return getContextualTypeForConditionalOperand(node);
            }
            return undefined;
        }
        function getNonGenericSignature(type) {
            var signatures = getSignaturesOfObjectOrUnionType(type, 0 /* Call */);
            if (signatures.length === 1) {
                var signature = signatures[0];
                if (!signature.typeParameters) {
                    return signature;
                }
            }
        }
        function isFunctionExpressionOrArrowFunction(node) {
            return node.kind === 156 /* FunctionExpression */ || node.kind === 157 /* ArrowFunction */;
        }
        function getContextualSignatureForFunctionLikeDeclaration(node) {
            return isFunctionExpressionOrArrowFunction(node) ? getContextualSignature(node) : undefined;
        }
        function getContextualSignature(node) {
            ts.Debug.assert(node.kind !== 128 /* MethodDeclaration */ || ts.isObjectLiteralMethod(node));
            var type = ts.isObjectLiteralMethod(node) ? getContextualTypeForObjectLiteralMethod(node) : getContextualType(node);
            if (!type) {
                return undefined;
            }
            if (!(type.flags & 16384 /* Union */)) {
                return getNonGenericSignature(type);
            }
            var signatureList;
            var types = type.types;
            for (var i = 0; i < types.length; i++) {
                if (signatureList && getSignaturesOfObjectOrUnionType(types[i], 0 /* Call */).length > 1) {
                    return undefined;
                }
                var signature = getNonGenericSignature(types[i]);
                if (signature) {
                    if (!signatureList) {
                        signatureList = [signature];
                    }
                    else if (!compareSignatures(signatureList[0], signature, false, compareTypes)) {
                        return undefined;
                    }
                    else {
                        signatureList.push(signature);
                    }
                }
            }
            var result;
            if (signatureList) {
                result = cloneSignature(signatureList[0]);
                result.resolvedReturnType = undefined;
                result.unionSignatures = signatureList;
            }
            return result;
        }
        function isInferentialContext(mapper) {
            return mapper && mapper !== identityMapper;
        }
        function isAssignmentTarget(node) {
            var parent = node.parent;
            if (parent.kind === 163 /* BinaryExpression */ && parent.operator === 52 /* EqualsToken */ && parent.left === node) {
                return true;
            }
            if (parent.kind === 204 /* PropertyAssignment */) {
                return isAssignmentTarget(parent.parent);
            }
            if (parent.kind === 147 /* ArrayLiteralExpression */) {
                return isAssignmentTarget(parent);
            }
            return false;
        }
        function checkArrayLiteral(node, contextualMapper) {
            var elements = node.elements;
            if (!elements.length) {
                return createArrayType(undefinedType);
            }
            var elementTypes = ts.map(elements, function (e) { return checkExpression(e, contextualMapper); });
            var contextualType = getContextualType(node);
            if ((contextualType && contextualTypeIsTupleLikeType(contextualType)) || isAssignmentTarget(node)) {
                return createTupleType(elementTypes);
            }
            return createArrayType(getUnionType(elementTypes));
        }
        function isNumericName(name) {
            return (+name).toString() === name;
        }
        function checkObjectLiteral(node, contextualMapper) {
            var members = node.symbol.members;
            var properties = {};
            var contextualType = getContextualType(node);
            var typeFlags;
            for (var id in members) {
                if (ts.hasProperty(members, id)) {
                    var member = members[id];
                    if (member.flags & 4 /* Property */ || ts.isObjectLiteralMethod(member.declarations[0])) {
                        var memberDecl = member.declarations[0];
                        if (memberDecl.kind === 204 /* PropertyAssignment */) {
                            var type = checkExpression(memberDecl.initializer, contextualMapper);
                        }
                        else if (memberDecl.kind === 128 /* MethodDeclaration */) {
                            var type = checkObjectLiteralMethod(memberDecl, contextualMapper);
                        }
                        else {
                            ts.Debug.assert(memberDecl.kind === 205 /* ShorthandPropertyAssignment */);
                            var type = memberDecl.name.kind === 122 /* ComputedPropertyName */ ? unknownType : checkExpression(memberDecl.name, contextualMapper);
                        }
                        typeFlags |= type.flags;
                        var prop = createSymbol(4 /* Property */ | 67108864 /* Transient */ | member.flags, member.name);
                        prop.declarations = member.declarations;
                        prop.parent = member.parent;
                        if (member.valueDeclaration) {
                            prop.valueDeclaration = member.valueDeclaration;
                        }
                        prop.type = type;
                        prop.target = member;
                        member = prop;
                    }
                    else {
                        var getAccessor = ts.getDeclarationOfKind(member, 130 /* GetAccessor */);
                        if (getAccessor) {
                            checkAccessorDeclaration(getAccessor);
                        }
                        var setAccessor = ts.getDeclarationOfKind(member, 131 /* SetAccessor */);
                        if (setAccessor) {
                            checkAccessorDeclaration(setAccessor);
                        }
                    }
                    properties[member.name] = member;
                }
            }
            var stringIndexType = getIndexType(0 /* String */);
            var numberIndexType = getIndexType(1 /* Number */);
            var result = createAnonymousType(node.symbol, properties, emptyArray, emptyArray, stringIndexType, numberIndexType);
            result.flags |= (typeFlags & 131072 /* Unwidened */);
            return result;
            function getIndexType(kind) {
                if (contextualType && contextualTypeHasIndexSignature(contextualType, kind)) {
                    var propTypes = [];
                    for (var id in properties) {
                        if (ts.hasProperty(properties, id)) {
                            if (kind === 0 /* String */ || isNumericName(id)) {
                                var type = getTypeOfSymbol(properties[id]);
                                if (!ts.contains(propTypes, type)) {
                                    propTypes.push(type);
                                }
                            }
                        }
                    }
                    return propTypes.length ? getUnionType(propTypes) : undefinedType;
                }
                return undefined;
            }
        }
        function getDeclarationKindFromSymbol(s) {
            return s.valueDeclaration ? s.valueDeclaration.kind : 126 /* PropertyDeclaration */;
        }
        function getDeclarationFlagsFromSymbol(s) {
            return s.valueDeclaration ? s.valueDeclaration.flags : s.flags & 134217728 /* Prototype */ ? 16 /* Public */ | 128 /* Static */ : 0;
        }
        function checkClassPropertyAccess(node, left, type, prop) {
            var flags = getDeclarationFlagsFromSymbol(prop);
            if (!(flags & (32 /* Private */ | 64 /* Protected */))) {
                return;
            }
            var enclosingClassDeclaration = ts.getAncestor(node, 191 /* ClassDeclaration */);
            var enclosingClass = enclosingClassDeclaration ? getDeclaredTypeOfSymbol(getSymbolOfNode(enclosingClassDeclaration)) : undefined;
            var declaringClass = getDeclaredTypeOfSymbol(prop.parent);
            if (flags & 32 /* Private */) {
                if (declaringClass !== enclosingClass) {
                    error(node, ts.Diagnostics.Property_0_is_private_and_only_accessible_within_class_1, symbolToString(prop), typeToString(declaringClass));
                }
                return;
            }
            if (left.kind === 90 /* SuperKeyword */) {
                return;
            }
            if (!enclosingClass || !hasBaseType(enclosingClass, declaringClass)) {
                error(node, ts.Diagnostics.Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses, symbolToString(prop), typeToString(declaringClass));
                return;
            }
            if (flags & 128 /* Static */) {
                return;
            }
            if (!(getTargetType(type).flags & (1024 /* Class */ | 2048 /* Interface */) && hasBaseType(type, enclosingClass))) {
                error(node, ts.Diagnostics.Property_0_is_protected_and_only_accessible_through_an_instance_of_class_1, symbolToString(prop), typeToString(enclosingClass));
            }
        }
        function checkPropertyAccessExpression(node) {
            return checkPropertyAccessExpressionOrQualifiedName(node, node.expression, node.name);
        }
        function checkQualifiedName(node) {
            return checkPropertyAccessExpressionOrQualifiedName(node, node.left, node.right);
        }
        function checkPropertyAccessExpressionOrQualifiedName(node, left, right) {
            var type = checkExpressionOrQualifiedName(left);
            if (type === unknownType)
                return type;
            if (type !== anyType) {
                var apparentType = getApparentType(getWidenedType(type));
                if (apparentType === unknownType) {
                    return unknownType;
                }
                var prop = getPropertyOfType(apparentType, right.text);
                if (!prop) {
                    if (right.text) {
                        error(right, ts.Diagnostics.Property_0_does_not_exist_on_type_1, ts.declarationNameToString(right), typeToString(type));
                    }
                    return unknownType;
                }
                getNodeLinks(node).resolvedSymbol = prop;
                if (prop.parent && prop.parent.flags & 32 /* Class */) {
                    if (left.kind === 90 /* SuperKeyword */ && getDeclarationKindFromSymbol(prop) !== 128 /* MethodDeclaration */) {
                        error(right, ts.Diagnostics.Only_public_and_protected_methods_of_the_base_class_are_accessible_via_the_super_keyword);
                    }
                    else {
                        checkClassPropertyAccess(node, left, type, prop);
                    }
                }
                return getTypeOfSymbol(prop);
            }
            return anyType;
        }
        function isValidPropertyAccess(node, propertyName) {
            var left = node.kind === 149 /* PropertyAccessExpression */ ? node.expression : node.left;
            var type = checkExpressionOrQualifiedName(left);
            if (type !== unknownType && type !== anyType) {
                var prop = getPropertyOfType(getWidenedType(type), propertyName);
                if (prop && prop.parent && prop.parent.flags & 32 /* Class */) {
                    if (left.kind === 90 /* SuperKeyword */ && getDeclarationKindFromSymbol(prop) !== 128 /* MethodDeclaration */) {
                        return false;
                    }
                    else {
                        var diagnosticsCount = diagnostics.length;
                        checkClassPropertyAccess(node, left, type, prop);
                        return diagnostics.length === diagnosticsCount;
                    }
                }
            }
            return true;
        }
        function checkIndexedAccess(node) {
            var objectType = getApparentType(checkExpression(node.expression));
            var indexType = node.argumentExpression ? checkExpression(node.argumentExpression) : unknownType;
            if (objectType === unknownType) {
                return unknownType;
            }
            if (isConstEnumObjectType(objectType) && node.argumentExpression && node.argumentExpression.kind !== 8 /* StringLiteral */) {
                error(node.argumentExpression, ts.Diagnostics.Index_expression_arguments_in_const_enums_must_be_of_type_string);
            }
            if (node.argumentExpression) {
                if (node.argumentExpression.kind === 8 /* StringLiteral */ || node.argumentExpression.kind === 7 /* NumericLiteral */) {
                    var name = node.argumentExpression.text;
                    var prop = getPropertyOfType(objectType, name);
                    if (prop) {
                        getNodeLinks(node).resolvedSymbol = prop;
                        return getTypeOfSymbol(prop);
                    }
                }
            }
            if (indexType.flags & (1 /* Any */ | 258 /* StringLike */ | 132 /* NumberLike */)) {
                if (indexType.flags & (1 /* Any */ | 132 /* NumberLike */)) {
                    var numberIndexType = getIndexTypeOfType(objectType, 1 /* Number */);
                    if (numberIndexType) {
                        return numberIndexType;
                    }
                }
                var stringIndexType = getIndexTypeOfType(objectType, 0 /* String */);
                if (stringIndexType) {
                    return stringIndexType;
                }
                if (compilerOptions.noImplicitAny && !compilerOptions.suppressImplicitAnyIndexErrors && objectType !== anyType) {
                    error(node, ts.Diagnostics.Index_signature_of_object_type_implicitly_has_an_any_type);
                }
                return anyType;
            }
            error(node, ts.Diagnostics.An_index_expression_argument_must_be_of_type_string_number_or_any);
            return unknownType;
        }
        function resolveUntypedCall(node) {
            if (node.kind === 153 /* TaggedTemplateExpression */) {
                checkExpression(node.template);
            }
            else {
                ts.forEach(node.arguments, function (argument) {
                    checkExpression(argument);
                });
            }
            return anySignature;
        }
        function resolveErrorCall(node) {
            resolveUntypedCall(node);
            return unknownSignature;
        }
        function hasCorrectArity(node, args, signature) {
            var adjustedArgCount;
            var typeArguments;
            var callIsIncomplete;
            if (node.kind === 153 /* TaggedTemplateExpression */) {
                var tagExpression = node;
                adjustedArgCount = args.length;
                typeArguments = undefined;
                if (tagExpression.template.kind === 165 /* TemplateExpression */) {
                    var templateExpression = tagExpression.template;
                    var lastSpan = ts.lastOrUndefined(templateExpression.templateSpans);
                    ts.Debug.assert(lastSpan !== undefined);
                    callIsIncomplete = ts.getFullWidth(lastSpan.literal) === 0 || !!lastSpan.literal.isUnterminated;
                }
                else {
                    var templateLiteral = tagExpression.template;
                    ts.Debug.assert(templateLiteral.kind === 10 /* NoSubstitutionTemplateLiteral */);
                    callIsIncomplete = !!templateLiteral.isUnterminated;
                }
            }
            else {
                var callExpression = node;
                if (!callExpression.arguments) {
                    ts.Debug.assert(callExpression.kind === 152 /* NewExpression */);
                    return signature.minArgumentCount === 0;
                }
                adjustedArgCount = callExpression.arguments.hasTrailingComma ? args.length + 1 : args.length;
                callIsIncomplete = callExpression.arguments.end === callExpression.end;
                typeArguments = callExpression.typeArguments;
            }
            ts.Debug.assert(adjustedArgCount !== undefined, "'adjustedArgCount' undefined");
            ts.Debug.assert(callIsIncomplete !== undefined, "'callIsIncomplete' undefined");
            return checkArity(adjustedArgCount, typeArguments, callIsIncomplete, signature);
            function checkArity(adjustedArgCount, typeArguments, callIsIncomplete, signature) {
                if (!signature.hasRestParameter && adjustedArgCount > signature.parameters.length) {
                    return false;
                }
                var hasRightNumberOfTypeArgs = !typeArguments || (signature.typeParameters && typeArguments.length === signature.typeParameters.length);
                if (!hasRightNumberOfTypeArgs) {
                    return false;
                }
                var hasEnoughArguments = adjustedArgCount >= signature.minArgumentCount;
                return callIsIncomplete || hasEnoughArguments;
            }
        }
        function getSingleCallSignature(type) {
            if (type.flags & 48128 /* ObjectType */) {
                var resolved = resolveObjectOrUnionTypeMembers(type);
                if (resolved.callSignatures.length === 1 && resolved.constructSignatures.length === 0 && resolved.properties.length === 0 && !resolved.stringIndexType && !resolved.numberIndexType) {
                    return resolved.callSignatures[0];
                }
            }
            return undefined;
        }
        function instantiateSignatureInContextOf(signature, contextualSignature, contextualMapper) {
            var context = createInferenceContext(signature.typeParameters, true);
            forEachMatchingParameterType(contextualSignature, signature, function (source, target) {
                inferTypes(context, instantiateType(source, contextualMapper), target);
            });
            return getSignatureInstantiation(signature, getInferredTypes(context));
        }
        function inferTypeArguments(signature, args, excludeArgument) {
            var typeParameters = signature.typeParameters;
            var context = createInferenceContext(typeParameters, false);
            var mapper = createInferenceMapper(context);
            for (var i = 0; i < args.length; i++) {
                if (args[i].kind === 167 /* OmittedExpression */) {
                    continue;
                }
                if (!excludeArgument || excludeArgument[i] === undefined) {
                    var parameterType = getTypeAtPosition(signature, i);
                    if (i === 0 && args[i].parent.kind === 153 /* TaggedTemplateExpression */) {
                        inferTypes(context, globalTemplateStringsArrayType, parameterType);
                        continue;
                    }
                    inferTypes(context, checkExpressionWithContextualType(args[i], parameterType, mapper), parameterType);
                }
            }
            if (excludeArgument) {
                for (var i = 0; i < args.length; i++) {
                    if (args[i].kind === 167 /* OmittedExpression */) {
                        continue;
                    }
                    if (excludeArgument[i] === false) {
                        var parameterType = getTypeAtPosition(signature, i);
                        inferTypes(context, checkExpressionWithContextualType(args[i], parameterType, mapper), parameterType);
                    }
                }
            }
            var inferredTypes = getInferredTypes(context);
            context.failedTypeParameterIndex = ts.indexOf(inferredTypes, inferenceFailureType);
            for (var i = 0; i < inferredTypes.length; i++) {
                if (inferredTypes[i] === inferenceFailureType) {
                    inferredTypes[i] = unknownType;
                }
            }
            return context;
        }
        function checkTypeArguments(signature, typeArguments, typeArgumentResultTypes, reportErrors) {
            var typeParameters = signature.typeParameters;
            var typeArgumentsAreAssignable = true;
            for (var i = 0; i < typeParameters.length; i++) {
                var typeArgNode = typeArguments[i];
                var typeArgument = getTypeFromTypeNode(typeArgNode);
                typeArgumentResultTypes[i] = typeArgument;
                if (typeArgumentsAreAssignable) {
                    var constraint = getConstraintOfTypeParameter(typeParameters[i]);
                    if (constraint) {
                        typeArgumentsAreAssignable = checkTypeAssignableTo(typeArgument, constraint, reportErrors ? typeArgNode : undefined, ts.Diagnostics.Type_0_does_not_satisfy_the_constraint_1);
                    }
                }
            }
            return typeArgumentsAreAssignable;
        }
        function checkApplicableSignature(node, args, signature, relation, excludeArgument, reportErrors) {
            for (var i = 0; i < args.length; i++) {
                var arg = args[i];
                var argType;
                if (arg.kind === 167 /* OmittedExpression */) {
                    continue;
                }
                var paramType = getTypeAtPosition(signature, i);
                if (i === 0 && node.kind === 153 /* TaggedTemplateExpression */) {
                    argType = globalTemplateStringsArrayType;
                }
                else {
                    argType = arg.kind === 8 /* StringLiteral */ && !reportErrors ? getStringLiteralType(arg) : checkExpressionWithContextualType(arg, paramType, excludeArgument && excludeArgument[i] ? identityMapper : undefined);
                }
                var isValidArgument = checkTypeRelatedTo(argType, paramType, relation, reportErrors ? arg : undefined, ts.Diagnostics.Argument_of_type_0_is_not_assignable_to_parameter_of_type_1);
                if (!isValidArgument) {
                    return false;
                }
            }
            return true;
        }
        function getEffectiveCallArguments(node) {
            var args;
            if (node.kind === 153 /* TaggedTemplateExpression */) {
                var template = node.template;
                args = [template];
                if (template.kind === 165 /* TemplateExpression */) {
                    ts.forEach(template.templateSpans, function (span) {
                        args.push(span.expression);
                    });
                }
            }
            else {
                args = node.arguments || emptyArray;
            }
            return args;
        }
        function resolveCall(node, signatures, candidatesOutArray) {
            var isTaggedTemplate = node.kind === 153 /* TaggedTemplateExpression */;
            var typeArguments = isTaggedTemplate ? undefined : node.typeArguments;
            ts.forEach(typeArguments, checkSourceElement);
            var candidates = candidatesOutArray || [];
            collectCandidates();
            if (!candidates.length) {
                error(node, ts.Diagnostics.Supplied_parameters_do_not_match_any_signature_of_call_target);
                return resolveErrorCall(node);
            }
            var args = getEffectiveCallArguments(node);
            var excludeArgument;
            for (var i = isTaggedTemplate ? 1 : 0; i < args.length; i++) {
                if (isContextSensitive(args[i])) {
                    if (!excludeArgument) {
                        excludeArgument = new Array(args.length);
                    }
                    excludeArgument[i] = true;
                }
            }
            var candidateForArgumentError;
            var candidateForTypeArgumentError;
            var resultOfFailedInference;
            var result;
            if (candidates.length > 1) {
                result = chooseOverload(candidates, subtypeRelation);
            }
            if (!result) {
                candidateForArgumentError = undefined;
                candidateForTypeArgumentError = undefined;
                resultOfFailedInference = undefined;
                result = chooseOverload(candidates, assignableRelation);
            }
            if (result) {
                return result;
            }
            if (candidateForArgumentError) {
                checkApplicableSignature(node, args, candidateForArgumentError, assignableRelation, undefined, true);
            }
            else if (candidateForTypeArgumentError) {
                if (!isTaggedTemplate && node.typeArguments) {
                    checkTypeArguments(candidateForTypeArgumentError, node.typeArguments, [], true);
                }
                else {
                    ts.Debug.assert(resultOfFailedInference.failedTypeParameterIndex >= 0);
                    var failedTypeParameter = candidateForTypeArgumentError.typeParameters[resultOfFailedInference.failedTypeParameterIndex];
                    var inferenceCandidates = getInferenceCandidates(resultOfFailedInference, resultOfFailedInference.failedTypeParameterIndex);
                    var diagnosticChainHead = ts.chainDiagnosticMessages(undefined, ts.Diagnostics.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly, typeToString(failedTypeParameter));
                    reportNoCommonSupertypeError(inferenceCandidates, node.expression || node.tag, diagnosticChainHead);
                }
            }
            else {
                error(node, ts.Diagnostics.Supplied_parameters_do_not_match_any_signature_of_call_target);
            }
            if (!fullTypeCheck) {
                for (var i = 0, n = candidates.length; i < n; i++) {
                    if (hasCorrectArity(node, args, candidates[i])) {
                        return candidates[i];
                    }
                }
            }
            return resolveErrorCall(node);
            function chooseOverload(candidates, relation) {
                for (var i = 0; i < candidates.length; i++) {
                    if (!hasCorrectArity(node, args, candidates[i])) {
                        continue;
                    }
                    var originalCandidate = candidates[i];
                    var inferenceResult;
                    while (true) {
                        var candidate = originalCandidate;
                        if (candidate.typeParameters) {
                            var typeArgumentTypes;
                            var typeArgumentsAreValid;
                            if (typeArguments) {
                                typeArgumentTypes = new Array(candidate.typeParameters.length);
                                typeArgumentsAreValid = checkTypeArguments(candidate, typeArguments, typeArgumentTypes, false);
                            }
                            else {
                                inferenceResult = inferTypeArguments(candidate, args, excludeArgument);
                                typeArgumentsAreValid = inferenceResult.failedTypeParameterIndex < 0;
                                typeArgumentTypes = inferenceResult.inferredTypes;
                            }
                            if (!typeArgumentsAreValid) {
                                break;
                            }
                            candidate = getSignatureInstantiation(candidate, typeArgumentTypes);
                        }
                        if (!checkApplicableSignature(node, args, candidate, relation, excludeArgument, false)) {
                            break;
                        }
                        var index = excludeArgument ? ts.indexOf(excludeArgument, true) : -1;
                        if (index < 0) {
                            return candidate;
                        }
                        excludeArgument[index] = false;
                    }
                    if (originalCandidate.typeParameters) {
                        var instantiatedCandidate = candidate;
                        if (typeArgumentsAreValid) {
                            candidateForArgumentError = instantiatedCandidate;
                        }
                        else {
                            candidateForTypeArgumentError = originalCandidate;
                            if (!typeArguments) {
                                resultOfFailedInference = inferenceResult;
                            }
                        }
                    }
                    else {
                        ts.Debug.assert(originalCandidate === candidate);
                        candidateForArgumentError = originalCandidate;
                    }
                }
                return undefined;
            }
            function collectCandidates() {
                var result = candidates;
                var lastParent;
                var lastSymbol;
                var cutoffPos = 0;
                var pos;
                ts.Debug.assert(!result.length);
                for (var i = 0; i < signatures.length; i++) {
                    var signature = signatures[i];
                    var symbol = signature.declaration && getSymbolOfNode(signature.declaration);
                    var parent = signature.declaration && signature.declaration.parent;
                    if (!lastSymbol || symbol === lastSymbol) {
                        if (lastParent && parent === lastParent) {
                            pos++;
                        }
                        else {
                            lastParent = parent;
                            pos = cutoffPos;
                        }
                    }
                    else {
                        pos = cutoffPos = result.length;
                        lastParent = parent;
                    }
                    lastSymbol = symbol;
                    for (var j = result.length; j > pos; j--) {
                        result[j] = result[j - 1];
                    }
                    result[pos] = signature;
                }
            }
        }
        function resolveCallExpression(node, candidatesOutArray) {
            if (node.expression.kind === 90 /* SuperKeyword */) {
                var superType = checkSuperExpression(node.expression);
                if (superType !== unknownType) {
                    return resolveCall(node, getSignaturesOfType(superType, 1 /* Construct */), candidatesOutArray);
                }
                return resolveUntypedCall(node);
            }
            var funcType = checkExpression(node.expression);
            var apparentType = getApparentType(funcType);
            if (apparentType === unknownType) {
                return resolveErrorCall(node);
            }
            var callSignatures = getSignaturesOfType(apparentType, 0 /* Call */);
            var constructSignatures = getSignaturesOfType(apparentType, 1 /* Construct */);
            if (funcType === anyType || (!callSignatures.length && !constructSignatures.length && !(funcType.flags & 16384 /* Union */) && isTypeAssignableTo(funcType, globalFunctionType))) {
                if (node.typeArguments) {
                    error(node, ts.Diagnostics.Untyped_function_calls_may_not_accept_type_arguments);
                }
                return resolveUntypedCall(node);
            }
            if (!callSignatures.length) {
                if (constructSignatures.length) {
                    error(node, ts.Diagnostics.Value_of_type_0_is_not_callable_Did_you_mean_to_include_new, typeToString(funcType));
                }
                else {
                    error(node, ts.Diagnostics.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature);
                }
                return resolveErrorCall(node);
            }
            return resolveCall(node, callSignatures, candidatesOutArray);
        }
        function resolveNewExpression(node, candidatesOutArray) {
            var expressionType = checkExpression(node.expression);
            if (expressionType === anyType) {
                if (node.typeArguments) {
                    error(node, ts.Diagnostics.Untyped_function_calls_may_not_accept_type_arguments);
                }
                return resolveUntypedCall(node);
            }
            expressionType = getApparentType(expressionType);
            if (expressionType === unknownType) {
                return resolveErrorCall(node);
            }
            var constructSignatures = getSignaturesOfType(expressionType, 1 /* Construct */);
            if (constructSignatures.length) {
                return resolveCall(node, constructSignatures, candidatesOutArray);
            }
            var callSignatures = getSignaturesOfType(expressionType, 0 /* Call */);
            if (callSignatures.length) {
                var signature = resolveCall(node, callSignatures, candidatesOutArray);
                if (getReturnTypeOfSignature(signature) !== voidType) {
                    error(node, ts.Diagnostics.Only_a_void_function_can_be_called_with_the_new_keyword);
                }
                return signature;
            }
            error(node, ts.Diagnostics.Cannot_use_new_with_an_expression_whose_type_lacks_a_call_or_construct_signature);
            return resolveErrorCall(node);
        }
        function resolveTaggedTemplateExpression(node, candidatesOutArray) {
            var tagType = checkExpression(node.tag);
            var apparentType = getApparentType(tagType);
            if (apparentType === unknownType) {
                return resolveErrorCall(node);
            }
            var callSignatures = getSignaturesOfType(apparentType, 0 /* Call */);
            if (tagType === anyType || (!callSignatures.length && !(tagType.flags & 16384 /* Union */) && isTypeAssignableTo(tagType, globalFunctionType))) {
                return resolveUntypedCall(node);
            }
            if (!callSignatures.length) {
                error(node, ts.Diagnostics.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature);
                return resolveErrorCall(node);
            }
            return resolveCall(node, callSignatures, candidatesOutArray);
        }
        function getResolvedSignature(node, candidatesOutArray) {
            var links = getNodeLinks(node);
            if (!links.resolvedSignature || candidatesOutArray) {
                links.resolvedSignature = anySignature;
                if (node.kind === 151 /* CallExpression */) {
                    links.resolvedSignature = resolveCallExpression(node, candidatesOutArray);
                }
                else if (node.kind === 152 /* NewExpression */) {
                    links.resolvedSignature = resolveNewExpression(node, candidatesOutArray);
                }
                else if (node.kind === 153 /* TaggedTemplateExpression */) {
                    links.resolvedSignature = resolveTaggedTemplateExpression(node, candidatesOutArray);
                }
                else {
                    ts.Debug.fail("Branch in 'getResolvedSignature' should be unreachable.");
                }
            }
            return links.resolvedSignature;
        }
        function checkCallExpression(node) {
            var signature = getResolvedSignature(node);
            if (node.expression.kind === 90 /* SuperKeyword */) {
                return voidType;
            }
            if (node.kind === 152 /* NewExpression */) {
                var declaration = signature.declaration;
                if (declaration && declaration.kind !== 129 /* Constructor */ && declaration.kind !== 133 /* ConstructSignature */ && declaration.kind !== 137 /* ConstructorType */) {
                    if (compilerOptions.noImplicitAny) {
                        error(node, ts.Diagnostics.new_expression_whose_target_lacks_a_construct_signature_implicitly_has_an_any_type);
                    }
                    return anyType;
                }
            }
            return getReturnTypeOfSignature(signature);
        }
        function checkTaggedTemplateExpression(node) {
            return getReturnTypeOfSignature(getResolvedSignature(node));
        }
        function checkTypeAssertion(node) {
            var exprType = checkExpression(node.expression);
            var targetType = getTypeFromTypeNode(node.type);
            if (fullTypeCheck && targetType !== unknownType) {
                var widenedType = getWidenedType(exprType);
                if (!(isTypeAssignableTo(targetType, widenedType))) {
                    checkTypeAssignableTo(exprType, targetType, node, ts.Diagnostics.Neither_type_0_nor_type_1_is_assignable_to_the_other);
                }
            }
            return targetType;
        }
        function getTypeAtPosition(signature, pos) {
            return signature.hasRestParameter ? pos < signature.parameters.length - 1 ? getTypeOfSymbol(signature.parameters[pos]) : getRestTypeOfSignature(signature) : pos < signature.parameters.length ? getTypeOfSymbol(signature.parameters[pos]) : anyType;
        }
        function assignContextualParameterTypes(signature, context, mapper) {
            var len = signature.parameters.length - (signature.hasRestParameter ? 1 : 0);
            for (var i = 0; i < len; i++) {
                var parameter = signature.parameters[i];
                var links = getSymbolLinks(parameter);
                links.type = instantiateType(getTypeAtPosition(context, i), mapper);
            }
            if (signature.hasRestParameter && context.hasRestParameter && signature.parameters.length >= context.parameters.length) {
                var parameter = signature.parameters[signature.parameters.length - 1];
                var links = getSymbolLinks(parameter);
                links.type = instantiateType(getTypeOfSymbol(context.parameters[context.parameters.length - 1]), mapper);
            }
        }
        function getReturnTypeFromBody(func, contextualMapper) {
            var contextualSignature = getContextualSignatureForFunctionLikeDeclaration(func);
            if (func.body.kind !== 169 /* Block */) {
                var type = checkExpressionCached(func.body, contextualMapper);
            }
            else {
                var types = checkAndAggregateReturnExpressionTypes(func.body, contextualMapper);
                if (types.length === 0) {
                    return voidType;
                }
                var type = contextualSignature ? getUnionType(types) : getCommonSupertype(types);
                if (!type) {
                    error(func, ts.Diagnostics.No_best_common_type_exists_among_return_expressions);
                    return unknownType;
                }
            }
            if (!contextualSignature) {
                reportErrorsFromWidening(func, type);
            }
            return getWidenedType(type);
        }
        function checkAndAggregateReturnExpressionTypes(body, contextualMapper) {
            var aggregatedTypes = [];
            ts.forEachReturnStatement(body, function (returnStatement) {
                var expr = returnStatement.expression;
                if (expr) {
                    var type = checkExpressionCached(expr, contextualMapper);
                    if (!ts.contains(aggregatedTypes, type)) {
                        aggregatedTypes.push(type);
                    }
                }
            });
            return aggregatedTypes;
        }
        function bodyContainsAReturnStatement(funcBody) {
            return ts.forEachReturnStatement(funcBody, function (returnStatement) {
                return true;
            });
        }
        function bodyContainsSingleThrowStatement(body) {
            return (body.statements.length === 1) && (body.statements[0].kind === 184 /* ThrowStatement */);
        }
        function checkIfNonVoidFunctionHasReturnExpressionsOrSingleThrowStatment(func, returnType) {
            if (!fullTypeCheck) {
                return;
            }
            if (returnType === voidType || returnType === anyType) {
                return;
            }
            if (!func.body || func.body.kind !== 169 /* Block */) {
                return;
            }
            var bodyBlock = func.body;
            if (bodyContainsAReturnStatement(bodyBlock)) {
                return;
            }
            if (bodyContainsSingleThrowStatement(bodyBlock)) {
                return;
            }
            error(func.type, ts.Diagnostics.A_function_whose_declared_type_is_neither_void_nor_any_must_return_a_value_or_consist_of_a_single_throw_statement);
        }
        function checkFunctionExpressionOrObjectLiteralMethod(node, contextualMapper) {
            ts.Debug.assert(node.kind !== 128 /* MethodDeclaration */ || ts.isObjectLiteralMethod(node));
            if (contextualMapper === identityMapper) {
                return anyFunctionType;
            }
            var links = getNodeLinks(node);
            var type = getTypeOfSymbol(node.symbol);
            if (!(links.flags & 64 /* ContextChecked */)) {
                var contextualSignature = getContextualSignature(node);
                if (!(links.flags & 64 /* ContextChecked */)) {
                    links.flags |= 64 /* ContextChecked */;
                    if (contextualSignature) {
                        var signature = getSignaturesOfType(type, 0 /* Call */)[0];
                        if (isContextSensitive(node)) {
                            assignContextualParameterTypes(signature, contextualSignature, contextualMapper || identityMapper);
                        }
                        if (!node.type) {
                            signature.resolvedReturnType = resolvingType;
                            var returnType = getReturnTypeFromBody(node, contextualMapper);
                            if (signature.resolvedReturnType === resolvingType) {
                                signature.resolvedReturnType = returnType;
                            }
                        }
                    }
                    checkSignatureDeclaration(node);
                }
            }
            if (fullTypeCheck && node.kind !== 128 /* MethodDeclaration */ && node.kind !== 127 /* MethodSignature */) {
                checkCollisionWithCapturedSuperVariable(node, node.name);
                checkCollisionWithCapturedThisVariable(node, node.name);
            }
            return type;
        }
        function checkFunctionExpressionOrObjectLiteralMethodBody(node) {
            ts.Debug.assert(node.kind !== 128 /* MethodDeclaration */ || ts.isObjectLiteralMethod(node));
            if (node.type) {
                checkIfNonVoidFunctionHasReturnExpressionsOrSingleThrowStatment(node, getTypeFromTypeNode(node.type));
            }
            if (node.body) {
                if (node.body.kind === 169 /* Block */) {
                    checkSourceElement(node.body);
                }
                else {
                    var exprType = checkExpression(node.body);
                    if (node.type) {
                        checkTypeAssignableTo(exprType, getTypeFromTypeNode(node.type), node.body, undefined);
                    }
                    checkFunctionExpressionBodies(node.body);
                }
            }
        }
        function checkArithmeticOperandType(operand, type, diagnostic) {
            if (!(type.flags & (1 /* Any */ | 132 /* NumberLike */))) {
                error(operand, diagnostic);
                return false;
            }
            return true;
        }
        function checkReferenceExpression(n, invalidReferenceMessage, constantVarianleMessage) {
            function findSymbol(n) {
                var symbol = getNodeLinks(n).resolvedSymbol;
                return symbol && getExportSymbolOfValueSymbolIfExported(symbol);
            }
            function isReferenceOrErrorExpression(n) {
                switch (n.kind) {
                    case 64 /* Identifier */:
                        var symbol = findSymbol(n);
                        return !symbol || symbol === unknownSymbol || symbol === argumentsSymbol || (symbol.flags & 3 /* Variable */) !== 0;
                    case 149 /* PropertyAccessExpression */:
                        var symbol = findSymbol(n);
                        return !symbol || symbol === unknownSymbol || (symbol.flags & ~8 /* EnumMember */) !== 0;
                    case 150 /* ElementAccessExpression */:
                        return true;
                    case 155 /* ParenthesizedExpression */:
                        return isReferenceOrErrorExpression(n.expression);
                    default:
                        return false;
                }
            }
            function isConstVariableReference(n) {
                switch (n.kind) {
                    case 64 /* Identifier */:
                    case 149 /* PropertyAccessExpression */:
                        var symbol = findSymbol(n);
                        return symbol && (symbol.flags & 3 /* Variable */) !== 0 && (getDeclarationFlagsFromSymbol(symbol) & 4096 /* Const */) !== 0;
                    case 150 /* ElementAccessExpression */:
                        var index = n.argumentExpression;
                        var symbol = findSymbol(n.expression);
                        if (symbol && index && index.kind === 8 /* StringLiteral */) {
                            var name = index.text;
                            var prop = getPropertyOfType(getTypeOfSymbol(symbol), name);
                            return prop && (prop.flags & 3 /* Variable */) !== 0 && (getDeclarationFlagsFromSymbol(prop) & 4096 /* Const */) !== 0;
                        }
                        return false;
                    case 155 /* ParenthesizedExpression */:
                        return isConstVariableReference(n.expression);
                    default:
                        return false;
                }
            }
            if (!isReferenceOrErrorExpression(n)) {
                error(n, invalidReferenceMessage);
                return false;
            }
            if (isConstVariableReference(n)) {
                error(n, constantVarianleMessage);
                return false;
            }
            return true;
        }
        function checkDeleteExpression(node) {
            var operandType = checkExpression(node.expression);
            return booleanType;
        }
        function checkTypeOfExpression(node) {
            var operandType = checkExpression(node.expression);
            return stringType;
        }
        function checkVoidExpression(node) {
            var operandType = checkExpression(node.expression);
            return undefinedType;
        }
        function checkPrefixUnaryExpression(node) {
            var operandType = checkExpression(node.operand);
            switch (node.operator) {
                case 33 /* PlusToken */:
                case 34 /* MinusToken */:
                case 47 /* TildeToken */:
                    return numberType;
                case 46 /* ExclamationToken */:
                    return booleanType;
                case 38 /* PlusPlusToken */:
                case 39 /* MinusMinusToken */:
                    var ok = checkArithmeticOperandType(node.operand, operandType, ts.Diagnostics.An_arithmetic_operand_must_be_of_type_any_number_or_an_enum_type);
                    if (ok) {
                        checkReferenceExpression(node.operand, ts.Diagnostics.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_property_or_indexer, ts.Diagnostics.The_operand_of_an_increment_or_decrement_operator_cannot_be_a_constant);
                    }
                    return numberType;
            }
            return unknownType;
        }
        function checkPostfixUnaryExpression(node) {
            var operandType = checkExpression(node.operand);
            var ok = checkArithmeticOperandType(node.operand, operandType, ts.Diagnostics.An_arithmetic_operand_must_be_of_type_any_number_or_an_enum_type);
            if (ok) {
                checkReferenceExpression(node.operand, ts.Diagnostics.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_property_or_indexer, ts.Diagnostics.The_operand_of_an_increment_or_decrement_operator_cannot_be_a_constant);
            }
            return numberType;
        }
        function isStructuredType(type) {
            if (type.flags & 16384 /* Union */) {
                return !ts.forEach(type.types, function (t) { return !isStructuredType(t); });
            }
            return (type.flags & (48128 /* ObjectType */ | 512 /* TypeParameter */)) !== 0;
        }
        function isConstEnumObjectType(type) {
            return type.flags & (48128 /* ObjectType */ | 32768 /* Anonymous */) && type.symbol && isConstEnumSymbol(type.symbol);
        }
        function isConstEnumSymbol(symbol) {
            return (symbol.flags & 128 /* ConstEnum */) !== 0;
        }
        function checkInstanceOfExpression(node, leftType, rightType) {
            if (!(leftType.flags & 1 /* Any */ || isStructuredType(leftType))) {
                error(node.left, ts.Diagnostics.The_left_hand_side_of_an_instanceof_expression_must_be_of_type_any_an_object_type_or_a_type_parameter);
            }
            if (!(rightType.flags & 1 /* Any */ || isTypeSubtypeOf(rightType, globalFunctionType))) {
                error(node.right, ts.Diagnostics.The_right_hand_side_of_an_instanceof_expression_must_be_of_type_any_or_of_a_type_assignable_to_the_Function_interface_type);
            }
            return booleanType;
        }
        function checkInExpression(node, leftType, rightType) {
            if (leftType !== anyType && leftType !== stringType && leftType !== numberType) {
                error(node.left, ts.Diagnostics.The_left_hand_side_of_an_in_expression_must_be_of_types_any_string_or_number);
            }
            if (!(rightType.flags & 1 /* Any */ || isStructuredType(rightType))) {
                error(node.right, ts.Diagnostics.The_right_hand_side_of_an_in_expression_must_be_of_type_any_an_object_type_or_a_type_parameter);
            }
            return booleanType;
        }
        function checkObjectLiteralAssignment(node, sourceType, contextualMapper) {
            var properties = node.properties;
            for (var i = 0; i < properties.length; i++) {
                var p = properties[i];
                if (p.kind === 204 /* PropertyAssignment */ || p.kind === 205 /* ShorthandPropertyAssignment */) {
                    var name = p.name;
                    var type = sourceType.flags & 1 /* Any */ ? sourceType : getTypeOfPropertyOfType(sourceType, name.text) || isNumericName(name.text) && getIndexTypeOfType(sourceType, 1 /* Number */) || getIndexTypeOfType(sourceType, 0 /* String */);
                    if (type) {
                        checkDestructuringAssignment(p.initializer || name, type);
                    }
                    else {
                        error(name, ts.Diagnostics.Type_0_has_no_property_1_and_no_string_index_signature, typeToString(sourceType), ts.declarationNameToString(name));
                    }
                }
                else {
                    error(p, ts.Diagnostics.Property_assignment_expected);
                }
            }
            return sourceType;
        }
        function checkArrayLiteralAssignment(node, sourceType, contextualMapper) {
            if (!isTypeAssignableTo(sourceType, anyArrayType)) {
                error(node, ts.Diagnostics.Type_0_is_not_an_array_type, typeToString(sourceType));
                return sourceType;
            }
            var elements = node.elements;
            for (var i = 0; i < elements.length; i++) {
                var e = elements[i];
                if (e.kind !== 167 /* OmittedExpression */) {
                    var propName = "" + i;
                    var type = sourceType.flags & 1 /* Any */ ? sourceType : isTupleLikeType(sourceType) ? getTypeOfPropertyOfType(sourceType, propName) : getIndexTypeOfType(sourceType, 1 /* Number */);
                    if (type) {
                        checkDestructuringAssignment(e, type, contextualMapper);
                    }
                    else {
                        error(e, ts.Diagnostics.Type_0_has_no_property_1, typeToString(sourceType), propName);
                    }
                }
            }
            return sourceType;
        }
        function checkDestructuringAssignment(target, sourceType, contextualMapper) {
            if (target.kind === 163 /* BinaryExpression */ && target.operator === 52 /* EqualsToken */) {
                checkBinaryExpression(target, contextualMapper);
                target = target.left;
            }
            if (target.kind === 148 /* ObjectLiteralExpression */) {
                return checkObjectLiteralAssignment(target, sourceType, contextualMapper);
            }
            if (target.kind === 147 /* ArrayLiteralExpression */) {
                return checkArrayLiteralAssignment(target, sourceType, contextualMapper);
            }
            var targetType = checkExpression(target, contextualMapper);
            if (checkReferenceExpression(target, ts.Diagnostics.Invalid_left_hand_side_of_assignment_expression, ts.Diagnostics.Left_hand_side_of_assignment_expression_cannot_be_a_constant)) {
                checkTypeAssignableTo(sourceType, targetType, target, undefined);
            }
            return sourceType;
        }
        function checkBinaryExpression(node, contextualMapper) {
            var operator = node.operator;
            if (operator === 52 /* EqualsToken */ && (node.left.kind === 148 /* ObjectLiteralExpression */ || node.left.kind === 147 /* ArrayLiteralExpression */)) {
                return checkDestructuringAssignment(node.left, checkExpression(node.right, contextualMapper), contextualMapper);
            }
            var leftType = checkExpression(node.left, contextualMapper);
            var rightType = checkExpression(node.right, contextualMapper);
            switch (operator) {
                case 35 /* AsteriskToken */:
                case 55 /* AsteriskEqualsToken */:
                case 36 /* SlashToken */:
                case 56 /* SlashEqualsToken */:
                case 37 /* PercentToken */:
                case 57 /* PercentEqualsToken */:
                case 34 /* MinusToken */:
                case 54 /* MinusEqualsToken */:
                case 40 /* LessThanLessThanToken */:
                case 58 /* LessThanLessThanEqualsToken */:
                case 41 /* GreaterThanGreaterThanToken */:
                case 59 /* GreaterThanGreaterThanEqualsToken */:
                case 42 /* GreaterThanGreaterThanGreaterThanToken */:
                case 60 /* GreaterThanGreaterThanGreaterThanEqualsToken */:
                case 44 /* BarToken */:
                case 62 /* BarEqualsToken */:
                case 45 /* CaretToken */:
                case 63 /* CaretEqualsToken */:
                case 43 /* AmpersandToken */:
                case 61 /* AmpersandEqualsToken */:
                    if (leftType.flags & (32 /* Undefined */ | 64 /* Null */))
                        leftType = rightType;
                    if (rightType.flags & (32 /* Undefined */ | 64 /* Null */))
                        rightType = leftType;
                    var suggestedOperator;
                    if ((leftType.flags & 8 /* Boolean */) && (rightType.flags & 8 /* Boolean */) && (suggestedOperator = getSuggestedBooleanOperator(node.operator)) !== undefined) {
                        error(node, ts.Diagnostics.The_0_operator_is_not_allowed_for_boolean_types_Consider_using_1_instead, ts.tokenToString(node.operator), ts.tokenToString(suggestedOperator));
                    }
                    else {
                        var leftOk = checkArithmeticOperandType(node.left, leftType, ts.Diagnostics.The_left_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type);
                        var rightOk = checkArithmeticOperandType(node.right, rightType, ts.Diagnostics.The_right_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type);
                        if (leftOk && rightOk) {
                            checkAssignmentOperator(numberType);
                        }
                    }
                    return numberType;
                case 33 /* PlusToken */:
                case 53 /* PlusEqualsToken */:
                    if (leftType.flags & (32 /* Undefined */ | 64 /* Null */))
                        leftType = rightType;
                    if (rightType.flags & (32 /* Undefined */ | 64 /* Null */))
                        rightType = leftType;
                    var resultType;
                    if (leftType.flags & 132 /* NumberLike */ && rightType.flags & 132 /* NumberLike */) {
                        resultType = numberType;
                    }
                    else if (leftType.flags & 258 /* StringLike */ || rightType.flags & 258 /* StringLike */) {
                        resultType = stringType;
                    }
                    else if (leftType.flags & 1 /* Any */ || leftType === unknownType || rightType.flags & 1 /* Any */ || rightType === unknownType) {
                        resultType = anyType;
                    }
                    if (!resultType) {
                        reportOperatorError();
                        return anyType;
                    }
                    if (operator === 53 /* PlusEqualsToken */) {
                        checkAssignmentOperator(resultType);
                    }
                    return resultType;
                case 28 /* EqualsEqualsToken */:
                case 29 /* ExclamationEqualsToken */:
                case 30 /* EqualsEqualsEqualsToken */:
                case 31 /* ExclamationEqualsEqualsToken */:
                case 24 /* LessThanToken */:
                case 25 /* GreaterThanToken */:
                case 26 /* LessThanEqualsToken */:
                case 27 /* GreaterThanEqualsToken */:
                    if (!isTypeAssignableTo(leftType, rightType) && !isTypeAssignableTo(rightType, leftType)) {
                        reportOperatorError();
                    }
                    return booleanType;
                case 86 /* InstanceOfKeyword */:
                    return checkInstanceOfExpression(node, leftType, rightType);
                case 85 /* InKeyword */:
                    return checkInExpression(node, leftType, rightType);
                case 48 /* AmpersandAmpersandToken */:
                    return rightType;
                case 49 /* BarBarToken */:
                    return getUnionType([leftType, rightType]);
                case 52 /* EqualsToken */:
                    checkAssignmentOperator(rightType);
                    return rightType;
                case 23 /* CommaToken */:
                    return rightType;
            }
            function getSuggestedBooleanOperator(operator) {
                switch (operator) {
                    case 44 /* BarToken */:
                    case 62 /* BarEqualsToken */:
                        return 49 /* BarBarToken */;
                    case 45 /* CaretToken */:
                    case 63 /* CaretEqualsToken */:
                        return 31 /* ExclamationEqualsEqualsToken */;
                    case 43 /* AmpersandToken */:
                    case 61 /* AmpersandEqualsToken */:
                        return 48 /* AmpersandAmpersandToken */;
                    default:
                        return undefined;
                }
            }
            function checkAssignmentOperator(valueType) {
                if (fullTypeCheck && operator >= 52 /* FirstAssignment */ && operator <= 63 /* LastAssignment */) {
                    var ok = checkReferenceExpression(node.left, ts.Diagnostics.Invalid_left_hand_side_of_assignment_expression, ts.Diagnostics.Left_hand_side_of_assignment_expression_cannot_be_a_constant);
                    if (ok) {
                        checkTypeAssignableTo(valueType, leftType, node.left, undefined);
                    }
                }
            }
            function reportOperatorError() {
                error(node, ts.Diagnostics.Operator_0_cannot_be_applied_to_types_1_and_2, ts.tokenToString(node.operator), typeToString(leftType), typeToString(rightType));
            }
        }
        function checkConditionalExpression(node, contextualMapper) {
            checkExpression(node.condition);
            var type1 = checkExpression(node.whenTrue, contextualMapper);
            var type2 = checkExpression(node.whenFalse, contextualMapper);
            return getUnionType([type1, type2]);
        }
        function checkTemplateExpression(node) {
            ts.forEach(node.templateSpans, function (templateSpan) {
                checkExpression(templateSpan.expression);
            });
            return stringType;
        }
        function checkExpressionWithContextualType(node, contextualType, contextualMapper) {
            var saveContextualType = node.contextualType;
            node.contextualType = contextualType;
            var result = checkExpression(node, contextualMapper);
            node.contextualType = saveContextualType;
            return result;
        }
        function checkExpressionCached(node, contextualMapper) {
            var links = getNodeLinks(node);
            if (!links.resolvedType) {
                links.resolvedType = checkExpression(node, contextualMapper);
            }
            return links.resolvedType;
        }
        function checkObjectLiteralMethod(node, contextualMapper) {
            var uninstantiatedType = checkFunctionExpressionOrObjectLiteralMethod(node, contextualMapper);
            return instantiateTypeWithSingleGenericCallSignature(node, uninstantiatedType, contextualMapper);
        }
        function instantiateTypeWithSingleGenericCallSignature(node, type, contextualMapper) {
            if (contextualMapper && contextualMapper !== identityMapper) {
                var signature = getSingleCallSignature(type);
                if (signature && signature.typeParameters) {
                    var contextualType = getContextualType(node);
                    if (contextualType) {
                        var contextualSignature = getSingleCallSignature(contextualType);
                        if (contextualSignature && !contextualSignature.typeParameters) {
                            return getOrCreateTypeFromSignature(instantiateSignatureInContextOf(signature, contextualSignature, contextualMapper));
                        }
                    }
                }
            }
            return type;
        }
        function checkExpression(node, contextualMapper) {
            return checkExpressionOrQualifiedName(node, contextualMapper);
        }
        function checkExpressionOrQualifiedName(node, contextualMapper) {
            var type;
            if (node.kind == 121 /* QualifiedName */) {
                type = checkQualifiedName(node);
            }
            else {
                var uninstantiatedType = checkExpressionWorker(node, contextualMapper);
                type = instantiateTypeWithSingleGenericCallSignature(node, uninstantiatedType, contextualMapper);
            }
            if (isConstEnumObjectType(type)) {
                var ok = (node.parent.kind === 149 /* PropertyAccessExpression */ && node.parent.expression === node) || (node.parent.kind === 150 /* ElementAccessExpression */ && node.parent.expression === node) || ((node.kind === 64 /* Identifier */ || node.kind === 121 /* QualifiedName */) && isInRightSideOfImportOrExportAssignment(node));
                if (!ok) {
                    error(node, ts.Diagnostics.const_enums_can_only_be_used_in_property_or_index_access_expressions_or_the_right_hand_side_of_an_import_declaration_or_export_assignment);
                }
            }
            return type;
        }
        function checkExpressionWorker(node, contextualMapper) {
            switch (node.kind) {
                case 64 /* Identifier */:
                    return checkIdentifier(node);
                case 92 /* ThisKeyword */:
                    return checkThisExpression(node);
                case 90 /* SuperKeyword */:
                    return checkSuperExpression(node);
                case 88 /* NullKeyword */:
                    return nullType;
                case 94 /* TrueKeyword */:
                case 79 /* FalseKeyword */:
                    return booleanType;
                case 7 /* NumericLiteral */:
                    return numberType;
                case 165 /* TemplateExpression */:
                    return checkTemplateExpression(node);
                case 8 /* StringLiteral */:
                case 10 /* NoSubstitutionTemplateLiteral */:
                    return stringType;
                case 9 /* RegularExpressionLiteral */:
                    return globalRegExpType;
                case 147 /* ArrayLiteralExpression */:
                    return checkArrayLiteral(node, contextualMapper);
                case 148 /* ObjectLiteralExpression */:
                    return checkObjectLiteral(node, contextualMapper);
                case 149 /* PropertyAccessExpression */:
                    return checkPropertyAccessExpression(node);
                case 150 /* ElementAccessExpression */:
                    return checkIndexedAccess(node);
                case 151 /* CallExpression */:
                case 152 /* NewExpression */:
                    return checkCallExpression(node);
                case 153 /* TaggedTemplateExpression */:
                    return checkTaggedTemplateExpression(node);
                case 154 /* TypeAssertionExpression */:
                    return checkTypeAssertion(node);
                case 155 /* ParenthesizedExpression */:
                    return checkExpression(node.expression);
                case 156 /* FunctionExpression */:
                case 157 /* ArrowFunction */:
                    return checkFunctionExpressionOrObjectLiteralMethod(node, contextualMapper);
                case 159 /* TypeOfExpression */:
                    return checkTypeOfExpression(node);
                case 158 /* DeleteExpression */:
                    return checkDeleteExpression(node);
                case 160 /* VoidExpression */:
                    return checkVoidExpression(node);
                case 161 /* PrefixUnaryExpression */:
                    return checkPrefixUnaryExpression(node);
                case 162 /* PostfixUnaryExpression */:
                    return checkPostfixUnaryExpression(node);
                case 163 /* BinaryExpression */:
                    return checkBinaryExpression(node, contextualMapper);
                case 164 /* ConditionalExpression */:
                    return checkConditionalExpression(node, contextualMapper);
                case 167 /* OmittedExpression */:
                    return undefinedType;
            }
            return unknownType;
        }
        function checkTypeParameter(node) {
            checkSourceElement(node.constraint);
            if (fullTypeCheck) {
                checkTypeParameterHasIllegalReferencesInConstraint(node);
                checkTypeNameIsReserved(node.name, ts.Diagnostics.Type_parameter_name_cannot_be_0);
            }
        }
        function checkParameter(node) {
            checkVariableLikeDeclaration(node);
            var func = ts.getContainingFunction(node);
            if (node.flags & (16 /* Public */ | 32 /* Private */ | 64 /* Protected */)) {
                func = ts.getContainingFunction(node);
                if (!(func.kind === 129 /* Constructor */ && func.body)) {
                    error(node, ts.Diagnostics.A_parameter_property_is_only_allowed_in_a_constructor_implementation);
                }
            }
            if (node.dotDotDotToken) {
                if (!isArrayType(getTypeOfSymbol(node.symbol))) {
                    error(node, ts.Diagnostics.A_rest_parameter_must_be_of_an_array_type);
                }
            }
        }
        function checkSignatureDeclaration(node) {
            checkTypeParameters(node.typeParameters);
            ts.forEach(node.parameters, checkParameter);
            if (node.type) {
                checkSourceElement(node.type);
            }
            if (fullTypeCheck) {
                checkCollisionWithArgumentsInGeneratedCode(node);
                if (compilerOptions.noImplicitAny && !node.type) {
                    switch (node.kind) {
                        case 133 /* ConstructSignature */:
                            error(node, ts.Diagnostics.Construct_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type);
                            break;
                        case 132 /* CallSignature */:
                            error(node, ts.Diagnostics.Call_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type);
                            break;
                    }
                }
            }
            checkSpecializedSignatureDeclaration(node);
        }
        function checkTypeForDuplicateIndexSignatures(node) {
            if (node.kind === 192 /* InterfaceDeclaration */) {
                var nodeSymbol = getSymbolOfNode(node);
                if (nodeSymbol.declarations.length > 0 && nodeSymbol.declarations[0] !== node) {
                    return;
                }
            }
            var indexSymbol = getIndexSymbol(getSymbolOfNode(node));
            if (indexSymbol) {
                var seenNumericIndexer = false;
                var seenStringIndexer = false;
                for (var i = 0, len = indexSymbol.declarations.length; i < len; ++i) {
                    var declaration = indexSymbol.declarations[i];
                    if (declaration.parameters.length === 1 && declaration.parameters[0].type) {
                        switch (declaration.parameters[0].type.kind) {
                            case 119 /* StringKeyword */:
                                if (!seenStringIndexer) {
                                    seenStringIndexer = true;
                                }
                                else {
                                    error(declaration, ts.Diagnostics.Duplicate_string_index_signature);
                                }
                                break;
                            case 117 /* NumberKeyword */:
                                if (!seenNumericIndexer) {
                                    seenNumericIndexer = true;
                                }
                                else {
                                    error(declaration, ts.Diagnostics.Duplicate_number_index_signature);
                                }
                                break;
                        }
                    }
                }
            }
        }
        function checkPropertyDeclaration(node) {
            checkVariableLikeDeclaration(node);
        }
        function checkMethodDeclaration(node) {
            checkFunctionLikeDeclaration(node);
        }
        function checkConstructorDeclaration(node) {
            checkSignatureDeclaration(node);
            checkSourceElement(node.body);
            var symbol = getSymbolOfNode(node);
            var firstDeclaration = ts.getDeclarationOfKind(symbol, node.kind);
            if (node === firstDeclaration) {
                checkFunctionOrConstructorSymbol(symbol);
            }
            if (!node.body) {
                return;
            }
            if (!fullTypeCheck) {
                return;
            }
            function isSuperCallExpression(n) {
                return n.kind === 151 /* CallExpression */ && n.expression.kind === 90 /* SuperKeyword */;
            }
            function containsSuperCall(n) {
                if (isSuperCallExpression(n)) {
                    return true;
                }
                switch (n.kind) {
                    case 156 /* FunctionExpression */:
                    case 190 /* FunctionDeclaration */:
                    case 157 /* ArrowFunction */:
                    case 148 /* ObjectLiteralExpression */: return false;
                    default: return ts.forEachChild(n, containsSuperCall);
                }
            }
            function markThisReferencesAsErrors(n) {
                if (n.kind === 92 /* ThisKeyword */) {
                    error(n, ts.Diagnostics.this_cannot_be_referenced_in_current_location);
                }
                else if (n.kind !== 156 /* FunctionExpression */ && n.kind !== 190 /* FunctionDeclaration */) {
                    ts.forEachChild(n, markThisReferencesAsErrors);
                }
            }
            function isInstancePropertyWithInitializer(n) {
                return n.kind === 126 /* PropertyDeclaration */ && !(n.flags & 128 /* Static */) && !!n.initializer;
            }
            if (ts.getClassBaseTypeNode(node.parent)) {
                if (containsSuperCall(node.body)) {
                    var superCallShouldBeFirst = ts.forEach(node.parent.members, isInstancePropertyWithInitializer) || ts.forEach(node.parameters, function (p) { return p.flags & (16 /* Public */ | 32 /* Private */ | 64 /* Protected */); });
                    if (superCallShouldBeFirst) {
                        var statements = node.body.statements;
                        if (!statements.length || statements[0].kind !== 172 /* ExpressionStatement */ || !isSuperCallExpression(statements[0].expression)) {
                            error(node, ts.Diagnostics.A_super_call_must_be_the_first_statement_in_the_constructor_when_a_class_contains_initialized_properties_or_has_parameter_properties);
                        }
                        else {
                            markThisReferencesAsErrors(statements[0].expression);
                        }
                    }
                }
                else {
                    error(node, ts.Diagnostics.Constructors_for_derived_classes_must_contain_a_super_call);
                }
            }
        }
        function checkAccessorDeclaration(node) {
            if (fullTypeCheck) {
                if (node.kind === 130 /* GetAccessor */) {
                    if (!ts.isInAmbientContext(node) && node.body && !(bodyContainsAReturnStatement(node.body) || bodyContainsSingleThrowStatement(node.body))) {
                        error(node.name, ts.Diagnostics.A_get_accessor_must_return_a_value_or_consist_of_a_single_throw_statement);
                    }
                }
                if (!ts.hasComputedNameButNotSymbol(node)) {
                    var otherKind = node.kind === 130 /* GetAccessor */ ? 131 /* SetAccessor */ : 130 /* GetAccessor */;
                    var otherAccessor = ts.getDeclarationOfKind(node.symbol, otherKind);
                    if (otherAccessor) {
                        if (((node.flags & 112 /* AccessibilityModifier */) !== (otherAccessor.flags & 112 /* AccessibilityModifier */))) {
                            error(node.name, ts.Diagnostics.Getter_and_setter_accessors_do_not_agree_in_visibility);
                        }
                        var currentAccessorType = getAnnotatedAccessorType(node);
                        var otherAccessorType = getAnnotatedAccessorType(otherAccessor);
                        if (currentAccessorType && otherAccessorType) {
                            if (!isTypeIdenticalTo(currentAccessorType, otherAccessorType)) {
                                error(node, ts.Diagnostics.get_and_set_accessor_must_have_the_same_type);
                            }
                        }
                    }
                    checkAndStoreTypeOfAccessors(getSymbolOfNode(node));
                }
            }
            checkFunctionLikeDeclaration(node);
        }
        function checkTypeReference(node) {
            var type = getTypeFromTypeReferenceNode(node);
            if (type !== unknownType && node.typeArguments) {
                var len = node.typeArguments.length;
                for (var i = 0; i < len; i++) {
                    checkSourceElement(node.typeArguments[i]);
                    var constraint = getConstraintOfTypeParameter(type.target.typeParameters[i]);
                    if (fullTypeCheck && constraint) {
                        var typeArgument = type.typeArguments[i];
                        checkTypeAssignableTo(typeArgument, constraint, node, ts.Diagnostics.Type_0_does_not_satisfy_the_constraint_1);
                    }
                }
            }
        }
        function checkTypeQuery(node) {
            getTypeFromTypeQueryNode(node);
        }
        function checkTypeLiteral(node) {
            ts.forEach(node.members, checkSourceElement);
            if (fullTypeCheck) {
                var type = getTypeFromTypeLiteralOrFunctionOrConstructorTypeNode(node);
                checkIndexConstraints(type);
                checkTypeForDuplicateIndexSignatures(node);
            }
        }
        function checkArrayType(node) {
            checkSourceElement(node.elementType);
        }
        function checkTupleType(node) {
            ts.forEach(node.elementTypes, checkSourceElement);
        }
        function checkUnionType(node) {
            ts.forEach(node.types, checkSourceElement);
        }
        function isPrivateWithinAmbient(node) {
            return (node.flags & 32 /* Private */) && ts.isInAmbientContext(node);
        }
        function checkSpecializedSignatureDeclaration(signatureDeclarationNode) {
            if (!fullTypeCheck) {
                return;
            }
            var signature = getSignatureFromDeclaration(signatureDeclarationNode);
            if (!signature.hasStringLiterals) {
                return;
            }
            if (signatureDeclarationNode.body) {
                error(signatureDeclarationNode, ts.Diagnostics.A_signature_with_an_implementation_cannot_use_a_string_literal_type);
                return;
            }
            var signaturesToCheck;
            if (!signatureDeclarationNode.name && signatureDeclarationNode.parent && signatureDeclarationNode.parent.kind === 192 /* InterfaceDeclaration */) {
                ts.Debug.assert(signatureDeclarationNode.kind === 132 /* CallSignature */ || signatureDeclarationNode.kind === 133 /* ConstructSignature */);
                var signatureKind = signatureDeclarationNode.kind === 132 /* CallSignature */ ? 0 /* Call */ : 1 /* Construct */;
                var containingSymbol = getSymbolOfNode(signatureDeclarationNode.parent);
                var containingType = getDeclaredTypeOfSymbol(containingSymbol);
                signaturesToCheck = getSignaturesOfType(containingType, signatureKind);
            }
            else {
                signaturesToCheck = getSignaturesOfSymbol(getSymbolOfNode(signatureDeclarationNode));
            }
            for (var i = 0; i < signaturesToCheck.length; i++) {
                var otherSignature = signaturesToCheck[i];
                if (!otherSignature.hasStringLiterals && isSignatureAssignableTo(signature, otherSignature)) {
                    return;
                }
            }
            error(signatureDeclarationNode, ts.Diagnostics.Specialized_overload_signature_is_not_assignable_to_any_non_specialized_signature);
        }
        function getEffectiveDeclarationFlags(n, flagsToCheck) {
            var flags = n.flags;
            if (n.parent.kind !== 192 /* InterfaceDeclaration */ && ts.isInAmbientContext(n)) {
                if (!(flags & 2 /* Ambient */)) {
                    flags |= 1 /* Export */;
                }
                flags |= 2 /* Ambient */;
            }
            return flags & flagsToCheck;
        }
        function checkFunctionOrConstructorSymbol(symbol) {
            if (!fullTypeCheck) {
                return;
            }
            function getCanonicalOverload(overloads, implementation) {
                var implementationSharesContainerWithFirstOverload = implementation !== undefined && implementation.parent === overloads[0].parent;
                return implementationSharesContainerWithFirstOverload ? implementation : overloads[0];
            }
            function checkFlagAgreementBetweenOverloads(overloads, implementation, flagsToCheck, someOverloadFlags, allOverloadFlags) {
                var someButNotAllOverloadFlags = someOverloadFlags ^ allOverloadFlags;
                if (someButNotAllOverloadFlags !== 0) {
                    var canonicalFlags = getEffectiveDeclarationFlags(getCanonicalOverload(overloads, implementation), flagsToCheck);
                    ts.forEach(overloads, function (o) {
                        var deviation = getEffectiveDeclarationFlags(o, flagsToCheck) ^ canonicalFlags;
                        if (deviation & 1 /* Export */) {
                            error(o.name, ts.Diagnostics.Overload_signatures_must_all_be_exported_or_not_exported);
                        }
                        else if (deviation & 2 /* Ambient */) {
                            error(o.name, ts.Diagnostics.Overload_signatures_must_all_be_ambient_or_non_ambient);
                        }
                        else if (deviation & (32 /* Private */ | 64 /* Protected */)) {
                            error(o.name, ts.Diagnostics.Overload_signatures_must_all_be_public_private_or_protected);
                        }
                    });
                }
            }
            function checkQuestionTokenAgreementBetweenOverloads(overloads, implementation, someHaveQuestionToken, allHaveQuestionToken) {
                if (someHaveQuestionToken !== allHaveQuestionToken) {
                    var canonicalHasQuestionToken = ts.hasQuestionToken(getCanonicalOverload(overloads, implementation));
                    ts.forEach(overloads, function (o) {
                        var deviation = ts.hasQuestionToken(o) !== canonicalHasQuestionToken;
                        if (deviation) {
                            error(o.name, ts.Diagnostics.Overload_signatures_must_all_be_optional_or_required);
                        }
                    });
                }
            }
            var flagsToCheck = 1 /* Export */ | 2 /* Ambient */ | 32 /* Private */ | 64 /* Protected */;
            var someNodeFlags = 0;
            var allNodeFlags = flagsToCheck;
            var someHaveQuestionToken = false;
            var allHaveQuestionToken = true;
            var hasOverloads = false;
            var bodyDeclaration;
            var lastSeenNonAmbientDeclaration;
            var previousDeclaration;
            var declarations = symbol.declarations;
            var isConstructor = (symbol.flags & 16384 /* Constructor */) !== 0;
            function reportImplementationExpectedError(node) {
                if (node.name && ts.getFullWidth(node.name) === 0) {
                    return;
                }
                var seen = false;
                var subsequentNode = ts.forEachChild(node.parent, function (c) {
                    if (seen) {
                        return c;
                    }
                    else {
                        seen = c === node;
                    }
                });
                if (subsequentNode) {
                    if (subsequentNode.kind === node.kind) {
                        var errorNode = subsequentNode.name || subsequentNode;
                        if (node.name && subsequentNode.name && node.name.text === subsequentNode.name.text) {
                            ts.Debug.assert(node.kind === 128 /* MethodDeclaration */ || node.kind === 127 /* MethodSignature */);
                            ts.Debug.assert((node.flags & 128 /* Static */) !== (subsequentNode.flags & 128 /* Static */));
                            var diagnostic = node.flags & 128 /* Static */ ? ts.Diagnostics.Function_overload_must_be_static : ts.Diagnostics.Function_overload_must_not_be_static;
                            error(errorNode, diagnostic);
                            return;
                        }
                        else if (subsequentNode.body) {
                            error(errorNode, ts.Diagnostics.Function_implementation_name_must_be_0, ts.declarationNameToString(node.name));
                            return;
                        }
                    }
                }
                var errorNode = node.name || node;
                if (isConstructor) {
                    error(errorNode, ts.Diagnostics.Constructor_implementation_is_missing);
                }
                else {
                    error(errorNode, ts.Diagnostics.Function_implementation_is_missing_or_not_immediately_following_the_declaration);
                }
            }
            var isExportSymbolInsideModule = symbol.parent && symbol.parent.flags & 1536 /* Module */;
            var duplicateFunctionDeclaration = false;
            var multipleConstructorImplementation = false;
            for (var i = 0; i < declarations.length; i++) {
                var node = declarations[i];
                var inAmbientContext = ts.isInAmbientContext(node);
                var inAmbientContextOrInterface = node.parent.kind === 192 /* InterfaceDeclaration */ || node.parent.kind === 139 /* TypeLiteral */ || inAmbientContext;
                if (inAmbientContextOrInterface) {
                    previousDeclaration = undefined;
                }
                if (node.kind === 190 /* FunctionDeclaration */ || node.kind === 128 /* MethodDeclaration */ || node.kind === 127 /* MethodSignature */ || node.kind === 129 /* Constructor */) {
                    var currentNodeFlags = getEffectiveDeclarationFlags(node, flagsToCheck);
                    someNodeFlags |= currentNodeFlags;
                    allNodeFlags &= currentNodeFlags;
                    someHaveQuestionToken = someHaveQuestionToken || ts.hasQuestionToken(node);
                    allHaveQuestionToken = allHaveQuestionToken && ts.hasQuestionToken(node);
                    if (node.body && bodyDeclaration) {
                        if (isConstructor) {
                            multipleConstructorImplementation = true;
                        }
                        else {
                            duplicateFunctionDeclaration = true;
                        }
                    }
                    else if (!isExportSymbolInsideModule && previousDeclaration && previousDeclaration.parent === node.parent && previousDeclaration.end !== node.pos) {
                        reportImplementationExpectedError(previousDeclaration);
                    }
                    if (node.body) {
                        if (!bodyDeclaration) {
                            bodyDeclaration = node;
                        }
                    }
                    else {
                        hasOverloads = true;
                    }
                    previousDeclaration = node;
                    if (!inAmbientContextOrInterface) {
                        lastSeenNonAmbientDeclaration = node;
                    }
                }
            }
            if (multipleConstructorImplementation) {
                ts.forEach(declarations, function (declaration) {
                    error(declaration, ts.Diagnostics.Multiple_constructor_implementations_are_not_allowed);
                });
            }
            if (duplicateFunctionDeclaration) {
                ts.forEach(declarations, function (declaration) {
                    error(declaration.name, ts.Diagnostics.Duplicate_function_implementation);
                });
            }
            if (!isExportSymbolInsideModule && lastSeenNonAmbientDeclaration && !lastSeenNonAmbientDeclaration.body) {
                reportImplementationExpectedError(lastSeenNonAmbientDeclaration);
            }
            if (hasOverloads) {
                checkFlagAgreementBetweenOverloads(declarations, bodyDeclaration, flagsToCheck, someNodeFlags, allNodeFlags);
                checkQuestionTokenAgreementBetweenOverloads(declarations, bodyDeclaration, someHaveQuestionToken, allHaveQuestionToken);
                if (bodyDeclaration) {
                    var signatures = getSignaturesOfSymbol(symbol);
                    var bodySignature = getSignatureFromDeclaration(bodyDeclaration);
                    if (!bodySignature.hasStringLiterals) {
                        for (var i = 0, len = signatures.length; i < len; ++i) {
                            if (!signatures[i].hasStringLiterals && !isSignatureAssignableTo(bodySignature, signatures[i])) {
                                error(signatures[i].declaration, ts.Diagnostics.Overload_signature_is_not_compatible_with_function_implementation);
                                break;
                            }
                        }
                    }
                }
            }
        }
        function checkExportsOnMergedDeclarations(node) {
            if (!fullTypeCheck) {
                return;
            }
            var symbol;
            var symbol = node.localSymbol;
            if (!symbol) {
                symbol = getSymbolOfNode(node);
                if (!(symbol.flags & 7340032 /* Export */)) {
                    return;
                }
            }
            if (ts.getDeclarationOfKind(symbol, node.kind) !== node) {
                return;
            }
            var exportedDeclarationSpaces = 0;
            var nonExportedDeclarationSpaces = 0;
            ts.forEach(symbol.declarations, function (d) {
                var declarationSpaces = getDeclarationSpaces(d);
                if (getEffectiveDeclarationFlags(d, 1 /* Export */)) {
                    exportedDeclarationSpaces |= declarationSpaces;
                }
                else {
                    nonExportedDeclarationSpaces |= declarationSpaces;
                }
            });
            var commonDeclarationSpace = exportedDeclarationSpaces & nonExportedDeclarationSpaces;
            if (commonDeclarationSpace) {
                ts.forEach(symbol.declarations, function (d) {
                    if (getDeclarationSpaces(d) & commonDeclarationSpace) {
                        error(d.name, ts.Diagnostics.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local, ts.declarationNameToString(d.name));
                    }
                });
            }
            function getDeclarationSpaces(d) {
                switch (d.kind) {
                    case 192 /* InterfaceDeclaration */:
                        return 2097152 /* ExportType */;
                    case 195 /* ModuleDeclaration */:
                        return d.name.kind === 8 /* StringLiteral */ || ts.getModuleInstanceState(d) !== 0 /* NonInstantiated */ ? 4194304 /* ExportNamespace */ | 1048576 /* ExportValue */ : 4194304 /* ExportNamespace */;
                    case 191 /* ClassDeclaration */:
                    case 194 /* EnumDeclaration */:
                        return 2097152 /* ExportType */ | 1048576 /* ExportValue */;
                    case 197 /* ImportDeclaration */:
                        var result = 0;
                        var target = resolveImport(getSymbolOfNode(d));
                        ts.forEach(target.declarations, function (d) {
                            result |= getDeclarationSpaces(d);
                        });
                        return result;
                    default:
                        return 1048576 /* ExportValue */;
                }
            }
        }
        function checkFunctionDeclaration(node) {
            checkFunctionLikeDeclaration(node);
            if (fullTypeCheck) {
                checkCollisionWithCapturedSuperVariable(node, node.name);
                checkCollisionWithCapturedThisVariable(node, node.name);
                checkCollisionWithRequireExportsInGeneratedCode(node, node.name);
            }
        }
        function checkFunctionLikeDeclaration(node) {
            checkSignatureDeclaration(node);
            if (!ts.hasComputedNameButNotSymbol(node)) {
                var symbol = getSymbolOfNode(node);
                var localSymbol = node.localSymbol || symbol;
                var firstDeclaration = ts.getDeclarationOfKind(localSymbol, node.kind);
                if (node === firstDeclaration) {
                    checkFunctionOrConstructorSymbol(localSymbol);
                }
                if (symbol.parent) {
                    if (ts.getDeclarationOfKind(symbol, node.kind) === node) {
                        checkFunctionOrConstructorSymbol(symbol);
                    }
                }
            }
            checkSourceElement(node.body);
            if (node.type && !isAccessor(node.kind)) {
                checkIfNonVoidFunctionHasReturnExpressionsOrSingleThrowStatment(node, getTypeFromTypeNode(node.type));
            }
            if (compilerOptions.noImplicitAny && !node.body && !node.type && !isPrivateWithinAmbient(node)) {
                reportImplicitAnyError(node, anyType);
            }
        }
        function checkBlock(node) {
            ts.forEach(node.statements, checkSourceElement);
            if (ts.isFunctionBlock(node) || node.kind === 196 /* ModuleBlock */) {
                checkFunctionExpressionBodies(node);
            }
        }
        function checkCollisionWithArgumentsInGeneratedCode(node) {
            if (!ts.hasRestParameters(node) || ts.isInAmbientContext(node) || !node.body) {
                return;
            }
            ts.forEach(node.parameters, function (p) {
                if (p.name && !ts.isBindingPattern(p.name) && p.name.text === argumentsSymbol.name) {
                    error(p, ts.Diagnostics.Duplicate_identifier_arguments_Compiler_uses_arguments_to_initialize_rest_parameters);
                }
            });
        }
        function needCollisionCheckForIdentifier(node, identifier, name) {
            if (!(identifier && identifier.text === name)) {
                return false;
            }
            if (node.kind === 126 /* PropertyDeclaration */ || node.kind === 125 /* PropertySignature */ || node.kind === 128 /* MethodDeclaration */ || node.kind === 127 /* MethodSignature */ || node.kind === 130 /* GetAccessor */ || node.kind === 131 /* SetAccessor */) {
                return false;
            }
            if (ts.isInAmbientContext(node)) {
                return false;
            }
            var root = getRootDeclaration(node);
            if (root.kind === 124 /* Parameter */ && !root.parent.body) {
                return false;
            }
            return true;
        }
        function checkCollisionWithCapturedThisVariable(node, name) {
            if (needCollisionCheckForIdentifier(node, name, "_this")) {
                potentialThisCollisions.push(node);
            }
        }
        function checkIfThisIsCapturedInEnclosingScope(node) {
            var current = node;
            while (current) {
                if (getNodeCheckFlags(current) & 4 /* CaptureThis */) {
                    var isDeclaration = node.kind !== 64 /* Identifier */;
                    if (isDeclaration) {
                        error(node.name, ts.Diagnostics.Duplicate_identifier_this_Compiler_uses_variable_declaration_this_to_capture_this_reference);
                    }
                    else {
                        error(node, ts.Diagnostics.Expression_resolves_to_variable_declaration_this_that_compiler_uses_to_capture_this_reference);
                    }
                    return;
                }
                current = current.parent;
            }
        }
        function checkCollisionWithCapturedSuperVariable(node, name) {
            if (!needCollisionCheckForIdentifier(node, name, "_super")) {
                return;
            }
            var enclosingClass = ts.getAncestor(node, 191 /* ClassDeclaration */);
            if (!enclosingClass || ts.isInAmbientContext(enclosingClass)) {
                return;
            }
            if (ts.getClassBaseTypeNode(enclosingClass)) {
                var isDeclaration = node.kind !== 64 /* Identifier */;
                if (isDeclaration) {
                    error(node, ts.Diagnostics.Duplicate_identifier_super_Compiler_uses_super_to_capture_base_class_reference);
                }
                else {
                    error(node, ts.Diagnostics.Expression_resolves_to_super_that_compiler_uses_to_capture_base_class_reference);
                }
            }
        }
        function checkCollisionWithRequireExportsInGeneratedCode(node, name) {
            if (!needCollisionCheckForIdentifier(node, name, "require") && !needCollisionCheckForIdentifier(node, name, "exports")) {
                return;
            }
            if (node.kind === 195 /* ModuleDeclaration */ && ts.getModuleInstanceState(node) !== 1 /* Instantiated */) {
                return;
            }
            var parent = getDeclarationContainer(node);
            if (parent.kind === 207 /* SourceFile */ && ts.isExternalModule(parent)) {
                error(name, ts.Diagnostics.Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_an_external_module, ts.declarationNameToString(name), ts.declarationNameToString(name));
            }
        }
        function checkCollisionWithConstDeclarations(node) {
            if (node.initializer && (node.flags & 6144 /* BlockScoped */) === 0) {
                var symbol = getSymbolOfNode(node);
                if (symbol.flags & 1 /* FunctionScopedVariable */) {
                    var localDeclarationSymbol = resolveName(node, node.name.text, 3 /* Variable */, undefined, undefined);
                    if (localDeclarationSymbol && localDeclarationSymbol !== symbol && localDeclarationSymbol.flags & 2 /* BlockScopedVariable */) {
                        if (getDeclarationFlagsFromSymbol(localDeclarationSymbol) & 4096 /* Const */) {
                            error(node, ts.Diagnostics.Cannot_redeclare_block_scoped_variable_0, symbolToString(localDeclarationSymbol));
                        }
                    }
                }
            }
        }
        function isParameterDeclaration(node) {
            while (node.kind === 146 /* BindingElement */) {
                node = node.parent.parent;
            }
            return node.kind === 124 /* Parameter */;
        }
        function checkParameterInitializer(node) {
            if (getRootDeclaration(node).kind === 124 /* Parameter */) {
                var func = ts.getContainingFunction(node);
                visit(node.initializer);
            }
            function visit(n) {
                if (n.kind === 64 /* Identifier */) {
                    var referencedSymbol = getNodeLinks(n).resolvedSymbol;
                    if (referencedSymbol && referencedSymbol !== unknownSymbol && getSymbol(func.locals, referencedSymbol.name, 107455 /* Value */) === referencedSymbol) {
                        if (referencedSymbol.valueDeclaration.kind === 124 /* Parameter */) {
                            if (referencedSymbol.valueDeclaration === node) {
                                error(n, ts.Diagnostics.Parameter_0_cannot_be_referenced_in_its_initializer, ts.declarationNameToString(node.name));
                                return;
                            }
                            if (referencedSymbol.valueDeclaration.pos < node.pos) {
                                return;
                            }
                        }
                        error(n, ts.Diagnostics.Initializer_of_parameter_0_cannot_reference_identifier_1_declared_after_it, ts.declarationNameToString(node.name), ts.declarationNameToString(n));
                    }
                }
                else {
                    ts.forEachChild(n, visit);
                }
            }
        }
        function checkVariableLikeDeclaration(node) {
            checkSourceElement(node.type);
            if (ts.hasComputedNameButNotSymbol(node)) {
                if (node.initializer) {
                    checkExpressionCached(node.initializer);
                }
                return;
            }
            if (ts.isBindingPattern(node.name)) {
                ts.forEach(node.name.elements, checkSourceElement);
            }
            if (node.initializer && getRootDeclaration(node).kind === 124 /* Parameter */ && !ts.getContainingFunction(node).body) {
                error(node, ts.Diagnostics.A_parameter_initializer_is_only_allowed_in_a_function_or_constructor_implementation);
                return;
            }
            if (ts.isBindingPattern(node.name)) {
                if (node.initializer) {
                    checkTypeAssignableTo(checkExpressionCached(node.initializer), getWidenedTypeForVariableLikeDeclaration(node), node, undefined);
                    checkParameterInitializer(node);
                }
                return;
            }
            var symbol = getSymbolOfNode(node);
            var type = getTypeOfVariableOrParameterOrProperty(symbol);
            if (node === symbol.valueDeclaration) {
                if (node.initializer) {
                    checkTypeAssignableTo(checkExpressionCached(node.initializer), type, node, undefined);
                    checkParameterInitializer(node);
                }
            }
            else {
                var declarationType = getWidenedTypeForVariableLikeDeclaration(node);
                if (type !== unknownType && declarationType !== unknownType && !isTypeIdenticalTo(type, declarationType)) {
                    error(node.name, ts.Diagnostics.Subsequent_variable_declarations_must_have_the_same_type_Variable_0_must_be_of_type_1_but_here_has_type_2, ts.declarationNameToString(node.name), typeToString(type), typeToString(declarationType));
                }
                if (node.initializer) {
                    checkTypeAssignableTo(checkExpressionCached(node.initializer), declarationType, node, undefined);
                }
            }
            if (node.kind !== 126 /* PropertyDeclaration */ && node.kind !== 125 /* PropertySignature */) {
                checkExportsOnMergedDeclarations(node);
                checkCollisionWithConstDeclarations(node);
                checkCollisionWithCapturedSuperVariable(node, node.name);
                checkCollisionWithCapturedThisVariable(node, node.name);
                checkCollisionWithRequireExportsInGeneratedCode(node, node.name);
            }
        }
        function checkVariableStatement(node) {
            ts.forEach(node.declarations, checkSourceElement);
        }
        function checkExpressionStatement(node) {
            checkExpression(node.expression);
        }
        function checkIfStatement(node) {
            checkExpression(node.expression);
            checkSourceElement(node.thenStatement);
            checkSourceElement(node.elseStatement);
        }
        function checkDoStatement(node) {
            checkSourceElement(node.statement);
            checkExpression(node.expression);
        }
        function checkWhileStatement(node) {
            checkExpression(node.expression);
            checkSourceElement(node.statement);
        }
        function checkForStatement(node) {
            if (node.declarations)
                ts.forEach(node.declarations, checkVariableLikeDeclaration);
            if (node.initializer)
                checkExpression(node.initializer);
            if (node.condition)
                checkExpression(node.condition);
            if (node.iterator)
                checkExpression(node.iterator);
            checkSourceElement(node.statement);
        }
        function checkForInStatement(node) {
            if (node.declarations) {
                if (node.declarations.length >= 1) {
                    var decl = node.declarations[0];
                    checkVariableLikeDeclaration(decl);
                    if (decl.type) {
                        error(decl, ts.Diagnostics.The_left_hand_side_of_a_for_in_statement_cannot_use_a_type_annotation);
                    }
                }
            }
            if (node.variable) {
                var exprType = checkExpression(node.variable);
                if (exprType !== anyType && exprType !== stringType) {
                    error(node.variable, ts.Diagnostics.The_left_hand_side_of_a_for_in_statement_must_be_of_type_string_or_any);
                }
                else {
                    checkReferenceExpression(node.variable, ts.Diagnostics.Invalid_left_hand_side_in_for_in_statement, ts.Diagnostics.Left_hand_side_of_assignment_expression_cannot_be_a_constant);
                }
            }
            var exprType = checkExpression(node.expression);
            if (!(exprType.flags & 1 /* Any */ || isStructuredType(exprType))) {
                error(node.expression, ts.Diagnostics.The_right_hand_side_of_a_for_in_statement_must_be_of_type_any_an_object_type_or_a_type_parameter);
            }
            checkSourceElement(node.statement);
        }
        function checkBreakOrContinueStatement(node) {
        }
        function isGetAccessorWithAnnotatatedSetAccessor(node) {
            return !!(node.kind === 130 /* GetAccessor */ && getSetAccessorTypeAnnotationNode(ts.getDeclarationOfKind(node.symbol, 131 /* SetAccessor */)));
        }
        function checkReturnStatement(node) {
            if (node.expression) {
                var func = ts.getContainingFunction(node);
                if (func) {
                    var returnType = getReturnTypeOfSignature(getSignatureFromDeclaration(func));
                    var exprType = checkExpressionCached(node.expression);
                    if (func.kind === 131 /* SetAccessor */) {
                        error(node.expression, ts.Diagnostics.Setters_cannot_return_a_value);
                    }
                    else {
                        if (func.kind === 129 /* Constructor */) {
                            if (!isTypeAssignableTo(exprType, returnType)) {
                                error(node.expression, ts.Diagnostics.Return_type_of_constructor_signature_must_be_assignable_to_the_instance_type_of_the_class);
                            }
                        }
                        else if (func.type || isGetAccessorWithAnnotatatedSetAccessor(func)) {
                            checkTypeAssignableTo(exprType, returnType, node.expression, undefined);
                        }
                    }
                }
            }
        }
        function checkWithStatement(node) {
            checkExpression(node.expression);
            error(node.expression, ts.Diagnostics.All_symbols_within_a_with_block_will_be_resolved_to_any);
        }
        function checkSwitchStatement(node) {
            var expressionType = checkExpression(node.expression);
            ts.forEach(node.clauses, function (clause) {
                if (fullTypeCheck && clause.kind === 200 /* CaseClause */) {
                    var caseClause = clause;
                    var caseType = checkExpression(caseClause.expression);
                    if (!isTypeAssignableTo(expressionType, caseType)) {
                        checkTypeAssignableTo(caseType, expressionType, caseClause.expression, undefined);
                    }
                }
                ts.forEach(clause.statements, checkSourceElement);
            });
        }
        function checkLabeledStatement(node) {
            checkSourceElement(node.statement);
        }
        function checkThrowStatement(node) {
            if (node.expression) {
                checkExpression(node.expression);
            }
        }
        function checkTryStatement(node) {
            checkBlock(node.tryBlock);
            if (node.catchClause)
                checkBlock(node.catchClause.block);
            if (node.finallyBlock)
                checkBlock(node.finallyBlock);
        }
        function checkIndexConstraints(type) {
            function checkIndexConstraintForProperty(prop, propertyType, indexDeclaration, indexType, indexKind) {
                if (!indexType) {
                    return;
                }
                if (indexKind === 1 /* Number */ && !isNumericName(prop.name)) {
                    return;
                }
                var errorNode;
                if (prop.parent === type.symbol) {
                    errorNode = prop.valueDeclaration;
                }
                else if (indexDeclaration) {
                    errorNode = indexDeclaration;
                }
                else if (type.flags & 2048 /* Interface */) {
                    var someBaseClassHasBothPropertyAndIndexer = ts.forEach(type.baseTypes, function (base) { return getPropertyOfObjectType(base, prop.name) && getIndexTypeOfType(base, indexKind); });
                    errorNode = someBaseClassHasBothPropertyAndIndexer ? undefined : type.symbol.declarations[0];
                }
                if (errorNode && !isTypeAssignableTo(propertyType, indexType)) {
                    var errorMessage = indexKind === 0 /* String */ ? ts.Diagnostics.Property_0_of_type_1_is_not_assignable_to_string_index_type_2 : ts.Diagnostics.Property_0_of_type_1_is_not_assignable_to_numeric_index_type_2;
                    error(errorNode, errorMessage, symbolToString(prop), typeToString(propertyType), typeToString(indexType));
                }
            }
            var declaredNumberIndexer = getIndexDeclarationOfSymbol(type.symbol, 1 /* Number */);
            var declaredStringIndexer = getIndexDeclarationOfSymbol(type.symbol, 0 /* String */);
            var stringIndexType = getIndexTypeOfType(type, 0 /* String */);
            var numberIndexType = getIndexTypeOfType(type, 1 /* Number */);
            if (stringIndexType || numberIndexType) {
                ts.forEach(getPropertiesOfObjectType(type), function (prop) {
                    var propType = getTypeOfSymbol(prop);
                    checkIndexConstraintForProperty(prop, propType, declaredStringIndexer, stringIndexType, 0 /* String */);
                    checkIndexConstraintForProperty(prop, propType, declaredNumberIndexer, numberIndexType, 1 /* Number */);
                });
            }
            var errorNode;
            if (stringIndexType && numberIndexType) {
                errorNode = declaredNumberIndexer || declaredStringIndexer;
                if (!errorNode && (type.flags & 2048 /* Interface */)) {
                    var someBaseTypeHasBothIndexers = ts.forEach(type.baseTypes, function (base) { return getIndexTypeOfType(base, 0 /* String */) && getIndexTypeOfType(base, 1 /* Number */); });
                    errorNode = someBaseTypeHasBothIndexers ? undefined : type.symbol.declarations[0];
                }
            }
            if (errorNode && !isTypeAssignableTo(numberIndexType, stringIndexType)) {
                error(errorNode, ts.Diagnostics.Numeric_index_type_0_is_not_assignable_to_string_index_type_1, typeToString(numberIndexType), typeToString(stringIndexType));
            }
        }
        function checkTypeNameIsReserved(name, message) {
            switch (name.text) {
                case "any":
                case "number":
                case "boolean":
                case "string":
                case "void":
                    error(name, message, name.text);
            }
        }
        function checkTypeParameters(typeParameterDeclarations) {
            if (typeParameterDeclarations) {
                for (var i = 0; i < typeParameterDeclarations.length; i++) {
                    var node = typeParameterDeclarations[i];
                    checkTypeParameter(node);
                    if (fullTypeCheck) {
                        for (var j = 0; j < i; j++) {
                            if (typeParameterDeclarations[j].symbol === node.symbol) {
                                error(node.name, ts.Diagnostics.Duplicate_identifier_0, ts.declarationNameToString(node.name));
                            }
                        }
                    }
                }
            }
        }
        function checkClassDeclaration(node) {
            checkTypeNameIsReserved(node.name, ts.Diagnostics.Class_name_cannot_be_0);
            checkTypeParameters(node.typeParameters);
            checkCollisionWithCapturedThisVariable(node, node.name);
            checkCollisionWithRequireExportsInGeneratedCode(node, node.name);
            checkExportsOnMergedDeclarations(node);
            var symbol = getSymbolOfNode(node);
            var type = getDeclaredTypeOfSymbol(symbol);
            var staticType = getTypeOfSymbol(symbol);
            var baseTypeNode = ts.getClassBaseTypeNode(node);
            if (baseTypeNode) {
                emitExtends = emitExtends || !ts.isInAmbientContext(node);
                checkTypeReference(baseTypeNode);
            }
            if (type.baseTypes.length) {
                if (fullTypeCheck) {
                    var baseType = type.baseTypes[0];
                    checkTypeAssignableTo(type, baseType, node.name, ts.Diagnostics.Class_0_incorrectly_extends_base_class_1);
                    var staticBaseType = getTypeOfSymbol(baseType.symbol);
                    checkTypeAssignableTo(staticType, getTypeWithoutConstructors(staticBaseType), node.name, ts.Diagnostics.Class_static_side_0_incorrectly_extends_base_class_static_side_1);
                    if (baseType.symbol !== resolveEntityName(node, baseTypeNode.typeName, 107455 /* Value */)) {
                        error(baseTypeNode, ts.Diagnostics.Type_name_0_in_extends_clause_does_not_reference_constructor_function_for_0, typeToString(baseType));
                    }
                    checkKindsOfPropertyMemberOverrides(type, baseType);
                }
                checkExpressionOrQualifiedName(baseTypeNode.typeName);
            }
            var implementedTypeNodes = ts.getClassImplementedTypeNodes(node);
            if (implementedTypeNodes) {
                ts.forEach(implementedTypeNodes, function (typeRefNode) {
                    checkTypeReference(typeRefNode);
                    if (fullTypeCheck) {
                        var t = getTypeFromTypeReferenceNode(typeRefNode);
                        if (t !== unknownType) {
                            var declaredType = (t.flags & 4096 /* Reference */) ? t.target : t;
                            if (declaredType.flags & (1024 /* Class */ | 2048 /* Interface */)) {
                                checkTypeAssignableTo(type, t, node.name, ts.Diagnostics.Class_0_incorrectly_implements_interface_1);
                            }
                            else {
                                error(typeRefNode, ts.Diagnostics.A_class_may_only_implement_another_class_or_interface);
                            }
                        }
                    }
                });
            }
            ts.forEach(node.members, checkSourceElement);
            if (fullTypeCheck) {
                checkIndexConstraints(type);
                checkTypeForDuplicateIndexSignatures(node);
            }
        }
        function getTargetSymbol(s) {
            return s.flags & 16777216 /* Instantiated */ ? getSymbolLinks(s).target : s;
        }
        function checkKindsOfPropertyMemberOverrides(type, baseType) {
            var baseProperties = getPropertiesOfObjectType(baseType);
            for (var i = 0, len = baseProperties.length; i < len; ++i) {
                var base = getTargetSymbol(baseProperties[i]);
                if (base.flags & 134217728 /* Prototype */) {
                    continue;
                }
                var derived = getTargetSymbol(getPropertyOfObjectType(type, base.name));
                if (derived) {
                    var baseDeclarationFlags = getDeclarationFlagsFromSymbol(base);
                    var derivedDeclarationFlags = getDeclarationFlagsFromSymbol(derived);
                    if ((baseDeclarationFlags & 32 /* Private */) || (derivedDeclarationFlags & 32 /* Private */)) {
                        continue;
                    }
                    if ((baseDeclarationFlags & 128 /* Static */) !== (derivedDeclarationFlags & 128 /* Static */)) {
                        continue;
                    }
                    if ((base.flags & derived.flags & 8192 /* Method */) || ((base.flags & 98308 /* PropertyOrAccessor */) && (derived.flags & 98308 /* PropertyOrAccessor */))) {
                        continue;
                    }
                    var errorMessage;
                    if (base.flags & 8192 /* Method */) {
                        if (derived.flags & 98304 /* Accessor */) {
                            errorMessage = ts.Diagnostics.Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_accessor;
                        }
                        else {
                            ts.Debug.assert((derived.flags & 4 /* Property */) !== 0);
                            errorMessage = ts.Diagnostics.Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_property;
                        }
                    }
                    else if (base.flags & 4 /* Property */) {
                        ts.Debug.assert((derived.flags & 8192 /* Method */) !== 0);
                        errorMessage = ts.Diagnostics.Class_0_defines_instance_member_property_1_but_extended_class_2_defines_it_as_instance_member_function;
                    }
                    else {
                        ts.Debug.assert((base.flags & 98304 /* Accessor */) !== 0);
                        ts.Debug.assert((derived.flags & 8192 /* Method */) !== 0);
                        errorMessage = ts.Diagnostics.Class_0_defines_instance_member_accessor_1_but_extended_class_2_defines_it_as_instance_member_function;
                    }
                    error(derived.valueDeclaration.name, errorMessage, typeToString(baseType), symbolToString(base), typeToString(type));
                }
            }
        }
        function isAccessor(kind) {
            return kind === 130 /* GetAccessor */ || kind === 131 /* SetAccessor */;
        }
        function areTypeParametersIdentical(list1, list2) {
            if (!list1 && !list2) {
                return true;
            }
            if (!list1 || !list2 || list1.length !== list2.length) {
                return false;
            }
            for (var i = 0, len = list1.length; i < len; i++) {
                var tp1 = list1[i];
                var tp2 = list2[i];
                if (tp1.name.text !== tp2.name.text) {
                    return false;
                }
                if (!tp1.constraint && !tp2.constraint) {
                    continue;
                }
                if (!tp1.constraint || !tp2.constraint) {
                    return false;
                }
                if (!isTypeIdenticalTo(getTypeFromTypeNode(tp1.constraint), getTypeFromTypeNode(tp2.constraint))) {
                    return false;
                }
            }
            return true;
        }
        function checkInheritedPropertiesAreIdentical(type, typeNode) {
            if (!type.baseTypes.length || type.baseTypes.length === 1) {
                return true;
            }
            var seen = {};
            ts.forEach(type.declaredProperties, function (p) {
                seen[p.name] = { prop: p, containingType: type };
            });
            var ok = true;
            for (var i = 0, len = type.baseTypes.length; i < len; ++i) {
                var base = type.baseTypes[i];
                var properties = getPropertiesOfObjectType(base);
                for (var j = 0, proplen = properties.length; j < proplen; ++j) {
                    var prop = properties[j];
                    if (!ts.hasProperty(seen, prop.name)) {
                        seen[prop.name] = { prop: prop, containingType: base };
                    }
                    else {
                        var existing = seen[prop.name];
                        var isInheritedProperty = existing.containingType !== type;
                        if (isInheritedProperty && !isPropertyIdenticalTo(existing.prop, prop)) {
                            ok = false;
                            var typeName1 = typeToString(existing.containingType);
                            var typeName2 = typeToString(base);
                            var errorInfo = ts.chainDiagnosticMessages(undefined, ts.Diagnostics.Named_properties_0_of_types_1_and_2_are_not_identical, prop.name, typeName1, typeName2);
                            errorInfo = ts.chainDiagnosticMessages(errorInfo, ts.Diagnostics.Interface_0_cannot_simultaneously_extend_types_1_and_2, typeToString(type), typeName1, typeName2);
                            addDiagnostic(ts.createDiagnosticForNodeFromMessageChain(typeNode, errorInfo, program.getCompilerHost().getNewLine()));
                        }
                    }
                }
            }
            return ok;
        }
        function checkInterfaceDeclaration(node) {
            checkTypeParameters(node.typeParameters);
            if (fullTypeCheck) {
                checkTypeNameIsReserved(node.name, ts.Diagnostics.Interface_name_cannot_be_0);
                checkExportsOnMergedDeclarations(node);
                var symbol = getSymbolOfNode(node);
                var firstInterfaceDecl = ts.getDeclarationOfKind(symbol, 192 /* InterfaceDeclaration */);
                if (symbol.declarations.length > 1) {
                    if (node !== firstInterfaceDecl && !areTypeParametersIdentical(firstInterfaceDecl.typeParameters, node.typeParameters)) {
                        error(node.name, ts.Diagnostics.All_declarations_of_an_interface_must_have_identical_type_parameters);
                    }
                }
                if (node === firstInterfaceDecl) {
                    var type = getDeclaredTypeOfSymbol(symbol);
                    if (checkInheritedPropertiesAreIdentical(type, node.name)) {
                        ts.forEach(type.baseTypes, function (baseType) {
                            checkTypeAssignableTo(type, baseType, node.name, ts.Diagnostics.Interface_0_incorrectly_extends_interface_1);
                        });
                        checkIndexConstraints(type);
                    }
                }
            }
            ts.forEach(ts.getInterfaceBaseTypeNodes(node), checkTypeReference);
            ts.forEach(node.members, checkSourceElement);
            if (fullTypeCheck) {
                checkTypeForDuplicateIndexSignatures(node);
            }
        }
        function checkTypeAliasDeclaration(node) {
            checkTypeNameIsReserved(node.name, ts.Diagnostics.Type_alias_name_cannot_be_0);
            checkSourceElement(node.type);
        }
        function computeEnumMemberValues(node) {
            var nodeLinks = getNodeLinks(node);
            if (!(nodeLinks.flags & 128 /* EnumValuesComputed */)) {
                var enumSymbol = getSymbolOfNode(node);
                var enumType = getDeclaredTypeOfSymbol(enumSymbol);
                var autoValue = 0;
                var ambient = ts.isInAmbientContext(node);
                var enumIsConst = ts.isConst(node);
                ts.forEach(node.members, function (member) {
                    if (isNumericName(member.name.text)) {
                        error(member.name, ts.Diagnostics.An_enum_member_cannot_have_a_numeric_name);
                    }
                    var initializer = member.initializer;
                    if (initializer) {
                        autoValue = getConstantValueForEnumMemberInitializer(initializer, enumIsConst);
                        if (autoValue === undefined) {
                            if (enumIsConst) {
                                error(initializer, ts.Diagnostics.In_const_enum_declarations_member_initializer_must_be_constant_expression);
                            }
                            else if (!ambient) {
                                checkTypeAssignableTo(checkExpression(initializer), enumType, initializer, undefined);
                            }
                        }
                        else if (enumIsConst) {
                            if (isNaN(autoValue)) {
                                error(initializer, ts.Diagnostics.const_enum_member_initializer_was_evaluated_to_disallowed_value_NaN);
                            }
                            else if (!isFinite(autoValue)) {
                                error(initializer, ts.Diagnostics.const_enum_member_initializer_was_evaluated_to_a_non_finite_value);
                            }
                        }
                    }
                    else if (ambient && !enumIsConst) {
                        autoValue = undefined;
                    }
                    if (autoValue !== undefined) {
                        getNodeLinks(member).enumMemberValue = autoValue++;
                    }
                });
                nodeLinks.flags |= 128 /* EnumValuesComputed */;
            }
            function getConstantValueForEnumMemberInitializer(initializer, enumIsConst) {
                return evalConstant(initializer);
                function evalConstant(e) {
                    switch (e.kind) {
                        case 161 /* PrefixUnaryExpression */:
                            var value = evalConstant(e.operand);
                            if (value === undefined) {
                                return undefined;
                            }
                            switch (e.operator) {
                                case 33 /* PlusToken */: return value;
                                case 34 /* MinusToken */: return -value;
                                case 47 /* TildeToken */: return enumIsConst ? ~value : undefined;
                            }
                            return undefined;
                        case 163 /* BinaryExpression */:
                            if (!enumIsConst) {
                                return undefined;
                            }
                            var left = evalConstant(e.left);
                            if (left === undefined) {
                                return undefined;
                            }
                            var right = evalConstant(e.right);
                            if (right === undefined) {
                                return undefined;
                            }
                            switch (e.operator) {
                                case 44 /* BarToken */: return left | right;
                                case 43 /* AmpersandToken */: return left & right;
                                case 41 /* GreaterThanGreaterThanToken */: return left >> right;
                                case 42 /* GreaterThanGreaterThanGreaterThanToken */: return left >>> right;
                                case 40 /* LessThanLessThanToken */: return left << right;
                                case 45 /* CaretToken */: return left ^ right;
                                case 35 /* AsteriskToken */: return left * right;
                                case 36 /* SlashToken */: return left / right;
                                case 33 /* PlusToken */: return left + right;
                                case 34 /* MinusToken */: return left - right;
                                case 37 /* PercentToken */: return left % right;
                            }
                            return undefined;
                        case 7 /* NumericLiteral */:
                            return +e.text;
                        case 155 /* ParenthesizedExpression */:
                            return enumIsConst ? evalConstant(e.expression) : undefined;
                        case 64 /* Identifier */:
                        case 150 /* ElementAccessExpression */:
                        case 149 /* PropertyAccessExpression */:
                            if (!enumIsConst) {
                                return undefined;
                            }
                            var member = initializer.parent;
                            var currentType = getTypeOfSymbol(getSymbolOfNode(member.parent));
                            var enumType;
                            var propertyName;
                            if (e.kind === 64 /* Identifier */) {
                                enumType = currentType;
                                propertyName = e.text;
                            }
                            else {
                                if (e.kind === 150 /* ElementAccessExpression */) {
                                    if (e.argumentExpression === undefined || e.argumentExpression.kind !== 8 /* StringLiteral */) {
                                        return undefined;
                                    }
                                    var enumType = getTypeOfNode(e.expression);
                                    propertyName = e.argumentExpression.text;
                                }
                                else {
                                    var enumType = getTypeOfNode(e.expression);
                                    propertyName = e.name.text;
                                }
                                if (enumType !== currentType) {
                                    return undefined;
                                }
                            }
                            if (propertyName === undefined) {
                                return undefined;
                            }
                            var property = getPropertyOfObjectType(enumType, propertyName);
                            if (!property || !(property.flags & 8 /* EnumMember */)) {
                                return undefined;
                            }
                            var propertyDecl = property.valueDeclaration;
                            if (member === propertyDecl) {
                                return undefined;
                            }
                            if (!isDefinedBefore(propertyDecl, member)) {
                                return undefined;
                            }
                            return getNodeLinks(propertyDecl).enumMemberValue;
                    }
                }
            }
        }
        function checkEnumDeclaration(node) {
            if (!fullTypeCheck) {
                return;
            }
            checkTypeNameIsReserved(node.name, ts.Diagnostics.Enum_name_cannot_be_0);
            checkCollisionWithCapturedThisVariable(node, node.name);
            checkCollisionWithRequireExportsInGeneratedCode(node, node.name);
            checkExportsOnMergedDeclarations(node);
            computeEnumMemberValues(node);
            var enumSymbol = getSymbolOfNode(node);
            var firstDeclaration = ts.getDeclarationOfKind(enumSymbol, node.kind);
            if (node === firstDeclaration) {
                if (enumSymbol.declarations.length > 1) {
                    var enumIsConst = ts.isConst(node);
                    ts.forEach(enumSymbol.declarations, function (decl) {
                        if (ts.isConstEnumDeclaration(decl) !== enumIsConst) {
                            error(decl.name, ts.Diagnostics.Enum_declarations_must_all_be_const_or_non_const);
                        }
                    });
                }
                var seenEnumMissingInitialInitializer = false;
                ts.forEach(enumSymbol.declarations, function (declaration) {
                    if (declaration.kind !== 194 /* EnumDeclaration */) {
                        return false;
                    }
                    var enumDeclaration = declaration;
                    if (!enumDeclaration.members.length) {
                        return false;
                    }
                    var firstEnumMember = enumDeclaration.members[0];
                    if (!firstEnumMember.initializer) {
                        if (seenEnumMissingInitialInitializer) {
                            error(firstEnumMember.name, ts.Diagnostics.In_an_enum_with_multiple_declarations_only_one_declaration_can_omit_an_initializer_for_its_first_enum_element);
                        }
                        else {
                            seenEnumMissingInitialInitializer = true;
                        }
                    }
                });
            }
        }
        function getFirstNonAmbientClassOrFunctionDeclaration(symbol) {
            var declarations = symbol.declarations;
            for (var i = 0; i < declarations.length; i++) {
                var declaration = declarations[i];
                if ((declaration.kind === 191 /* ClassDeclaration */ || (declaration.kind === 190 /* FunctionDeclaration */ && declaration.body)) && !ts.isInAmbientContext(declaration)) {
                    return declaration;
                }
            }
            return undefined;
        }
        function checkModuleDeclaration(node) {
            if (fullTypeCheck) {
                checkCollisionWithCapturedThisVariable(node, node.name);
                checkCollisionWithRequireExportsInGeneratedCode(node, node.name);
                checkExportsOnMergedDeclarations(node);
                var symbol = getSymbolOfNode(node);
                if (symbol.flags & 512 /* ValueModule */ && symbol.declarations.length > 1 && !ts.isInAmbientContext(node)) {
                    var classOrFunc = getFirstNonAmbientClassOrFunctionDeclaration(symbol);
                    if (classOrFunc) {
                        if (ts.getSourceFileOfNode(node) !== ts.getSourceFileOfNode(classOrFunc)) {
                            error(node.name, ts.Diagnostics.A_module_declaration_cannot_be_in_a_different_file_from_a_class_or_function_with_which_it_is_merged);
                        }
                        else if (node.pos < classOrFunc.pos) {
                            error(node.name, ts.Diagnostics.A_module_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged);
                        }
                    }
                }
                if (node.name.kind === 8 /* StringLiteral */) {
                    if (!isGlobalSourceFile(node.parent)) {
                        error(node.name, ts.Diagnostics.Ambient_external_modules_cannot_be_nested_in_other_modules);
                    }
                    if (isExternalModuleNameRelative(node.name.text)) {
                        error(node.name, ts.Diagnostics.Ambient_external_module_declaration_cannot_specify_relative_module_name);
                    }
                }
            }
            checkSourceElement(node.body);
        }
        function getFirstIdentifier(node) {
            while (node.kind === 121 /* QualifiedName */) {
                node = node.left;
            }
            return node;
        }
        function checkImportDeclaration(node) {
            checkCollisionWithCapturedThisVariable(node, node.name);
            checkCollisionWithRequireExportsInGeneratedCode(node, node.name);
            var symbol = getSymbolOfNode(node);
            var target;
            if (ts.isInternalModuleImportDeclaration(node)) {
                target = resolveImport(symbol);
                if (target !== unknownSymbol) {
                    if (target.flags & 107455 /* Value */) {
                        var moduleName = getFirstIdentifier(node.moduleReference);
                        if (resolveEntityName(node, moduleName, 107455 /* Value */ | 1536 /* Namespace */).flags & 1536 /* Namespace */) {
                            checkExpressionOrQualifiedName(node.moduleReference);
                        }
                        else {
                            error(moduleName, ts.Diagnostics.Module_0_is_hidden_by_a_local_declaration_with_the_same_name, ts.declarationNameToString(moduleName));
                        }
                    }
                    if (target.flags & 793056 /* Type */) {
                        checkTypeNameIsReserved(node.name, ts.Diagnostics.Import_name_cannot_be_0);
                    }
                }
            }
            else {
                if (node.parent.kind === 207 /* SourceFile */) {
                    target = resolveImport(symbol);
                }
                else if (node.parent.kind === 196 /* ModuleBlock */ && node.parent.parent.name.kind === 8 /* StringLiteral */) {
                    if (ts.getExternalModuleImportDeclarationExpression(node).kind === 8 /* StringLiteral */) {
                        if (isExternalModuleNameRelative(ts.getExternalModuleImportDeclarationExpression(node).text)) {
                            error(node, ts.Diagnostics.Import_declaration_in_an_ambient_external_module_declaration_cannot_reference_external_module_through_relative_external_module_name);
                            target = unknownSymbol;
                        }
                        else {
                            target = resolveImport(symbol);
                        }
                    }
                    else {
                        target = unknownSymbol;
                    }
                }
                else {
                    target = unknownSymbol;
                }
            }
            if (target !== unknownSymbol) {
                var excludedMeanings = (symbol.flags & 107455 /* Value */ ? 107455 /* Value */ : 0) | (symbol.flags & 793056 /* Type */ ? 793056 /* Type */ : 0) | (symbol.flags & 1536 /* Namespace */ ? 1536 /* Namespace */ : 0);
                if (target.flags & excludedMeanings) {
                    error(node, ts.Diagnostics.Import_declaration_conflicts_with_local_declaration_of_0, symbolToString(symbol));
                }
            }
        }
        function checkExportAssignment(node) {
            var container = node.parent;
            if (container.kind !== 207 /* SourceFile */) {
                container = container.parent;
            }
            checkTypeOfExportAssignmentSymbol(getSymbolOfNode(container));
        }
        function checkSourceElement(node) {
            if (!node)
                return;
            switch (node.kind) {
                case 123 /* TypeParameter */:
                    return checkTypeParameter(node);
                case 124 /* Parameter */:
                    return checkParameter(node);
                case 126 /* PropertyDeclaration */:
                case 125 /* PropertySignature */:
                    return checkPropertyDeclaration(node);
                case 136 /* FunctionType */:
                case 137 /* ConstructorType */:
                case 132 /* CallSignature */:
                case 133 /* ConstructSignature */:
                case 134 /* IndexSignature */:
                    return checkSignatureDeclaration(node);
                case 128 /* MethodDeclaration */:
                case 127 /* MethodSignature */:
                    return checkMethodDeclaration(node);
                case 129 /* Constructor */:
                    return checkConstructorDeclaration(node);
                case 130 /* GetAccessor */:
                case 131 /* SetAccessor */:
                    return checkAccessorDeclaration(node);
                case 135 /* TypeReference */:
                    return checkTypeReference(node);
                case 138 /* TypeQuery */:
                    return checkTypeQuery(node);
                case 139 /* TypeLiteral */:
                    return checkTypeLiteral(node);
                case 140 /* ArrayType */:
                    return checkArrayType(node);
                case 141 /* TupleType */:
                    return checkTupleType(node);
                case 142 /* UnionType */:
                    return checkUnionType(node);
                case 143 /* ParenthesizedType */:
                    return checkSourceElement(node.type);
                case 190 /* FunctionDeclaration */:
                    return checkFunctionDeclaration(node);
                case 169 /* Block */:
                case 196 /* ModuleBlock */:
                    return checkBlock(node);
                case 170 /* VariableStatement */:
                    return checkVariableStatement(node);
                case 172 /* ExpressionStatement */:
                    return checkExpressionStatement(node);
                case 173 /* IfStatement */:
                    return checkIfStatement(node);
                case 174 /* DoStatement */:
                    return checkDoStatement(node);
                case 175 /* WhileStatement */:
                    return checkWhileStatement(node);
                case 176 /* ForStatement */:
                    return checkForStatement(node);
                case 177 /* ForInStatement */:
                    return checkForInStatement(node);
                case 178 /* ContinueStatement */:
                case 179 /* BreakStatement */:
                    return checkBreakOrContinueStatement(node);
                case 180 /* ReturnStatement */:
                    return checkReturnStatement(node);
                case 181 /* WithStatement */:
                    return checkWithStatement(node);
                case 182 /* SwitchStatement */:
                    return checkSwitchStatement(node);
                case 183 /* LabeledStatement */:
                    return checkLabeledStatement(node);
                case 184 /* ThrowStatement */:
                    return checkThrowStatement(node);
                case 185 /* TryStatement */:
                    return checkTryStatement(node);
                case 189 /* VariableDeclaration */:
                case 146 /* BindingElement */:
                    return checkVariableLikeDeclaration(node);
                case 191 /* ClassDeclaration */:
                    return checkClassDeclaration(node);
                case 192 /* InterfaceDeclaration */:
                    return checkInterfaceDeclaration(node);
                case 193 /* TypeAliasDeclaration */:
                    return checkTypeAliasDeclaration(node);
                case 194 /* EnumDeclaration */:
                    return checkEnumDeclaration(node);
                case 195 /* ModuleDeclaration */:
                    return checkModuleDeclaration(node);
                case 197 /* ImportDeclaration */:
                    return checkImportDeclaration(node);
                case 198 /* ExportAssignment */:
                    return checkExportAssignment(node);
            }
        }
        function checkFunctionExpressionBodies(node) {
            switch (node.kind) {
                case 156 /* FunctionExpression */:
                case 157 /* ArrowFunction */:
                    ts.forEach(node.parameters, checkFunctionExpressionBodies);
                    checkFunctionExpressionOrObjectLiteralMethodBody(node);
                    break;
                case 128 /* MethodDeclaration */:
                case 127 /* MethodSignature */:
                    ts.forEach(node.parameters, checkFunctionExpressionBodies);
                    if (ts.isObjectLiteralMethod(node)) {
                        checkFunctionExpressionOrObjectLiteralMethodBody(node);
                    }
                    break;
                case 129 /* Constructor */:
                case 130 /* GetAccessor */:
                case 131 /* SetAccessor */:
                case 190 /* FunctionDeclaration */:
                    ts.forEach(node.parameters, checkFunctionExpressionBodies);
                    break;
                case 181 /* WithStatement */:
                    checkFunctionExpressionBodies(node.expression);
                    break;
                case 124 /* Parameter */:
                case 126 /* PropertyDeclaration */:
                case 125 /* PropertySignature */:
                case 144 /* ObjectBindingPattern */:
                case 145 /* ArrayBindingPattern */:
                case 146 /* BindingElement */:
                case 147 /* ArrayLiteralExpression */:
                case 148 /* ObjectLiteralExpression */:
                case 204 /* PropertyAssignment */:
                case 149 /* PropertyAccessExpression */:
                case 150 /* ElementAccessExpression */:
                case 151 /* CallExpression */:
                case 152 /* NewExpression */:
                case 153 /* TaggedTemplateExpression */:
                case 154 /* TypeAssertionExpression */:
                case 155 /* ParenthesizedExpression */:
                case 159 /* TypeOfExpression */:
                case 160 /* VoidExpression */:
                case 158 /* DeleteExpression */:
                case 161 /* PrefixUnaryExpression */:
                case 162 /* PostfixUnaryExpression */:
                case 163 /* BinaryExpression */:
                case 164 /* ConditionalExpression */:
                case 169 /* Block */:
                case 196 /* ModuleBlock */:
                case 170 /* VariableStatement */:
                case 172 /* ExpressionStatement */:
                case 173 /* IfStatement */:
                case 174 /* DoStatement */:
                case 175 /* WhileStatement */:
                case 176 /* ForStatement */:
                case 177 /* ForInStatement */:
                case 178 /* ContinueStatement */:
                case 179 /* BreakStatement */:
                case 180 /* ReturnStatement */:
                case 182 /* SwitchStatement */:
                case 200 /* CaseClause */:
                case 201 /* DefaultClause */:
                case 183 /* LabeledStatement */:
                case 184 /* ThrowStatement */:
                case 185 /* TryStatement */:
                case 186 /* TryBlock */:
                case 203 /* CatchClause */:
                case 187 /* FinallyBlock */:
                case 189 /* VariableDeclaration */:
                case 191 /* ClassDeclaration */:
                case 194 /* EnumDeclaration */:
                case 206 /* EnumMember */:
                case 207 /* SourceFile */:
                    ts.forEachChild(node, checkFunctionExpressionBodies);
                    break;
            }
        }
        function checkSourceFile(node) {
            var links = getNodeLinks(node);
            if (!(links.flags & 1 /* TypeChecked */)) {
                emitExtends = false;
                potentialThisCollisions.length = 0;
                ts.forEach(node.statements, checkSourceElement);
                checkFunctionExpressionBodies(node);
                if (ts.isExternalModule(node)) {
                    var symbol = getExportAssignmentSymbol(node.symbol);
                    if (symbol && symbol.flags & 8388608 /* Import */) {
                        getSymbolLinks(symbol).referenced = true;
                    }
                }
                if (potentialThisCollisions.length) {
                    ts.forEach(potentialThisCollisions, checkIfThisIsCapturedInEnclosingScope);
                    potentialThisCollisions.length = 0;
                }
                if (emitExtends) {
                    links.flags |= 8 /* EmitExtends */;
                }
                links.flags |= 1 /* TypeChecked */;
            }
        }
        function getSortedDiagnostics() {
            ts.Debug.assert(fullTypeCheck, "diagnostics are available only in the full typecheck mode");
            if (diagnosticsModified) {
                diagnostics.sort(ts.compareDiagnostics);
                diagnostics = ts.deduplicateSortedDiagnostics(diagnostics);
                diagnosticsModified = false;
            }
            return diagnostics;
        }
        function getDiagnostics(sourceFile) {
            if (sourceFile) {
                checkSourceFile(sourceFile);
                return ts.filter(getSortedDiagnostics(), function (d) { return d.file === sourceFile; });
            }
            ts.forEach(program.getSourceFiles(), checkSourceFile);
            return getSortedDiagnostics();
        }
        function getDeclarationDiagnostics(targetSourceFile) {
            var resolver = createResolver();
            checkSourceFile(targetSourceFile);
            return ts.getDeclarationDiagnostics(program, resolver, targetSourceFile);
        }
        function getGlobalDiagnostics() {
            return ts.filter(getSortedDiagnostics(), function (d) { return !d.file; });
        }
        function isInsideWithStatementBody(node) {
            if (node) {
                while (node.parent) {
                    if (node.parent.kind === 181 /* WithStatement */ && node.parent.statement === node) {
                        return true;
                    }
                    node = node.parent;
                }
            }
            return false;
        }
        function getSymbolsInScope(location, meaning) {
            var symbols = {};
            var memberFlags = 0;
            function copySymbol(symbol, meaning) {
                if (symbol.flags & meaning) {
                    var id = symbol.name;
                    if (!isReservedMemberName(id) && !ts.hasProperty(symbols, id)) {
                        symbols[id] = symbol;
                    }
                }
            }
            function copySymbols(source, meaning) {
                if (meaning) {
                    for (var id in source) {
                        if (ts.hasProperty(source, id)) {
                            copySymbol(source[id], meaning);
                        }
                    }
                }
            }
            if (isInsideWithStatementBody(location)) {
                return [];
            }
            while (location) {
                if (location.locals && !isGlobalSourceFile(location)) {
                    copySymbols(location.locals, meaning);
                }
                switch (location.kind) {
                    case 207 /* SourceFile */:
                        if (!ts.isExternalModule(location))
                            break;
                    case 195 /* ModuleDeclaration */:
                        copySymbols(getSymbolOfNode(location).exports, meaning & 8914931 /* ModuleMember */);
                        break;
                    case 194 /* EnumDeclaration */:
                        copySymbols(getSymbolOfNode(location).exports, meaning & 8 /* EnumMember */);
                        break;
                    case 191 /* ClassDeclaration */:
                    case 192 /* InterfaceDeclaration */:
                        if (!(memberFlags & 128 /* Static */)) {
                            copySymbols(getSymbolOfNode(location).members, meaning & 793056 /* Type */);
                        }
                        break;
                    case 156 /* FunctionExpression */:
                        if (location.name) {
                            copySymbol(location.symbol, meaning);
                        }
                        break;
                    case 203 /* CatchClause */:
                        if (location.name.text) {
                            copySymbol(location.symbol, meaning);
                        }
                        break;
                }
                memberFlags = location.flags;
                location = location.parent;
            }
            copySymbols(globals, meaning);
            return ts.mapToArray(symbols);
        }
        function isTypeDeclarationName(name) {
            return name.kind == 64 /* Identifier */ && isTypeDeclaration(name.parent) && name.parent.name === name;
        }
        function isTypeDeclaration(node) {
            switch (node.kind) {
                case 123 /* TypeParameter */:
                case 191 /* ClassDeclaration */:
                case 192 /* InterfaceDeclaration */:
                case 193 /* TypeAliasDeclaration */:
                case 194 /* EnumDeclaration */:
                    return true;
            }
        }
        function isTypeReferenceIdentifier(entityName) {
            var node = entityName;
            while (node.parent && node.parent.kind === 121 /* QualifiedName */)
                node = node.parent;
            return node.parent && node.parent.kind === 135 /* TypeReference */;
        }
        function isTypeNode(node) {
            if (135 /* FirstTypeNode */ <= node.kind && node.kind <= 143 /* LastTypeNode */) {
                return true;
            }
            switch (node.kind) {
                case 110 /* AnyKeyword */:
                case 117 /* NumberKeyword */:
                case 119 /* StringKeyword */:
                case 111 /* BooleanKeyword */:
                    return true;
                case 98 /* VoidKeyword */:
                    return node.parent.kind !== 160 /* VoidExpression */;
                case 8 /* StringLiteral */:
                    return node.parent.kind === 124 /* Parameter */;
                case 64 /* Identifier */:
                    if (node.parent.kind === 121 /* QualifiedName */ && node.parent.right === node) {
                        node = node.parent;
                    }
                case 121 /* QualifiedName */:
                    ts.Debug.assert(node.kind === 64 /* Identifier */ || node.kind === 121 /* QualifiedName */, "'node' was expected to be a qualified name or identifier in 'isTypeNode'.");
                    var parent = node.parent;
                    if (parent.kind === 138 /* TypeQuery */) {
                        return false;
                    }
                    if (135 /* FirstTypeNode */ <= parent.kind && parent.kind <= 143 /* LastTypeNode */) {
                        return true;
                    }
                    switch (parent.kind) {
                        case 123 /* TypeParameter */:
                            return node === parent.constraint;
                        case 126 /* PropertyDeclaration */:
                        case 125 /* PropertySignature */:
                        case 124 /* Parameter */:
                        case 189 /* VariableDeclaration */:
                            return node === parent.type;
                        case 190 /* FunctionDeclaration */:
                        case 156 /* FunctionExpression */:
                        case 157 /* ArrowFunction */:
                        case 129 /* Constructor */:
                        case 128 /* MethodDeclaration */:
                        case 127 /* MethodSignature */:
                        case 130 /* GetAccessor */:
                        case 131 /* SetAccessor */:
                            return node === parent.type;
                        case 132 /* CallSignature */:
                        case 133 /* ConstructSignature */:
                        case 134 /* IndexSignature */:
                            return node === parent.type;
                        case 154 /* TypeAssertionExpression */:
                            return node === parent.type;
                        case 151 /* CallExpression */:
                        case 152 /* NewExpression */:
                            return parent.typeArguments && ts.indexOf(parent.typeArguments, node) >= 0;
                        case 153 /* TaggedTemplateExpression */:
                            return false;
                    }
            }
            return false;
        }
        function isInRightSideOfImportOrExportAssignment(node) {
            while (node.parent.kind === 121 /* QualifiedName */) {
                node = node.parent;
            }
            if (node.parent.kind === 197 /* ImportDeclaration */) {
                return node.parent.moduleReference === node;
            }
            if (node.parent.kind === 198 /* ExportAssignment */) {
                return node.parent.exportName === node;
            }
            return false;
        }
        function isRightSideOfQualifiedNameOrPropertyAccess(node) {
            return (node.parent.kind === 121 /* QualifiedName */ && node.parent.right === node) || (node.parent.kind === 149 /* PropertyAccessExpression */ && node.parent.name === node);
        }
        function getSymbolOfEntityNameOrPropertyAccessExpression(entityName) {
            if (ts.isDeclarationOrFunctionExpressionOrCatchVariableName(entityName)) {
                return getSymbolOfNode(entityName.parent);
            }
            if (entityName.parent.kind === 198 /* ExportAssignment */) {
                return resolveEntityName(entityName.parent.parent, entityName, 107455 /* Value */ | 793056 /* Type */ | 1536 /* Namespace */ | 8388608 /* Import */);
            }
            if (entityName.kind !== 149 /* PropertyAccessExpression */) {
                if (isInRightSideOfImportOrExportAssignment(entityName)) {
                    return getSymbolOfPartOfRightHandSideOfImport(entityName);
                }
            }
            if (isRightSideOfQualifiedNameOrPropertyAccess(entityName)) {
                entityName = entityName.parent;
            }
            if (ts.isExpression(entityName)) {
                if (ts.getFullWidth(entityName) === 0) {
                    return undefined;
                }
                if (entityName.kind === 64 /* Identifier */) {
                    var meaning = 107455 /* Value */ | 8388608 /* Import */;
                    return resolveEntityName(entityName, entityName, meaning);
                }
                else if (entityName.kind === 149 /* PropertyAccessExpression */) {
                    var symbol = getNodeLinks(entityName).resolvedSymbol;
                    if (!symbol) {
                        checkPropertyAccessExpression(entityName);
                    }
                    return getNodeLinks(entityName).resolvedSymbol;
                }
                else if (entityName.kind === 121 /* QualifiedName */) {
                    var symbol = getNodeLinks(entityName).resolvedSymbol;
                    if (!symbol) {
                        checkQualifiedName(entityName);
                    }
                    return getNodeLinks(entityName).resolvedSymbol;
                }
            }
            else if (isTypeReferenceIdentifier(entityName)) {
                var meaning = entityName.parent.kind === 135 /* TypeReference */ ? 793056 /* Type */ : 1536 /* Namespace */;
                meaning |= 8388608 /* Import */;
                return resolveEntityName(entityName, entityName, meaning);
            }
            return undefined;
        }
        function getSymbolInfo(node) {
            if (isInsideWithStatementBody(node)) {
                return undefined;
            }
            if (ts.isDeclarationOrFunctionExpressionOrCatchVariableName(node)) {
                return getSymbolOfNode(node.parent);
            }
            if (node.kind === 64 /* Identifier */ && isInRightSideOfImportOrExportAssignment(node)) {
                return node.parent.kind === 198 /* ExportAssignment */ ? getSymbolOfEntityNameOrPropertyAccessExpression(node) : getSymbolOfPartOfRightHandSideOfImport(node);
            }
            switch (node.kind) {
                case 64 /* Identifier */:
                case 149 /* PropertyAccessExpression */:
                case 121 /* QualifiedName */:
                    return getSymbolOfEntityNameOrPropertyAccessExpression(node);
                case 92 /* ThisKeyword */:
                case 90 /* SuperKeyword */:
                    var type = checkExpression(node);
                    return type.symbol;
                case 112 /* ConstructorKeyword */:
                    var constructorDeclaration = node.parent;
                    if (constructorDeclaration && constructorDeclaration.kind === 129 /* Constructor */) {
                        return constructorDeclaration.parent.symbol;
                    }
                    return undefined;
                case 8 /* StringLiteral */:
                    if (ts.isExternalModuleImportDeclaration(node.parent.parent) && ts.getExternalModuleImportDeclarationExpression(node.parent.parent) === node) {
                        var importSymbol = getSymbolOfNode(node.parent.parent);
                        var moduleType = getTypeOfSymbol(importSymbol);
                        return moduleType ? moduleType.symbol : undefined;
                    }
                case 7 /* NumericLiteral */:
                    if (node.parent.kind == 150 /* ElementAccessExpression */ && node.parent.argumentExpression === node) {
                        var objectType = checkExpression(node.parent.expression);
                        if (objectType === unknownType)
                            return undefined;
                        var apparentType = getApparentType(objectType);
                        if (apparentType === unknownType)
                            return undefined;
                        return getPropertyOfType(apparentType, node.text);
                    }
                    break;
            }
            return undefined;
        }
        function getShorthandAssignmentValueSymbol(location) {
            if (location && location.kind === 205 /* ShorthandPropertyAssignment */) {
                return resolveEntityName(location, location.name, 107455 /* Value */);
            }
            return undefined;
        }
        function getTypeOfNode(node) {
            if (isInsideWithStatementBody(node)) {
                return unknownType;
            }
            if (ts.isExpression(node)) {
                return getTypeOfExpression(node);
            }
            if (isTypeNode(node)) {
                return getTypeFromTypeNode(node);
            }
            if (isTypeDeclaration(node)) {
                var symbol = getSymbolOfNode(node);
                return getDeclaredTypeOfSymbol(symbol);
            }
            if (isTypeDeclarationName(node)) {
                var symbol = getSymbolInfo(node);
                return symbol && getDeclaredTypeOfSymbol(symbol);
            }
            if (ts.isDeclaration(node)) {
                var symbol = getSymbolOfNode(node);
                return getTypeOfSymbol(symbol);
            }
            if (ts.isDeclarationOrFunctionExpressionOrCatchVariableName(node)) {
                var symbol = getSymbolInfo(node);
                return symbol && getTypeOfSymbol(symbol);
            }
            if (isInRightSideOfImportOrExportAssignment(node)) {
                var symbol = getSymbolInfo(node);
                var declaredType = symbol && getDeclaredTypeOfSymbol(symbol);
                return declaredType !== unknownType ? declaredType : getTypeOfSymbol(symbol);
            }
            return unknownType;
        }
        function getTypeOfExpression(expr) {
            if (isRightSideOfQualifiedNameOrPropertyAccess(expr)) {
                expr = expr.parent;
            }
            return checkExpression(expr);
        }
        function getAugmentedPropertiesOfType(type) {
            var type = getApparentType(type);
            var propsByName = createSymbolTable(getPropertiesOfType(type));
            if (getSignaturesOfType(type, 0 /* Call */).length || getSignaturesOfType(type, 1 /* Construct */).length) {
                ts.forEach(getPropertiesOfType(globalFunctionType), function (p) {
                    if (!ts.hasProperty(propsByName, p.name)) {
                        propsByName[p.name] = p;
                    }
                });
            }
            return getNamedMembers(propsByName);
        }
        function getRootSymbols(symbol) {
            if (symbol.flags & 268435456 /* UnionProperty */) {
                var symbols = [];
                var name = symbol.name;
                ts.forEach(getSymbolLinks(symbol).unionType.types, function (t) {
                    symbols.push(getPropertyOfType(t, name));
                });
                return symbols;
            }
            else if (symbol.flags & 67108864 /* Transient */) {
                var target = getSymbolLinks(symbol).target;
                if (target) {
                    return [target];
                }
            }
            return [symbol];
        }
        function isExternalModuleSymbol(symbol) {
            return symbol.flags & 512 /* ValueModule */ && symbol.declarations.length === 1 && symbol.declarations[0].kind === 207 /* SourceFile */;
        }
        function isNodeDescendentOf(node, ancestor) {
            while (node) {
                if (node === ancestor)
                    return true;
                node = node.parent;
            }
            return false;
        }
        function isUniqueLocalName(name, container) {
            for (var node = container; isNodeDescendentOf(node, container); node = node.nextContainer) {
                if (node.locals && ts.hasProperty(node.locals, name) && node.locals[name].flags & (107455 /* Value */ | 1048576 /* ExportValue */)) {
                    return false;
                }
            }
            return true;
        }
        function getLocalNameOfContainer(container) {
            var links = getNodeLinks(container);
            if (!links.localModuleName) {
                var prefix = "";
                var name = ts.unescapeIdentifier(container.name.text);
                while (!isUniqueLocalName(ts.escapeIdentifier(prefix + name), container)) {
                    prefix += "_";
                }
                links.localModuleName = prefix + ts.getTextOfNode(container.name);
            }
            return links.localModuleName;
        }
        function getLocalNameForSymbol(symbol, location) {
            var node = location;
            while (node) {
                if ((node.kind === 195 /* ModuleDeclaration */ || node.kind === 194 /* EnumDeclaration */) && getSymbolOfNode(node) === symbol) {
                    return getLocalNameOfContainer(node);
                }
                node = node.parent;
            }
            ts.Debug.fail("getLocalNameForSymbol failed");
        }
        function getExpressionNamePrefix(node) {
            var symbol = getNodeLinks(node).resolvedSymbol;
            if (symbol) {
                var exportSymbol = getExportSymbolOfValueSymbolIfExported(symbol);
                if (symbol !== exportSymbol && !(exportSymbol.flags & 944 /* ExportHasLocal */)) {
                    symbol = exportSymbol;
                }
                if (symbol.parent) {
                    return isExternalModuleSymbol(symbol.parent) ? "exports" : getLocalNameForSymbol(getParentOfSymbol(symbol), node.parent);
                }
            }
        }
        function getExportAssignmentName(node) {
            var symbol = getExportAssignmentSymbol(getSymbolOfNode(node));
            return symbol && symbolIsValue(symbol) && !isConstEnumSymbol(symbol) ? symbolToString(symbol) : undefined;
        }
        function isTopLevelValueImportWithEntityName(node) {
            if (node.parent.kind !== 207 /* SourceFile */ || !ts.isInternalModuleImportDeclaration(node)) {
                return false;
            }
            return isImportResolvedToValue(getSymbolOfNode(node));
        }
        function hasSemanticErrors(sourceFile) {
            return getDiagnostics(sourceFile).length > 0 || getGlobalDiagnostics().length > 0;
        }
        function isEmitBlocked(sourceFile) {
            return program.getDiagnostics(sourceFile).length !== 0 || hasEarlyErrors(sourceFile) || (compilerOptions.noEmitOnError && getDiagnostics(sourceFile).length !== 0);
        }
        function hasEarlyErrors(sourceFile) {
            return ts.forEach(getDiagnostics(sourceFile), function (d) { return d.isEarly; });
        }
        function isImportResolvedToValue(symbol) {
            var target = resolveImport(symbol);
            return target !== unknownSymbol && target.flags & 107455 /* Value */ && !isConstEnumOrConstEnumOnlyModule(target);
        }
        function isConstEnumOrConstEnumOnlyModule(s) {
            return isConstEnumSymbol(s) || s.constEnumOnlyModule;
        }
        function isReferencedImportDeclaration(node) {
            var symbol = getSymbolOfNode(node);
            if (getSymbolLinks(symbol).referenced) {
                return true;
            }
            if (node.flags & 1 /* Export */) {
                return isImportResolvedToValue(symbol);
            }
            return false;
        }
        function isImplementationOfOverload(node) {
            if (node.body) {
                var symbol = getSymbolOfNode(node);
                var signaturesOfSymbol = getSignaturesOfSymbol(symbol);
                return signaturesOfSymbol.length > 1 || (signaturesOfSymbol.length === 1 && signaturesOfSymbol[0].declaration !== node);
            }
            return false;
        }
        function getNodeCheckFlags(node) {
            return getNodeLinks(node).flags;
        }
        function getEnumMemberValue(node) {
            computeEnumMemberValues(node.parent);
            return getNodeLinks(node).enumMemberValue;
        }
        function getConstantValue(node) {
            var symbol = getNodeLinks(node).resolvedSymbol;
            if (symbol && (symbol.flags & 8 /* EnumMember */)) {
                var declaration = symbol.valueDeclaration;
                var constantValue;
                if (declaration.kind === 206 /* EnumMember */ && (constantValue = getNodeLinks(declaration).enumMemberValue) !== undefined) {
                    return constantValue;
                }
            }
            return undefined;
        }
        function writeTypeOfDeclaration(declaration, enclosingDeclaration, flags, writer) {
            var symbol = getSymbolOfNode(declaration);
            var type = symbol && !(symbol.flags & (2048 /* TypeLiteral */ | 131072 /* Signature */)) ? getTypeOfSymbol(symbol) : unknownType;
            getSymbolDisplayBuilder().buildTypeDisplay(type, writer, enclosingDeclaration, flags);
        }
        function writeReturnTypeOfSignatureDeclaration(signatureDeclaration, enclosingDeclaration, flags, writer) {
            var signature = getSignatureFromDeclaration(signatureDeclaration);
            getSymbolDisplayBuilder().buildTypeDisplay(getReturnTypeOfSignature(signature), writer, enclosingDeclaration, flags);
        }
        function isUnknownIdentifier(location, name) {
            return !resolveName(location, name, 107455 /* Value */, undefined, undefined);
        }
        function createResolver() {
            return {
                getProgram: function () { return program; },
                getLocalNameOfContainer: getLocalNameOfContainer,
                getExpressionNamePrefix: getExpressionNamePrefix,
                getExportAssignmentName: getExportAssignmentName,
                isReferencedImportDeclaration: isReferencedImportDeclaration,
                getNodeCheckFlags: getNodeCheckFlags,
                getEnumMemberValue: getEnumMemberValue,
                isTopLevelValueImportWithEntityName: isTopLevelValueImportWithEntityName,
                hasSemanticErrors: hasSemanticErrors,
                isEmitBlocked: isEmitBlocked,
                isDeclarationVisible: isDeclarationVisible,
                isImplementationOfOverload: isImplementationOfOverload,
                writeTypeOfDeclaration: writeTypeOfDeclaration,
                writeReturnTypeOfSignatureDeclaration: writeReturnTypeOfSignatureDeclaration,
                isSymbolAccessible: isSymbolAccessible,
                isEntityNameVisible: isEntityNameVisible,
                getConstantValue: getConstantValue,
                isUnknownIdentifier: isUnknownIdentifier
            };
        }
        function invokeEmitter(targetSourceFile) {
            var resolver = createResolver();
            return ts.emitFiles(resolver, targetSourceFile);
        }
        function initializeTypeChecker() {
            ts.forEach(program.getSourceFiles(), function (file) {
                ts.bindSourceFile(file);
                ts.forEach(file.semanticDiagnostics, addDiagnostic);
            });
            ts.forEach(program.getSourceFiles(), function (file) {
                if (!ts.isExternalModule(file)) {
                    extendSymbolTable(globals, file.locals);
                }
            });
            getSymbolLinks(undefinedSymbol).type = undefinedType;
            getSymbolLinks(argumentsSymbol).type = getGlobalType("IArguments");
            getSymbolLinks(unknownSymbol).type = unknownType;
            globals[undefinedSymbol.name] = undefinedSymbol;
            globalArraySymbol = getGlobalSymbol("Array");
            globalArrayType = getTypeOfGlobalSymbol(globalArraySymbol, 1);
            globalObjectType = getGlobalType("Object");
            globalFunctionType = getGlobalType("Function");
            globalStringType = getGlobalType("String");
            globalNumberType = getGlobalType("Number");
            globalBooleanType = getGlobalType("Boolean");
            globalRegExpType = getGlobalType("RegExp");
            globalTemplateStringsArrayType = compilerOptions.target >= 2 /* ES6 */ ? getGlobalType("TemplateStringsArray") : unknownType;
            anyArrayType = createArrayType(anyType);
        }
        initializeTypeChecker();
        return checker;
    }
    ts.createTypeChecker = createTypeChecker;
})(ts || (ts = {}));
var TypeScript;
(function (TypeScript) {
    TypeScript.DiagnosticCode = {
        error_TS_0_1: "error TS{0}: {1}",
        warning_TS_0_1: "warning TS{0}: {1}",
        Unrecognized_escape_sequence: "Unrecognized escape sequence.",
        Unexpected_character_0: "Unexpected character {0}.",
        Unterminated_string_literal: "Unterminated string literal.",
        Identifier_expected: "Identifier expected.",
        _0_keyword_expected: "'{0}' keyword expected.",
        _0_expected: "'{0}' expected.",
        Identifier_expected_0_is_a_keyword: "Identifier expected; '{0}' is a keyword.",
        Automatic_semicolon_insertion_not_allowed: "Automatic semicolon insertion not allowed.",
        Unexpected_token_0_expected: "Unexpected token; '{0}' expected.",
        Trailing_comma_not_allowed: "Trailing comma not allowed.",
        public_or_private_modifier_must_precede_static: "'public' or 'private' modifier must precede 'static'.",
        Unexpected_token: "Unexpected token.",
        Catch_clause_parameter_cannot_have_a_type_annotation: "Catch clause parameter cannot have a type annotation.",
        A_rest_parameter_must_be_last_in_a_parameter_list: "A rest parameter must be last in a parameter list.",
        Parameter_cannot_have_question_mark_and_initializer: "Parameter cannot have question mark and initializer.",
        A_required_parameter_cannot_follow_an_optional_parameter: "A required parameter cannot follow an optional parameter.",
        Index_signatures_cannot_have_rest_parameters: "Index signatures cannot have rest parameters.",
        Index_signature_parameter_cannot_have_modifiers: "Index signature parameter cannot have modifiers.",
        Index_signature_parameter_cannot_have_a_question_mark: "Index signature parameter cannot have a question mark.",
        Index_signature_parameter_cannot_have_an_initializer: "Index signature parameter cannot have an initializer.",
        Index_signature_must_have_a_type_annotation: "Index signature must have a type annotation.",
        Index_signature_parameter_must_have_a_type_annotation: "Index signature parameter must have a type annotation.",
        Index_signature_parameter_type_must_be_string_or_number: "Index signature parameter type must be 'string' or 'number'.",
        extends_clause_already_seen: "'extends' clause already seen.",
        extends_clause_must_precede_implements_clause: "'extends' clause must precede 'implements' clause.",
        Classes_can_only_extend_a_single_class: "Classes can only extend a single class.",
        implements_clause_already_seen: "'implements' clause already seen.",
        Accessibility_modifier_already_seen: "Accessibility modifier already seen.",
        _0_modifier_must_precede_1_modifier: "'{0}' modifier must precede '{1}' modifier.",
        _0_modifier_already_seen: "'{0}' modifier already seen.",
        _0_modifier_cannot_appear_on_a_class_element: "'{0}' modifier cannot appear on a class element.",
        Interface_declaration_cannot_have_implements_clause: "Interface declaration cannot have 'implements' clause.",
        super_invocation_cannot_have_type_arguments: "'super' invocation cannot have type arguments.",
        Only_ambient_modules_can_use_quoted_names: "Only ambient modules can use quoted names.",
        Statements_are_not_allowed_in_ambient_contexts: "Statements are not allowed in ambient contexts.",
        A_function_implementation_cannot_be_declared_in_an_ambient_context: "A function implementation cannot be declared in an ambient context.",
        A_declare_modifier_cannot_be_used_in_an_already_ambient_context: "A 'declare' modifier cannot be used in an already ambient context.",
        Initializers_are_not_allowed_in_ambient_contexts: "Initializers are not allowed in ambient contexts.",
        _0_modifier_cannot_appear_on_a_module_element: "'{0}' modifier cannot appear on a module element.",
        A_declare_modifier_cannot_be_used_with_an_interface_declaration: "A 'declare' modifier cannot be used with an interface declaration.",
        A_declare_modifier_is_required_for_a_top_level_declaration_in_a_d_ts_file: "A 'declare' modifier is required for a top level declaration in a .d.ts file.",
        A_rest_parameter_cannot_be_optional: "A rest parameter cannot be optional.",
        A_rest_parameter_cannot_have_an_initializer: "A rest parameter cannot have an initializer.",
        set_accessor_must_have_exactly_one_parameter: "'set' accessor must have exactly one parameter.",
        set_accessor_parameter_cannot_be_optional: "'set' accessor parameter cannot be optional.",
        set_accessor_parameter_cannot_have_an_initializer: "'set' accessor parameter cannot have an initializer.",
        set_accessor_cannot_have_rest_parameter: "'set' accessor cannot have rest parameter.",
        get_accessor_cannot_have_parameters: "'get' accessor cannot have parameters.",
        Modifiers_cannot_appear_here: "Modifiers cannot appear here.",
        Accessors_are_only_available_when_targeting_ECMAScript_5_and_higher: "Accessors are only available when targeting ECMAScript 5 and higher.",
        Enum_member_must_have_initializer: "Enum member must have initializer.",
        Export_assignment_cannot_be_used_in_internal_modules: "Export assignment cannot be used in internal modules.",
        Ambient_enum_elements_can_only_have_integer_literal_initializers: "Ambient enum elements can only have integer literal initializers.",
        module_class_interface_enum_import_or_statement: "module, class, interface, enum, import or statement",
        constructor_function_accessor_or_variable: "constructor, function, accessor or variable",
        statement: "statement",
        case_or_default_clause: "case or default clause",
        identifier: "identifier",
        call_construct_index_property_or_function_signature: "call, construct, index, property or function signature",
        expression: "expression",
        type_name: "type name",
        property_or_accessor: "property or accessor",
        parameter: "parameter",
        type: "type",
        type_parameter: "type parameter",
        A_declare_modifier_cannot_be_used_with_an_import_declaration: "A 'declare' modifier cannot be used with an import declaration.",
        Invalid_reference_directive_syntax: "Invalid 'reference' directive syntax.",
        Octal_literals_are_not_available_when_targeting_ECMAScript_5_and_higher: "Octal literals are not available when targeting ECMAScript 5 and higher.",
        Accessors_are_not_allowed_in_ambient_contexts: "Accessors are not allowed in ambient contexts.",
        _0_modifier_cannot_appear_on_a_constructor_declaration: "'{0}' modifier cannot appear on a constructor declaration.",
        _0_modifier_cannot_appear_on_a_parameter: "'{0}' modifier cannot appear on a parameter.",
        Only_a_single_variable_declaration_is_allowed_in_a_for_in_statement: "Only a single variable declaration is allowed in a 'for...in' statement.",
        Type_parameters_cannot_appear_on_a_constructor_declaration: "Type parameters cannot appear on a constructor declaration.",
        Type_annotation_cannot_appear_on_a_constructor_declaration: "Type annotation cannot appear on a constructor declaration.",
        Type_parameters_cannot_appear_on_an_accessor: "Type parameters cannot appear on an accessor.",
        Type_annotation_cannot_appear_on_a_set_accessor: "Type annotation cannot appear on a 'set' accessor.",
        Index_signature_must_have_exactly_one_parameter: "Index signature must have exactly one parameter.",
        _0_list_cannot_be_empty: "'{0}' list cannot be empty.",
        variable_declaration: "variable declaration",
        type_argument: "type argument",
        Invalid_use_of_0_in_strict_mode: "Invalid use of '{0}' in strict mode.",
        with_statements_are_not_allowed_in_strict_mode: "'with' statements are not allowed in strict mode.",
        delete_cannot_be_called_on_an_identifier_in_strict_mode: "'delete' cannot be called on an identifier in strict mode.",
        Invalid_left_hand_side_in_for_in_statement: "Invalid left-hand side in 'for...in' statement.",
        continue_statement_can_only_be_used_within_an_enclosing_iteration_statement: "'continue' statement can only be used within an enclosing iteration statement.",
        break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement: "'break' statement can only be used within an enclosing iteration or switch statement.",
        Jump_target_not_found: "Jump target not found.",
        Jump_target_cannot_cross_function_boundary: "Jump target cannot cross function boundary.",
        return_statement_must_be_contained_within_a_function_body: "'return' statement must be contained within a function body.",
        Expression_expected: "Expression expected.",
        Type_expected: "Type expected.",
        Template_literal_cannot_be_used_as_an_element_name: "Template literal cannot be used as an element name.",
        Computed_property_names_cannot_be_used_here: "Computed property names cannot be used here.",
        yield_expression_must_be_contained_within_a_generator_declaration: "'yield' expression must be contained within a generator declaration.",
        Unterminated_regular_expression_literal: "Unterminated regular expression literal.",
        Unterminated_template_literal: "Unterminated template literal.",
        await_expression_must_be_contained_within_an_async_declaration: "'await' expression must be contained within an async declaration.",
        async_arrow_function_parameters_must_be_parenthesized: "'async' arrow function parameters must be parenthesized.",
        A_generator_declaration_cannot_have_the_async_modifier: "A generator declaration cannot have the 'async' modifier.",
        async_modifier_cannot_appear_here: "'async' modifier cannot appear here.",
        comma_expression_cannot_appear_in_a_computed_property_name: "'comma' expression cannot appear in a computed property name.",
        String_literal_expected: "String literal expected.",
        Duplicate_identifier_0: "Duplicate identifier '{0}'.",
        The_name_0_does_not_exist_in_the_current_scope: "The name '{0}' does not exist in the current scope.",
        The_name_0_does_not_refer_to_a_value: "The name '{0}' does not refer to a value.",
        super_can_only_be_used_inside_a_class_instance_method: "'super' can only be used inside a class instance method.",
        The_left_hand_side_of_an_assignment_expression_must_be_a_variable_property_or_indexer: "The left-hand side of an assignment expression must be a variable, property or indexer.",
        Value_of_type_0_is_not_callable_Did_you_mean_to_include_new: "Value of type '{0}' is not callable. Did you mean to include 'new'?",
        Value_of_type_0_is_not_callable: "Value of type '{0}' is not callable.",
        Value_of_type_0_is_not_newable: "Value of type '{0}' is not newable.",
        An_index_expression_argument_must_be_string_number_or_any: "An index expression argument must be 'string', 'number', or 'any'.",
        Operator_0_cannot_be_applied_to_types_1_and_2: "Operator '{0}' cannot be applied to types '{1}' and '{2}'.",
        Type_0_is_not_assignable_to_type_1: "Type '{0}' is not assignable to type '{1}'.",
        Type_0_is_not_assignable_to_type_1_NL_2: "Type '{0}' is not assignable to type '{1}':{NL}{2}",
        Expected_var_class_interface_or_module: "Expected var, class, interface, or module.",
        Getter_0_already_declared: "Getter '{0}' already declared.",
        Setter_0_already_declared: "Setter '{0}' already declared.",
        Exported_class_0_extends_private_class_1: "Exported class '{0}' extends private class '{1}'.",
        Exported_class_0_implements_private_interface_1: "Exported class '{0}' implements private interface '{1}'.",
        Exported_interface_0_extends_private_interface_1: "Exported interface '{0}' extends private interface '{1}'.",
        Exported_class_0_extends_class_from_inaccessible_module_1: "Exported class '{0}' extends class from inaccessible module {1}.",
        Exported_class_0_implements_interface_from_inaccessible_module_1: "Exported class '{0}' implements interface from inaccessible module {1}.",
        Exported_interface_0_extends_interface_from_inaccessible_module_1: "Exported interface '{0}' extends interface from inaccessible module {1}.",
        Public_static_property_0_of_exported_class_has_or_is_using_private_type_1: "Public static property '{0}' of exported class has or is using private type '{1}'.",
        Public_property_0_of_exported_class_has_or_is_using_private_type_1: "Public property '{0}' of exported class has or is using private type '{1}'.",
        Property_0_of_exported_interface_has_or_is_using_private_type_1: "Property '{0}' of exported interface has or is using private type '{1}'.",
        Exported_variable_0_has_or_is_using_private_type_1: "Exported variable '{0}' has or is using private type '{1}'.",
        Public_static_property_0_of_exported_class_is_using_inaccessible_module_1: "Public static property '{0}' of exported class is using inaccessible module {1}.",
        Public_property_0_of_exported_class_is_using_inaccessible_module_1: "Public property '{0}' of exported class is using inaccessible module {1}.",
        Property_0_of_exported_interface_is_using_inaccessible_module_1: "Property '{0}' of exported interface is using inaccessible module {1}.",
        Exported_variable_0_is_using_inaccessible_module_1: "Exported variable '{0}' is using inaccessible module {1}.",
        Parameter_0_of_constructor_from_exported_class_has_or_is_using_private_type_1: "Parameter '{0}' of constructor from exported class has or is using private type '{1}'.",
        Parameter_0_of_public_static_property_setter_from_exported_class_has_or_is_using_private_type_1: "Parameter '{0}' of public static property setter from exported class has or is using private type '{1}'.",
        Parameter_0_of_public_property_setter_from_exported_class_has_or_is_using_private_type_1: "Parameter '{0}' of public property setter from exported class has or is using private type '{1}'.",
        Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_type_1: "Parameter '{0}' of constructor signature from exported interface has or is using private type '{1}'.",
        Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_type_1: "Parameter '{0}' of call signature from exported interface has or is using private type '{1}'.",
        Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_type_1: "Parameter '{0}' of public static method from exported class has or is using private type '{1}'.",
        Parameter_0_of_public_method_from_exported_class_has_or_is_using_private_type_1: "Parameter '{0}' of public method from exported class has or is using private type '{1}'.",
        Parameter_0_of_method_from_exported_interface_has_or_is_using_private_type_1: "Parameter '{0}' of method from exported interface has or is using private type '{1}'.",
        Parameter_0_of_exported_function_has_or_is_using_private_type_1: "Parameter '{0}' of exported function has or is using private type '{1}'.",
        Parameter_0_of_constructor_from_exported_class_is_using_inaccessible_module_1: "Parameter '{0}' of constructor from exported class is using inaccessible module {1}.",
        Parameter_0_of_public_static_property_setter_from_exported_class_is_using_inaccessible_module_1: "Parameter '{0}' of public static property setter from exported class is using inaccessible module {1}.",
        Parameter_0_of_public_property_setter_from_exported_class_is_using_inaccessible_module_1: "Parameter '{0}' of public property setter from exported class is using inaccessible module {1}.",
        Parameter_0_of_constructor_signature_from_exported_interface_is_using_inaccessible_module_1: "Parameter '{0}' of constructor signature from exported interface is using inaccessible module {1}.",
        Parameter_0_of_call_signature_from_exported_interface_is_using_inaccessible_module_1: "Parameter '{0}' of call signature from exported interface is using inaccessible module {1}",
        Parameter_0_of_public_static_method_from_exported_class_is_using_inaccessible_module_1: "Parameter '{0}' of public static method from exported class is using inaccessible module {1}.",
        Parameter_0_of_public_method_from_exported_class_is_using_inaccessible_module_1: "Parameter '{0}' of public method from exported class is using inaccessible module {1}.",
        Parameter_0_of_method_from_exported_interface_is_using_inaccessible_module_1: "Parameter '{0}' of method from exported interface is using inaccessible module {1}.",
        Parameter_0_of_exported_function_is_using_inaccessible_module_1: "Parameter '{0}' of exported function is using inaccessible module {1}.",
        Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_private_type_0: "Return type of public static property getter from exported class has or is using private type '{0}'.",
        Return_type_of_public_property_getter_from_exported_class_has_or_is_using_private_type_0: "Return type of public property getter from exported class has or is using private type '{0}'.",
        Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_type_0: "Return type of constructor signature from exported interface has or is using private type '{0}'.",
        Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_type_0: "Return type of call signature from exported interface has or is using private type '{0}'.",
        Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_type_0: "Return type of index signature from exported interface has or is using private type '{0}'.",
        Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_type_0: "Return type of public static method from exported class has or is using private type '{0}'.",
        Return_type_of_public_method_from_exported_class_has_or_is_using_private_type_0: "Return type of public method from exported class has or is using private type '{0}'.",
        Return_type_of_method_from_exported_interface_has_or_is_using_private_type_0: "Return type of method from exported interface has or is using private type '{0}'.",
        Return_type_of_exported_function_has_or_is_using_private_type_0: "Return type of exported function has or is using private type '{0}'.",
        Return_type_of_public_static_property_getter_from_exported_class_is_using_inaccessible_module_0: "Return type of public static property getter from exported class is using inaccessible module {0}.",
        Return_type_of_public_property_getter_from_exported_class_is_using_inaccessible_module_0: "Return type of public property getter from exported class is using inaccessible module {0}.",
        Return_type_of_constructor_signature_from_exported_interface_is_using_inaccessible_module_0: "Return type of constructor signature from exported interface is using inaccessible module {0}.",
        Return_type_of_call_signature_from_exported_interface_is_using_inaccessible_module_0: "Return type of call signature from exported interface is using inaccessible module {0}.",
        Return_type_of_index_signature_from_exported_interface_is_using_inaccessible_module_0: "Return type of index signature from exported interface is using inaccessible module {0}.",
        Return_type_of_public_static_method_from_exported_class_is_using_inaccessible_module_0: "Return type of public static method from exported class is using inaccessible module {0}.",
        Return_type_of_public_method_from_exported_class_is_using_inaccessible_module_0: "Return type of public method from exported class is using inaccessible module {0}.",
        Return_type_of_method_from_exported_interface_is_using_inaccessible_module_0: "Return type of method from exported interface is using inaccessible module {0}.",
        Return_type_of_exported_function_is_using_inaccessible_module_0: "Return type of exported function is using inaccessible module {0}.",
        new_T_cannot_be_used_to_create_an_array_Use_new_Array_T_instead: "'new T[]' cannot be used to create an array. Use 'new Array<T>()' instead.",
        A_parameter_list_must_follow_a_generic_type_argument_list_expected: "A parameter list must follow a generic type argument list. '(' expected.",
        Multiple_constructor_implementations_are_not_allowed: "Multiple constructor implementations are not allowed.",
        Cannot_find_external_module_0: "Cannot find external module '{0}'.",
        Module_cannot_be_aliased_to_a_non_module_type: "Module cannot be aliased to a non-module type.",
        A_class_may_only_extend_another_class: "A class may only extend another class.",
        A_class_may_only_implement_another_class_or_interface: "A class may only implement another class or interface.",
        An_interface_may_only_extend_a_class_or_another_interface: "An interface may only extend a class or another interface.",
        Unable_to_resolve_type: "Unable to resolve type.",
        Unable_to_resolve_type_of_0: "Unable to resolve type of '{0}'.",
        Unable_to_resolve_type_parameter_constraint: "Unable to resolve type parameter constraint.",
        Type_parameter_constraint_cannot_be_a_primitive_type: "Type parameter constraint cannot be a primitive type.",
        Supplied_parameters_do_not_match_any_signature_of_call_target: "Supplied parameters do not match any signature of call target.",
        Supplied_parameters_do_not_match_any_signature_of_call_target_NL_0: "Supplied parameters do not match any signature of call target:{NL}{0}",
        Cannot_use_new_with_an_expression_whose_type_lacks_a_signature: "Cannot use 'new' with an expression whose type lacks a signature.",
        Only_a_void_function_can_be_called_with_the_new_keyword: "Only a void function can be called with the 'new' keyword.",
        Could_not_select_overload_for_new_expression: "Could not select overload for 'new' expression.",
        Type_0_does_not_satisfy_the_constraint_1: "Type '{0}' does not satisfy the constraint '{1}'.",
        Could_not_select_overload_for_call_expression: "Could not select overload for 'call' expression.",
        Cannot_invoke_an_expression_whose_type_lacks_a_call_signature: "Cannot invoke an expression whose type lacks a call signature.",
        Calls_to_super_are_only_valid_inside_a_class: "Calls to 'super' are only valid inside a class.",
        Generic_type_0_requires_1_type_argument_s: "Generic type '{0}' requires {1} type argument(s).",
        Type_of_array_literal_cannot_be_determined_Best_common_type_could_not_be_found_for_array_elements: "Type of array literal cannot be determined. Best common type could not be found for array elements.",
        Could_not_find_enclosing_symbol_for_dotted_name_0: "Could not find enclosing symbol for dotted name '{0}'.",
        Property_0_does_not_exist_on_value_of_type_1: "Property '{0}' does not exist on value of type '{1}'.",
        Cannot_find_name_0: "Cannot find name '{0}'.",
        get_and_set_accessor_must_have_the_same_type: "'get' and 'set' accessor must have the same type.",
        this_cannot_be_referenced_in_current_location: "'this' cannot be referenced in current location.",
        Static_members_cannot_reference_class_type_parameters: "Static members cannot reference class type parameters.",
        Type_0_recursively_references_itself_as_a_base_type: "Type '{0}' recursively references itself as a base type.",
        super_property_access_is_permitted_only_in_a_constructor_member_function_or_member_accessor_of_a_derived_class: "'super' property access is permitted only in a constructor, member function, or member accessor of a derived class.",
        super_can_only_be_referenced_in_a_derived_class: "'super' can only be referenced in a derived class.",
        A_super_call_must_be_the_first_statement_in_the_constructor_when_a_class_contains_initialized_properties_or_has_parameter_properties: "A 'super' call must be the first statement in the constructor when a class contains initialized properties or has parameter properties.",
        Constructors_for_derived_classes_must_contain_a_super_call: "Constructors for derived classes must contain a 'super' call.",
        Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors: "Super calls are not permitted outside constructors or in nested functions inside constructors.",
        _0_1_is_inaccessible: "'{0}.{1}' is inaccessible.",
        this_cannot_be_referenced_in_a_module_body: "'this' cannot be referenced in a module body.",
        Invalid_expression_types_not_known_to_support_the_addition_operator: "Invalid '+' expression - types not known to support the addition operator.",
        The_right_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type: "The right-hand side of an arithmetic operation must be of type 'any', 'number' or an enum type.",
        The_left_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type: "The left-hand side of an arithmetic operation must be of type 'any', 'number' or an enum type.",
        An_arithmetic_operand_must_be_of_type_any_number_or_an_enum_type: "An arithmetic operand must be of type 'any', 'number' or an enum type.",
        Variable_declarations_of_a_for_statement_cannot_use_a_type_annotation: "Variable declarations of a 'for' statement cannot use a type annotation.",
        Variable_declarations_of_a_for_statement_must_be_of_types_string_or_any: "Variable declarations of a 'for' statement must be of types 'string' or 'any'.",
        The_right_hand_side_of_a_for_in_statement_must_be_of_type_any_an_object_type_or_a_type_parameter: "The right-hand side of a 'for...in' statement must be of type 'any', an object type or a type parameter.",
        The_left_hand_side_of_an_in_expression_must_be_of_types_any_string_or_number: "The left-hand side of an 'in' expression must be of types 'any', 'string' or 'number'.",
        The_right_hand_side_of_an_in_expression_must_be_of_type_any_an_object_type_or_a_type_parameter: "The right-hand side of an 'in' expression must be of type 'any', an object type or a type parameter.",
        The_left_hand_side_of_an_instanceof_expression_must_be_of_type_any_an_object_type_or_a_type_parameter: "The left-hand side of an 'instanceof' expression must be of type 'any', an object type or a type parameter.",
        The_right_hand_side_of_an_instanceof_expression_must_be_of_type_any_or_of_a_type_assignable_to_the_Function_interface_type: "The right-hand side of an 'instanceof' expression must be of type 'any' or of a type assignable to the 'Function' interface type.",
        Setters_cannot_return_a_value: "Setters cannot return a value.",
        Tried_to_query_type_of_uninitialized_module_0: "Tried to query type of uninitialized module '{0}'.",
        Tried_to_set_variable_type_to_uninitialized_module_type_0: "Tried to set variable type to uninitialized module type '{0}'.",
        Type_0_is_not_generic: "Type '{0}' is not generic.",
        Getters_must_return_a_value: "Getters must return a value.",
        Getter_and_setter_accessors_do_not_agree_in_visibility: "Getter and setter accessors do not agree in visibility.",
        Invalid_left_hand_side_of_assignment_expression: "Invalid left-hand side of assignment expression.",
        Function_declared_a_non_void_return_type_but_has_no_return_expression: "Function declared a non-void return type, but has no return expression.",
        Cannot_resolve_return_type_reference: "Cannot resolve return type reference.",
        Constructors_cannot_have_a_return_type_of_void: "Constructors cannot have a return type of 'void'.",
        Subsequent_variable_declarations_must_have_the_same_type_Variable_0_must_be_of_type_1_but_here_has_type_2: "Subsequent variable declarations must have the same type.  Variable '{0}' must be of type '{1}', but here has type '{2}'.",
        All_symbols_within_a_with_block_will_be_resolved_to_any: "All symbols within a with block will be resolved to 'any'.",
        Import_declarations_in_an_internal_module_cannot_reference_an_external_module: "Import declarations in an internal module cannot reference an external module.",
        Class_0_declares_interface_1_but_does_not_implement_it_NL_2: "Class {0} declares interface {1} but does not implement it:{NL}{2}",
        Class_0_declares_class_1_as_an_interface_but_does_not_implement_it_NL_2: "Class {0} declares class {1} as an interface but does not implement it:{NL}{2}",
        The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_property_or_indexer: "The operand of an increment or decrement operator must be a variable, property or indexer.",
        this_cannot_be_referenced_in_a_static_property_initializer: "'this' cannot be referenced in a static property initializer.",
        Class_0_cannot_extend_class_1_NL_2: "Class '{0}' cannot extend class '{1}':{NL}{2}",
        Interface_0_cannot_extend_class_1_NL_2: "Interface '{0}' cannot extend class '{1}':{NL}{2}",
        Interface_0_cannot_extend_interface_1_NL_2: "Interface '{0}' cannot extend interface '{1}':{NL}{2}",
        Overload_signature_is_not_compatible_with_function_definition: "Overload signature is not compatible with function definition.",
        Overload_signature_is_not_compatible_with_function_definition_NL_0: "Overload signature is not compatible with function definition:{NL}{0}",
        Overload_signatures_must_all_be_public_or_private: "Overload signatures must all be public or private.",
        Overload_signatures_must_all_be_exported_or_not_exported: "Overload signatures must all be exported or not exported.",
        Overload_signatures_must_all_be_ambient_or_non_ambient: "Overload signatures must all be ambient or non-ambient.",
        Overload_signatures_must_all_be_optional_or_required: "Overload signatures must all be optional or required.",
        Specialized_overload_signature_is_not_assignable_to_any_non_specialized_signature: "Specialized overload signature is not assignable to any non-specialized signature.",
        this_cannot_be_referenced_in_constructor_arguments: "'this' cannot be referenced in constructor arguments.",
        Instance_member_cannot_be_accessed_off_a_class: "Instance member cannot be accessed off a class.",
        Untyped_function_calls_may_not_accept_type_arguments: "Untyped function calls may not accept type arguments.",
        Non_generic_functions_may_not_accept_type_arguments: "Non-generic functions may not accept type arguments.",
        A_generic_type_may_not_reference_itself_with_a_wrapped_form_of_its_own_type_parameters: "A generic type may not reference itself with a wrapped form of its own type parameters.",
        A_rest_parameter_must_be_of_an_array_type: "A rest parameter must be of an array type.",
        Overload_signature_implementation_cannot_use_specialized_type: "Overload signature implementation cannot use specialized type.",
        Export_assignments_may_only_be_used_at_the_top_level_of_external_modules: "Export assignments may only be used at the top-level of external modules.",
        Export_assignments_may_only_be_made_with_variables_functions_classes_interfaces_enums_and_internal_modules: "Export assignments may only be made with variables, functions, classes, interfaces, enums and internal modules.",
        Only_public_methods_of_the_base_class_are_accessible_via_the_super_keyword: "Only public methods of the base class are accessible via the 'super' keyword.",
        Numeric_indexer_type_0_must_be_assignable_to_string_indexer_type_1: "Numeric indexer type '{0}' must be assignable to string indexer type '{1}'.",
        Numeric_indexer_type_0_must_be_assignable_to_string_indexer_type_1_NL_2: "Numeric indexer type '{0}' must be assignable to string indexer type '{1}':{NL}{2}",
        All_numerically_named_properties_must_be_assignable_to_numeric_indexer_type_0: "All numerically named properties must be assignable to numeric indexer type '{0}'.",
        All_numerically_named_properties_must_be_assignable_to_numeric_indexer_type_0_NL_1: "All numerically named properties must be assignable to numeric indexer type '{0}':{NL}{1}",
        All_named_properties_must_be_assignable_to_string_indexer_type_0: "All named properties must be assignable to string indexer type '{0}'.",
        All_named_properties_must_be_assignable_to_string_indexer_type_0_NL_1: "All named properties must be assignable to string indexer type '{0}':{NL}{1}",
        A_parameter_initializer_is_only_allowed_in_a_function_or_constructor_implementation: "A parameter initializer is only allowed in a function or constructor implementation.",
        Function_expression_declared_a_non_void_return_type_but_has_no_return_expression: "Function expression declared a non-void return type, but has no return expression.",
        Import_declaration_referencing_identifier_from_internal_module_can_only_be_made_with_variables_functions_classes_interfaces_enums_and_internal_modules: "Import declaration referencing identifier from internal module can only be made with variables, functions, classes, interfaces, enums and internal modules.",
        Module_0_has_no_exported_member_1: "Module '{0}' has no exported member '{1}'.",
        Unable_to_resolve_module_reference_0: "Unable to resolve module reference '{0}'.",
        Could_not_find_module_0_in_module_1: "Could not find module '{0}' in module '{1}'.",
        Exported_import_declaration_0_is_assigned_value_with_type_that_has_or_is_using_private_type_1: "Exported import declaration '{0}' is assigned value with type that has or is using private type '{1}'.",
        Exported_import_declaration_0_is_assigned_value_with_type_that_is_using_inaccessible_module_1: "Exported import declaration '{0}' is assigned value with type that is using inaccessible module '{1}'.",
        Exported_import_declaration_0_is_assigned_type_that_has_or_is_using_private_type_1: "Exported import declaration '{0}' is assigned type that has or is using private type '{1}'.",
        Exported_import_declaration_0_is_assigned_type_that_is_using_inaccessible_module_1: "Exported import declaration '{0}' is assigned type that is using inaccessible module '{1}'.",
        Exported_import_declaration_0_is_assigned_container_that_is_or_is_using_inaccessible_module_1: "Exported import declaration '{0}' is assigned container that is or is using inaccessible module '{1}'.",
        Type_name_0_in_extends_clause_does_not_reference_constructor_function_for_1: "Type name '{0}' in extends clause does not reference constructor function for '{1}'.",
        Internal_module_reference_0_in_import_declaration_does_not_reference_module_instance_for_1: "Internal module reference '{0}' in import declaration does not reference module instance for '{1}'.",
        Module_0_cannot_merge_with_previous_declaration_of_1_in_a_different_file_2: "Module '{0}' cannot merge with previous declaration of '{1}' in a different file '{2}'.",
        Interface_0_cannot_simultaneously_extend_types_1_and_2_NL_3: "Interface '{0}' cannot simultaneously extend types '{1}' and '{2}':{NL}{3}",
        Initializer_of_parameter_0_cannot_reference_identifier_1_declared_after_it: "Initializer of parameter '{0}' cannot reference identifier '{1}' declared after it.",
        Ambient_external_module_declaration_cannot_be_reopened: "Ambient external module declaration cannot be reopened.",
        All_declarations_of_merged_declaration_0_must_be_exported_or_not_exported: "All declarations of merged declaration '{0}' must be exported or not exported.",
        super_cannot_be_referenced_in_constructor_arguments: "'super' cannot be referenced in constructor arguments.",
        Return_type_of_constructor_signature_must_be_assignable_to_the_instance_type_of_the_class: "Return type of constructor signature must be assignable to the instance type of the class.",
        Ambient_external_module_declaration_must_be_defined_in_global_context: "Ambient external module declaration must be defined in global context.",
        Ambient_external_module_declaration_cannot_specify_relative_module_name: "Ambient external module declaration cannot specify relative module name.",
        Import_declaration_in_an_ambient_external_module_declaration_cannot_reference_external_module_through_relative_external_module_name: "Import declaration in an ambient external module declaration cannot reference external module through relative external module name.",
        No_best_common_type_exists_among_return_expressions: "No best common type exists among return expressions.",
        Import_declaration_cannot_refer_to_external_module_reference_when_noResolve_option_is_set: "Import declaration cannot refer to external module reference when --noResolve option is set.",
        Duplicate_identifier_this_Compiler_uses_variable_declaration_this_to_capture_this_reference: "Duplicate identifier '_this'. Compiler uses variable declaration '_this' to capture 'this' reference.",
        Duplicate_identifier_super_Compiler_uses_super_to_capture_base_class_reference: "Duplicate identifier '_super'. Compiler uses '_super' to capture base class reference.",
        Expression_resolves_to_variable_declaration_this_that_compiler_uses_to_capture_this_reference: "Expression resolves to variable declaration '_this' that compiler uses to capture 'this' reference.",
        Expression_resolves_to_super_that_compiler_uses_to_capture_base_class_reference: "Expression resolves to '_super' that compiler uses to capture base class reference.",
        TypeParameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_type_1: "TypeParameter '{0}' of constructor signature from exported interface has or is using private type '{1}'.",
        TypeParameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_type_1: "TypeParameter '{0}' of call signature from exported interface has or is using private type '{1}'.",
        TypeParameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_type_1: "TypeParameter '{0}' of public static method from exported class has or is using private type '{1}'.",
        TypeParameter_0_of_public_method_from_exported_class_has_or_is_using_private_type_1: "TypeParameter '{0}' of public method from exported class has or is using private type '{1}'.",
        TypeParameter_0_of_method_from_exported_interface_has_or_is_using_private_type_1: "TypeParameter '{0}' of method from exported interface has or is using private type '{1}'.",
        TypeParameter_0_of_exported_function_has_or_is_using_private_type_1: "TypeParameter '{0}' of exported function has or is using private type '{1}'.",
        TypeParameter_0_of_constructor_signature_from_exported_interface_is_using_inaccessible_module_1: "TypeParameter '{0}' of constructor signature from exported interface is using inaccessible module {1}.",
        TypeParameter_0_of_call_signature_from_exported_interface_is_using_inaccessible_module_1: "TypeParameter '{0}' of call signature from exported interface is using inaccessible module {1}",
        TypeParameter_0_of_public_static_method_from_exported_class_is_using_inaccessible_module_1: "TypeParameter '{0}' of public static method from exported class is using inaccessible module {1}.",
        TypeParameter_0_of_public_method_from_exported_class_is_using_inaccessible_module_1: "TypeParameter '{0}' of public method from exported class is using inaccessible module {1}.",
        TypeParameter_0_of_method_from_exported_interface_is_using_inaccessible_module_1: "TypeParameter '{0}' of method from exported interface is using inaccessible module {1}.",
        TypeParameter_0_of_exported_function_is_using_inaccessible_module_1: "TypeParameter '{0}' of exported function is using inaccessible module {1}.",
        TypeParameter_0_of_exported_class_has_or_is_using_private_type_1: "TypeParameter '{0}' of exported class has or is using private type '{1}'.",
        TypeParameter_0_of_exported_interface_has_or_is_using_private_type_1: "TypeParameter '{0}' of exported interface has or is using private type '{1}'.",
        TypeParameter_0_of_exported_class_is_using_inaccessible_module_1: "TypeParameter '{0}' of exported class is using inaccessible module {1}.",
        TypeParameter_0_of_exported_interface_is_using_inaccessible_module_1: "TypeParameter '{0}' of exported interface is using inaccessible module {1}.",
        Duplicate_identifier_i_Compiler_uses_i_to_initialize_rest_parameter: "Duplicate identifier '_i'. Compiler uses '_i' to initialize rest parameter.",
        Duplicate_identifier_arguments_Compiler_uses_arguments_to_initialize_rest_parameters: "Duplicate identifier 'arguments'. Compiler uses 'arguments' to initialize rest parameters.",
        No_best_common_type_exists_between_0_and_1: "No best common type exists between '{0}' and '{1}'.",
        No_best_common_type_exists_between_0_1_and_2: "No best common type exists between '{0}', '{1}', and '{2}'.",
        Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_an_external_module: "Duplicate identifier '{0}'. Compiler reserves name '{1}' in top level scope of an external module.",
        Constraint_of_a_type_parameter_cannot_reference_any_type_parameter_from_the_same_type_parameter_list: "Constraint of a type parameter cannot reference any type parameter from the same type parameter list.",
        Initializer_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor: "Initializer of instance member variable '{0}' cannot reference identifier '{1}' declared in the constructor.",
        Parameter_0_cannot_be_referenced_in_its_initializer: "Parameter '{0}' cannot be referenced in its initializer.",
        Duplicate_string_index_signature: "Duplicate string index signature.",
        Duplicate_number_index_signature: "Duplicate number index signature.",
        All_declarations_of_an_interface_must_have_identical_type_parameters: "All declarations of an interface must have identical type parameters.",
        Expression_resolves_to_variable_declaration_i_that_compiler_uses_to_initialize_rest_parameter: "Expression resolves to variable declaration '_i' that compiler uses to initialize rest parameter.",
        Neither_type_0_nor_type_1_is_assignable_to_the_other: "Neither type '{0}' nor type '{1}' is assignable to the other.",
        Neither_type_0_nor_type_1_is_assignable_to_the_other_NL_2: "Neither type '{0}' nor type '{1}' is assignable to the other:{NL}{2}",
        Duplicate_function_implementation: "Duplicate function implementation.",
        Function_implementation_expected: "Function implementation expected.",
        Function_overload_name_must_be_0: "Function overload name must be '{0}'.",
        Constructor_implementation_expected: "Constructor implementation expected.",
        Class_name_cannot_be_0: "Class name cannot be '{0}'.",
        Interface_name_cannot_be_0: "Interface name cannot be '{0}'.",
        Enum_name_cannot_be_0: "Enum name cannot be '{0}'.",
        A_module_cannot_have_multiple_export_assignments: "A module cannot have multiple export assignments.",
        Export_assignment_not_allowed_in_module_with_exported_element: "Export assignment not allowed in module with exported element.",
        A_parameter_property_is_only_allowed_in_a_constructor_implementation: "A parameter property is only allowed in a constructor implementation.",
        Function_overload_must_be_static: "Function overload must be static.",
        Function_overload_must_not_be_static: "Function overload must not be static.",
        Type_0_is_missing_property_1_from_type_2: "Type '{0}' is missing property '{1}' from type '{2}'.",
        Types_of_property_0_of_types_1_and_2_are_incompatible: "Types of property '{0}' of types '{1}' and '{2}' are incompatible.",
        Types_of_property_0_of_types_1_and_2_are_incompatible_NL_3: "Types of property '{0}' of types '{1}' and '{2}' are incompatible:{NL}{3}",
        Property_0_defined_as_private_in_type_1_is_defined_as_public_in_type_2: "Property '{0}' defined as private in type '{1}' is defined as public in type '{2}'.",
        Property_0_defined_as_public_in_type_1_is_defined_as_private_in_type_2: "Property '{0}' defined as public in type '{1}' is defined as private in type '{2}'.",
        Types_0_and_1_define_property_2_as_private: "Types '{0}' and '{1}' define property '{2}' as private.",
        Call_signatures_of_types_0_and_1_are_incompatible: "Call signatures of types '{0}' and '{1}' are incompatible.",
        Call_signatures_of_types_0_and_1_are_incompatible_NL_2: "Call signatures of types '{0}' and '{1}' are incompatible:{NL}{2}",
        Type_0_requires_a_call_signature_but_type_1_lacks_one: "Type '{0}' requires a call signature, but type '{1}' lacks one.",
        Construct_signatures_of_types_0_and_1_are_incompatible: "Construct signatures of types '{0}' and '{1}' are incompatible.",
        Construct_signatures_of_types_0_and_1_are_incompatible_NL_2: "Construct signatures of types '{0}' and '{1}' are incompatible:{NL}{2}",
        Type_0_requires_a_construct_signature_but_type_1_lacks_one: "Type '{0}' requires a construct signature, but type '{1}' lacks one.",
        Index_signatures_of_types_0_and_1_are_incompatible: "Index signatures of types '{0}' and '{1}' are incompatible.",
        Index_signatures_of_types_0_and_1_are_incompatible_NL_2: "Index signatures of types '{0}' and '{1}' are incompatible:{NL}{2}",
        Call_signature_expects_0_or_fewer_parameters: "Call signature expects {0} or fewer parameters.",
        Could_not_apply_type_0_to_argument_1_which_is_of_type_2: "Could not apply type '{0}' to argument {1} which is of type '{2}'.",
        Class_0_defines_instance_member_accessor_1_but_extended_class_2_defines_it_as_instance_member_function: "Class '{0}' defines instance member accessor '{1}', but extended class '{2}' defines it as instance member function.",
        Class_0_defines_instance_member_property_1_but_extended_class_2_defines_it_as_instance_member_function: "Class '{0}' defines instance member property '{1}', but extended class '{2}' defines it as instance member function.",
        Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_accessor: "Class '{0}' defines instance member function '{1}', but extended class '{2}' defines it as instance member accessor.",
        Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_property: "Class '{0}' defines instance member function '{1}', but extended class '{2}' defines it as instance member property.",
        Types_of_static_property_0_of_class_1_and_class_2_are_incompatible: "Types of static property '{0}' of class '{1}' and class '{2}' are incompatible.",
        Types_of_static_property_0_of_class_1_and_class_2_are_incompatible_NL_3: "Types of static property '{0}' of class '{1}' and class '{2}' are incompatible:{NL}{3}",
        Type_reference_cannot_refer_to_container_0: "Type reference cannot refer to container '{0}'.",
        Type_reference_must_refer_to_type: "Type reference must refer to type.",
        In_enums_with_multiple_declarations_only_one_declaration_can_omit_an_initializer_for_the_first_enum_element: "In enums with multiple declarations only one declaration can omit an initializer for the first enum element.",
        _0_overload_s: " (+ {0} overload(s))",
        Variable_declaration_cannot_have_the_same_name_as_an_import_declaration: "Variable declaration cannot have the same name as an import declaration.",
        Signature_expected_0_type_arguments_got_1_instead: "Signature expected {0} type arguments, got {1} instead.",
        Property_0_defined_as_optional_in_type_1_but_is_required_in_type_2: "Property '{0}' defined as optional in type '{1}', but is required in type '{2}'.",
        Types_0_and_1_originating_in_infinitely_expanding_type_reference_do_not_refer_to_same_named_type: "Types '{0}' and '{1}' originating in infinitely expanding type reference do not refer to same named type.",
        Types_0_and_1_originating_in_infinitely_expanding_type_reference_have_incompatible_type_arguments: "Types '{0}' and '{1}' originating in infinitely expanding type reference have incompatible type arguments.",
        Types_0_and_1_originating_in_infinitely_expanding_type_reference_have_incompatible_type_arguments_NL_2: "Types '{0}' and '{1}' originating in infinitely expanding type reference have incompatible type arguments:{NL}{2}",
        Named_properties_0_of_types_1_and_2_are_not_identical: "Named properties '{0}' of types '{1}' and '{2}' are not identical.",
        Types_of_string_indexer_of_types_0_and_1_are_not_identical: "Types of string indexer of types '{0}' and '{1}' are not identical.",
        Types_of_number_indexer_of_types_0_and_1_are_not_identical: "Types of number indexer of types '{0}' and '{1}' are not identical.",
        Type_of_number_indexer_in_type_0_is_not_assignable_to_string_indexer_type_in_type_1_NL_2: "Type of number indexer in type '{0}' is not assignable to string indexer type in type '{1}'.{NL}{2}",
        Type_of_property_0_in_type_1_is_not_assignable_to_string_indexer_type_in_type_2_NL_3: "Type of property '{0}' in type '{1}' is not assignable to string indexer type in type '{2}'.{NL}{3}",
        Type_of_property_0_in_type_1_is_not_assignable_to_number_indexer_type_in_type_2_NL_3: "Type of property '{0}' in type '{1}' is not assignable to number indexer type in type '{2}'.{NL}{3}",
        Static_property_0_defined_as_private_in_type_1_is_defined_as_public_in_type_2: "Static property '{0}' defined as private in type '{1}' is defined as public in type '{2}'.",
        Static_property_0_defined_as_public_in_type_1_is_defined_as_private_in_type_2: "Static property '{0}' defined as public in type '{1}' is defined as private in type '{2}'.",
        Types_0_and_1_define_static_property_2_as_private: "Types '{0}' and '{1}' define static property '{2}' as private.",
        Current_host_does_not_support_0_option: "Current host does not support '{0}' option.",
        ECMAScript_target_version_0_not_supported_Specify_a_valid_target_version_1_default_or_2: "ECMAScript target version '{0}' not supported.  Specify a valid target version: '{1}' (default), or '{2}'",
        Argument_for_0_option_must_be_1_or_2: "Argument for '{0}' option must be '{1}' or '{2}'",
        Could_not_find_file_0: "Could not find file: '{0}'.",
        A_file_cannot_have_a_reference_to_itself: "A file cannot have a reference to itself.",
        Cannot_resolve_referenced_file_0: "Cannot resolve referenced file: '{0}'.",
        Cannot_find_the_common_subdirectory_path_for_the_input_files: "Cannot find the common subdirectory path for the input files.",
        Emit_Error_0: "Emit Error: {0}.",
        Cannot_read_file_0_1: "Cannot read file '{0}': {1}",
        Unsupported_file_encoding: "Unsupported file encoding.",
        Locale_must_be_of_the_form_language_or_language_territory_For_example_0_or_1: "Locale must be of the form <language> or <language>-<territory>. For example '{0}' or '{1}'.",
        Unsupported_locale_0: "Unsupported locale: '{0}'.",
        Execution_Failed_NL: "Execution Failed.{NL}",
        Invalid_call_to_up: "Invalid call to 'up'",
        Invalid_call_to_down: "Invalid call to 'down'",
        Base64_value_0_finished_with_a_continuation_bit: "Base64 value '{0}' finished with a continuation bit.",
        Unknown_compiler_option_0: "Unknown compiler option '{0}'",
        Expected_0_arguments_to_message_got_1_instead: "Expected {0} arguments to message, got {1} instead.",
        Expected_the_message_0_to_have_1_arguments_but_it_had_2: "Expected the message '{0}' to have {1} arguments, but it had {2}",
        Could_not_delete_file_0: "Could not delete file '{0}'",
        Could_not_create_directory_0: "Could not create directory '{0}'",
        Error_while_executing_file_0: "Error while executing file '{0}': ",
        Cannot_compile_external_modules_unless_the_module_flag_is_provided: "Cannot compile external modules unless the '--module' flag is provided.",
        Option_mapRoot_cannot_be_specified_without_specifying_sourcemap_option: "Option mapRoot cannot be specified without specifying sourcemap option.",
        Option_sourceRoot_cannot_be_specified_without_specifying_sourcemap_option: "Option sourceRoot cannot be specified without specifying sourcemap option.",
        Options_mapRoot_and_sourceRoot_cannot_be_specified_without_specifying_sourcemap_option: "Options mapRoot and sourceRoot cannot be specified without specifying sourcemap option.",
        Option_0_specified_without_1: "Option '{0}' specified without '{1}'",
        codepage_option_not_supported_on_current_platform: "'codepage' option not supported on current platform.",
        Concatenate_and_emit_output_to_single_file: "Concatenate and emit output to single file.",
        Generates_corresponding_0_file: "Generates corresponding {0} file.",
        Specifies_the_location_where_debugger_should_locate_map_files_instead_of_generated_locations: "Specifies the location where debugger should locate map files instead of generated locations.",
        Specifies_the_location_where_debugger_should_locate_TypeScript_files_instead_of_source_locations: "Specifies the location where debugger should locate TypeScript files instead of source locations.",
        Watch_input_files: "Watch input files.",
        Redirect_output_structure_to_the_directory: "Redirect output structure to the directory.",
        Do_not_emit_comments_to_output: "Do not emit comments to output.",
        Skip_resolution_and_preprocessing: "Skip resolution and preprocessing.",
        Specify_ECMAScript_target_version_0_default_or_1: "Specify ECMAScript target version: '{0}' (default), or '{1}'",
        Specify_module_code_generation_0_or_1: "Specify module code generation: '{0}' or '{1}'",
        Print_this_message: "Print this message.",
        Print_the_compiler_s_version_0: "Print the compiler's version: {0}",
        Allow_use_of_deprecated_0_keyword_when_referencing_an_external_module: "Allow use of deprecated '{0}' keyword when referencing an external module.",
        Specify_locale_for_errors_and_messages_For_example_0_or_1: "Specify locale for errors and messages. For example '{0}' or '{1}'",
        Syntax_0: "Syntax:   {0}",
        options: "options",
        file1: "file",
        Examples: "Examples:",
        Options: "Options:",
        Insert_command_line_options_and_files_from_a_file: "Insert command line options and files from a file.",
        Version_0: "Version {0}",
        Use_the_0_flag_to_see_options: "Use the '{0}' flag to see options.",
        NL_Recompiling_0: "{NL}Recompiling ({0}):",
        STRING: "STRING",
        KIND: "KIND",
        file2: "FILE",
        VERSION: "VERSION",
        LOCATION: "LOCATION",
        DIRECTORY: "DIRECTORY",
        NUMBER: "NUMBER",
        Specify_the_codepage_to_use_when_opening_source_files: "Specify the codepage to use when opening source files.",
        Additional_locations: "Additional locations:",
        This_version_of_the_Javascript_runtime_does_not_support_the_0_function: "This version of the Javascript runtime does not support the '{0}' function.",
        Unknown_rule: "Unknown rule.",
        Invalid_line_number_0: "Invalid line number ({0})",
        Warn_on_expressions_and_declarations_with_an_implied_any_type: "Warn on expressions and declarations with an implied 'any' type.",
        Variable_0_implicitly_has_an_any_type: "Variable '{0}' implicitly has an 'any' type.",
        Parameter_0_of_1_implicitly_has_an_any_type: "Parameter '{0}' of '{1}' implicitly has an 'any' type.",
        Parameter_0_of_function_type_implicitly_has_an_any_type: "Parameter '{0}' of function type implicitly has an 'any' type.",
        Member_0_of_object_type_implicitly_has_an_any_type: "Member '{0}' of object type implicitly has an 'any' type.",
        new_expression_which_lacks_a_constructor_signature_implicitly_has_an_any_type: "'new' expression, which lacks a constructor signature, implicitly has an 'any' type.",
        _0_which_lacks_return_type_annotation_implicitly_has_an_any_return_type: "'{0}', which lacks return-type annotation, implicitly has an 'any' return type.",
        Function_expression_which_lacks_return_type_annotation_implicitly_has_an_any_return_type: "Function expression, which lacks return-type annotation, implicitly has an 'any' return type.",
        Parameter_0_of_lambda_function_implicitly_has_an_any_type: "Parameter '{0}' of lambda function implicitly has an 'any' type.",
        Constructor_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type: "Constructor signature, which lacks return-type annotation, implicitly has an 'any' return type.",
        Lambda_Function_which_lacks_return_type_annotation_implicitly_has_an_any_return_type: "Lambda Function, which lacks return-type annotation, implicitly has an 'any' return type.",
        Array_Literal_implicitly_has_an_any_type_from_widening: "Array Literal implicitly has an 'any' type from widening.",
        _0_which_lacks_get_accessor_and_parameter_type_annotation_on_set_accessor_implicitly_has_an_any_type: "'{0}', which lacks 'get' accessor and parameter type annotation on 'set' accessor, implicitly has an 'any' type.",
        Index_signature_of_object_type_implicitly_has_an_any_type: "Index signature of object type implicitly has an 'any' type.",
        Object_literal_s_property_0_implicitly_has_an_any_type_from_widening: "Object literal's property '{0}' implicitly has an 'any' type from widening."
    };
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (DiagnosticCategory) {
        DiagnosticCategory[DiagnosticCategory["Warning"] = 0] = "Warning";
        DiagnosticCategory[DiagnosticCategory["Error"] = 1] = "Error";
        DiagnosticCategory[DiagnosticCategory["Message"] = 2] = "Message";
        DiagnosticCategory[DiagnosticCategory["NoPrefix"] = 3] = "NoPrefix";
    })(TypeScript.DiagnosticCategory || (TypeScript.DiagnosticCategory = {}));
    var DiagnosticCategory = TypeScript.DiagnosticCategory;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    TypeScript.diagnosticInformationMap = {
        "error TS{0}: {1}": { "code": 0, "category": 3 /* NoPrefix */ },
        "warning TS{0}: {1}": { "code": 1, "category": 3 /* NoPrefix */ },
        "Unrecognized escape sequence.": { "code": 1000, "category": 1 /* Error */ },
        "Unexpected character {0}.": { "code": 1001, "category": 1 /* Error */ },
        "Unterminated string literal.": { "code": 1002, "category": 1 /* Error */ },
        "Identifier expected.": { "code": 1003, "category": 1 /* Error */ },
        "'{0}' keyword expected.": { "code": 1004, "category": 1 /* Error */ },
        "'{0}' expected.": { "code": 1005, "category": 1 /* Error */ },
        "Identifier expected; '{0}' is a keyword.": { "code": 1006, "category": 1 /* Error */ },
        "Automatic semicolon insertion not allowed.": { "code": 1007, "category": 1 /* Error */ },
        "Unexpected token; '{0}' expected.": { "code": 1008, "category": 1 /* Error */ },
        "Trailing comma not allowed.": { "code": 1009, "category": 1 /* Error */ },
        "'*/' expected.": { "code": 1010, "category": 1 /* Error */ },
        "'public' or 'private' modifier must precede 'static'.": { "code": 1011, "category": 1 /* Error */ },
        "Unexpected token.": { "code": 1012, "category": 1 /* Error */ },
        "Catch clause parameter cannot have a type annotation.": { "code": 1013, "category": 1 /* Error */ },
        "A rest parameter must be last in a parameter list.": { "code": 1014, "category": 1 /* Error */ },
        "Parameter cannot have question mark and initializer.": { "code": 1015, "category": 1 /* Error */ },
        "A required parameter cannot follow an optional parameter.": { "code": 1016, "category": 1 /* Error */ },
        "Index signatures cannot have rest parameters.": { "code": 1017, "category": 1 /* Error */ },
        "Index signature parameter cannot have modifiers.": { "code": 1018, "category": 1 /* Error */ },
        "Index signature parameter cannot have a question mark.": { "code": 1019, "category": 1 /* Error */ },
        "Index signature parameter cannot have an initializer.": { "code": 1020, "category": 1 /* Error */ },
        "Index signature must have a type annotation.": { "code": 1021, "category": 1 /* Error */ },
        "Index signature parameter must have a type annotation.": { "code": 1022, "category": 1 /* Error */ },
        "Index signature parameter type must be 'string' or 'number'.": { "code": 1023, "category": 1 /* Error */ },
        "'extends' clause already seen.": { "code": 1024, "category": 1 /* Error */ },
        "'extends' clause must precede 'implements' clause.": { "code": 1025, "category": 1 /* Error */ },
        "Classes can only extend a single class.": { "code": 1026, "category": 1 /* Error */ },
        "'implements' clause already seen.": { "code": 1027, "category": 1 /* Error */ },
        "Accessibility modifier already seen.": { "code": 1028, "category": 1 /* Error */ },
        "'{0}' modifier must precede '{1}' modifier.": { "code": 1029, "category": 1 /* Error */ },
        "'{0}' modifier already seen.": { "code": 1030, "category": 1 /* Error */ },
        "'{0}' modifier cannot appear on a class element.": { "code": 1031, "category": 1 /* Error */ },
        "Interface declaration cannot have 'implements' clause.": { "code": 1032, "category": 1 /* Error */ },
        "'super' invocation cannot have type arguments.": { "code": 1034, "category": 1 /* Error */ },
        "Only ambient modules can use quoted names.": { "code": 1035, "category": 1 /* Error */ },
        "Statements are not allowed in ambient contexts.": { "code": 1036, "category": 1 /* Error */ },
        "A function implementation cannot be declared in an ambient context.": { "code": 1037, "category": 1 /* Error */ },
        "A 'declare' modifier cannot be used in an already ambient context.": { "code": 1038, "category": 1 /* Error */ },
        "Initializers are not allowed in ambient contexts.": { "code": 1039, "category": 1 /* Error */ },
        "'{0}' modifier cannot appear on a module element.": { "code": 1044, "category": 1 /* Error */ },
        "A 'declare' modifier cannot be used with an interface declaration.": { "code": 1045, "category": 1 /* Error */ },
        "A 'declare' modifier is required for a top level declaration in a .d.ts file.": { "code": 1046, "category": 1 /* Error */ },
        "A rest parameter cannot be optional.": { "code": 1047, "category": 1 /* Error */ },
        "A rest parameter cannot have an initializer.": { "code": 1048, "category": 1 /* Error */ },
        "'set' accessor must have exactly one parameter.": { "code": 1049, "category": 1 /* Error */ },
        "'set' accessor parameter cannot be optional.": { "code": 1051, "category": 1 /* Error */ },
        "'set' accessor parameter cannot have an initializer.": { "code": 1052, "category": 1 /* Error */ },
        "'set' accessor cannot have rest parameter.": { "code": 1053, "category": 1 /* Error */ },
        "'get' accessor cannot have parameters.": { "code": 1054, "category": 1 /* Error */ },
        "Modifiers cannot appear here.": { "code": 1055, "category": 1 /* Error */ },
        "Accessors are only available when targeting ECMAScript 5 and higher.": { "code": 1056, "category": 1 /* Error */ },
        "Enum member must have initializer.": { "code": 1061, "category": 1 /* Error */ },
        "Export assignment cannot be used in internal modules.": { "code": 1063, "category": 1 /* Error */ },
        "Ambient enum elements can only have integer literal initializers.": { "code": 1066, "category": 1 /* Error */ },
        "module, class, interface, enum, import or statement": { "code": 1067, "category": 3 /* NoPrefix */ },
        "constructor, function, accessor or variable": { "code": 1068, "category": 3 /* NoPrefix */ },
        "statement": { "code": 1069, "category": 3 /* NoPrefix */ },
        "case or default clause": { "code": 1070, "category": 3 /* NoPrefix */ },
        "identifier": { "code": 1071, "category": 3 /* NoPrefix */ },
        "call, construct, index, property or function signature": { "code": 1072, "category": 3 /* NoPrefix */ },
        "expression": { "code": 1073, "category": 3 /* NoPrefix */ },
        "type name": { "code": 1074, "category": 3 /* NoPrefix */ },
        "property or accessor": { "code": 1075, "category": 3 /* NoPrefix */ },
        "parameter": { "code": 1076, "category": 3 /* NoPrefix */ },
        "type": { "code": 1077, "category": 3 /* NoPrefix */ },
        "type parameter": { "code": 1078, "category": 3 /* NoPrefix */ },
        "A 'declare' modifier cannot be used with an import declaration.": { "code": 1079, "category": 1 /* Error */ },
        "Invalid 'reference' directive syntax.": { "code": 1084, "category": 1 /* Error */ },
        "Octal literals are not available when targeting ECMAScript 5 and higher.": { "code": 1085, "category": 1 /* Error */ },
        "Accessors are not allowed in ambient contexts.": { "code": 1086, "category": 1 /* Error */ },
        "'{0}' modifier cannot appear on a constructor declaration.": { "code": 1089, "category": 1 /* Error */ },
        "'{0}' modifier cannot appear on a parameter.": { "code": 1090, "category": 1 /* Error */ },
        "Only a single variable declaration is allowed in a 'for...in' statement.": { "code": 1091, "category": 1 /* Error */ },
        "Type parameters cannot appear on a constructor declaration.": { "code": 1092, "category": 1 /* Error */ },
        "Type annotation cannot appear on a constructor declaration.": { "code": 1093, "category": 1 /* Error */ },
        "Type parameters cannot appear on an accessor.": { "code": 1094, "category": 1 /* Error */ },
        "Type annotation cannot appear on a 'set' accessor.": { "code": 1095, "category": 1 /* Error */ },
        "Index signature must have exactly one parameter.": { "code": 1096, "category": 1 /* Error */ },
        "'{0}' list cannot be empty.": { "code": 1097, "category": 1 /* Error */ },
        "variable declaration": { "code": 1098, "category": 3 /* NoPrefix */ },
        "type argument": { "code": 1099, "category": 3 /* NoPrefix */ },
        "Invalid use of '{0}' in strict mode.": { "code": 1100, "category": 1 /* Error */ },
        "'with' statements are not allowed in strict mode.": { "code": 1101, "category": 1 /* Error */ },
        "'delete' cannot be called on an identifier in strict mode.": { "code": 1102, "category": 1 /* Error */ },
        "Invalid left-hand side in 'for...in' statement.": { "code": 1103, "category": 1 /* Error */ },
        "'continue' statement can only be used within an enclosing iteration statement.": { "code": 1104, "category": 1 /* Error */ },
        "'break' statement can only be used within an enclosing iteration or switch statement.": { "code": 1105, "category": 1 /* Error */ },
        "Jump target not found.": { "code": 1106, "category": 1 /* Error */ },
        "Jump target cannot cross function boundary.": { "code": 1107, "category": 1 /* Error */ },
        "'return' statement must be contained within a function body.": { "code": 1108, "category": 1 /* Error */ },
        "Expression expected.": { "code": 1109, "category": 1 /* Error */ },
        "Type expected.": { "code": 1110, "category": 1 /* Error */ },
        "Template literal cannot be used as an element name.": { "code": 1111, "category": 1 /* Error */ },
        "Computed property names cannot be used here.": { "code": 1112, "category": 1 /* Error */ },
        "'yield' expression must be contained within a generator declaration.": { "code": 1113, "category": 1 /* Error */ },
        "Unterminated regular expression literal.": { "code": 1114, "category": 1 /* Error */ },
        "Unterminated template literal.": { "code": 1115, "category": 1 /* Error */ },
        "'await' expression must be contained within an 'async' declaration.": { "code": 1116, "category": 1 /* Error */ },
        "'async' arrow function parameters must be parenthesized.": { "code": 1117, "category": 1 /* Error */ },
        "A generator declaration cannot have the 'async' modifier.": { "code": 1118, "category": 1 /* Error */ },
        "'async' modifier cannot appear here.": { "code": 1119, "category": 1 /* Error */ },
        "'comma' expression cannot appear in a computed property name.": { "code": 1120, "category": 1 /* Error */ },
        "String literal expected.": { "code": 1121, "category": 1 /* Error */ },
        "Duplicate identifier '{0}'.": { "code": 2000, "category": 1 /* Error */ },
        "The name '{0}' does not exist in the current scope.": { "code": 2001, "category": 1 /* Error */ },
        "The name '{0}' does not refer to a value.": { "code": 2002, "category": 1 /* Error */ },
        "'super' can only be used inside a class instance method.": { "code": 2003, "category": 1 /* Error */ },
        "The left-hand side of an assignment expression must be a variable, property or indexer.": { "code": 2004, "category": 1 /* Error */ },
        "Value of type '{0}' is not callable. Did you mean to include 'new'?": { "code": 2161, "category": 1 /* Error */ },
        "Value of type '{0}' is not callable.": { "code": 2006, "category": 1 /* Error */ },
        "Value of type '{0}' is not newable.": { "code": 2007, "category": 1 /* Error */ },
        "An index expression argument must be 'string', 'number', or 'any'.": { "code": 2008, "category": 1 /* Error */ },
        "Operator '{0}' cannot be applied to types '{1}' and '{2}'.": { "code": 2009, "category": 1 /* Error */ },
        "Type '{0}' is not assignable to type '{1}'.": { "code": 2011, "category": 1 /* Error */ },
        "Type '{0}' is not assignable to type '{1}':{NL}{2}": { "code": 2012, "category": 1 /* Error */ },
        "Expected var, class, interface, or module.": { "code": 2013, "category": 1 /* Error */ },
        "Getter '{0}' already declared.": { "code": 2015, "category": 1 /* Error */ },
        "Setter '{0}' already declared.": { "code": 2016, "category": 1 /* Error */ },
        "Exported class '{0}' extends private class '{1}'.": { "code": 2018, "category": 1 /* Error */ },
        "Exported class '{0}' implements private interface '{1}'.": { "code": 2019, "category": 1 /* Error */ },
        "Exported interface '{0}' extends private interface '{1}'.": { "code": 2020, "category": 1 /* Error */ },
        "Exported class '{0}' extends class from inaccessible module {1}.": { "code": 2021, "category": 1 /* Error */ },
        "Exported class '{0}' implements interface from inaccessible module {1}.": { "code": 2022, "category": 1 /* Error */ },
        "Exported interface '{0}' extends interface from inaccessible module {1}.": { "code": 2023, "category": 1 /* Error */ },
        "Public static property '{0}' of exported class has or is using private type '{1}'.": { "code": 2024, "category": 1 /* Error */ },
        "Public property '{0}' of exported class has or is using private type '{1}'.": { "code": 2025, "category": 1 /* Error */ },
        "Property '{0}' of exported interface has or is using private type '{1}'.": { "code": 2026, "category": 1 /* Error */ },
        "Exported variable '{0}' has or is using private type '{1}'.": { "code": 2027, "category": 1 /* Error */ },
        "Public static property '{0}' of exported class is using inaccessible module {1}.": { "code": 2028, "category": 1 /* Error */ },
        "Public property '{0}' of exported class is using inaccessible module {1}.": { "code": 2029, "category": 1 /* Error */ },
        "Property '{0}' of exported interface is using inaccessible module {1}.": { "code": 2030, "category": 1 /* Error */ },
        "Exported variable '{0}' is using inaccessible module {1}.": { "code": 2031, "category": 1 /* Error */ },
        "Parameter '{0}' of constructor from exported class has or is using private type '{1}'.": { "code": 2032, "category": 1 /* Error */ },
        "Parameter '{0}' of public static property setter from exported class has or is using private type '{1}'.": { "code": 2033, "category": 1 /* Error */ },
        "Parameter '{0}' of public property setter from exported class has or is using private type '{1}'.": { "code": 2034, "category": 1 /* Error */ },
        "Parameter '{0}' of constructor signature from exported interface has or is using private type '{1}'.": { "code": 2035, "category": 1 /* Error */ },
        "Parameter '{0}' of call signature from exported interface has or is using private type '{1}'.": { "code": 2036, "category": 1 /* Error */ },
        "Parameter '{0}' of public static method from exported class has or is using private type '{1}'.": { "code": 2037, "category": 1 /* Error */ },
        "Parameter '{0}' of public method from exported class has or is using private type '{1}'.": { "code": 2038, "category": 1 /* Error */ },
        "Parameter '{0}' of method from exported interface has or is using private type '{1}'.": { "code": 2039, "category": 1 /* Error */ },
        "Parameter '{0}' of exported function has or is using private type '{1}'.": { "code": 2040, "category": 1 /* Error */ },
        "Parameter '{0}' of constructor from exported class is using inaccessible module {1}.": { "code": 2041, "category": 1 /* Error */ },
        "Parameter '{0}' of public static property setter from exported class is using inaccessible module {1}.": { "code": 2042, "category": 1 /* Error */ },
        "Parameter '{0}' of public property setter from exported class is using inaccessible module {1}.": { "code": 2043, "category": 1 /* Error */ },
        "Parameter '{0}' of constructor signature from exported interface is using inaccessible module {1}.": { "code": 2044, "category": 1 /* Error */ },
        "Parameter '{0}' of call signature from exported interface is using inaccessible module {1}": { "code": 2045, "category": 1 /* Error */ },
        "Parameter '{0}' of public static method from exported class is using inaccessible module {1}.": { "code": 2046, "category": 1 /* Error */ },
        "Parameter '{0}' of public method from exported class is using inaccessible module {1}.": { "code": 2047, "category": 1 /* Error */ },
        "Parameter '{0}' of method from exported interface is using inaccessible module {1}.": { "code": 2048, "category": 1 /* Error */ },
        "Parameter '{0}' of exported function is using inaccessible module {1}.": { "code": 2049, "category": 1 /* Error */ },
        "Return type of public static property getter from exported class has or is using private type '{0}'.": { "code": 2050, "category": 1 /* Error */ },
        "Return type of public property getter from exported class has or is using private type '{0}'.": { "code": 2051, "category": 1 /* Error */ },
        "Return type of constructor signature from exported interface has or is using private type '{0}'.": { "code": 2052, "category": 1 /* Error */ },
        "Return type of call signature from exported interface has or is using private type '{0}'.": { "code": 2053, "category": 1 /* Error */ },
        "Return type of index signature from exported interface has or is using private type '{0}'.": { "code": 2054, "category": 1 /* Error */ },
        "Return type of public static method from exported class has or is using private type '{0}'.": { "code": 2055, "category": 1 /* Error */ },
        "Return type of public method from exported class has or is using private type '{0}'.": { "code": 2056, "category": 1 /* Error */ },
        "Return type of method from exported interface has or is using private type '{0}'.": { "code": 2057, "category": 1 /* Error */ },
        "Return type of exported function has or is using private type '{0}'.": { "code": 2058, "category": 1 /* Error */ },
        "Return type of public static property getter from exported class is using inaccessible module {0}.": { "code": 2059, "category": 1 /* Error */ },
        "Return type of public property getter from exported class is using inaccessible module {0}.": { "code": 2060, "category": 1 /* Error */ },
        "Return type of constructor signature from exported interface is using inaccessible module {0}.": { "code": 2061, "category": 1 /* Error */ },
        "Return type of call signature from exported interface is using inaccessible module {0}.": { "code": 2062, "category": 1 /* Error */ },
        "Return type of index signature from exported interface is using inaccessible module {0}.": { "code": 2063, "category": 1 /* Error */ },
        "Return type of public static method from exported class is using inaccessible module {0}.": { "code": 2064, "category": 1 /* Error */ },
        "Return type of public method from exported class is using inaccessible module {0}.": { "code": 2065, "category": 1 /* Error */ },
        "Return type of method from exported interface is using inaccessible module {0}.": { "code": 2066, "category": 1 /* Error */ },
        "Return type of exported function is using inaccessible module {0}.": { "code": 2067, "category": 1 /* Error */ },
        "'new T[]' cannot be used to create an array. Use 'new Array<T>()' instead.": { "code": 2068, "category": 1 /* Error */ },
        "A parameter list must follow a generic type argument list. '(' expected.": { "code": 2069, "category": 1 /* Error */ },
        "Multiple constructor implementations are not allowed.": { "code": 2070, "category": 1 /* Error */ },
        "Cannot find external module '{0}'.": { "code": 2071, "category": 1 /* Error */ },
        "Module cannot be aliased to a non-module type.": { "code": 2072, "category": 1 /* Error */ },
        "A class may only extend another class.": { "code": 2073, "category": 1 /* Error */ },
        "A class may only implement another class or interface.": { "code": 2074, "category": 1 /* Error */ },
        "An interface may only extend a class or another interface.": { "code": 2075, "category": 1 /* Error */ },
        "Unable to resolve type.": { "code": 2077, "category": 1 /* Error */ },
        "Unable to resolve type of '{0}'.": { "code": 2078, "category": 1 /* Error */ },
        "Unable to resolve type parameter constraint.": { "code": 2079, "category": 1 /* Error */ },
        "Type parameter constraint cannot be a primitive type.": { "code": 2080, "category": 1 /* Error */ },
        "Supplied parameters do not match any signature of call target.": { "code": 2081, "category": 1 /* Error */ },
        "Supplied parameters do not match any signature of call target:{NL}{0}": { "code": 2082, "category": 1 /* Error */ },
        "Cannot use 'new' with an expression whose type lacks a signature.": { "code": 2083, "category": 1 /* Error */ },
        "Only a void function can be called with the 'new' keyword.": { "code": 2084, "category": 1 /* Error */ },
        "Could not select overload for 'new' expression.": { "code": 2085, "category": 1 /* Error */ },
        "Type '{0}' does not satisfy the constraint '{1}'.": { "code": 2086, "category": 1 /* Error */ },
        "Could not select overload for 'call' expression.": { "code": 2087, "category": 1 /* Error */ },
        "Cannot invoke an expression whose type lacks a call signature.": { "code": 2088, "category": 1 /* Error */ },
        "Calls to 'super' are only valid inside a class.": { "code": 2089, "category": 1 /* Error */ },
        "Generic type '{0}' requires {1} type argument(s).": { "code": 2090, "category": 1 /* Error */ },
        "Type of array literal cannot be determined. Best common type could not be found for array elements.": { "code": 2092, "category": 1 /* Error */ },
        "Could not find enclosing symbol for dotted name '{0}'.": { "code": 2093, "category": 1 /* Error */ },
        "Property '{0}' does not exist on value of type '{1}'.": { "code": 2094, "category": 1 /* Error */ },
        "Cannot find name '{0}'.": { "code": 2095, "category": 1 /* Error */ },
        "'get' and 'set' accessor must have the same type.": { "code": 2096, "category": 1 /* Error */ },
        "'this' cannot be referenced in current location.": { "code": 2097, "category": 1 /* Error */ },
        "Static members cannot reference class type parameters.": { "code": 2099, "category": 1 /* Error */ },
        "Type '{0}' recursively references itself as a base type.": { "code": 2100, "category": 1 /* Error */ },
        "'super' property access is permitted only in a constructor, member function, or member accessor of a derived class.": { "code": 2102, "category": 1 /* Error */ },
        "'super' can only be referenced in a derived class.": { "code": 2103, "category": 1 /* Error */ },
        "A 'super' call must be the first statement in the constructor when a class contains initialized properties or has parameter properties.": { "code": 2104, "category": 1 /* Error */ },
        "Constructors for derived classes must contain a 'super' call.": { "code": 2105, "category": 1 /* Error */ },
        "Super calls are not permitted outside constructors or in nested functions inside constructors.": { "code": 2106, "category": 1 /* Error */ },
        "'{0}.{1}' is inaccessible.": { "code": 2107, "category": 1 /* Error */ },
        "'this' cannot be referenced in a module body.": { "code": 2108, "category": 1 /* Error */ },
        "Invalid '+' expression - types not known to support the addition operator.": { "code": 2111, "category": 1 /* Error */ },
        "The right-hand side of an arithmetic operation must be of type 'any', 'number' or an enum type.": { "code": 2112, "category": 1 /* Error */ },
        "The left-hand side of an arithmetic operation must be of type 'any', 'number' or an enum type.": { "code": 2113, "category": 1 /* Error */ },
        "An arithmetic operand must be of type 'any', 'number' or an enum type.": { "code": 2114, "category": 1 /* Error */ },
        "Variable declarations of a 'for' statement cannot use a type annotation.": { "code": 2115, "category": 1 /* Error */ },
        "Variable declarations of a 'for' statement must be of types 'string' or 'any'.": { "code": 2116, "category": 1 /* Error */ },
        "The right-hand side of a 'for...in' statement must be of type 'any', an object type or a type parameter.": { "code": 2117, "category": 1 /* Error */ },
        "The left-hand side of an 'in' expression must be of types 'any', 'string' or 'number'.": { "code": 2118, "category": 1 /* Error */ },
        "The right-hand side of an 'in' expression must be of type 'any', an object type or a type parameter.": { "code": 2119, "category": 1 /* Error */ },
        "The left-hand side of an 'instanceof' expression must be of type 'any', an object type or a type parameter.": { "code": 2120, "category": 1 /* Error */ },
        "The right-hand side of an 'instanceof' expression must be of type 'any' or of a type assignable to the 'Function' interface type.": { "code": 2121, "category": 1 /* Error */ },
        "Setters cannot return a value.": { "code": 2122, "category": 1 /* Error */ },
        "Tried to query type of uninitialized module '{0}'.": { "code": 2123, "category": 1 /* Error */ },
        "Tried to set variable type to uninitialized module type '{0}'.": { "code": 2124, "category": 1 /* Error */ },
        "Type '{0}' is not generic.": { "code": 2125, "category": 1 /* Error */ },
        "Getters must return a value.": { "code": 2126, "category": 1 /* Error */ },
        "Getter and setter accessors do not agree in visibility.": { "code": 2127, "category": 1 /* Error */ },
        "Invalid left-hand side of assignment expression.": { "code": 2130, "category": 1 /* Error */ },
        "Function declared a non-void return type, but has no return expression.": { "code": 2131, "category": 1 /* Error */ },
        "Cannot resolve return type reference.": { "code": 2132, "category": 1 /* Error */ },
        "Constructors cannot have a return type of 'void'.": { "code": 2133, "category": 1 /* Error */ },
        "Subsequent variable declarations must have the same type.  Variable '{0}' must be of type '{1}', but here has type '{2}'.": { "code": 2134, "category": 1 /* Error */ },
        "All symbols within a with block will be resolved to 'any'.": { "code": 2135, "category": 1 /* Error */ },
        "Import declarations in an internal module cannot reference an external module.": { "code": 2136, "category": 1 /* Error */ },
        "Class {0} declares interface {1} but does not implement it:{NL}{2}": { "code": 2137, "category": 1 /* Error */ },
        "Class {0} declares class {1} as an interface but does not implement it:{NL}{2}": { "code": 2138, "category": 1 /* Error */ },
        "The operand of an increment or decrement operator must be a variable, property or indexer.": { "code": 2139, "category": 1 /* Error */ },
        "'this' cannot be referenced in a static property initializer.": { "code": 2140, "category": 1 /* Error */ },
        "Class '{0}' cannot extend class '{1}':{NL}{2}": { "code": 2141, "category": 1 /* Error */ },
        "Interface '{0}' cannot extend class '{1}':{NL}{2}": { "code": 2142, "category": 1 /* Error */ },
        "Interface '{0}' cannot extend interface '{1}':{NL}{2}": { "code": 2143, "category": 1 /* Error */ },
        "Overload signature is not compatible with function definition.": { "code": 2148, "category": 1 /* Error */ },
        "Overload signature is not compatible with function definition:{NL}{0}": { "code": 2149, "category": 1 /* Error */ },
        "Overload signatures must all be public or private.": { "code": 2150, "category": 1 /* Error */ },
        "Overload signatures must all be exported or not exported.": { "code": 2151, "category": 1 /* Error */ },
        "Overload signatures must all be ambient or non-ambient.": { "code": 2152, "category": 1 /* Error */ },
        "Overload signatures must all be optional or required.": { "code": 2153, "category": 1 /* Error */ },
        "Specialized overload signature is not assignable to any non-specialized signature.": { "code": 2154, "category": 1 /* Error */ },
        "'this' cannot be referenced in constructor arguments.": { "code": 2155, "category": 1 /* Error */ },
        "Instance member cannot be accessed off a class.": { "code": 2157, "category": 1 /* Error */ },
        "Untyped function calls may not accept type arguments.": { "code": 2158, "category": 1 /* Error */ },
        "Non-generic functions may not accept type arguments.": { "code": 2159, "category": 1 /* Error */ },
        "A generic type may not reference itself with a wrapped form of its own type parameters.": { "code": 2160, "category": 1 /* Error */ },
        "A rest parameter must be of an array type.": { "code": 2162, "category": 1 /* Error */ },
        "Overload signature implementation cannot use specialized type.": { "code": 2163, "category": 1 /* Error */ },
        "Export assignments may only be used at the top-level of external modules.": { "code": 2164, "category": 1 /* Error */ },
        "Export assignments may only be made with variables, functions, classes, interfaces, enums and internal modules.": { "code": 2165, "category": 1 /* Error */ },
        "Only public methods of the base class are accessible via the 'super' keyword.": { "code": 2166, "category": 1 /* Error */ },
        "Numeric indexer type '{0}' must be assignable to string indexer type '{1}'.": { "code": 2167, "category": 1 /* Error */ },
        "Numeric indexer type '{0}' must be assignable to string indexer type '{1}':{NL}{2}": { "code": 2168, "category": 1 /* Error */ },
        "All numerically named properties must be assignable to numeric indexer type '{0}'.": { "code": 2169, "category": 1 /* Error */ },
        "All numerically named properties must be assignable to numeric indexer type '{0}':{NL}{1}": { "code": 2170, "category": 1 /* Error */ },
        "All named properties must be assignable to string indexer type '{0}'.": { "code": 2171, "category": 1 /* Error */ },
        "All named properties must be assignable to string indexer type '{0}':{NL}{1}": { "code": 2172, "category": 1 /* Error */ },
        "A parameter initializer is only allowed in a function or constructor implementation.": { "code": 2174, "category": 1 /* Error */ },
        "Function expression declared a non-void return type, but has no return expression.": { "code": 2176, "category": 1 /* Error */ },
        "Import declaration referencing identifier from internal module can only be made with variables, functions, classes, interfaces, enums and internal modules.": { "code": 2177, "category": 1 /* Error */ },
        "Module '{0}' has no exported member '{1}'.": { "code": 2178, "category": 1 /* Error */ },
        "Unable to resolve module reference '{0}'.": { "code": 2179, "category": 1 /* Error */ },
        "Could not find module '{0}' in module '{1}'.": { "code": 2180, "category": 1 /* Error */ },
        "Exported import declaration '{0}' is assigned value with type that has or is using private type '{1}'.": { "code": 2181, "category": 1 /* Error */ },
        "Exported import declaration '{0}' is assigned value with type that is using inaccessible module '{1}'.": { "code": 2182, "category": 1 /* Error */ },
        "Exported import declaration '{0}' is assigned type that has or is using private type '{1}'.": { "code": 2183, "category": 1 /* Error */ },
        "Exported import declaration '{0}' is assigned type that is using inaccessible module '{1}'.": { "code": 2184, "category": 1 /* Error */ },
        "Exported import declaration '{0}' is assigned container that is or is using inaccessible module '{1}'.": { "code": 2185, "category": 1 /* Error */ },
        "Type name '{0}' in extends clause does not reference constructor function for '{1}'.": { "code": 2186, "category": 1 /* Error */ },
        "Internal module reference '{0}' in import declaration does not reference module instance for '{1}'.": { "code": 2187, "category": 1 /* Error */ },
        "Module '{0}' cannot merge with previous declaration of '{1}' in a different file '{2}'.": { "code": 2188, "category": 1 /* Error */ },
        "Interface '{0}' cannot simultaneously extend types '{1}' and '{2}':{NL}{3}": { "code": 2189, "category": 1 /* Error */ },
        "Initializer of parameter '{0}' cannot reference identifier '{1}' declared after it.": { "code": 2190, "category": 1 /* Error */ },
        "Ambient external module declaration cannot be reopened.": { "code": 2191, "category": 1 /* Error */ },
        "All declarations of merged declaration '{0}' must be exported or not exported.": { "code": 2192, "category": 1 /* Error */ },
        "'super' cannot be referenced in constructor arguments.": { "code": 2193, "category": 1 /* Error */ },
        "Return type of constructor signature must be assignable to the instance type of the class.": { "code": 2194, "category": 1 /* Error */ },
        "Ambient external module declaration must be defined in global context.": { "code": 2195, "category": 1 /* Error */ },
        "Ambient external module declaration cannot specify relative module name.": { "code": 2196, "category": 1 /* Error */ },
        "Import declaration in an ambient external module declaration cannot reference external module through relative external module name.": { "code": 2197, "category": 1 /* Error */ },
        "No best common type exists among return expressions.": { "code": 2198, "category": 1 /* Error */ },
        "Import declaration cannot refer to external module reference when --noResolve option is set.": { "code": 2199, "category": 1 /* Error */ },
        "Duplicate identifier '_this'. Compiler uses variable declaration '_this' to capture 'this' reference.": { "code": 2200, "category": 1 /* Error */ },
        "Duplicate identifier '_super'. Compiler uses '_super' to capture base class reference.": { "code": 2205, "category": 1 /* Error */ },
        "Expression resolves to variable declaration '_this' that compiler uses to capture 'this' reference.": { "code": 2206, "category": 1 /* Error */ },
        "Expression resolves to '_super' that compiler uses to capture base class reference.": { "code": 2207, "category": 1 /* Error */ },
        "TypeParameter '{0}' of constructor signature from exported interface has or is using private type '{1}'.": { "code": 2208, "category": 1 /* Error */ },
        "TypeParameter '{0}' of call signature from exported interface has or is using private type '{1}'.": { "code": 2209, "category": 1 /* Error */ },
        "TypeParameter '{0}' of public static method from exported class has or is using private type '{1}'.": { "code": 2210, "category": 1 /* Error */ },
        "TypeParameter '{0}' of public method from exported class has or is using private type '{1}'.": { "code": 2211, "category": 1 /* Error */ },
        "TypeParameter '{0}' of method from exported interface has or is using private type '{1}'.": { "code": 2212, "category": 1 /* Error */ },
        "TypeParameter '{0}' of exported function has or is using private type '{1}'.": { "code": 2213, "category": 1 /* Error */ },
        "TypeParameter '{0}' of constructor signature from exported interface is using inaccessible module {1}.": { "code": 2214, "category": 1 /* Error */ },
        "TypeParameter '{0}' of call signature from exported interface is using inaccessible module {1}": { "code": 2215, "category": 1 /* Error */ },
        "TypeParameter '{0}' of public static method from exported class is using inaccessible module {1}.": { "code": 2216, "category": 1 /* Error */ },
        "TypeParameter '{0}' of public method from exported class is using inaccessible module {1}.": { "code": 2217, "category": 1 /* Error */ },
        "TypeParameter '{0}' of method from exported interface is using inaccessible module {1}.": { "code": 2218, "category": 1 /* Error */ },
        "TypeParameter '{0}' of exported function is using inaccessible module {1}.": { "code": 2219, "category": 1 /* Error */ },
        "TypeParameter '{0}' of exported class has or is using private type '{1}'.": { "code": 2220, "category": 1 /* Error */ },
        "TypeParameter '{0}' of exported interface has or is using private type '{1}'.": { "code": 2221, "category": 1 /* Error */ },
        "TypeParameter '{0}' of exported class is using inaccessible module {1}.": { "code": 2222, "category": 1 /* Error */ },
        "TypeParameter '{0}' of exported interface is using inaccessible module {1}.": { "code": 2223, "category": 1 /* Error */ },
        "Duplicate identifier '_i'. Compiler uses '_i' to initialize rest parameter.": { "code": 2224, "category": 1 /* Error */ },
        "Duplicate identifier 'arguments'. Compiler uses 'arguments' to initialize rest parameters.": { "code": 2225, "category": 1 /* Error */ },
        "No best common type exists between '{0}' and '{1}'.": { "code": 2226, "category": 1 /* Error */ },
        "No best common type exists between '{0}', '{1}', and '{2}'.": { "code": 2227, "category": 1 /* Error */ },
        "Duplicate identifier '{0}'. Compiler reserves name '{1}' in top level scope of an external module.": { "code": 2228, "category": 1 /* Error */ },
        "Constraint of a type parameter cannot reference any type parameter from the same type parameter list.": { "code": 2229, "category": 1 /* Error */ },
        "Initializer of instance member variable '{0}' cannot reference identifier '{1}' declared in the constructor.": { "code": 2230, "category": 1 /* Error */ },
        "Parameter '{0}' cannot be referenced in its initializer.": { "code": 2231, "category": 1 /* Error */ },
        "Duplicate string index signature.": { "code": 2232, "category": 1 /* Error */ },
        "Duplicate number index signature.": { "code": 2233, "category": 1 /* Error */ },
        "All declarations of an interface must have identical type parameters.": { "code": 2234, "category": 1 /* Error */ },
        "Expression resolves to variable declaration '_i' that compiler uses to initialize rest parameter.": { "code": 2235, "category": 1 /* Error */ },
        "Neither type '{0}' nor type '{1}' is assignable to the other.": { "code": 2236, "category": 1 /* Error */ },
        "Neither type '{0}' nor type '{1}' is assignable to the other:{NL}{2}": { "code": 2237, "category": 1 /* Error */ },
        "Duplicate function implementation.": { "code": 2237, "category": 1 /* Error */ },
        "Function implementation expected.": { "code": 2238, "category": 1 /* Error */ },
        "Function overload name must be '{0}'.": { "code": 2239, "category": 1 /* Error */ },
        "Constructor implementation expected.": { "code": 2240, "category": 1 /* Error */ },
        "Class name cannot be '{0}'.": { "code": 2241, "category": 1 /* Error */ },
        "Interface name cannot be '{0}'.": { "code": 2242, "category": 1 /* Error */ },
        "Enum name cannot be '{0}'.": { "code": 2243, "category": 1 /* Error */ },
        "A module cannot have multiple export assignments.": { "code": 2244, "category": 1 /* Error */ },
        "Export assignment not allowed in module with exported element.": { "code": 2245, "category": 1 /* Error */ },
        "A parameter property is only allowed in a constructor implementation.": { "code": 2246, "category": 1 /* Error */ },
        "Function overload must be static.": { "code": 2247, "category": 1 /* Error */ },
        "Function overload must not be static.": { "code": 2248, "category": 1 /* Error */ },
        "Type '{0}' is missing property '{1}' from type '{2}'.": { "code": 4000, "category": 3 /* NoPrefix */ },
        "Types of property '{0}' of types '{1}' and '{2}' are incompatible.": { "code": 4001, "category": 3 /* NoPrefix */ },
        "Types of property '{0}' of types '{1}' and '{2}' are incompatible:{NL}{3}": { "code": 4002, "category": 3 /* NoPrefix */ },
        "Property '{0}' defined as private in type '{1}' is defined as public in type '{2}'.": { "code": 4003, "category": 3 /* NoPrefix */ },
        "Property '{0}' defined as public in type '{1}' is defined as private in type '{2}'.": { "code": 4004, "category": 3 /* NoPrefix */ },
        "Types '{0}' and '{1}' define property '{2}' as private.": { "code": 4005, "category": 3 /* NoPrefix */ },
        "Call signatures of types '{0}' and '{1}' are incompatible.": { "code": 4006, "category": 3 /* NoPrefix */ },
        "Call signatures of types '{0}' and '{1}' are incompatible:{NL}{2}": { "code": 4007, "category": 3 /* NoPrefix */ },
        "Type '{0}' requires a call signature, but type '{1}' lacks one.": { "code": 4008, "category": 3 /* NoPrefix */ },
        "Construct signatures of types '{0}' and '{1}' are incompatible.": { "code": 4009, "category": 3 /* NoPrefix */ },
        "Construct signatures of types '{0}' and '{1}' are incompatible:{NL}{2}": { "code": 4010, "category": 3 /* NoPrefix */ },
        "Type '{0}' requires a construct signature, but type '{1}' lacks one.": { "code": 4011, "category": 3 /* NoPrefix */ },
        "Index signatures of types '{0}' and '{1}' are incompatible.": { "code": 4012, "category": 3 /* NoPrefix */ },
        "Index signatures of types '{0}' and '{1}' are incompatible:{NL}{2}": { "code": 4013, "category": 3 /* NoPrefix */ },
        "Call signature expects {0} or fewer parameters.": { "code": 4014, "category": 3 /* NoPrefix */ },
        "Could not apply type '{0}' to argument {1} which is of type '{2}'.": { "code": 4015, "category": 3 /* NoPrefix */ },
        "Class '{0}' defines instance member accessor '{1}', but extended class '{2}' defines it as instance member function.": { "code": 4016, "category": 3 /* NoPrefix */ },
        "Class '{0}' defines instance member property '{1}', but extended class '{2}' defines it as instance member function.": { "code": 4017, "category": 3 /* NoPrefix */ },
        "Class '{0}' defines instance member function '{1}', but extended class '{2}' defines it as instance member accessor.": { "code": 4018, "category": 3 /* NoPrefix */ },
        "Class '{0}' defines instance member function '{1}', but extended class '{2}' defines it as instance member property.": { "code": 4019, "category": 3 /* NoPrefix */ },
        "Types of static property '{0}' of class '{1}' and class '{2}' are incompatible.": { "code": 4020, "category": 3 /* NoPrefix */ },
        "Types of static property '{0}' of class '{1}' and class '{2}' are incompatible:{NL}{3}": { "code": 4021, "category": 3 /* NoPrefix */ },
        "Type reference cannot refer to container '{0}'.": { "code": 4022, "category": 1 /* Error */ },
        "Type reference must refer to type.": { "code": 4023, "category": 1 /* Error */ },
        "In enums with multiple declarations only one declaration can omit an initializer for the first enum element.": { "code": 4024, "category": 1 /* Error */ },
        " (+ {0} overload(s))": { "code": 4025, "category": 2 /* Message */ },
        "Variable declaration cannot have the same name as an import declaration.": { "code": 4026, "category": 1 /* Error */ },
        "Signature expected {0} type arguments, got {1} instead.": { "code": 4027, "category": 1 /* Error */ },
        "Property '{0}' defined as optional in type '{1}', but is required in type '{2}'.": { "code": 4028, "category": 3 /* NoPrefix */ },
        "Types '{0}' and '{1}' originating in infinitely expanding type reference do not refer to same named type.": { "code": 4029, "category": 3 /* NoPrefix */ },
        "Types '{0}' and '{1}' originating in infinitely expanding type reference have incompatible type arguments.": { "code": 4030, "category": 3 /* NoPrefix */ },
        "Types '{0}' and '{1}' originating in infinitely expanding type reference have incompatible type arguments:{NL}{2}": { "code": 4031, "category": 3 /* NoPrefix */ },
        "Named properties '{0}' of types '{1}' and '{2}' are not identical.": { "code": 4032, "category": 3 /* NoPrefix */ },
        "Types of string indexer of types '{0}' and '{1}' are not identical.": { "code": 4033, "category": 3 /* NoPrefix */ },
        "Types of number indexer of types '{0}' and '{1}' are not identical.": { "code": 4034, "category": 3 /* NoPrefix */ },
        "Type of number indexer in type '{0}' is not assignable to string indexer type in type '{1}'.{NL}{2}": { "code": 4035, "category": 3 /* NoPrefix */ },
        "Type of property '{0}' in type '{1}' is not assignable to string indexer type in type '{2}'.{NL}{3}": { "code": 4036, "category": 3 /* NoPrefix */ },
        "Type of property '{0}' in type '{1}' is not assignable to number indexer type in type '{2}'.{NL}{3}": { "code": 4037, "category": 3 /* NoPrefix */ },
        "Static property '{0}' defined as private in type '{1}' is defined as public in type '{2}'.": { "code": 4038, "category": 3 /* NoPrefix */ },
        "Static property '{0}' defined as public in type '{1}' is defined as private in type '{2}'.": { "code": 4039, "category": 3 /* NoPrefix */ },
        "Types '{0}' and '{1}' define static property '{2}' as private.": { "code": 4040, "category": 3 /* NoPrefix */ },
        "Current host does not support '{0}' option.": { "code": 5001, "category": 1 /* Error */ },
        "ECMAScript target version '{0}' not supported.  Specify a valid target version: '{1}' (default), or '{2}'": { "code": 5002, "category": 1 /* Error */ },
        "Argument for '{0}' option must be '{1}' or '{2}'": { "code": 5003, "category": 1 /* Error */ },
        "Could not find file: '{0}'.": { "code": 5004, "category": 1 /* Error */ },
        "A file cannot have a reference to itself.": { "code": 5006, "category": 1 /* Error */ },
        "Cannot resolve referenced file: '{0}'.": { "code": 5007, "category": 1 /* Error */ },
        "Cannot find the common subdirectory path for the input files.": { "code": 5009, "category": 1 /* Error */ },
        "Emit Error: {0}.": { "code": 5011, "category": 1 /* Error */ },
        "Cannot read file '{0}': {1}": { "code": 5012, "category": 1 /* Error */ },
        "Unsupported file encoding.": { "code": 5013, "category": 3 /* NoPrefix */ },
        "Locale must be of the form <language> or <language>-<territory>. For example '{0}' or '{1}'.": { "code": 5014, "category": 1 /* Error */ },
        "Unsupported locale: '{0}'.": { "code": 5015, "category": 1 /* Error */ },
        "Execution Failed.{NL}": { "code": 5016, "category": 1 /* Error */ },
        "Invalid call to 'up'": { "code": 5019, "category": 1 /* Error */ },
        "Invalid call to 'down'": { "code": 5020, "category": 1 /* Error */ },
        "Base64 value '{0}' finished with a continuation bit.": { "code": 5021, "category": 1 /* Error */ },
        "Unknown compiler option '{0}'": { "code": 5023, "category": 1 /* Error */ },
        "Expected {0} arguments to message, got {1} instead.": { "code": 5024, "category": 1 /* Error */ },
        "Expected the message '{0}' to have {1} arguments, but it had {2}": { "code": 5025, "category": 1 /* Error */ },
        "Could not delete file '{0}'": { "code": 5034, "category": 1 /* Error */ },
        "Could not create directory '{0}'": { "code": 5035, "category": 1 /* Error */ },
        "Error while executing file '{0}': ": { "code": 5036, "category": 1 /* Error */ },
        "Cannot compile external modules unless the '--module' flag is provided.": { "code": 5037, "category": 1 /* Error */ },
        "Option mapRoot cannot be specified without specifying sourcemap option.": { "code": 5038, "category": 1 /* Error */ },
        "Option sourceRoot cannot be specified without specifying sourcemap option.": { "code": 5039, "category": 1 /* Error */ },
        "Options mapRoot and sourceRoot cannot be specified without specifying sourcemap option.": { "code": 5040, "category": 1 /* Error */ },
        "Option '{0}' specified without '{1}'": { "code": 5041, "category": 1 /* Error */ },
        "'codepage' option not supported on current platform.": { "code": 5042, "category": 1 /* Error */ },
        "Concatenate and emit output to single file.": { "code": 6001, "category": 2 /* Message */ },
        "Generates corresponding {0} file.": { "code": 6002, "category": 2 /* Message */ },
        "Specifies the location where debugger should locate map files instead of generated locations.": { "code": 6003, "category": 2 /* Message */ },
        "Specifies the location where debugger should locate TypeScript files instead of source locations.": { "code": 6004, "category": 2 /* Message */ },
        "Watch input files.": { "code": 6005, "category": 2 /* Message */ },
        "Redirect output structure to the directory.": { "code": 6006, "category": 2 /* Message */ },
        "Do not emit comments to output.": { "code": 6009, "category": 2 /* Message */ },
        "Skip resolution and preprocessing.": { "code": 6010, "category": 2 /* Message */ },
        "Specify ECMAScript target version: '{0}' (default), or '{1}'": { "code": 6015, "category": 2 /* Message */ },
        "Specify module code generation: '{0}' or '{1}'": { "code": 6016, "category": 2 /* Message */ },
        "Print this message.": { "code": 6017, "category": 2 /* Message */ },
        "Print the compiler's version: {0}": { "code": 6019, "category": 2 /* Message */ },
        "Allow use of deprecated '{0}' keyword when referencing an external module.": { "code": 6021, "category": 2 /* Message */ },
        "Specify locale for errors and messages. For example '{0}' or '{1}'": { "code": 6022, "category": 2 /* Message */ },
        "Syntax:   {0}": { "code": 6023, "category": 2 /* Message */ },
        "options": { "code": 6024, "category": 2 /* Message */ },
        "file1": { "code": 6025, "category": 2 /* Message */ },
        "Examples:": { "code": 6026, "category": 2 /* Message */ },
        "Options:": { "code": 6027, "category": 2 /* Message */ },
        "Insert command line options and files from a file.": { "code": 6030, "category": 2 /* Message */ },
        "Version {0}": { "code": 6029, "category": 2 /* Message */ },
        "Use the '{0}' flag to see options.": { "code": 6031, "category": 2 /* Message */ },
        "{NL}Recompiling ({0}):": { "code": 6032, "category": 2 /* Message */ },
        "STRING": { "code": 6033, "category": 2 /* Message */ },
        "KIND": { "code": 6034, "category": 2 /* Message */ },
        "file2": { "code": 6035, "category": 2 /* Message */ },
        "VERSION": { "code": 6036, "category": 2 /* Message */ },
        "LOCATION": { "code": 6037, "category": 2 /* Message */ },
        "DIRECTORY": { "code": 6038, "category": 2 /* Message */ },
        "NUMBER": { "code": 6039, "category": 2 /* Message */ },
        "Specify the codepage to use when opening source files.": { "code": 6040, "category": 2 /* Message */ },
        "Additional locations:": { "code": 6041, "category": 2 /* Message */ },
        "This version of the Javascript runtime does not support the '{0}' function.": { "code": 7000, "category": 1 /* Error */ },
        "Unknown rule.": { "code": 7002, "category": 1 /* Error */ },
        "Invalid line number ({0})": { "code": 7003, "category": 1 /* Error */ },
        "Warn on expressions and declarations with an implied 'any' type.": { "code": 7004, "category": 2 /* Message */ },
        "Variable '{0}' implicitly has an 'any' type.": { "code": 7005, "category": 1 /* Error */ },
        "Parameter '{0}' of '{1}' implicitly has an 'any' type.": { "code": 7006, "category": 1 /* Error */ },
        "Parameter '{0}' of function type implicitly has an 'any' type.": { "code": 7007, "category": 1 /* Error */ },
        "Member '{0}' of object type implicitly has an 'any' type.": { "code": 7008, "category": 1 /* Error */ },
        "'new' expression, which lacks a constructor signature, implicitly has an 'any' type.": { "code": 7009, "category": 1 /* Error */ },
        "'{0}', which lacks return-type annotation, implicitly has an 'any' return type.": { "code": 7010, "category": 1 /* Error */ },
        "Function expression, which lacks return-type annotation, implicitly has an 'any' return type.": { "code": 7011, "category": 1 /* Error */ },
        "Parameter '{0}' of lambda function implicitly has an 'any' type.": { "code": 7012, "category": 1 /* Error */ },
        "Constructor signature, which lacks return-type annotation, implicitly has an 'any' return type.": { "code": 7013, "category": 1 /* Error */ },
        "Lambda Function, which lacks return-type annotation, implicitly has an 'any' return type.": { "code": 7014, "category": 1 /* Error */ },
        "Array Literal implicitly has an 'any' type from widening.": { "code": 7015, "category": 1 /* Error */ },
        "'{0}', which lacks 'get' accessor and parameter type annotation on 'set' accessor, implicitly has an 'any' type.": { "code": 7016, "category": 1 /* Error */ },
        "Index signature of object type implicitly has an 'any' type.": { "code": 7017, "category": 1 /* Error */ },
        "Object literal's property '{0}' implicitly has an 'any' type from widening.": { "code": 7018, "category": 1 /* Error */ }
    };
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var Errors = (function () {
        function Errors() {
        }
        Errors.argument = function (argument, message) {
            return new Error("Invalid argument: " + argument + ". " + message);
        };
        Errors.argumentOutOfRange = function (argument) {
            return new Error("Argument out of range: " + argument);
        };
        Errors.argumentNull = function (argument) {
            return new Error("Argument null: " + argument);
        };
        Errors.abstract = function () {
            return new Error("Operation not implemented properly by subclass.");
        };
        Errors.notYetImplemented = function () {
            return new Error("Not yet implemented.");
        };
        Errors.invalidOperation = function (message) {
            return new Error("Invalid operation: " + message);
        };
        return Errors;
    })();
    TypeScript.Errors = Errors;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var ArrayUtilities = (function () {
        function ArrayUtilities() {
        }
        ArrayUtilities.sequenceEquals = function (array1, array2, equals) {
            if (array1 === array2) {
                return true;
            }
            if (!array1 || !array2) {
                return false;
            }
            if (array1.length !== array2.length) {
                return false;
            }
            for (var i = 0, n = array1.length; i < n; i++) {
                if (!equals(array1[i], array2[i])) {
                    return false;
                }
            }
            return true;
        };
        ArrayUtilities.contains = function (array, value) {
            for (var i = 0; i < array.length; i++) {
                if (array[i] === value) {
                    return true;
                }
            }
            return false;
        };
        ArrayUtilities.distinct = function (array, equalsFn) {
            var result = [];
            for (var i = 0, n = array.length; i < n; i++) {
                var current = array[i];
                for (var j = 0; j < result.length; j++) {
                    if (equalsFn(result[j], current)) {
                        break;
                    }
                }
                if (j === result.length) {
                    result.push(current);
                }
            }
            return result;
        };
        ArrayUtilities.last = function (array) {
            if (array.length === 0) {
                throw TypeScript.Errors.argumentOutOfRange('array');
            }
            return array[array.length - 1];
        };
        ArrayUtilities.lastOrDefault = function (array, predicate) {
            for (var i = array.length - 1; i >= 0; i--) {
                var v = array[i];
                if (predicate(v, i)) {
                    return v;
                }
            }
            return undefined;
        };
        ArrayUtilities.firstOrDefault = function (array, func) {
            for (var i = 0, n = array.length; i < n; i++) {
                var value = array[i];
                if (func(value, i)) {
                    return value;
                }
            }
            return undefined;
        };
        ArrayUtilities.first = function (array, func) {
            for (var i = 0, n = array.length; i < n; i++) {
                var value = array[i];
                if (!func || func(value, i)) {
                    return value;
                }
            }
            throw TypeScript.Errors.invalidOperation();
        };
        ArrayUtilities.sum = function (array, func) {
            var result = 0;
            for (var i = 0, n = array.length; i < n; i++) {
                result += func(array[i]);
            }
            return result;
        };
        ArrayUtilities.select = function (values, func) {
            var result = new Array(values.length);
            for (var i = 0; i < values.length; i++) {
                result[i] = func(values[i]);
            }
            return result;
        };
        ArrayUtilities.where = function (values, func) {
            var result = new Array();
            for (var i = 0; i < values.length; i++) {
                if (func(values[i])) {
                    result.push(values[i]);
                }
            }
            return result;
        };
        ArrayUtilities.any = function (array, func) {
            for (var i = 0, n = array.length; i < n; i++) {
                if (func(array[i])) {
                    return true;
                }
            }
            return false;
        };
        ArrayUtilities.all = function (array, func) {
            for (var i = 0, n = array.length; i < n; i++) {
                if (!func(array[i])) {
                    return false;
                }
            }
            return true;
        };
        ArrayUtilities.binarySearch = function (array, value) {
            var low = 0;
            var high = array.length - 1;
            while (low <= high) {
                var middle = low + ((high - low) >> 1);
                var midValue = array[middle];
                if (midValue === value) {
                    return middle;
                }
                else if (midValue > value) {
                    high = middle - 1;
                }
                else {
                    low = middle + 1;
                }
            }
            return ~low;
        };
        ArrayUtilities.createArray = function (length, defaultValue) {
            var result = new Array(length);
            for (var i = 0; i < length; i++) {
                result[i] = defaultValue;
            }
            return result;
        };
        ArrayUtilities.grow = function (array, length, defaultValue) {
            var count = length - array.length;
            for (var i = 0; i < count; i++) {
                array.push(defaultValue);
            }
        };
        ArrayUtilities.copy = function (sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
            for (var i = 0; i < length; i++) {
                destinationArray[destinationIndex + i] = sourceArray[sourceIndex + i];
            }
        };
        ArrayUtilities.indexOf = function (array, predicate) {
            for (var i = 0, n = array.length; i < n; i++) {
                if (predicate(array[i])) {
                    return i;
                }
            }
            return -1;
        };
        return ArrayUtilities;
    })();
    TypeScript.ArrayUtilities = ArrayUtilities;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (AssertionLevel) {
        AssertionLevel[AssertionLevel["None"] = 0] = "None";
        AssertionLevel[AssertionLevel["Normal"] = 1] = "Normal";
        AssertionLevel[AssertionLevel["Aggressive"] = 2] = "Aggressive";
        AssertionLevel[AssertionLevel["VeryAggressive"] = 3] = "VeryAggressive";
    })(TypeScript.AssertionLevel || (TypeScript.AssertionLevel = {}));
    var AssertionLevel = TypeScript.AssertionLevel;
    var Debug = (function () {
        function Debug() {
        }
        Debug.shouldAssert = function (level) {
            return this.currentAssertionLevel >= level;
        };
        Debug.assert = function (expression, message, verboseDebugInfo) {
            if (!expression) {
                var verboseDebugString = "";
                if (verboseDebugInfo) {
                    verboseDebugString = "\r\nVerbose Debug Information:" + verboseDebugInfo();
                }
                message = message || "";
                throw new Error("Debug Failure. False expression: " + message + verboseDebugString);
            }
        };
        Debug.fail = function (message) {
            Debug.assert(false, message);
        };
        Debug.currentAssertionLevel = 0 /* None */;
        return Debug;
    })();
    TypeScript.Debug = Debug;
})(TypeScript || (TypeScript = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var TypeScript;
(function (TypeScript) {
    var Location = (function () {
        function Location(fileName, lineMap, start, length) {
            this._fileName = fileName;
            this._lineMap = lineMap;
            this._start = start;
            this._length = length;
        }
        Location.prototype.fileName = function () {
            return this._fileName;
        };
        Location.prototype.lineMap = function () {
            return this._lineMap;
        };
        Location.prototype.line = function () {
            return this._lineMap ? this._lineMap.getLineNumberFromPosition(this.start()) : 0;
        };
        Location.prototype.character = function () {
            return this._lineMap ? this._lineMap.getLineAndCharacterFromPosition(this.start()).character() : 0;
        };
        Location.prototype.start = function () {
            return this._start;
        };
        Location.prototype.length = function () {
            return this._length;
        };
        Location.equals = function (location1, location2) {
            return location1._fileName === location2._fileName && location1._start === location2._start && location1._length === location2._length;
        };
        return Location;
    })();
    TypeScript.Location = Location;
    var Diagnostic = (function (_super) {
        __extends(Diagnostic, _super);
        function Diagnostic(fileName, lineMap, start, length, diagnosticKey, _arguments, additionalLocations) {
            _super.call(this, fileName, lineMap, start, length);
            this._diagnosticKey = diagnosticKey;
            this._arguments = (_arguments && _arguments.length > 0) ? _arguments : undefined;
            this._additionalLocations = (additionalLocations && additionalLocations.length > 0) ? additionalLocations : undefined;
        }
        Diagnostic.prototype.toJSON = function (key) {
            var result = {};
            result.start = this.start();
            result.length = this.length();
            result.diagnosticCode = this._diagnosticKey;
            var _arguments = this.arguments();
            if (_arguments && _arguments.length > 0) {
                result.arguments = _arguments;
            }
            return result;
        };
        Diagnostic.prototype.diagnosticKey = function () {
            return this._diagnosticKey;
        };
        Diagnostic.prototype.arguments = function () {
            return this._arguments;
        };
        Diagnostic.prototype.text = function () {
            return TypeScript.getLocalizedText(this._diagnosticKey, this._arguments);
        };
        Diagnostic.prototype.message = function () {
            return TypeScript.getDiagnosticMessage(this._diagnosticKey, this._arguments);
        };
        Diagnostic.prototype.additionalLocations = function () {
            return this._additionalLocations || [];
        };
        Diagnostic.equals = function (diagnostic1, diagnostic2) {
            return Location.equals(diagnostic1, diagnostic2) && diagnostic1._diagnosticKey === diagnostic2._diagnosticKey && TypeScript.ArrayUtilities.sequenceEquals(diagnostic1._arguments, diagnostic2._arguments, function (v1, v2) { return v1 === v2; });
        };
        Diagnostic.prototype.info = function () {
            return getDiagnosticInfoFromKey(this.diagnosticKey());
        };
        return Diagnostic;
    })(Location);
    TypeScript.Diagnostic = Diagnostic;
    function newLine() {
        return "\r\n";
    }
    TypeScript.newLine = newLine;
    function getLargestIndex(diagnostic) {
        var largest = -1;
        var regex = /\{(\d+)\}/g;
        var match;
        while (match = regex.exec(diagnostic)) {
            var val = parseInt(match[1]);
            if (!isNaN(val) && val > largest) {
                largest = val;
            }
        }
        return largest;
    }
    function getDiagnosticInfoFromKey(diagnosticKey) {
        var result = TypeScript.diagnosticInformationMap[diagnosticKey];
        TypeScript.Debug.assert(result);
        return result;
    }
    function getLocalizedText(diagnosticKey, args) {
        var diagnosticMessageText = diagnosticKey;
        TypeScript.Debug.assert(diagnosticMessageText !== undefined && diagnosticMessageText !== null);
        var actualCount = args ? args.length : 0;
        var expectedCount = 1 + getLargestIndex(diagnosticKey);
        if (expectedCount !== actualCount) {
            throw new Error(getLocalizedText(TypeScript.DiagnosticCode.Expected_0_arguments_to_message_got_1_instead, [expectedCount, actualCount]));
        }
        var valueCount = 1 + getLargestIndex(diagnosticMessageText);
        if (valueCount !== expectedCount) {
            throw new Error(getLocalizedText(TypeScript.DiagnosticCode.Expected_the_message_0_to_have_1_arguments_but_it_had_2, [diagnosticMessageText, expectedCount, valueCount]));
        }
        diagnosticMessageText = diagnosticMessageText.replace(/{(\d+)}/g, function (match, num) {
            return typeof args[num] !== 'undefined' ? args[num] : match;
        });
        diagnosticMessageText = diagnosticMessageText.replace(/{(NL)}/g, function (match) {
            return TypeScript.newLine();
        });
        return diagnosticMessageText;
    }
    TypeScript.getLocalizedText = getLocalizedText;
    function getDiagnosticMessage(diagnosticKey, args) {
        var diagnostic = getDiagnosticInfoFromKey(diagnosticKey);
        var diagnosticMessageText = getLocalizedText(diagnosticKey, args);
        var message;
        if (diagnostic.category === 1 /* Error */) {
            message = getLocalizedText(TypeScript.DiagnosticCode.error_TS_0_1, [diagnostic.code, diagnosticMessageText]);
        }
        else if (diagnostic.category === 0 /* Warning */) {
            message = getLocalizedText(TypeScript.DiagnosticCode.warning_TS_0_1, [diagnostic.code, diagnosticMessageText]);
        }
        else {
            message = diagnosticMessageText;
        }
        return message;
    }
    TypeScript.getDiagnosticMessage = getDiagnosticMessage;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var IntegerUtilities;
    (function (IntegerUtilities) {
        function integerDivide(numerator, denominator) {
            return (numerator / denominator) >> 0;
        }
        IntegerUtilities.integerDivide = integerDivide;
        function integerMultiplyLow32Bits(n1, n2) {
            var resultLow32 = (((n1 & 0xffff0000) * n2) >>> 0) + (((n1 & 0x0000ffff) * n2) >>> 0) >>> 0;
            return resultLow32;
        }
        IntegerUtilities.integerMultiplyLow32Bits = integerMultiplyLow32Bits;
        function isInteger(text) {
            return /^[0-9]+$/.test(text);
        }
        IntegerUtilities.isInteger = isInteger;
        function isHexInteger(text) {
            return /^0(x|X)[0-9a-fA-F]+$/.test(text);
        }
        IntegerUtilities.isHexInteger = isHexInteger;
    })(IntegerUtilities = TypeScript.IntegerUtilities || (TypeScript.IntegerUtilities = {}));
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var LineMap = (function () {
        function LineMap(_computeLineStarts, length) {
            this._computeLineStarts = _computeLineStarts;
            this.length = length;
            this._lineStarts = undefined;
        }
        LineMap.prototype.toJSON = function (key) {
            return { lineStarts: this.lineStarts(), length: this.length };
        };
        LineMap.prototype.equals = function (other) {
            return this.length === other.length && TypeScript.ArrayUtilities.sequenceEquals(this.lineStarts(), other.lineStarts(), function (v1, v2) { return v1 === v2; });
        };
        LineMap.prototype.lineStarts = function () {
            if (!this._lineStarts) {
                this._lineStarts = this._computeLineStarts();
            }
            return this._lineStarts;
        };
        LineMap.prototype.lineCount = function () {
            return this.lineStarts().length;
        };
        LineMap.prototype.getPosition = function (line, character) {
            return this.lineStarts()[line] + character;
        };
        LineMap.prototype.getLineNumberFromPosition = function (position) {
            if (position < 0 || position > this.length) {
                throw TypeScript.Errors.argumentOutOfRange("position");
            }
            if (position === this.length) {
                return this.lineCount() - 1;
            }
            var lineNumber = TypeScript.ArrayUtilities.binarySearch(this.lineStarts(), position);
            if (lineNumber < 0) {
                lineNumber = (~lineNumber) - 1;
            }
            return lineNumber;
        };
        LineMap.prototype.getLineStartPosition = function (lineNumber) {
            return this.lineStarts()[lineNumber];
        };
        LineMap.prototype.fillLineAndCharacterFromPosition = function (position, lineAndCharacter) {
            if (position < 0 || position > this.length) {
                throw TypeScript.Errors.argumentOutOfRange("position");
            }
            var lineNumber = this.getLineNumberFromPosition(position);
            lineAndCharacter.line = lineNumber;
            lineAndCharacter.character = position - this.lineStarts()[lineNumber];
        };
        LineMap.prototype.getLineAndCharacterFromPosition = function (position) {
            if (position < 0 || position > this.length) {
                throw TypeScript.Errors.argumentOutOfRange("position");
            }
            var lineNumber = this.getLineNumberFromPosition(position);
            return new TypeScript.LineAndCharacter(lineNumber, position - this.lineStarts()[lineNumber]);
        };
        LineMap.empty = new LineMap(function () { return [0]; }, 0);
        return LineMap;
    })();
    TypeScript.LineMap = LineMap;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var LineAndCharacter = (function () {
        function LineAndCharacter(line, character) {
            this._line = 0;
            this._character = 0;
            if (line < 0) {
                throw TypeScript.Errors.argumentOutOfRange("line");
            }
            if (character < 0) {
                throw TypeScript.Errors.argumentOutOfRange("character");
            }
            this._line = line;
            this._character = character;
        }
        LineAndCharacter.prototype.line = function () {
            return this._line;
        };
        LineAndCharacter.prototype.character = function () {
            return this._character;
        };
        return LineAndCharacter;
    })();
    TypeScript.LineAndCharacter = LineAndCharacter;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var StringUtilities = (function () {
        function StringUtilities() {
        }
        StringUtilities.isString = function (value) {
            return Object.prototype.toString.apply(value, []) === '[object String]';
        };
        StringUtilities.endsWith = function (string, value) {
            return string.substring(string.length - value.length, string.length) === value;
        };
        StringUtilities.startsWith = function (string, value) {
            return string.substr(0, value.length) === value;
        };
        StringUtilities.repeat = function (value, count) {
            return Array(count + 1).join(value);
        };
        return StringUtilities;
    })();
    TypeScript.StringUtilities = StringUtilities;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (CharacterCodes) {
        CharacterCodes[CharacterCodes["nullCharacter"] = 0] = "nullCharacter";
        CharacterCodes[CharacterCodes["maxAsciiCharacter"] = 127] = "maxAsciiCharacter";
        CharacterCodes[CharacterCodes["lineFeed"] = 10] = "lineFeed";
        CharacterCodes[CharacterCodes["carriageReturn"] = 13] = "carriageReturn";
        CharacterCodes[CharacterCodes["lineSeparator"] = 8232] = "lineSeparator";
        CharacterCodes[CharacterCodes["paragraphSeparator"] = 8233] = "paragraphSeparator";
        CharacterCodes[CharacterCodes["nextLine"] = 133] = "nextLine";
        CharacterCodes[CharacterCodes["space"] = 32] = "space";
        CharacterCodes[CharacterCodes["nonBreakingSpace"] = 160] = "nonBreakingSpace";
        CharacterCodes[CharacterCodes["enQuad"] = 8192] = "enQuad";
        CharacterCodes[CharacterCodes["emQuad"] = 8193] = "emQuad";
        CharacterCodes[CharacterCodes["enSpace"] = 8194] = "enSpace";
        CharacterCodes[CharacterCodes["emSpace"] = 8195] = "emSpace";
        CharacterCodes[CharacterCodes["threePerEmSpace"] = 8196] = "threePerEmSpace";
        CharacterCodes[CharacterCodes["fourPerEmSpace"] = 8197] = "fourPerEmSpace";
        CharacterCodes[CharacterCodes["sixPerEmSpace"] = 8198] = "sixPerEmSpace";
        CharacterCodes[CharacterCodes["figureSpace"] = 8199] = "figureSpace";
        CharacterCodes[CharacterCodes["punctuationSpace"] = 8200] = "punctuationSpace";
        CharacterCodes[CharacterCodes["thinSpace"] = 8201] = "thinSpace";
        CharacterCodes[CharacterCodes["hairSpace"] = 8202] = "hairSpace";
        CharacterCodes[CharacterCodes["zeroWidthSpace"] = 8203] = "zeroWidthSpace";
        CharacterCodes[CharacterCodes["narrowNoBreakSpace"] = 8239] = "narrowNoBreakSpace";
        CharacterCodes[CharacterCodes["ideographicSpace"] = 12288] = "ideographicSpace";
        CharacterCodes[CharacterCodes["_"] = 95] = "_";
        CharacterCodes[CharacterCodes["$"] = 36] = "$";
        CharacterCodes[CharacterCodes["_0"] = 48] = "_0";
        CharacterCodes[CharacterCodes["_1"] = 49] = "_1";
        CharacterCodes[CharacterCodes["_2"] = 50] = "_2";
        CharacterCodes[CharacterCodes["_3"] = 51] = "_3";
        CharacterCodes[CharacterCodes["_4"] = 52] = "_4";
        CharacterCodes[CharacterCodes["_5"] = 53] = "_5";
        CharacterCodes[CharacterCodes["_6"] = 54] = "_6";
        CharacterCodes[CharacterCodes["_7"] = 55] = "_7";
        CharacterCodes[CharacterCodes["_8"] = 56] = "_8";
        CharacterCodes[CharacterCodes["_9"] = 57] = "_9";
        CharacterCodes[CharacterCodes["a"] = 97] = "a";
        CharacterCodes[CharacterCodes["b"] = 98] = "b";
        CharacterCodes[CharacterCodes["c"] = 99] = "c";
        CharacterCodes[CharacterCodes["d"] = 100] = "d";
        CharacterCodes[CharacterCodes["e"] = 101] = "e";
        CharacterCodes[CharacterCodes["f"] = 102] = "f";
        CharacterCodes[CharacterCodes["g"] = 103] = "g";
        CharacterCodes[CharacterCodes["h"] = 104] = "h";
        CharacterCodes[CharacterCodes["i"] = 105] = "i";
        CharacterCodes[CharacterCodes["j"] = 106] = "j";
        CharacterCodes[CharacterCodes["k"] = 107] = "k";
        CharacterCodes[CharacterCodes["l"] = 108] = "l";
        CharacterCodes[CharacterCodes["m"] = 109] = "m";
        CharacterCodes[CharacterCodes["n"] = 110] = "n";
        CharacterCodes[CharacterCodes["o"] = 111] = "o";
        CharacterCodes[CharacterCodes["p"] = 112] = "p";
        CharacterCodes[CharacterCodes["q"] = 113] = "q";
        CharacterCodes[CharacterCodes["r"] = 114] = "r";
        CharacterCodes[CharacterCodes["s"] = 115] = "s";
        CharacterCodes[CharacterCodes["t"] = 116] = "t";
        CharacterCodes[CharacterCodes["u"] = 117] = "u";
        CharacterCodes[CharacterCodes["v"] = 118] = "v";
        CharacterCodes[CharacterCodes["w"] = 119] = "w";
        CharacterCodes[CharacterCodes["x"] = 120] = "x";
        CharacterCodes[CharacterCodes["y"] = 121] = "y";
        CharacterCodes[CharacterCodes["z"] = 122] = "z";
        CharacterCodes[CharacterCodes["A"] = 65] = "A";
        CharacterCodes[CharacterCodes["B"] = 66] = "B";
        CharacterCodes[CharacterCodes["C"] = 67] = "C";
        CharacterCodes[CharacterCodes["D"] = 68] = "D";
        CharacterCodes[CharacterCodes["E"] = 69] = "E";
        CharacterCodes[CharacterCodes["F"] = 70] = "F";
        CharacterCodes[CharacterCodes["G"] = 71] = "G";
        CharacterCodes[CharacterCodes["H"] = 72] = "H";
        CharacterCodes[CharacterCodes["I"] = 73] = "I";
        CharacterCodes[CharacterCodes["J"] = 74] = "J";
        CharacterCodes[CharacterCodes["K"] = 75] = "K";
        CharacterCodes[CharacterCodes["L"] = 76] = "L";
        CharacterCodes[CharacterCodes["M"] = 77] = "M";
        CharacterCodes[CharacterCodes["N"] = 78] = "N";
        CharacterCodes[CharacterCodes["O"] = 79] = "O";
        CharacterCodes[CharacterCodes["P"] = 80] = "P";
        CharacterCodes[CharacterCodes["Q"] = 81] = "Q";
        CharacterCodes[CharacterCodes["R"] = 82] = "R";
        CharacterCodes[CharacterCodes["S"] = 83] = "S";
        CharacterCodes[CharacterCodes["T"] = 84] = "T";
        CharacterCodes[CharacterCodes["U"] = 85] = "U";
        CharacterCodes[CharacterCodes["V"] = 86] = "V";
        CharacterCodes[CharacterCodes["W"] = 87] = "W";
        CharacterCodes[CharacterCodes["X"] = 88] = "X";
        CharacterCodes[CharacterCodes["Y"] = 89] = "Y";
        CharacterCodes[CharacterCodes["Z"] = 90] = "Z";
        CharacterCodes[CharacterCodes["ampersand"] = 38] = "ampersand";
        CharacterCodes[CharacterCodes["asterisk"] = 42] = "asterisk";
        CharacterCodes[CharacterCodes["at"] = 64] = "at";
        CharacterCodes[CharacterCodes["backslash"] = 92] = "backslash";
        CharacterCodes[CharacterCodes["backtick"] = 96] = "backtick";
        CharacterCodes[CharacterCodes["bar"] = 124] = "bar";
        CharacterCodes[CharacterCodes["caret"] = 94] = "caret";
        CharacterCodes[CharacterCodes["closeBrace"] = 125] = "closeBrace";
        CharacterCodes[CharacterCodes["closeBracket"] = 93] = "closeBracket";
        CharacterCodes[CharacterCodes["closeParen"] = 41] = "closeParen";
        CharacterCodes[CharacterCodes["colon"] = 58] = "colon";
        CharacterCodes[CharacterCodes["comma"] = 44] = "comma";
        CharacterCodes[CharacterCodes["dot"] = 46] = "dot";
        CharacterCodes[CharacterCodes["doubleQuote"] = 34] = "doubleQuote";
        CharacterCodes[CharacterCodes["equals"] = 61] = "equals";
        CharacterCodes[CharacterCodes["exclamation"] = 33] = "exclamation";
        CharacterCodes[CharacterCodes["greaterThan"] = 62] = "greaterThan";
        CharacterCodes[CharacterCodes["lessThan"] = 60] = "lessThan";
        CharacterCodes[CharacterCodes["minus"] = 45] = "minus";
        CharacterCodes[CharacterCodes["openBrace"] = 123] = "openBrace";
        CharacterCodes[CharacterCodes["openBracket"] = 91] = "openBracket";
        CharacterCodes[CharacterCodes["openParen"] = 40] = "openParen";
        CharacterCodes[CharacterCodes["percent"] = 37] = "percent";
        CharacterCodes[CharacterCodes["plus"] = 43] = "plus";
        CharacterCodes[CharacterCodes["question"] = 63] = "question";
        CharacterCodes[CharacterCodes["semicolon"] = 59] = "semicolon";
        CharacterCodes[CharacterCodes["singleQuote"] = 39] = "singleQuote";
        CharacterCodes[CharacterCodes["slash"] = 47] = "slash";
        CharacterCodes[CharacterCodes["tilde"] = 126] = "tilde";
        CharacterCodes[CharacterCodes["backspace"] = 8] = "backspace";
        CharacterCodes[CharacterCodes["formFeed"] = 12] = "formFeed";
        CharacterCodes[CharacterCodes["byteOrderMark"] = 65279] = "byteOrderMark";
        CharacterCodes[CharacterCodes["tab"] = 9] = "tab";
        CharacterCodes[CharacterCodes["verticalTab"] = 11] = "verticalTab";
    })(TypeScript.CharacterCodes || (TypeScript.CharacterCodes = {}));
    var CharacterCodes = TypeScript.CharacterCodes;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var ScriptSnapshot;
    (function (ScriptSnapshot) {
        var StringScriptSnapshot = (function () {
            function StringScriptSnapshot(text) {
                this.text = text;
                this._lineStartPositions = undefined;
            }
            StringScriptSnapshot.prototype.getText = function (start, end) {
                return this.text.substring(start, end);
            };
            StringScriptSnapshot.prototype.getLength = function () {
                return this.text.length;
            };
            StringScriptSnapshot.prototype.getLineStartPositions = function () {
                if (!this._lineStartPositions) {
                    this._lineStartPositions = TypeScript.TextUtilities.parseLineStarts(this.text);
                }
                return this._lineStartPositions;
            };
            StringScriptSnapshot.prototype.getChangeRange = function (oldSnapshot) {
                throw TypeScript.Errors.notYetImplemented();
            };
            return StringScriptSnapshot;
        })();
        function fromString(text) {
            return new StringScriptSnapshot(text);
        }
        ScriptSnapshot.fromString = fromString;
    })(ScriptSnapshot = TypeScript.ScriptSnapshot || (TypeScript.ScriptSnapshot = {}));
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var LineMap1;
    (function (LineMap1) {
        function fromSimpleText(text) {
            return new TypeScript.LineMap(function () { return TypeScript.TextUtilities.parseLineStarts({ charCodeAt: function (index) { return text.charCodeAt(index); }, length: text.length() }); }, text.length());
        }
        LineMap1.fromSimpleText = fromSimpleText;
        function fromScriptSnapshot(scriptSnapshot) {
            return new TypeScript.LineMap(function () { return scriptSnapshot.getLineStartPositions(); }, scriptSnapshot.getLength());
        }
        LineMap1.fromScriptSnapshot = fromScriptSnapshot;
        function fromString(text) {
            return new TypeScript.LineMap(function () { return TypeScript.TextUtilities.parseLineStarts(text); }, text.length);
        }
        LineMap1.fromString = fromString;
    })(LineMap1 = TypeScript.LineMap1 || (TypeScript.LineMap1 = {}));
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var SimpleText;
    (function (SimpleText) {
        var SimpleStringText = (function () {
            function SimpleStringText(value) {
                this.value = value;
                this._lineMap = undefined;
            }
            SimpleStringText.prototype.length = function () {
                return this.value.length;
            };
            SimpleStringText.prototype.substr = function (start, length) {
                var val = this.value;
                return start === 0 && length == val.length ? val : val.substr(start, length);
            };
            SimpleStringText.prototype.charCodeAt = function (index) {
                return this.value.charCodeAt(index);
            };
            SimpleStringText.prototype.lineMap = function () {
                if (!this._lineMap) {
                    this._lineMap = TypeScript.LineMap1.fromString(this.value);
                }
                return this._lineMap;
            };
            return SimpleStringText;
        })();
        var SimpleScriptSnapshotText = (function () {
            function SimpleScriptSnapshotText(scriptSnapshot) {
                this.scriptSnapshot = scriptSnapshot;
                this._lineMap = undefined;
            }
            SimpleScriptSnapshotText.prototype.charCodeAt = function (index) {
                return this.scriptSnapshot.getText(index, index + 1).charCodeAt(0);
            };
            SimpleScriptSnapshotText.prototype.length = function () {
                return this.scriptSnapshot.getLength();
            };
            SimpleScriptSnapshotText.prototype.substr = function (start, length) {
                return this.scriptSnapshot.getText(start, start + length);
            };
            SimpleScriptSnapshotText.prototype.lineMap = function () {
                var _this = this;
                if (!this._lineMap) {
                    this._lineMap = new TypeScript.LineMap(function () { return _this.scriptSnapshot.getLineStartPositions(); }, this.length());
                }
                return this._lineMap;
            };
            return SimpleScriptSnapshotText;
        })();
        function fromString(value) {
            return new SimpleStringText(value);
        }
        SimpleText.fromString = fromString;
        function fromScriptSnapshot(scriptSnapshot) {
            return new SimpleScriptSnapshotText(scriptSnapshot);
        }
        SimpleText.fromScriptSnapshot = fromScriptSnapshot;
    })(SimpleText = TypeScript.SimpleText || (TypeScript.SimpleText = {}));
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var TextUtilities;
    (function (TextUtilities) {
        function parseLineStarts(text) {
            var length = text.length;
            if (0 === length) {
                var result = new Array();
                result.push(0);
                return result;
            }
            var position = 0;
            var index = 0;
            var arrayBuilder = new Array();
            var lineNumber = 0;
            while (index < length) {
                var c = text.charCodeAt(index);
                var lineBreakLength;
                if (c > 13 /* carriageReturn */ && c <= 127) {
                    index++;
                    continue;
                }
                else if (c === 13 /* carriageReturn */ && index + 1 < length && text.charCodeAt(index + 1) === 10 /* lineFeed */) {
                    lineBreakLength = 2;
                }
                else if (c === 10 /* lineFeed */) {
                    lineBreakLength = 1;
                }
                else {
                    lineBreakLength = TextUtilities.getLengthOfLineBreak(text, index);
                }
                if (0 === lineBreakLength) {
                    index++;
                }
                else {
                    arrayBuilder.push(position);
                    index += lineBreakLength;
                    position = index;
                    lineNumber++;
                }
            }
            arrayBuilder.push(position);
            return arrayBuilder;
        }
        TextUtilities.parseLineStarts = parseLineStarts;
        function getLengthOfLineBreakSlow(text, index, c) {
            if (c === 13 /* carriageReturn */) {
                var next = index + 1;
                return (next < text.length) && 10 /* lineFeed */ === text.charCodeAt(next) ? 2 : 1;
            }
            else if (isAnyLineBreakCharacter(c)) {
                return 1;
            }
            else {
                return 0;
            }
        }
        TextUtilities.getLengthOfLineBreakSlow = getLengthOfLineBreakSlow;
        function getLengthOfLineBreak(text, index) {
            var c = text.charCodeAt(index);
            if (c > 13 /* carriageReturn */ && c <= 127) {
                return 0;
            }
            return getLengthOfLineBreakSlow(text, index, c);
        }
        TextUtilities.getLengthOfLineBreak = getLengthOfLineBreak;
        function isAnyLineBreakCharacter(c) {
            return c === 10 /* lineFeed */ || c === 13 /* carriageReturn */ || c === 133 /* nextLine */ || c === 8232 /* lineSeparator */ || c === 8233 /* paragraphSeparator */;
        }
        TextUtilities.isAnyLineBreakCharacter = isAnyLineBreakCharacter;
    })(TextUtilities = TypeScript.TextUtilities || (TypeScript.TextUtilities = {}));
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var TextSpan = (function () {
        function TextSpan(start, length) {
            if (start < 0) {
                TypeScript.Errors.argument("start");
            }
            if (length < 0) {
                TypeScript.Errors.argument("length");
            }
            this._start = start;
            this._length = length;
        }
        TextSpan.prototype.toJSON = function (key) {
            return { start: this._start, length: this._length };
        };
        TextSpan.prototype.start = function () {
            return this._start;
        };
        TextSpan.prototype.length = function () {
            return this._length;
        };
        TextSpan.prototype.end = function () {
            return this._start + this._length;
        };
        TextSpan.prototype.isEmpty = function () {
            return this._length === 0;
        };
        TextSpan.prototype.containsPosition = function (position) {
            return position >= this._start && position < this.end();
        };
        TextSpan.prototype.containsTextSpan = function (span) {
            return span._start >= this._start && span.end() <= this.end();
        };
        TextSpan.prototype.overlapsWith = function (span) {
            var overlapStart = Math.max(this._start, span._start);
            var overlapEnd = Math.min(this.end(), span.end());
            return overlapStart < overlapEnd;
        };
        TextSpan.prototype.overlap = function (span) {
            var overlapStart = Math.max(this._start, span._start);
            var overlapEnd = Math.min(this.end(), span.end());
            if (overlapStart < overlapEnd) {
                return TextSpan.fromBounds(overlapStart, overlapEnd);
            }
            return undefined;
        };
        TextSpan.prototype.intersectsWithTextSpan = function (span) {
            return span._start <= this.end() && span.end() >= this._start;
        };
        TextSpan.prototype.intersectsWith = function (start, length) {
            var end = start + length;
            return start <= this.end() && end >= this._start;
        };
        TextSpan.prototype.intersectsWithPosition = function (position) {
            return position <= this.end() && position >= this._start;
        };
        TextSpan.prototype.intersection = function (span) {
            var intersectStart = Math.max(this._start, span._start);
            var intersectEnd = Math.min(this.end(), span.end());
            if (intersectStart <= intersectEnd) {
                return TextSpan.fromBounds(intersectStart, intersectEnd);
            }
            return undefined;
        };
        TextSpan.fromBounds = function (start, end) {
            TypeScript.Debug.assert(start >= 0);
            TypeScript.Debug.assert(end - start >= 0);
            return new TextSpan(start, end - start);
        };
        return TextSpan;
    })();
    TypeScript.TextSpan = TextSpan;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var TextChangeRange = (function () {
        function TextChangeRange(span, newLength) {
            if (newLength < 0) {
                throw TypeScript.Errors.argumentOutOfRange("newLength");
            }
            this._span = span;
            this._newLength = newLength;
        }
        TextChangeRange.prototype.span = function () {
            return this._span;
        };
        TextChangeRange.prototype.newLength = function () {
            return this._newLength;
        };
        TextChangeRange.prototype.newSpan = function () {
            return new TypeScript.TextSpan(this.span().start(), this.newLength());
        };
        TextChangeRange.prototype.isUnchanged = function () {
            return this.span().isEmpty() && this.newLength() === 0;
        };
        TextChangeRange.collapseChangesAcrossMultipleVersions = function (changes) {
            if (changes.length === 0) {
                return TextChangeRange.unchanged;
            }
            if (changes.length === 1) {
                return changes[0];
            }
            var change0 = changes[0];
            var oldStartN = change0.span().start();
            var oldEndN = change0.span().end();
            var newEndN = oldStartN + change0.newLength();
            for (var i = 1; i < changes.length; i++) {
                var nextChange = changes[i];
                var oldStart1 = oldStartN;
                var oldEnd1 = oldEndN;
                var newEnd1 = newEndN;
                var oldStart2 = nextChange.span().start();
                var oldEnd2 = nextChange.span().end();
                var newEnd2 = oldStart2 + nextChange.newLength();
                oldStartN = Math.min(oldStart1, oldStart2);
                oldEndN = Math.max(oldEnd1, oldEnd1 + (oldEnd2 - newEnd1));
                newEndN = Math.max(newEnd2, newEnd2 + (newEnd1 - oldEnd2));
            }
            return new TextChangeRange(TypeScript.TextSpan.fromBounds(oldStartN, oldEndN), newEndN - oldStartN);
        };
        TextChangeRange.unchanged = new TextChangeRange(new TypeScript.TextSpan(0, 0), 0);
        return TextChangeRange;
    })();
    TypeScript.TextChangeRange = TextChangeRange;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var CharacterInfo;
    (function (CharacterInfo) {
        function isDecimalDigit(c) {
            return c >= 48 /* _0 */ && c <= 57 /* _9 */;
        }
        CharacterInfo.isDecimalDigit = isDecimalDigit;
        function isOctalDigit(c) {
            return c >= 48 /* _0 */ && c <= 55 /* _7 */;
        }
        CharacterInfo.isOctalDigit = isOctalDigit;
        function isHexDigit(c) {
            return CharacterInfo.isDecimalDigit(c) || (c >= 65 /* A */ && c <= 70 /* F */) || (c >= 97 /* a */ && c <= 102 /* f */);
        }
        CharacterInfo.isHexDigit = isHexDigit;
        function hexValue(c) {
            return CharacterInfo.isDecimalDigit(c) ? (c - 48 /* _0 */) : (c >= 65 /* A */ && c <= 70 /* F */) ? c - 65 /* A */ + 10 : c - 97 /* a */ + 10;
        }
        CharacterInfo.hexValue = hexValue;
        function isWhitespace(ch) {
            switch (ch) {
                case 32 /* space */:
                case 160 /* nonBreakingSpace */:
                case 8192 /* enQuad */:
                case 8193 /* emQuad */:
                case 8194 /* enSpace */:
                case 8195 /* emSpace */:
                case 8196 /* threePerEmSpace */:
                case 8197 /* fourPerEmSpace */:
                case 8198 /* sixPerEmSpace */:
                case 8199 /* figureSpace */:
                case 8200 /* punctuationSpace */:
                case 8201 /* thinSpace */:
                case 8202 /* hairSpace */:
                case 8203 /* zeroWidthSpace */:
                case 8239 /* narrowNoBreakSpace */:
                case 12288 /* ideographicSpace */:
                case 9 /* tab */:
                case 11 /* verticalTab */:
                case 12 /* formFeed */:
                case 65279 /* byteOrderMark */:
                    return true;
            }
            return false;
        }
        CharacterInfo.isWhitespace = isWhitespace;
        function isLineTerminator(ch) {
            switch (ch) {
                case 13 /* carriageReturn */:
                case 10 /* lineFeed */:
                case 8233 /* paragraphSeparator */:
                case 8232 /* lineSeparator */:
                    return true;
            }
            return false;
        }
        CharacterInfo.isLineTerminator = isLineTerminator;
    })(CharacterInfo = TypeScript.CharacterInfo || (TypeScript.CharacterInfo = {}));
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (ParserContextFlags) {
        ParserContextFlags[ParserContextFlags["StrictMode"] = 1] = "StrictMode";
        ParserContextFlags[ParserContextFlags["DisallowIn"] = 2] = "DisallowIn";
        ParserContextFlags[ParserContextFlags["Yield"] = 4] = "Yield";
        ParserContextFlags[ParserContextFlags["GeneratorParameter"] = 8] = "GeneratorParameter";
        ParserContextFlags[ParserContextFlags["Async"] = 16] = "Async";
        ParserContextFlags[ParserContextFlags["Mask"] = 31] = "Mask";
    })(TypeScript.ParserContextFlags || (TypeScript.ParserContextFlags = {}));
    var ParserContextFlags = TypeScript.ParserContextFlags;
    (function (SyntaxNodeConstants) {
        SyntaxNodeConstants[SyntaxNodeConstants["None"] = 0] = "None";
        SyntaxNodeConstants[SyntaxNodeConstants["DataComputed"] = 1 << 5] = "DataComputed";
        SyntaxNodeConstants[SyntaxNodeConstants["IncrementallyUnusableMask"] = 1 << 6] = "IncrementallyUnusableMask";
        SyntaxNodeConstants[SyntaxNodeConstants["FullWidthShift"] = 1 << 7] = "FullWidthShift";
    })(TypeScript.SyntaxNodeConstants || (TypeScript.SyntaxNodeConstants = {}));
    var SyntaxNodeConstants = TypeScript.SyntaxNodeConstants;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var FormattingOptions = (function () {
        function FormattingOptions(useTabs, spacesPerTab, indentSpaces, newLineCharacter) {
            this.useTabs = useTabs;
            this.spacesPerTab = spacesPerTab;
            this.indentSpaces = indentSpaces;
            this.newLineCharacter = newLineCharacter;
        }
        FormattingOptions.defaultOptions = new FormattingOptions(false, 4, 4, "\r\n");
        return FormattingOptions;
    })();
    TypeScript.FormattingOptions = FormattingOptions;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    (function (SyntaxKind) {
        SyntaxKind[SyntaxKind["None"] = 0] = "None";
        SyntaxKind[SyntaxKind["List"] = 1] = "List";
        SyntaxKind[SyntaxKind["WhitespaceTrivia"] = 2] = "WhitespaceTrivia";
        SyntaxKind[SyntaxKind["NewLineTrivia"] = 3] = "NewLineTrivia";
        SyntaxKind[SyntaxKind["MultiLineCommentTrivia"] = 4] = "MultiLineCommentTrivia";
        SyntaxKind[SyntaxKind["SingleLineCommentTrivia"] = 5] = "SingleLineCommentTrivia";
        SyntaxKind[SyntaxKind["SkippedTokenTrivia"] = 6] = "SkippedTokenTrivia";
        SyntaxKind[SyntaxKind["ErrorToken"] = 7] = "ErrorToken";
        SyntaxKind[SyntaxKind["EndOfFileToken"] = 8] = "EndOfFileToken";
        SyntaxKind[SyntaxKind["IdentifierName"] = 9] = "IdentifierName";
        SyntaxKind[SyntaxKind["RegularExpressionLiteral"] = 10] = "RegularExpressionLiteral";
        SyntaxKind[SyntaxKind["NumericLiteral"] = 11] = "NumericLiteral";
        SyntaxKind[SyntaxKind["StringLiteral"] = 12] = "StringLiteral";
        SyntaxKind[SyntaxKind["NoSubstitutionTemplateToken"] = 13] = "NoSubstitutionTemplateToken";
        SyntaxKind[SyntaxKind["TemplateStartToken"] = 14] = "TemplateStartToken";
        SyntaxKind[SyntaxKind["TemplateMiddleToken"] = 15] = "TemplateMiddleToken";
        SyntaxKind[SyntaxKind["TemplateEndToken"] = 16] = "TemplateEndToken";
        SyntaxKind[SyntaxKind["BreakKeyword"] = 17] = "BreakKeyword";
        SyntaxKind[SyntaxKind["CaseKeyword"] = 18] = "CaseKeyword";
        SyntaxKind[SyntaxKind["CatchKeyword"] = 19] = "CatchKeyword";
        SyntaxKind[SyntaxKind["ContinueKeyword"] = 20] = "ContinueKeyword";
        SyntaxKind[SyntaxKind["DebuggerKeyword"] = 21] = "DebuggerKeyword";
        SyntaxKind[SyntaxKind["DefaultKeyword"] = 22] = "DefaultKeyword";
        SyntaxKind[SyntaxKind["DeleteKeyword"] = 23] = "DeleteKeyword";
        SyntaxKind[SyntaxKind["DoKeyword"] = 24] = "DoKeyword";
        SyntaxKind[SyntaxKind["ElseKeyword"] = 25] = "ElseKeyword";
        SyntaxKind[SyntaxKind["FalseKeyword"] = 26] = "FalseKeyword";
        SyntaxKind[SyntaxKind["FinallyKeyword"] = 27] = "FinallyKeyword";
        SyntaxKind[SyntaxKind["ForKeyword"] = 28] = "ForKeyword";
        SyntaxKind[SyntaxKind["FunctionKeyword"] = 29] = "FunctionKeyword";
        SyntaxKind[SyntaxKind["IfKeyword"] = 30] = "IfKeyword";
        SyntaxKind[SyntaxKind["InKeyword"] = 31] = "InKeyword";
        SyntaxKind[SyntaxKind["InstanceOfKeyword"] = 32] = "InstanceOfKeyword";
        SyntaxKind[SyntaxKind["NewKeyword"] = 33] = "NewKeyword";
        SyntaxKind[SyntaxKind["NullKeyword"] = 34] = "NullKeyword";
        SyntaxKind[SyntaxKind["ReturnKeyword"] = 35] = "ReturnKeyword";
        SyntaxKind[SyntaxKind["SwitchKeyword"] = 36] = "SwitchKeyword";
        SyntaxKind[SyntaxKind["ThisKeyword"] = 37] = "ThisKeyword";
        SyntaxKind[SyntaxKind["ThrowKeyword"] = 38] = "ThrowKeyword";
        SyntaxKind[SyntaxKind["TrueKeyword"] = 39] = "TrueKeyword";
        SyntaxKind[SyntaxKind["TryKeyword"] = 40] = "TryKeyword";
        SyntaxKind[SyntaxKind["TypeOfKeyword"] = 41] = "TypeOfKeyword";
        SyntaxKind[SyntaxKind["VarKeyword"] = 42] = "VarKeyword";
        SyntaxKind[SyntaxKind["VoidKeyword"] = 43] = "VoidKeyword";
        SyntaxKind[SyntaxKind["WhileKeyword"] = 44] = "WhileKeyword";
        SyntaxKind[SyntaxKind["WithKeyword"] = 45] = "WithKeyword";
        SyntaxKind[SyntaxKind["ClassKeyword"] = 46] = "ClassKeyword";
        SyntaxKind[SyntaxKind["ConstKeyword"] = 47] = "ConstKeyword";
        SyntaxKind[SyntaxKind["EnumKeyword"] = 48] = "EnumKeyword";
        SyntaxKind[SyntaxKind["ExportKeyword"] = 49] = "ExportKeyword";
        SyntaxKind[SyntaxKind["ExtendsKeyword"] = 50] = "ExtendsKeyword";
        SyntaxKind[SyntaxKind["ImportKeyword"] = 51] = "ImportKeyword";
        SyntaxKind[SyntaxKind["SuperKeyword"] = 52] = "SuperKeyword";
        SyntaxKind[SyntaxKind["ImplementsKeyword"] = 53] = "ImplementsKeyword";
        SyntaxKind[SyntaxKind["InterfaceKeyword"] = 54] = "InterfaceKeyword";
        SyntaxKind[SyntaxKind["LetKeyword"] = 55] = "LetKeyword";
        SyntaxKind[SyntaxKind["PackageKeyword"] = 56] = "PackageKeyword";
        SyntaxKind[SyntaxKind["PrivateKeyword"] = 57] = "PrivateKeyword";
        SyntaxKind[SyntaxKind["ProtectedKeyword"] = 58] = "ProtectedKeyword";
        SyntaxKind[SyntaxKind["PublicKeyword"] = 59] = "PublicKeyword";
        SyntaxKind[SyntaxKind["StaticKeyword"] = 60] = "StaticKeyword";
        SyntaxKind[SyntaxKind["YieldKeyword"] = 61] = "YieldKeyword";
        SyntaxKind[SyntaxKind["AnyKeyword"] = 62] = "AnyKeyword";
        SyntaxKind[SyntaxKind["AsyncKeyword"] = 63] = "AsyncKeyword";
        SyntaxKind[SyntaxKind["AwaitKeyword"] = 64] = "AwaitKeyword";
        SyntaxKind[SyntaxKind["BooleanKeyword"] = 65] = "BooleanKeyword";
        SyntaxKind[SyntaxKind["ConstructorKeyword"] = 66] = "ConstructorKeyword";
        SyntaxKind[SyntaxKind["DeclareKeyword"] = 67] = "DeclareKeyword";
        SyntaxKind[SyntaxKind["GetKeyword"] = 68] = "GetKeyword";
        SyntaxKind[SyntaxKind["ModuleKeyword"] = 69] = "ModuleKeyword";
        SyntaxKind[SyntaxKind["RequireKeyword"] = 70] = "RequireKeyword";
        SyntaxKind[SyntaxKind["NumberKeyword"] = 71] = "NumberKeyword";
        SyntaxKind[SyntaxKind["SetKeyword"] = 72] = "SetKeyword";
        SyntaxKind[SyntaxKind["TypeKeyword"] = 73] = "TypeKeyword";
        SyntaxKind[SyntaxKind["StringKeyword"] = 74] = "StringKeyword";
        SyntaxKind[SyntaxKind["OpenBraceToken"] = 75] = "OpenBraceToken";
        SyntaxKind[SyntaxKind["CloseBraceToken"] = 76] = "CloseBraceToken";
        SyntaxKind[SyntaxKind["OpenParenToken"] = 77] = "OpenParenToken";
        SyntaxKind[SyntaxKind["CloseParenToken"] = 78] = "CloseParenToken";
        SyntaxKind[SyntaxKind["OpenBracketToken"] = 79] = "OpenBracketToken";
        SyntaxKind[SyntaxKind["CloseBracketToken"] = 80] = "CloseBracketToken";
        SyntaxKind[SyntaxKind["DotToken"] = 81] = "DotToken";
        SyntaxKind[SyntaxKind["DotDotDotToken"] = 82] = "DotDotDotToken";
        SyntaxKind[SyntaxKind["SemicolonToken"] = 83] = "SemicolonToken";
        SyntaxKind[SyntaxKind["CommaToken"] = 84] = "CommaToken";
        SyntaxKind[SyntaxKind["LessThanToken"] = 85] = "LessThanToken";
        SyntaxKind[SyntaxKind["GreaterThanToken"] = 86] = "GreaterThanToken";
        SyntaxKind[SyntaxKind["LessThanEqualsToken"] = 87] = "LessThanEqualsToken";
        SyntaxKind[SyntaxKind["GreaterThanEqualsToken"] = 88] = "GreaterThanEqualsToken";
        SyntaxKind[SyntaxKind["EqualsEqualsToken"] = 89] = "EqualsEqualsToken";
        SyntaxKind[SyntaxKind["EqualsGreaterThanToken"] = 90] = "EqualsGreaterThanToken";
        SyntaxKind[SyntaxKind["ExclamationEqualsToken"] = 91] = "ExclamationEqualsToken";
        SyntaxKind[SyntaxKind["EqualsEqualsEqualsToken"] = 92] = "EqualsEqualsEqualsToken";
        SyntaxKind[SyntaxKind["ExclamationEqualsEqualsToken"] = 93] = "ExclamationEqualsEqualsToken";
        SyntaxKind[SyntaxKind["PlusToken"] = 94] = "PlusToken";
        SyntaxKind[SyntaxKind["MinusToken"] = 95] = "MinusToken";
        SyntaxKind[SyntaxKind["AsteriskToken"] = 96] = "AsteriskToken";
        SyntaxKind[SyntaxKind["PercentToken"] = 97] = "PercentToken";
        SyntaxKind[SyntaxKind["PlusPlusToken"] = 98] = "PlusPlusToken";
        SyntaxKind[SyntaxKind["MinusMinusToken"] = 99] = "MinusMinusToken";
        SyntaxKind[SyntaxKind["LessThanLessThanToken"] = 100] = "LessThanLessThanToken";
        SyntaxKind[SyntaxKind["GreaterThanGreaterThanToken"] = 101] = "GreaterThanGreaterThanToken";
        SyntaxKind[SyntaxKind["GreaterThanGreaterThanGreaterThanToken"] = 102] = "GreaterThanGreaterThanGreaterThanToken";
        SyntaxKind[SyntaxKind["AmpersandToken"] = 103] = "AmpersandToken";
        SyntaxKind[SyntaxKind["BarToken"] = 104] = "BarToken";
        SyntaxKind[SyntaxKind["CaretToken"] = 105] = "CaretToken";
        SyntaxKind[SyntaxKind["ExclamationToken"] = 106] = "ExclamationToken";
        SyntaxKind[SyntaxKind["TildeToken"] = 107] = "TildeToken";
        SyntaxKind[SyntaxKind["AmpersandAmpersandToken"] = 108] = "AmpersandAmpersandToken";
        SyntaxKind[SyntaxKind["BarBarToken"] = 109] = "BarBarToken";
        SyntaxKind[SyntaxKind["QuestionToken"] = 110] = "QuestionToken";
        SyntaxKind[SyntaxKind["ColonToken"] = 111] = "ColonToken";
        SyntaxKind[SyntaxKind["EqualsToken"] = 112] = "EqualsToken";
        SyntaxKind[SyntaxKind["PlusEqualsToken"] = 113] = "PlusEqualsToken";
        SyntaxKind[SyntaxKind["MinusEqualsToken"] = 114] = "MinusEqualsToken";
        SyntaxKind[SyntaxKind["AsteriskEqualsToken"] = 115] = "AsteriskEqualsToken";
        SyntaxKind[SyntaxKind["PercentEqualsToken"] = 116] = "PercentEqualsToken";
        SyntaxKind[SyntaxKind["LessThanLessThanEqualsToken"] = 117] = "LessThanLessThanEqualsToken";
        SyntaxKind[SyntaxKind["GreaterThanGreaterThanEqualsToken"] = 118] = "GreaterThanGreaterThanEqualsToken";
        SyntaxKind[SyntaxKind["GreaterThanGreaterThanGreaterThanEqualsToken"] = 119] = "GreaterThanGreaterThanGreaterThanEqualsToken";
        SyntaxKind[SyntaxKind["AmpersandEqualsToken"] = 120] = "AmpersandEqualsToken";
        SyntaxKind[SyntaxKind["BarEqualsToken"] = 121] = "BarEqualsToken";
        SyntaxKind[SyntaxKind["CaretEqualsToken"] = 122] = "CaretEqualsToken";
        SyntaxKind[SyntaxKind["SlashToken"] = 123] = "SlashToken";
        SyntaxKind[SyntaxKind["SlashEqualsToken"] = 124] = "SlashEqualsToken";
        SyntaxKind[SyntaxKind["SourceUnit"] = 125] = "SourceUnit";
        SyntaxKind[SyntaxKind["QualifiedName"] = 126] = "QualifiedName";
        SyntaxKind[SyntaxKind["ObjectType"] = 127] = "ObjectType";
        SyntaxKind[SyntaxKind["FunctionType"] = 128] = "FunctionType";
        SyntaxKind[SyntaxKind["ArrayType"] = 129] = "ArrayType";
        SyntaxKind[SyntaxKind["ConstructorType"] = 130] = "ConstructorType";
        SyntaxKind[SyntaxKind["GenericType"] = 131] = "GenericType";
        SyntaxKind[SyntaxKind["TypeQuery"] = 132] = "TypeQuery";
        SyntaxKind[SyntaxKind["TupleType"] = 133] = "TupleType";
        SyntaxKind[SyntaxKind["UnionType"] = 134] = "UnionType";
        SyntaxKind[SyntaxKind["ParenthesizedType"] = 135] = "ParenthesizedType";
        SyntaxKind[SyntaxKind["InterfaceDeclaration"] = 136] = "InterfaceDeclaration";
        SyntaxKind[SyntaxKind["FunctionDeclaration"] = 137] = "FunctionDeclaration";
        SyntaxKind[SyntaxKind["ModuleDeclaration"] = 138] = "ModuleDeclaration";
        SyntaxKind[SyntaxKind["ClassDeclaration"] = 139] = "ClassDeclaration";
        SyntaxKind[SyntaxKind["EnumDeclaration"] = 140] = "EnumDeclaration";
        SyntaxKind[SyntaxKind["ImportDeclaration"] = 141] = "ImportDeclaration";
        SyntaxKind[SyntaxKind["ExportAssignment"] = 142] = "ExportAssignment";
        SyntaxKind[SyntaxKind["MethodDeclaration"] = 143] = "MethodDeclaration";
        SyntaxKind[SyntaxKind["PropertyDeclaration"] = 144] = "PropertyDeclaration";
        SyntaxKind[SyntaxKind["ConstructorDeclaration"] = 145] = "ConstructorDeclaration";
        SyntaxKind[SyntaxKind["GetAccessor"] = 146] = "GetAccessor";
        SyntaxKind[SyntaxKind["SetAccessor"] = 147] = "SetAccessor";
        SyntaxKind[SyntaxKind["PropertySignature"] = 148] = "PropertySignature";
        SyntaxKind[SyntaxKind["CallSignature"] = 149] = "CallSignature";
        SyntaxKind[SyntaxKind["ConstructSignature"] = 150] = "ConstructSignature";
        SyntaxKind[SyntaxKind["IndexSignature"] = 151] = "IndexSignature";
        SyntaxKind[SyntaxKind["MethodSignature"] = 152] = "MethodSignature";
        SyntaxKind[SyntaxKind["Block"] = 153] = "Block";
        SyntaxKind[SyntaxKind["IfStatement"] = 154] = "IfStatement";
        SyntaxKind[SyntaxKind["VariableStatement"] = 155] = "VariableStatement";
        SyntaxKind[SyntaxKind["ExpressionStatement"] = 156] = "ExpressionStatement";
        SyntaxKind[SyntaxKind["ReturnStatement"] = 157] = "ReturnStatement";
        SyntaxKind[SyntaxKind["SwitchStatement"] = 158] = "SwitchStatement";
        SyntaxKind[SyntaxKind["BreakStatement"] = 159] = "BreakStatement";
        SyntaxKind[SyntaxKind["ContinueStatement"] = 160] = "ContinueStatement";
        SyntaxKind[SyntaxKind["ForStatement"] = 161] = "ForStatement";
        SyntaxKind[SyntaxKind["ForInStatement"] = 162] = "ForInStatement";
        SyntaxKind[SyntaxKind["EmptyStatement"] = 163] = "EmptyStatement";
        SyntaxKind[SyntaxKind["ThrowStatement"] = 164] = "ThrowStatement";
        SyntaxKind[SyntaxKind["WhileStatement"] = 165] = "WhileStatement";
        SyntaxKind[SyntaxKind["TryStatement"] = 166] = "TryStatement";
        SyntaxKind[SyntaxKind["LabeledStatement"] = 167] = "LabeledStatement";
        SyntaxKind[SyntaxKind["DoStatement"] = 168] = "DoStatement";
        SyntaxKind[SyntaxKind["DebuggerStatement"] = 169] = "DebuggerStatement";
        SyntaxKind[SyntaxKind["WithStatement"] = 170] = "WithStatement";
        SyntaxKind[SyntaxKind["PrefixUnaryExpression"] = 171] = "PrefixUnaryExpression";
        SyntaxKind[SyntaxKind["DeleteExpression"] = 172] = "DeleteExpression";
        SyntaxKind[SyntaxKind["TypeOfExpression"] = 173] = "TypeOfExpression";
        SyntaxKind[SyntaxKind["VoidExpression"] = 174] = "VoidExpression";
        SyntaxKind[SyntaxKind["ConditionalExpression"] = 175] = "ConditionalExpression";
        SyntaxKind[SyntaxKind["BinaryExpression"] = 176] = "BinaryExpression";
        SyntaxKind[SyntaxKind["PostfixUnaryExpression"] = 177] = "PostfixUnaryExpression";
        SyntaxKind[SyntaxKind["PropertyAccessExpression"] = 178] = "PropertyAccessExpression";
        SyntaxKind[SyntaxKind["InvocationExpression"] = 179] = "InvocationExpression";
        SyntaxKind[SyntaxKind["ArrayLiteralExpression"] = 180] = "ArrayLiteralExpression";
        SyntaxKind[SyntaxKind["ObjectLiteralExpression"] = 181] = "ObjectLiteralExpression";
        SyntaxKind[SyntaxKind["ObjectCreationExpression"] = 182] = "ObjectCreationExpression";
        SyntaxKind[SyntaxKind["ParenthesizedExpression"] = 183] = "ParenthesizedExpression";
        SyntaxKind[SyntaxKind["ParenthesizedArrowFunctionExpression"] = 184] = "ParenthesizedArrowFunctionExpression";
        SyntaxKind[SyntaxKind["SimpleArrowFunctionExpression"] = 185] = "SimpleArrowFunctionExpression";
        SyntaxKind[SyntaxKind["TypeAssertionExpression"] = 186] = "TypeAssertionExpression";
        SyntaxKind[SyntaxKind["ElementAccessExpression"] = 187] = "ElementAccessExpression";
        SyntaxKind[SyntaxKind["FunctionExpression"] = 188] = "FunctionExpression";
        SyntaxKind[SyntaxKind["OmittedExpression"] = 189] = "OmittedExpression";
        SyntaxKind[SyntaxKind["TemplateExpression"] = 190] = "TemplateExpression";
        SyntaxKind[SyntaxKind["TemplateAccessExpression"] = 191] = "TemplateAccessExpression";
        SyntaxKind[SyntaxKind["YieldExpression"] = 192] = "YieldExpression";
        SyntaxKind[SyntaxKind["AwaitExpression"] = 193] = "AwaitExpression";
        SyntaxKind[SyntaxKind["VariableDeclaration"] = 194] = "VariableDeclaration";
        SyntaxKind[SyntaxKind["VariableDeclarator"] = 195] = "VariableDeclarator";
        SyntaxKind[SyntaxKind["ArgumentList"] = 196] = "ArgumentList";
        SyntaxKind[SyntaxKind["ParameterList"] = 197] = "ParameterList";
        SyntaxKind[SyntaxKind["TypeArgumentList"] = 198] = "TypeArgumentList";
        SyntaxKind[SyntaxKind["TypeParameterList"] = 199] = "TypeParameterList";
        SyntaxKind[SyntaxKind["HeritageClause"] = 200] = "HeritageClause";
        SyntaxKind[SyntaxKind["EqualsValueClause"] = 201] = "EqualsValueClause";
        SyntaxKind[SyntaxKind["CaseSwitchClause"] = 202] = "CaseSwitchClause";
        SyntaxKind[SyntaxKind["DefaultSwitchClause"] = 203] = "DefaultSwitchClause";
        SyntaxKind[SyntaxKind["ElseClause"] = 204] = "ElseClause";
        SyntaxKind[SyntaxKind["CatchClause"] = 205] = "CatchClause";
        SyntaxKind[SyntaxKind["FinallyClause"] = 206] = "FinallyClause";
        SyntaxKind[SyntaxKind["TemplateClause"] = 207] = "TemplateClause";
        SyntaxKind[SyntaxKind["TypeParameter"] = 208] = "TypeParameter";
        SyntaxKind[SyntaxKind["Constraint"] = 209] = "Constraint";
        SyntaxKind[SyntaxKind["Parameter"] = 210] = "Parameter";
        SyntaxKind[SyntaxKind["EnumElement"] = 211] = "EnumElement";
        SyntaxKind[SyntaxKind["TypeAnnotation"] = 212] = "TypeAnnotation";
        SyntaxKind[SyntaxKind["ExpressionBody"] = 213] = "ExpressionBody";
        SyntaxKind[SyntaxKind["ComputedPropertyName"] = 214] = "ComputedPropertyName";
        SyntaxKind[SyntaxKind["PropertyAssignment"] = 215] = "PropertyAssignment";
        SyntaxKind[SyntaxKind["TypeAlias"] = 216] = "TypeAlias";
        SyntaxKind[SyntaxKind["ExternalModuleReference"] = 217] = "ExternalModuleReference";
        SyntaxKind[SyntaxKind["ModuleNameModuleReference"] = 218] = "ModuleNameModuleReference";
        SyntaxKind[SyntaxKind["FirstStandardKeyword"] = 17] = "FirstStandardKeyword";
        SyntaxKind[SyntaxKind["LastStandardKeyword"] = 45] = "LastStandardKeyword";
        SyntaxKind[SyntaxKind["FirstFutureReservedKeyword"] = 46] = "FirstFutureReservedKeyword";
        SyntaxKind[SyntaxKind["LastFutureReservedKeyword"] = 52] = "LastFutureReservedKeyword";
        SyntaxKind[SyntaxKind["FirstFutureReservedStrictKeyword"] = 53] = "FirstFutureReservedStrictKeyword";
        SyntaxKind[SyntaxKind["LastFutureReservedStrictKeyword"] = 61] = "LastFutureReservedStrictKeyword";
        SyntaxKind[SyntaxKind["FirstTypeScriptKeyword"] = 62] = "FirstTypeScriptKeyword";
        SyntaxKind[SyntaxKind["LastTypeScriptKeyword"] = 74] = "LastTypeScriptKeyword";
        SyntaxKind[SyntaxKind["FirstKeyword"] = 17] = "FirstKeyword";
        SyntaxKind[SyntaxKind["LastKeyword"] = 74] = "LastKeyword";
        SyntaxKind[SyntaxKind["FirstToken"] = 7] = "FirstToken";
        SyntaxKind[SyntaxKind["LastToken"] = 124] = "LastToken";
        SyntaxKind[SyntaxKind["FirstPunctuation"] = 75] = "FirstPunctuation";
        SyntaxKind[SyntaxKind["LastPunctuation"] = 124] = "LastPunctuation";
        SyntaxKind[SyntaxKind["FirstFixedWidth"] = 17] = "FirstFixedWidth";
        SyntaxKind[SyntaxKind["LastFixedWidth"] = 124] = "LastFixedWidth";
        SyntaxKind[SyntaxKind["FirstTrivia"] = 2] = "FirstTrivia";
        SyntaxKind[SyntaxKind["LastTrivia"] = 6] = "LastTrivia";
        SyntaxKind[SyntaxKind["FirstNode"] = 125] = "FirstNode";
        SyntaxKind[SyntaxKind["LastNode"] = 218] = "LastNode";
    })(TypeScript.SyntaxKind || (TypeScript.SyntaxKind = {}));
    var SyntaxKind = TypeScript.SyntaxKind;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var SyntaxFacts;
    (function (SyntaxFacts) {
        var textToKeywordKind = {
            "any": 62 /* AnyKeyword */,
            "async": 63 /* AsyncKeyword */,
            "await": 64 /* AwaitKeyword */,
            "boolean": 65 /* BooleanKeyword */,
            "break": 17 /* BreakKeyword */,
            "case": 18 /* CaseKeyword */,
            "catch": 19 /* CatchKeyword */,
            "class": 46 /* ClassKeyword */,
            "continue": 20 /* ContinueKeyword */,
            "const": 47 /* ConstKeyword */,
            "constructor": 66 /* ConstructorKeyword */,
            "debugger": 21 /* DebuggerKeyword */,
            "declare": 67 /* DeclareKeyword */,
            "default": 22 /* DefaultKeyword */,
            "delete": 23 /* DeleteKeyword */,
            "do": 24 /* DoKeyword */,
            "else": 25 /* ElseKeyword */,
            "enum": 48 /* EnumKeyword */,
            "export": 49 /* ExportKeyword */,
            "extends": 50 /* ExtendsKeyword */,
            "false": 26 /* FalseKeyword */,
            "finally": 27 /* FinallyKeyword */,
            "for": 28 /* ForKeyword */,
            "function": 29 /* FunctionKeyword */,
            "get": 68 /* GetKeyword */,
            "if": 30 /* IfKeyword */,
            "implements": 53 /* ImplementsKeyword */,
            "import": 51 /* ImportKeyword */,
            "in": 31 /* InKeyword */,
            "instanceof": 32 /* InstanceOfKeyword */,
            "interface": 54 /* InterfaceKeyword */,
            "let": 55 /* LetKeyword */,
            "module": 69 /* ModuleKeyword */,
            "new": 33 /* NewKeyword */,
            "null": 34 /* NullKeyword */,
            "number": 71 /* NumberKeyword */,
            "package": 56 /* PackageKeyword */,
            "private": 57 /* PrivateKeyword */,
            "protected": 58 /* ProtectedKeyword */,
            "public": 59 /* PublicKeyword */,
            "require": 70 /* RequireKeyword */,
            "return": 35 /* ReturnKeyword */,
            "set": 72 /* SetKeyword */,
            "static": 60 /* StaticKeyword */,
            "string": 74 /* StringKeyword */,
            "super": 52 /* SuperKeyword */,
            "switch": 36 /* SwitchKeyword */,
            "this": 37 /* ThisKeyword */,
            "throw": 38 /* ThrowKeyword */,
            "true": 39 /* TrueKeyword */,
            "try": 40 /* TryKeyword */,
            "type": 73 /* TypeKeyword */,
            "typeof": 41 /* TypeOfKeyword */,
            "var": 42 /* VarKeyword */,
            "void": 43 /* VoidKeyword */,
            "while": 44 /* WhileKeyword */,
            "with": 45 /* WithKeyword */,
            "yield": 61 /* YieldKeyword */,
            "{": 75 /* OpenBraceToken */,
            "}": 76 /* CloseBraceToken */,
            "(": 77 /* OpenParenToken */,
            ")": 78 /* CloseParenToken */,
            "[": 79 /* OpenBracketToken */,
            "]": 80 /* CloseBracketToken */,
            ".": 81 /* DotToken */,
            "...": 82 /* DotDotDotToken */,
            ";": 83 /* SemicolonToken */,
            ",": 84 /* CommaToken */,
            "<": 85 /* LessThanToken */,
            ">": 86 /* GreaterThanToken */,
            "<=": 87 /* LessThanEqualsToken */,
            ">=": 88 /* GreaterThanEqualsToken */,
            "==": 89 /* EqualsEqualsToken */,
            "=>": 90 /* EqualsGreaterThanToken */,
            "!=": 91 /* ExclamationEqualsToken */,
            "===": 92 /* EqualsEqualsEqualsToken */,
            "!==": 93 /* ExclamationEqualsEqualsToken */,
            "+": 94 /* PlusToken */,
            "-": 95 /* MinusToken */,
            "*": 96 /* AsteriskToken */,
            "%": 97 /* PercentToken */,
            "++": 98 /* PlusPlusToken */,
            "--": 99 /* MinusMinusToken */,
            "<<": 100 /* LessThanLessThanToken */,
            ">>": 101 /* GreaterThanGreaterThanToken */,
            ">>>": 102 /* GreaterThanGreaterThanGreaterThanToken */,
            "&": 103 /* AmpersandToken */,
            "|": 104 /* BarToken */,
            "^": 105 /* CaretToken */,
            "!": 106 /* ExclamationToken */,
            "~": 107 /* TildeToken */,
            "&&": 108 /* AmpersandAmpersandToken */,
            "||": 109 /* BarBarToken */,
            "?": 110 /* QuestionToken */,
            ":": 111 /* ColonToken */,
            "=": 112 /* EqualsToken */,
            "+=": 113 /* PlusEqualsToken */,
            "-=": 114 /* MinusEqualsToken */,
            "*=": 115 /* AsteriskEqualsToken */,
            "%=": 116 /* PercentEqualsToken */,
            "<<=": 117 /* LessThanLessThanEqualsToken */,
            ">>=": 118 /* GreaterThanGreaterThanEqualsToken */,
            ">>>=": 119 /* GreaterThanGreaterThanGreaterThanEqualsToken */,
            "&=": 120 /* AmpersandEqualsToken */,
            "|=": 121 /* BarEqualsToken */,
            "^=": 122 /* CaretEqualsToken */,
            "/": 123 /* SlashToken */,
            "/=": 124 /* SlashEqualsToken */
        };
        var kindToText = new Array();
        for (var name in textToKeywordKind) {
            if (textToKeywordKind.hasOwnProperty(name)) {
                kindToText[textToKeywordKind[name]] = name;
            }
        }
        kindToText[66 /* ConstructorKeyword */] = "constructor";
        function getTokenKind(text) {
            if (textToKeywordKind.hasOwnProperty(text)) {
                return textToKeywordKind[text];
            }
            return 0 /* None */;
        }
        SyntaxFacts.getTokenKind = getTokenKind;
        function getText(kind) {
            var result = kindToText[kind];
            return result;
        }
        SyntaxFacts.getText = getText;
        function isAnyKeyword(kind) {
            return kind >= 17 /* FirstKeyword */ && kind <= 74 /* LastKeyword */;
        }
        SyntaxFacts.isAnyKeyword = isAnyKeyword;
        function isAnyPunctuation(kind) {
            return kind >= 75 /* FirstPunctuation */ && kind <= 124 /* LastPunctuation */;
        }
        SyntaxFacts.isAnyPunctuation = isAnyPunctuation;
        function isPrefixUnaryExpressionOperatorToken(tokenKind) {
            switch (tokenKind) {
                case 94 /* PlusToken */:
                case 95 /* MinusToken */:
                case 107 /* TildeToken */:
                case 106 /* ExclamationToken */:
                case 98 /* PlusPlusToken */:
                case 99 /* MinusMinusToken */:
                    return true;
                default:
                    return false;
            }
        }
        SyntaxFacts.isPrefixUnaryExpressionOperatorToken = isPrefixUnaryExpressionOperatorToken;
        function isBinaryExpressionOperatorToken(tokenKind) {
            switch (tokenKind) {
                case 96 /* AsteriskToken */:
                case 123 /* SlashToken */:
                case 97 /* PercentToken */:
                case 94 /* PlusToken */:
                case 95 /* MinusToken */:
                case 100 /* LessThanLessThanToken */:
                case 101 /* GreaterThanGreaterThanToken */:
                case 102 /* GreaterThanGreaterThanGreaterThanToken */:
                case 85 /* LessThanToken */:
                case 86 /* GreaterThanToken */:
                case 87 /* LessThanEqualsToken */:
                case 88 /* GreaterThanEqualsToken */:
                case 32 /* InstanceOfKeyword */:
                case 31 /* InKeyword */:
                case 89 /* EqualsEqualsToken */:
                case 91 /* ExclamationEqualsToken */:
                case 92 /* EqualsEqualsEqualsToken */:
                case 93 /* ExclamationEqualsEqualsToken */:
                case 103 /* AmpersandToken */:
                case 105 /* CaretToken */:
                case 104 /* BarToken */:
                case 108 /* AmpersandAmpersandToken */:
                case 109 /* BarBarToken */:
                case 121 /* BarEqualsToken */:
                case 120 /* AmpersandEqualsToken */:
                case 122 /* CaretEqualsToken */:
                case 117 /* LessThanLessThanEqualsToken */:
                case 118 /* GreaterThanGreaterThanEqualsToken */:
                case 119 /* GreaterThanGreaterThanGreaterThanEqualsToken */:
                case 113 /* PlusEqualsToken */:
                case 114 /* MinusEqualsToken */:
                case 115 /* AsteriskEqualsToken */:
                case 124 /* SlashEqualsToken */:
                case 116 /* PercentEqualsToken */:
                case 112 /* EqualsToken */:
                case 84 /* CommaToken */:
                    return true;
                default:
                    return false;
            }
        }
        SyntaxFacts.isBinaryExpressionOperatorToken = isBinaryExpressionOperatorToken;
        function isAssignmentOperatorToken(tokenKind) {
            switch (tokenKind) {
                case 121 /* BarEqualsToken */:
                case 120 /* AmpersandEqualsToken */:
                case 122 /* CaretEqualsToken */:
                case 117 /* LessThanLessThanEqualsToken */:
                case 118 /* GreaterThanGreaterThanEqualsToken */:
                case 119 /* GreaterThanGreaterThanGreaterThanEqualsToken */:
                case 113 /* PlusEqualsToken */:
                case 114 /* MinusEqualsToken */:
                case 115 /* AsteriskEqualsToken */:
                case 124 /* SlashEqualsToken */:
                case 116 /* PercentEqualsToken */:
                case 112 /* EqualsToken */:
                    return true;
                default:
                    return false;
            }
        }
        SyntaxFacts.isAssignmentOperatorToken = isAssignmentOperatorToken;
        function isType(kind) {
            switch (kind) {
                case 129 /* ArrayType */:
                case 62 /* AnyKeyword */:
                case 71 /* NumberKeyword */:
                case 65 /* BooleanKeyword */:
                case 74 /* StringKeyword */:
                case 43 /* VoidKeyword */:
                case 128 /* FunctionType */:
                case 127 /* ObjectType */:
                case 130 /* ConstructorType */:
                case 132 /* TypeQuery */:
                case 131 /* GenericType */:
                case 126 /* QualifiedName */:
                case 9 /* IdentifierName */:
                    return true;
            }
            return false;
        }
        SyntaxFacts.isType = isType;
    })(SyntaxFacts = TypeScript.SyntaxFacts || (TypeScript.SyntaxFacts = {}));
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var ScannerUtilities;
    (function (ScannerUtilities) {
        ScannerUtilities.fixedWidthArray = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 4, 5, 8, 8, 7, 6, 2, 4, 5, 7, 3, 8, 2, 2, 10, 3, 4, 6, 6, 4, 5, 4, 3, 6, 3, 4, 5, 4, 5, 5, 4, 6, 7, 6, 5, 10, 9, 3, 7, 7, 9, 6, 6, 5, 3, 5, 5, 7, 11, 7, 3, 6, 7, 6, 3, 4, 6, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 1, 1, 1, 1, 2, 2, 2, 2, 3, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 2, 2, 2, 1, 2];
        function identifierKind(str, start, length) {
            switch (length) {
                case 2:
                    switch (str.charCodeAt(start)) {
                        case 100 /* d */: return (str.charCodeAt(start + 1) === 111 /* o */) ? 24 /* DoKeyword */ : 9 /* IdentifierName */;
                        case 105 /* i */:
                            switch (str.charCodeAt(start + 1)) {
                                case 102 /* f */: return 30 /* IfKeyword */;
                                case 110 /* n */: return 31 /* InKeyword */;
                                default: return 9 /* IdentifierName */;
                            }
                        default: return 9 /* IdentifierName */;
                    }
                case 3:
                    switch (str.charCodeAt(start)) {
                        case 97 /* a */: return (str.charCodeAt(start + 1) === 110 /* n */ && str.charCodeAt(start + 2) === 121 /* y */) ? 62 /* AnyKeyword */ : 9 /* IdentifierName */;
                        case 102 /* f */: return (str.charCodeAt(start + 1) === 111 /* o */ && str.charCodeAt(start + 2) === 114 /* r */) ? 28 /* ForKeyword */ : 9 /* IdentifierName */;
                        case 103 /* g */: return (str.charCodeAt(start + 1) === 101 /* e */ && str.charCodeAt(start + 2) === 116 /* t */) ? 68 /* GetKeyword */ : 9 /* IdentifierName */;
                        case 108 /* l */: return (str.charCodeAt(start + 1) === 101 /* e */ && str.charCodeAt(start + 2) === 116 /* t */) ? 55 /* LetKeyword */ : 9 /* IdentifierName */;
                        case 110 /* n */: return (str.charCodeAt(start + 1) === 101 /* e */ && str.charCodeAt(start + 2) === 119 /* w */) ? 33 /* NewKeyword */ : 9 /* IdentifierName */;
                        case 115 /* s */: return (str.charCodeAt(start + 1) === 101 /* e */ && str.charCodeAt(start + 2) === 116 /* t */) ? 72 /* SetKeyword */ : 9 /* IdentifierName */;
                        case 116 /* t */: return (str.charCodeAt(start + 1) === 114 /* r */ && str.charCodeAt(start + 2) === 121 /* y */) ? 40 /* TryKeyword */ : 9 /* IdentifierName */;
                        case 118 /* v */: return (str.charCodeAt(start + 1) === 97 /* a */ && str.charCodeAt(start + 2) === 114 /* r */) ? 42 /* VarKeyword */ : 9 /* IdentifierName */;
                        default: return 9 /* IdentifierName */;
                    }
                case 4:
                    switch (str.charCodeAt(start)) {
                        case 99 /* c */: return (str.charCodeAt(start + 1) === 97 /* a */ && str.charCodeAt(start + 2) === 115 /* s */ && str.charCodeAt(start + 3) === 101 /* e */) ? 18 /* CaseKeyword */ : 9 /* IdentifierName */;
                        case 101 /* e */:
                            switch (str.charCodeAt(start + 1)) {
                                case 108 /* l */: return (str.charCodeAt(start + 2) === 115 /* s */ && str.charCodeAt(start + 3) === 101 /* e */) ? 25 /* ElseKeyword */ : 9 /* IdentifierName */;
                                case 110 /* n */: return (str.charCodeAt(start + 2) === 117 /* u */ && str.charCodeAt(start + 3) === 109 /* m */) ? 48 /* EnumKeyword */ : 9 /* IdentifierName */;
                                default: return 9 /* IdentifierName */;
                            }
                        case 110 /* n */: return (str.charCodeAt(start + 1) === 117 /* u */ && str.charCodeAt(start + 2) === 108 /* l */ && str.charCodeAt(start + 3) === 108 /* l */) ? 34 /* NullKeyword */ : 9 /* IdentifierName */;
                        case 116 /* t */:
                            switch (str.charCodeAt(start + 1)) {
                                case 104 /* h */: return (str.charCodeAt(start + 2) === 105 /* i */ && str.charCodeAt(start + 3) === 115 /* s */) ? 37 /* ThisKeyword */ : 9 /* IdentifierName */;
                                case 114 /* r */: return (str.charCodeAt(start + 2) === 117 /* u */ && str.charCodeAt(start + 3) === 101 /* e */) ? 39 /* TrueKeyword */ : 9 /* IdentifierName */;
                                case 121 /* y */: return (str.charCodeAt(start + 2) === 112 /* p */ && str.charCodeAt(start + 3) === 101 /* e */) ? 73 /* TypeKeyword */ : 9 /* IdentifierName */;
                                default: return 9 /* IdentifierName */;
                            }
                        case 118 /* v */: return (str.charCodeAt(start + 1) === 111 /* o */ && str.charCodeAt(start + 2) === 105 /* i */ && str.charCodeAt(start + 3) === 100 /* d */) ? 43 /* VoidKeyword */ : 9 /* IdentifierName */;
                        case 119 /* w */: return (str.charCodeAt(start + 1) === 105 /* i */ && str.charCodeAt(start + 2) === 116 /* t */ && str.charCodeAt(start + 3) === 104 /* h */) ? 45 /* WithKeyword */ : 9 /* IdentifierName */;
                        default: return 9 /* IdentifierName */;
                    }
                case 5:
                    switch (str.charCodeAt(start)) {
                        case 97 /* a */:
                            switch (str.charCodeAt(start + 1)) {
                                case 115 /* s */: return (str.charCodeAt(start + 2) === 121 /* y */ && str.charCodeAt(start + 3) === 110 /* n */ && str.charCodeAt(start + 4) === 99 /* c */) ? 63 /* AsyncKeyword */ : 9 /* IdentifierName */;
                                case 119 /* w */: return (str.charCodeAt(start + 2) === 97 /* a */ && str.charCodeAt(start + 3) === 105 /* i */ && str.charCodeAt(start + 4) === 116 /* t */) ? 64 /* AwaitKeyword */ : 9 /* IdentifierName */;
                                default: return 9 /* IdentifierName */;
                            }
                        case 98 /* b */: return (str.charCodeAt(start + 1) === 114 /* r */ && str.charCodeAt(start + 2) === 101 /* e */ && str.charCodeAt(start + 3) === 97 /* a */ && str.charCodeAt(start + 4) === 107 /* k */) ? 17 /* BreakKeyword */ : 9 /* IdentifierName */;
                        case 99 /* c */:
                            switch (str.charCodeAt(start + 1)) {
                                case 97 /* a */: return (str.charCodeAt(start + 2) === 116 /* t */ && str.charCodeAt(start + 3) === 99 /* c */ && str.charCodeAt(start + 4) === 104 /* h */) ? 19 /* CatchKeyword */ : 9 /* IdentifierName */;
                                case 108 /* l */: return (str.charCodeAt(start + 2) === 97 /* a */ && str.charCodeAt(start + 3) === 115 /* s */ && str.charCodeAt(start + 4) === 115 /* s */) ? 46 /* ClassKeyword */ : 9 /* IdentifierName */;
                                case 111 /* o */: return (str.charCodeAt(start + 2) === 110 /* n */ && str.charCodeAt(start + 3) === 115 /* s */ && str.charCodeAt(start + 4) === 116 /* t */) ? 47 /* ConstKeyword */ : 9 /* IdentifierName */;
                                default: return 9 /* IdentifierName */;
                            }
                        case 102 /* f */: return (str.charCodeAt(start + 1) === 97 /* a */ && str.charCodeAt(start + 2) === 108 /* l */ && str.charCodeAt(start + 3) === 115 /* s */ && str.charCodeAt(start + 4) === 101 /* e */) ? 26 /* FalseKeyword */ : 9 /* IdentifierName */;
                        case 115 /* s */: return (str.charCodeAt(start + 1) === 117 /* u */ && str.charCodeAt(start + 2) === 112 /* p */ && str.charCodeAt(start + 3) === 101 /* e */ && str.charCodeAt(start + 4) === 114 /* r */) ? 52 /* SuperKeyword */ : 9 /* IdentifierName */;
                        case 116 /* t */: return (str.charCodeAt(start + 1) === 104 /* h */ && str.charCodeAt(start + 2) === 114 /* r */ && str.charCodeAt(start + 3) === 111 /* o */ && str.charCodeAt(start + 4) === 119 /* w */) ? 38 /* ThrowKeyword */ : 9 /* IdentifierName */;
                        case 119 /* w */: return (str.charCodeAt(start + 1) === 104 /* h */ && str.charCodeAt(start + 2) === 105 /* i */ && str.charCodeAt(start + 3) === 108 /* l */ && str.charCodeAt(start + 4) === 101 /* e */) ? 44 /* WhileKeyword */ : 9 /* IdentifierName */;
                        case 121 /* y */: return (str.charCodeAt(start + 1) === 105 /* i */ && str.charCodeAt(start + 2) === 101 /* e */ && str.charCodeAt(start + 3) === 108 /* l */ && str.charCodeAt(start + 4) === 100 /* d */) ? 61 /* YieldKeyword */ : 9 /* IdentifierName */;
                        default: return 9 /* IdentifierName */;
                    }
                case 6:
                    switch (str.charCodeAt(start)) {
                        case 100 /* d */: return (str.charCodeAt(start + 1) === 101 /* e */ && str.charCodeAt(start + 2) === 108 /* l */ && str.charCodeAt(start + 3) === 101 /* e */ && str.charCodeAt(start + 4) === 116 /* t */ && str.charCodeAt(start + 5) === 101 /* e */) ? 23 /* DeleteKeyword */ : 9 /* IdentifierName */;
                        case 101 /* e */: return (str.charCodeAt(start + 1) === 120 /* x */ && str.charCodeAt(start + 2) === 112 /* p */ && str.charCodeAt(start + 3) === 111 /* o */ && str.charCodeAt(start + 4) === 114 /* r */ && str.charCodeAt(start + 5) === 116 /* t */) ? 49 /* ExportKeyword */ : 9 /* IdentifierName */;
                        case 105 /* i */: return (str.charCodeAt(start + 1) === 109 /* m */ && str.charCodeAt(start + 2) === 112 /* p */ && str.charCodeAt(start + 3) === 111 /* o */ && str.charCodeAt(start + 4) === 114 /* r */ && str.charCodeAt(start + 5) === 116 /* t */) ? 51 /* ImportKeyword */ : 9 /* IdentifierName */;
                        case 109 /* m */: return (str.charCodeAt(start + 1) === 111 /* o */ && str.charCodeAt(start + 2) === 100 /* d */ && str.charCodeAt(start + 3) === 117 /* u */ && str.charCodeAt(start + 4) === 108 /* l */ && str.charCodeAt(start + 5) === 101 /* e */) ? 69 /* ModuleKeyword */ : 9 /* IdentifierName */;
                        case 110 /* n */: return (str.charCodeAt(start + 1) === 117 /* u */ && str.charCodeAt(start + 2) === 109 /* m */ && str.charCodeAt(start + 3) === 98 /* b */ && str.charCodeAt(start + 4) === 101 /* e */ && str.charCodeAt(start + 5) === 114 /* r */) ? 71 /* NumberKeyword */ : 9 /* IdentifierName */;
                        case 112 /* p */: return (str.charCodeAt(start + 1) === 117 /* u */ && str.charCodeAt(start + 2) === 98 /* b */ && str.charCodeAt(start + 3) === 108 /* l */ && str.charCodeAt(start + 4) === 105 /* i */ && str.charCodeAt(start + 5) === 99 /* c */) ? 59 /* PublicKeyword */ : 9 /* IdentifierName */;
                        case 114 /* r */: return (str.charCodeAt(start + 1) === 101 /* e */ && str.charCodeAt(start + 2) === 116 /* t */ && str.charCodeAt(start + 3) === 117 /* u */ && str.charCodeAt(start + 4) === 114 /* r */ && str.charCodeAt(start + 5) === 110 /* n */) ? 35 /* ReturnKeyword */ : 9 /* IdentifierName */;
                        case 115 /* s */:
                            switch (str.charCodeAt(start + 1)) {
                                case 116 /* t */:
                                    switch (str.charCodeAt(start + 2)) {
                                        case 97 /* a */: return (str.charCodeAt(start + 3) === 116 /* t */ && str.charCodeAt(start + 4) === 105 /* i */ && str.charCodeAt(start + 5) === 99 /* c */) ? 60 /* StaticKeyword */ : 9 /* IdentifierName */;
                                        case 114 /* r */: return (str.charCodeAt(start + 3) === 105 /* i */ && str.charCodeAt(start + 4) === 110 /* n */ && str.charCodeAt(start + 5) === 103 /* g */) ? 74 /* StringKeyword */ : 9 /* IdentifierName */;
                                        default: return 9 /* IdentifierName */;
                                    }
                                case 119 /* w */: return (str.charCodeAt(start + 2) === 105 /* i */ && str.charCodeAt(start + 3) === 116 /* t */ && str.charCodeAt(start + 4) === 99 /* c */ && str.charCodeAt(start + 5) === 104 /* h */) ? 36 /* SwitchKeyword */ : 9 /* IdentifierName */;
                                default: return 9 /* IdentifierName */;
                            }
                        case 116 /* t */: return (str.charCodeAt(start + 1) === 121 /* y */ && str.charCodeAt(start + 2) === 112 /* p */ && str.charCodeAt(start + 3) === 101 /* e */ && str.charCodeAt(start + 4) === 111 /* o */ && str.charCodeAt(start + 5) === 102 /* f */) ? 41 /* TypeOfKeyword */ : 9 /* IdentifierName */;
                        default: return 9 /* IdentifierName */;
                    }
                case 7:
                    switch (str.charCodeAt(start)) {
                        case 98 /* b */: return (str.charCodeAt(start + 1) === 111 /* o */ && str.charCodeAt(start + 2) === 111 /* o */ && str.charCodeAt(start + 3) === 108 /* l */ && str.charCodeAt(start + 4) === 101 /* e */ && str.charCodeAt(start + 5) === 97 /* a */ && str.charCodeAt(start + 6) === 110 /* n */) ? 65 /* BooleanKeyword */ : 9 /* IdentifierName */;
                        case 100 /* d */:
                            switch (str.charCodeAt(start + 1)) {
                                case 101 /* e */:
                                    switch (str.charCodeAt(start + 2)) {
                                        case 99 /* c */: return (str.charCodeAt(start + 3) === 108 /* l */ && str.charCodeAt(start + 4) === 97 /* a */ && str.charCodeAt(start + 5) === 114 /* r */ && str.charCodeAt(start + 6) === 101 /* e */) ? 67 /* DeclareKeyword */ : 9 /* IdentifierName */;
                                        case 102 /* f */: return (str.charCodeAt(start + 3) === 97 /* a */ && str.charCodeAt(start + 4) === 117 /* u */ && str.charCodeAt(start + 5) === 108 /* l */ && str.charCodeAt(start + 6) === 116 /* t */) ? 22 /* DefaultKeyword */ : 9 /* IdentifierName */;
                                        default: return 9 /* IdentifierName */;
                                    }
                                default: return 9 /* IdentifierName */;
                            }
                        case 101 /* e */: return (str.charCodeAt(start + 1) === 120 /* x */ && str.charCodeAt(start + 2) === 116 /* t */ && str.charCodeAt(start + 3) === 101 /* e */ && str.charCodeAt(start + 4) === 110 /* n */ && str.charCodeAt(start + 5) === 100 /* d */ && str.charCodeAt(start + 6) === 115 /* s */) ? 50 /* ExtendsKeyword */ : 9 /* IdentifierName */;
                        case 102 /* f */: return (str.charCodeAt(start + 1) === 105 /* i */ && str.charCodeAt(start + 2) === 110 /* n */ && str.charCodeAt(start + 3) === 97 /* a */ && str.charCodeAt(start + 4) === 108 /* l */ && str.charCodeAt(start + 5) === 108 /* l */ && str.charCodeAt(start + 6) === 121 /* y */) ? 27 /* FinallyKeyword */ : 9 /* IdentifierName */;
                        case 112 /* p */:
                            switch (str.charCodeAt(start + 1)) {
                                case 97 /* a */: return (str.charCodeAt(start + 2) === 99 /* c */ && str.charCodeAt(start + 3) === 107 /* k */ && str.charCodeAt(start + 4) === 97 /* a */ && str.charCodeAt(start + 5) === 103 /* g */ && str.charCodeAt(start + 6) === 101 /* e */) ? 56 /* PackageKeyword */ : 9 /* IdentifierName */;
                                case 114 /* r */: return (str.charCodeAt(start + 2) === 105 /* i */ && str.charCodeAt(start + 3) === 118 /* v */ && str.charCodeAt(start + 4) === 97 /* a */ && str.charCodeAt(start + 5) === 116 /* t */ && str.charCodeAt(start + 6) === 101 /* e */) ? 57 /* PrivateKeyword */ : 9 /* IdentifierName */;
                                default: return 9 /* IdentifierName */;
                            }
                        case 114 /* r */: return (str.charCodeAt(start + 1) === 101 /* e */ && str.charCodeAt(start + 2) === 113 /* q */ && str.charCodeAt(start + 3) === 117 /* u */ && str.charCodeAt(start + 4) === 105 /* i */ && str.charCodeAt(start + 5) === 114 /* r */ && str.charCodeAt(start + 6) === 101 /* e */) ? 70 /* RequireKeyword */ : 9 /* IdentifierName */;
                        default: return 9 /* IdentifierName */;
                    }
                case 8:
                    switch (str.charCodeAt(start)) {
                        case 99 /* c */: return (str.charCodeAt(start + 1) === 111 /* o */ && str.charCodeAt(start + 2) === 110 /* n */ && str.charCodeAt(start + 3) === 116 /* t */ && str.charCodeAt(start + 4) === 105 /* i */ && str.charCodeAt(start + 5) === 110 /* n */ && str.charCodeAt(start + 6) === 117 /* u */ && str.charCodeAt(start + 7) === 101 /* e */) ? 20 /* ContinueKeyword */ : 9 /* IdentifierName */;
                        case 100 /* d */: return (str.charCodeAt(start + 1) === 101 /* e */ && str.charCodeAt(start + 2) === 98 /* b */ && str.charCodeAt(start + 3) === 117 /* u */ && str.charCodeAt(start + 4) === 103 /* g */ && str.charCodeAt(start + 5) === 103 /* g */ && str.charCodeAt(start + 6) === 101 /* e */ && str.charCodeAt(start + 7) === 114 /* r */) ? 21 /* DebuggerKeyword */ : 9 /* IdentifierName */;
                        case 102 /* f */: return (str.charCodeAt(start + 1) === 117 /* u */ && str.charCodeAt(start + 2) === 110 /* n */ && str.charCodeAt(start + 3) === 99 /* c */ && str.charCodeAt(start + 4) === 116 /* t */ && str.charCodeAt(start + 5) === 105 /* i */ && str.charCodeAt(start + 6) === 111 /* o */ && str.charCodeAt(start + 7) === 110 /* n */) ? 29 /* FunctionKeyword */ : 9 /* IdentifierName */;
                        default: return 9 /* IdentifierName */;
                    }
                case 9:
                    switch (str.charCodeAt(start)) {
                        case 105 /* i */: return (str.charCodeAt(start + 1) === 110 /* n */ && str.charCodeAt(start + 2) === 116 /* t */ && str.charCodeAt(start + 3) === 101 /* e */ && str.charCodeAt(start + 4) === 114 /* r */ && str.charCodeAt(start + 5) === 102 /* f */ && str.charCodeAt(start + 6) === 97 /* a */ && str.charCodeAt(start + 7) === 99 /* c */ && str.charCodeAt(start + 8) === 101 /* e */) ? 54 /* InterfaceKeyword */ : 9 /* IdentifierName */;
                        case 112 /* p */: return (str.charCodeAt(start + 1) === 114 /* r */ && str.charCodeAt(start + 2) === 111 /* o */ && str.charCodeAt(start + 3) === 116 /* t */ && str.charCodeAt(start + 4) === 101 /* e */ && str.charCodeAt(start + 5) === 99 /* c */ && str.charCodeAt(start + 6) === 116 /* t */ && str.charCodeAt(start + 7) === 101 /* e */ && str.charCodeAt(start + 8) === 100 /* d */) ? 58 /* ProtectedKeyword */ : 9 /* IdentifierName */;
                        default: return 9 /* IdentifierName */;
                    }
                case 10:
                    switch (str.charCodeAt(start)) {
                        case 105 /* i */:
                            switch (str.charCodeAt(start + 1)) {
                                case 109 /* m */: return (str.charCodeAt(start + 2) === 112 /* p */ && str.charCodeAt(start + 3) === 108 /* l */ && str.charCodeAt(start + 4) === 101 /* e */ && str.charCodeAt(start + 5) === 109 /* m */ && str.charCodeAt(start + 6) === 101 /* e */ && str.charCodeAt(start + 7) === 110 /* n */ && str.charCodeAt(start + 8) === 116 /* t */ && str.charCodeAt(start + 9) === 115 /* s */) ? 53 /* ImplementsKeyword */ : 9 /* IdentifierName */;
                                case 110 /* n */: return (str.charCodeAt(start + 2) === 115 /* s */ && str.charCodeAt(start + 3) === 116 /* t */ && str.charCodeAt(start + 4) === 97 /* a */ && str.charCodeAt(start + 5) === 110 /* n */ && str.charCodeAt(start + 6) === 99 /* c */ && str.charCodeAt(start + 7) === 101 /* e */ && str.charCodeAt(start + 8) === 111 /* o */ && str.charCodeAt(start + 9) === 102 /* f */) ? 32 /* InstanceOfKeyword */ : 9 /* IdentifierName */;
                                default: return 9 /* IdentifierName */;
                            }
                        default: return 9 /* IdentifierName */;
                    }
                case 11: return (str.charCodeAt(start) === 99 /* c */ && str.charCodeAt(start + 1) === 111 /* o */ && str.charCodeAt(start + 2) === 110 /* n */ && str.charCodeAt(start + 3) === 115 /* s */ && str.charCodeAt(start + 4) === 116 /* t */ && str.charCodeAt(start + 5) === 114 /* r */ && str.charCodeAt(start + 6) === 117 /* u */ && str.charCodeAt(start + 7) === 99 /* c */ && str.charCodeAt(start + 8) === 116 /* t */ && str.charCodeAt(start + 9) === 111 /* o */ && str.charCodeAt(start + 10) === 114 /* r */) ? 66 /* ConstructorKeyword */ : 9 /* IdentifierName */;
                default: return 9 /* IdentifierName */;
            }
        }
        ScannerUtilities.identifierKind = identifierKind;
    })(ScannerUtilities = TypeScript.ScannerUtilities || (TypeScript.ScannerUtilities = {}));
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var Scanner;
    (function (Scanner) {
        TypeScript.Debug.assert(124 /* LastToken */ <= 127);
        var ScannerConstants;
        (function (ScannerConstants) {
            ScannerConstants[ScannerConstants["LargeTokenFullWidthShift"] = 3] = "LargeTokenFullWidthShift";
            ScannerConstants[ScannerConstants["WhitespaceTrivia"] = 0x01] = "WhitespaceTrivia";
            ScannerConstants[ScannerConstants["NewlineTrivia"] = 0x02] = "NewlineTrivia";
            ScannerConstants[ScannerConstants["CommentTrivia"] = 0x04] = "CommentTrivia";
            ScannerConstants[ScannerConstants["TriviaMask"] = 0x07] = "TriviaMask";
            ScannerConstants[ScannerConstants["KindMask"] = 0x7F] = "KindMask";
            ScannerConstants[ScannerConstants["IsVariableWidthMask"] = 0x80] = "IsVariableWidthMask";
        })(ScannerConstants || (ScannerConstants = {}));
        function largeTokenPackData(fullWidth, leadingTriviaInfo) {
            return (fullWidth << 3 /* LargeTokenFullWidthShift */) | leadingTriviaInfo;
        }
        function largeTokenUnpackFullWidth(packedFullWidthAndInfo) {
            return packedFullWidthAndInfo >> 3 /* LargeTokenFullWidthShift */;
        }
        function largeTokenUnpackLeadingTriviaInfo(packedFullWidthAndInfo) {
            return packedFullWidthAndInfo & 7 /* TriviaMask */;
        }
        function largeTokenUnpackHasLeadingTrivia(packed) {
            return largeTokenUnpackLeadingTriviaInfo(packed) !== 0;
        }
        function hasComment(info) {
            return (info & 4 /* CommentTrivia */) !== 0;
        }
        function hasNewLine(info) {
            return (info & 2 /* NewlineTrivia */) !== 0;
        }
        function largeTokenUnpackHasLeadingNewLine(packed) {
            return hasNewLine(largeTokenUnpackLeadingTriviaInfo(packed));
        }
        function largeTokenUnpackHasLeadingComment(packed) {
            return hasComment(largeTokenUnpackLeadingTriviaInfo(packed));
        }
        var isKeywordStartCharacter = TypeScript.ArrayUtilities.createArray(127 /* maxAsciiCharacter */, 0);
        var isIdentifierStartCharacter = TypeScript.ArrayUtilities.createArray(127 /* maxAsciiCharacter */, false);
        var isIdentifierPartCharacter = TypeScript.ArrayUtilities.createArray(127 /* maxAsciiCharacter */, false);
        for (var character = 0; character < 127 /* maxAsciiCharacter */; character++) {
            if ((character >= 97 /* a */ && character <= 122 /* z */) || (character >= 65 /* A */ && character <= 90 /* Z */) || character === 95 /* _ */ || character === 36 /* $ */) {
                isIdentifierStartCharacter[character] = true;
                isIdentifierPartCharacter[character] = true;
            }
            else if (character >= 48 /* _0 */ && character <= 57 /* _9 */) {
                isIdentifierPartCharacter[character] = true;
            }
        }
        for (var keywordKind = 17 /* FirstKeyword */; keywordKind <= 74 /* LastKeyword */; keywordKind++) {
            var keyword = TypeScript.SyntaxFacts.getText(keywordKind);
            isKeywordStartCharacter[keyword.charCodeAt(0)] = 1;
        }
        function isContextualToken(token) {
            switch (token.kind) {
                case 10 /* RegularExpressionLiteral */:
                case 101 /* GreaterThanGreaterThanToken */:
                case 102 /* GreaterThanGreaterThanGreaterThanToken */:
                case 88 /* GreaterThanEqualsToken */:
                case 118 /* GreaterThanGreaterThanEqualsToken */:
                case 119 /* GreaterThanGreaterThanGreaterThanEqualsToken */:
                    return true;
                case 15 /* TemplateMiddleToken */:
                case 16 /* TemplateEndToken */:
                    return true;
                default:
                    return token.isKeywordConvertedToIdentifier();
            }
        }
        Scanner.isContextualToken = isContextualToken;
        var lastTokenInfo = { leadingTriviaWidth: -1 };
        var lastTokenInfoTokenID = -1;
        var triviaScanner = createScannerInternal(2 /* Latest */, TypeScript.SimpleText.fromString(""), function () {
        });
        function fillSizeInfo(token, text) {
            if (lastTokenInfoTokenID !== TypeScript.syntaxID(token)) {
                triviaScanner.fillTokenInfo(token, text, lastTokenInfo);
                lastTokenInfoTokenID = TypeScript.syntaxID(token);
            }
        }
        function fullText(token, text) {
            return text.substr(token.fullStart(), token.fullWidth());
        }
        function leadingTrivia(token, text) {
            if (!token.hasLeadingTrivia()) {
                return TypeScript.Syntax.emptyTriviaList;
            }
            return triviaScanner.scanTrivia(token, text);
        }
        function leadingTriviaWidth(token, text) {
            if (!token.hasLeadingTrivia()) {
                return 0;
            }
            fillSizeInfo(token, text);
            return lastTokenInfo.leadingTriviaWidth;
        }
        function tokenIsIncrementallyUnusable(token) {
            return false;
        }
        var FixedWidthTokenWithNoTrivia = (function () {
            function FixedWidthTokenWithNoTrivia(_fullStart, kind) {
                this._fullStart = _fullStart;
                this.kind = kind;
                TypeScript.Debug.assert(!isNaN(_fullStart));
            }
            FixedWidthTokenWithNoTrivia.prototype.setFullStart = function (fullStart) {
                this._fullStart = fullStart;
            };
            FixedWidthTokenWithNoTrivia.prototype.childAt = function (index) {
                throw TypeScript.Errors.invalidOperation();
            };
            FixedWidthTokenWithNoTrivia.prototype.isIncrementallyUnusable = function () {
                return false;
            };
            FixedWidthTokenWithNoTrivia.prototype.isKeywordConvertedToIdentifier = function () {
                return false;
            };
            FixedWidthTokenWithNoTrivia.prototype.fullText = function () {
                return TypeScript.SyntaxFacts.getText(this.kind);
            };
            FixedWidthTokenWithNoTrivia.prototype.text = function () {
                return this.fullText();
            };
            FixedWidthTokenWithNoTrivia.prototype.leadingTrivia = function () {
                return TypeScript.Syntax.emptyTriviaList;
            };
            FixedWidthTokenWithNoTrivia.prototype.leadingTriviaWidth = function () {
                return 0;
            };
            FixedWidthTokenWithNoTrivia.prototype.fullWidth = function () {
                return fixedWidthTokenLength(this.kind);
            };
            FixedWidthTokenWithNoTrivia.prototype.fullStart = function () {
                return this._fullStart;
            };
            FixedWidthTokenWithNoTrivia.prototype.hasLeadingTrivia = function () {
                return false;
            };
            FixedWidthTokenWithNoTrivia.prototype.hasLeadingNewLine = function () {
                return false;
            };
            FixedWidthTokenWithNoTrivia.prototype.hasLeadingSkippedToken = function () {
                return false;
            };
            FixedWidthTokenWithNoTrivia.prototype.hasLeadingComment = function () {
                return false;
            };
            FixedWidthTokenWithNoTrivia.prototype.clone = function () {
                return new FixedWidthTokenWithNoTrivia(this._fullStart, this.kind);
            };
            return FixedWidthTokenWithNoTrivia;
        })();
        FixedWidthTokenWithNoTrivia.prototype.childCount = 0;
        var LargeScannerToken = (function () {
            function LargeScannerToken(_fullStart, kind, _packedFullWidthAndInfo, cachedText) {
                this._fullStart = _fullStart;
                this.kind = kind;
                this._packedFullWidthAndInfo = _packedFullWidthAndInfo;
                TypeScript.Debug.assert(!isNaN(_fullStart));
                if (cachedText !== undefined) {
                    this.cachedText = cachedText;
                }
            }
            LargeScannerToken.prototype.setFullStart = function (fullStart) {
                this._fullStart = fullStart;
            };
            LargeScannerToken.prototype.childAt = function (index) {
                throw TypeScript.Errors.invalidOperation();
            };
            LargeScannerToken.prototype.syntaxTreeText = function (text) {
                var result = text || TypeScript.syntaxTree(this).text;
                TypeScript.Debug.assert(result);
                return result;
            };
            LargeScannerToken.prototype.isIncrementallyUnusable = function () {
                return tokenIsIncrementallyUnusable(this);
            };
            LargeScannerToken.prototype.isKeywordConvertedToIdentifier = function () {
                return false;
            };
            LargeScannerToken.prototype.fullText = function (text) {
                return fullText(this, this.syntaxTreeText(text));
            };
            LargeScannerToken.prototype.text = function () {
                var cachedText = this.cachedText;
                return cachedText !== undefined ? cachedText : TypeScript.SyntaxFacts.getText(this.kind);
            };
            LargeScannerToken.prototype.leadingTrivia = function (text) {
                return leadingTrivia(this, this.syntaxTreeText(text));
            };
            LargeScannerToken.prototype.leadingTriviaWidth = function (text) {
                return leadingTriviaWidth(this, this.syntaxTreeText(text));
            };
            LargeScannerToken.prototype.fullWidth = function () {
                return largeTokenUnpackFullWidth(this._packedFullWidthAndInfo);
            };
            LargeScannerToken.prototype.fullStart = function () {
                return this._fullStart;
            };
            LargeScannerToken.prototype.hasLeadingTrivia = function () {
                return largeTokenUnpackHasLeadingTrivia(this._packedFullWidthAndInfo);
            };
            LargeScannerToken.prototype.hasLeadingNewLine = function () {
                return largeTokenUnpackHasLeadingNewLine(this._packedFullWidthAndInfo);
            };
            LargeScannerToken.prototype.hasLeadingComment = function () {
                return largeTokenUnpackHasLeadingComment(this._packedFullWidthAndInfo);
            };
            LargeScannerToken.prototype.hasLeadingSkippedToken = function () {
                return false;
            };
            LargeScannerToken.prototype.clone = function () {
                return new LargeScannerToken(this._fullStart, this.kind, this._packedFullWidthAndInfo, this.cachedText);
            };
            return LargeScannerToken;
        })();
        LargeScannerToken.prototype.childCount = 0;
        function createScanner(languageVersion, text, reportDiagnostic) {
            var scanner = createScannerInternal(languageVersion, text, reportDiagnostic);
            return {
                setIndex: scanner.setIndex,
                scan: scanner.scan
            };
        }
        Scanner.createScanner = createScanner;
        function createScannerInternal(languageVersion, text, reportDiagnostic) {
            var str;
            var index;
            var start;
            var end;
            function setIndex(_index) {
                index = _index;
            }
            function reset(_text, _start, _end) {
                var textLength = _text.length();
                TypeScript.Debug.assert(_start <= textLength, "Token's start was not within the bounds of text.");
                TypeScript.Debug.assert(_end <= textLength, "Token's end was not within the bounds of text:");
                if (!str || text !== _text) {
                    text = _text;
                    str = _text.substr(0, textLength);
                }
                start = _start;
                end = _end;
                index = _start;
            }
            function scan(allowContextualToken) {
                var fullStart = index;
                var leadingTriviaInfo = scanTriviaInfo();
                var start = index;
                var kindAndIsVariableWidth = scanSyntaxKind(allowContextualToken);
                var fullEnd = index;
                var fullWidth = fullEnd - fullStart;
                var kind = kindAndIsVariableWidth & 127 /* KindMask */;
                var isFixedWidth = kind >= 17 /* FirstFixedWidth */ && kind <= 124 /* LastFixedWidth */ && ((kindAndIsVariableWidth & 128 /* IsVariableWidthMask */) === 0);
                if (isFixedWidth && leadingTriviaInfo === 0) {
                    return new FixedWidthTokenWithNoTrivia(fullStart, kind);
                }
                else {
                    var packedFullWidthAndInfo = largeTokenPackData(fullWidth, leadingTriviaInfo);
                    var cachedText = isFixedWidth ? undefined : text.substr(start, fullEnd - start);
                    return new LargeScannerToken(fullStart, kind, packedFullWidthAndInfo, cachedText);
                }
            }
            function scanTrivia(parent, text) {
                var tokenFullStart = parent.fullStart();
                var tokenStart = tokenFullStart + leadingTriviaWidth(parent, text);
                reset(text, tokenFullStart, tokenStart);
                var trivia = [];
                while (true) {
                    if (index < end) {
                        var ch = str.charCodeAt(index);
                        switch (ch) {
                            case 32 /* space */:
                            case 160 /* nonBreakingSpace */:
                            case 8192 /* enQuad */:
                            case 8193 /* emQuad */:
                            case 8194 /* enSpace */:
                            case 8195 /* emSpace */:
                            case 8196 /* threePerEmSpace */:
                            case 8197 /* fourPerEmSpace */:
                            case 8198 /* sixPerEmSpace */:
                            case 8199 /* figureSpace */:
                            case 8200 /* punctuationSpace */:
                            case 8201 /* thinSpace */:
                            case 8202 /* hairSpace */:
                            case 8203 /* zeroWidthSpace */:
                            case 8239 /* narrowNoBreakSpace */:
                            case 12288 /* ideographicSpace */:
                            case 9 /* tab */:
                            case 11 /* verticalTab */:
                            case 12 /* formFeed */:
                            case 65279 /* byteOrderMark */:
                                trivia.push(scanWhitespaceTrivia());
                                continue;
                            case 47 /* slash */:
                                var ch2 = str.charCodeAt(index + 1);
                                if (ch2 === 47 /* slash */) {
                                    trivia.push(scanSingleLineCommentTrivia());
                                    continue;
                                }
                                if (ch2 === 42 /* asterisk */) {
                                    trivia.push(scanMultiLineCommentTrivia());
                                    continue;
                                }
                                throw TypeScript.Errors.invalidOperation();
                            case 13 /* carriageReturn */:
                            case 10 /* lineFeed */:
                            case 8233 /* paragraphSeparator */:
                            case 8232 /* lineSeparator */:
                                trivia.push(scanLineTerminatorSequenceTrivia(ch));
                                continue;
                            default:
                                throw TypeScript.Errors.invalidOperation();
                        }
                    }
                    var triviaList = TypeScript.Syntax.triviaList(trivia);
                    triviaList.parent = parent;
                    return triviaList;
                }
            }
            function scanTriviaInfo() {
                var result = 0;
                var _end = end;
                while (index < _end) {
                    var ch = str.charCodeAt(index);
                    switch (ch) {
                        case 9 /* tab */:
                        case 32 /* space */:
                        case 11 /* verticalTab */:
                        case 12 /* formFeed */:
                            index++;
                            result |= 1 /* WhitespaceTrivia */;
                            continue;
                        case 13 /* carriageReturn */:
                            if ((index + 1) < end && str.charCodeAt(index + 1) === 10 /* lineFeed */) {
                                index++;
                            }
                        case 10 /* lineFeed */:
                        case 8233 /* paragraphSeparator */:
                        case 8232 /* lineSeparator */:
                            index++;
                            result |= 2 /* NewlineTrivia */;
                            continue;
                        case 47 /* slash */:
                            if ((index + 1) < _end) {
                                var ch2 = str.charCodeAt(index + 1);
                                if (ch2 === 47 /* slash */) {
                                    result |= 4 /* CommentTrivia */;
                                    skipSingleLineCommentTrivia();
                                    continue;
                                }
                                if (ch2 === 42 /* asterisk */) {
                                    result |= 4 /* CommentTrivia */;
                                    skipMultiLineCommentTrivia();
                                    continue;
                                }
                            }
                            return result;
                        default:
                            if (ch > 127 /* maxAsciiCharacter */ && slowScanWhitespaceTriviaInfo(ch)) {
                                result |= 1 /* WhitespaceTrivia */;
                                continue;
                            }
                            return result;
                    }
                }
                return result;
            }
            function slowScanWhitespaceTriviaInfo(ch) {
                switch (ch) {
                    case 160 /* nonBreakingSpace */:
                    case 8192 /* enQuad */:
                    case 8193 /* emQuad */:
                    case 8194 /* enSpace */:
                    case 8195 /* emSpace */:
                    case 8196 /* threePerEmSpace */:
                    case 8197 /* fourPerEmSpace */:
                    case 8198 /* sixPerEmSpace */:
                    case 8199 /* figureSpace */:
                    case 8200 /* punctuationSpace */:
                    case 8201 /* thinSpace */:
                    case 8202 /* hairSpace */:
                    case 8203 /* zeroWidthSpace */:
                    case 8239 /* narrowNoBreakSpace */:
                    case 12288 /* ideographicSpace */:
                    case 65279 /* byteOrderMark */:
                        index++;
                        return true;
                    default:
                        return false;
                }
            }
            function isNewLineCharacter(ch) {
                switch (ch) {
                    case 13 /* carriageReturn */:
                    case 10 /* lineFeed */:
                    case 8233 /* paragraphSeparator */:
                    case 8232 /* lineSeparator */:
                        return true;
                    default:
                        return false;
                }
            }
            function scanWhitespaceTrivia() {
                var absoluteStartIndex = index;
                while (true) {
                    var ch = str.charCodeAt(index);
                    switch (ch) {
                        case 32 /* space */:
                        case 160 /* nonBreakingSpace */:
                        case 8192 /* enQuad */:
                        case 8193 /* emQuad */:
                        case 8194 /* enSpace */:
                        case 8195 /* emSpace */:
                        case 8196 /* threePerEmSpace */:
                        case 8197 /* fourPerEmSpace */:
                        case 8198 /* sixPerEmSpace */:
                        case 8199 /* figureSpace */:
                        case 8200 /* punctuationSpace */:
                        case 8201 /* thinSpace */:
                        case 8202 /* hairSpace */:
                        case 8203 /* zeroWidthSpace */:
                        case 8239 /* narrowNoBreakSpace */:
                        case 12288 /* ideographicSpace */:
                        case 9 /* tab */:
                        case 11 /* verticalTab */:
                        case 12 /* formFeed */:
                        case 65279 /* byteOrderMark */:
                            index++;
                            continue;
                    }
                    break;
                }
                return createTrivia(2 /* WhitespaceTrivia */, absoluteStartIndex);
            }
            function createTrivia(kind, absoluteStartIndex) {
                var fullWidth = index - absoluteStartIndex;
                return TypeScript.Syntax.deferredTrivia(kind, text, absoluteStartIndex, fullWidth);
            }
            function scanSingleLineCommentTrivia() {
                var absoluteStartIndex = index;
                skipSingleLineCommentTrivia();
                return createTrivia(5 /* SingleLineCommentTrivia */, absoluteStartIndex);
            }
            function skipSingleLineCommentTrivia() {
                index += 2;
                while (index < end) {
                    if (isNewLineCharacter(str.charCodeAt(index))) {
                        return;
                    }
                    index++;
                }
            }
            function scanMultiLineCommentTrivia() {
                var absoluteStartIndex = index;
                skipMultiLineCommentTrivia();
                return createTrivia(4 /* MultiLineCommentTrivia */, absoluteStartIndex);
            }
            function skipMultiLineCommentTrivia() {
                var _index = index + 2;
                var _end = end;
                index += 2;
                while (true) {
                    if (_index === _end) {
                        reportDiagnostic(end, 0, TypeScript.DiagnosticCode._0_expected, ["*/"]);
                        break;
                    }
                    if ((_index + 1) < _end && str.charCodeAt(_index) === 42 /* asterisk */ && str.charCodeAt(_index + 1) === 47 /* slash */) {
                        _index += 2;
                        break;
                    }
                    _index++;
                }
                index = _index;
            }
            function scanLineTerminatorSequenceTrivia(ch) {
                var absoluteStartIndex = index;
                skipLineTerminatorSequence(ch);
                return createTrivia(3 /* NewLineTrivia */, absoluteStartIndex);
            }
            function skipLineTerminatorSequence(ch) {
                index++;
                if (ch === 13 /* carriageReturn */ && str.charCodeAt(index) === 10 /* lineFeed */) {
                    index++;
                }
            }
            function scanSyntaxKind(allowContextualToken) {
                if (index >= end) {
                    return 8 /* EndOfFileToken */;
                }
                var character = str.charCodeAt(index);
                index++;
                switch (character) {
                    case 33 /* exclamation */: return scanExclamationToken();
                    case 34 /* doubleQuote */: return scanStringLiteral(character);
                    case 37 /* percent */: return scanPercentToken();
                    case 38 /* ampersand */: return scanAmpersandToken();
                    case 39 /* singleQuote */: return scanStringLiteral(character);
                    case 40 /* openParen */: return 77 /* OpenParenToken */;
                    case 41 /* closeParen */: return 78 /* CloseParenToken */;
                    case 42 /* asterisk */: return scanAsteriskToken();
                    case 43 /* plus */: return scanPlusToken();
                    case 44 /* comma */: return 84 /* CommaToken */;
                    case 45 /* minus */: return scanMinusToken();
                    case 46 /* dot */: return scanDotToken();
                    case 47 /* slash */: return scanSlashToken(allowContextualToken);
                    case 48 /* _0 */:
                    case 49 /* _1 */:
                    case 50 /* _2 */:
                    case 51 /* _3 */:
                    case 52 /* _4 */:
                    case 53 /* _5 */:
                    case 54 /* _6 */:
                    case 55 /* _7 */:
                    case 56 /* _8 */:
                    case 57 /* _9 */:
                        return scanNumericLiteral(character);
                    case 58 /* colon */: return 111 /* ColonToken */;
                    case 59 /* semicolon */: return 83 /* SemicolonToken */;
                    case 60 /* lessThan */: return scanLessThanToken();
                    case 61 /* equals */: return scanEqualsToken();
                    case 62 /* greaterThan */: return scanGreaterThanToken(allowContextualToken);
                    case 63 /* question */: return 110 /* QuestionToken */;
                    case 91 /* openBracket */: return 79 /* OpenBracketToken */;
                    case 93 /* closeBracket */: return 80 /* CloseBracketToken */;
                    case 94 /* caret */: return scanCaretToken();
                    case 96 /* backtick */: return scanTemplateToken(character);
                    case 123 /* openBrace */: return 75 /* OpenBraceToken */;
                    case 124 /* bar */: return scanBarToken();
                    case 125 /* closeBrace */: return scanCloseBraceToken(allowContextualToken, character);
                    case 126 /* tilde */: return 107 /* TildeToken */;
                }
                if (isIdentifierStartCharacter[character]) {
                    var result = tryFastScanIdentifierOrKeyword(character);
                    if (result !== 0 /* None */) {
                        return result;
                    }
                }
                index--;
                if (isIdentifierStart(peekCharOrUnicodeEscape())) {
                    return slowScanIdentifierOrKeyword();
                }
                var text = String.fromCharCode(character);
                var messageText = getErrorMessageText(text);
                reportDiagnostic(index, 1, TypeScript.DiagnosticCode.Unexpected_character_0, [messageText]);
                index++;
                return 7 /* ErrorToken */;
            }
            function isIdentifierStart(interpretedChar) {
                if (isIdentifierStartCharacter[interpretedChar]) {
                    return true;
                }
                return interpretedChar > 127 /* maxAsciiCharacter */ && TypeScript.Unicode.isIdentifierStart(interpretedChar, languageVersion);
            }
            function isIdentifierPart(interpretedChar) {
                if (isIdentifierPartCharacter[interpretedChar]) {
                    return true;
                }
                return interpretedChar > 127 /* maxAsciiCharacter */ && TypeScript.Unicode.isIdentifierPart(interpretedChar, languageVersion);
            }
            function tryFastScanIdentifierOrKeyword(firstCharacter) {
                var startIndex = index;
                var character = firstCharacter;
                while (index < end) {
                    character = str.charCodeAt(index);
                    if (!isIdentifierPartCharacter[character]) {
                        break;
                    }
                    index++;
                }
                if (index < end && (character === 92 /* backslash */ || character > 127 /* maxAsciiCharacter */)) {
                    index = startIndex;
                    return 0 /* None */;
                }
                else {
                    if (isKeywordStartCharacter[firstCharacter]) {
                        return TypeScript.ScannerUtilities.identifierKind(str, startIndex - 1, index - startIndex + 1);
                    }
                    else {
                        return 9 /* IdentifierName */;
                    }
                }
            }
            function slowScanIdentifierOrKeyword() {
                var startIndex = index;
                do {
                    scanCharOrUnicodeEscape();
                } while (isIdentifierPart(peekCharOrUnicodeEscape()));
                var length = index - startIndex;
                var text = str.substr(startIndex, length);
                var valueText = TypeScript.massageEscapes(text);
                var keywordKind = TypeScript.SyntaxFacts.getTokenKind(valueText);
                if (keywordKind >= 17 /* FirstKeyword */ && keywordKind <= 74 /* LastKeyword */) {
                    return keywordKind | 128 /* IsVariableWidthMask */;
                }
                return 9 /* IdentifierName */;
            }
            function scanNumericLiteral(ch) {
                if (isHexNumericLiteral(ch)) {
                    scanHexNumericLiteral();
                }
                else if (isOctalNumericLiteral(ch)) {
                    scanOctalNumericLiteral();
                }
                else {
                    scanDecimalNumericLiteral();
                }
                return 11 /* NumericLiteral */;
            }
            function isOctalNumericLiteral(ch) {
                return ch === 48 /* _0 */ && TypeScript.CharacterInfo.isOctalDigit(str.charCodeAt(index));
            }
            function scanOctalNumericLiteral() {
                var start = index - 1;
                while (TypeScript.CharacterInfo.isOctalDigit(str.charCodeAt(index))) {
                    index++;
                }
                if (languageVersion >= 1 /* ES5 */) {
                    reportDiagnostic(start, index - start, TypeScript.DiagnosticCode.Octal_literals_are_not_available_when_targeting_ECMAScript_5_and_higher, undefined);
                }
            }
            function scanDecimalDigits() {
                while (TypeScript.CharacterInfo.isDecimalDigit(str.charCodeAt(index))) {
                    index++;
                }
            }
            function scanDecimalNumericLiteral() {
                scanDecimalDigits();
                if (str.charCodeAt(index) === 46 /* dot */) {
                    index++;
                }
                scanDecimalNumericLiteralAfterDot();
            }
            function scanDecimalNumericLiteralAfterDot() {
                scanDecimalDigits();
                var ch = str.charCodeAt(index);
                if (ch === 101 /* e */ || ch === 69 /* E */) {
                    var nextChar1 = str.charCodeAt(index + 1);
                    if (TypeScript.CharacterInfo.isDecimalDigit(nextChar1)) {
                        index++;
                        scanDecimalDigits();
                    }
                    else if (nextChar1 === 45 /* minus */ || nextChar1 === 43 /* plus */) {
                        var nextChar2 = str.charCodeAt(index + 2);
                        if (TypeScript.CharacterInfo.isDecimalDigit(nextChar2)) {
                            index += 2;
                            scanDecimalDigits();
                        }
                    }
                }
            }
            function scanHexNumericLiteral() {
                index++;
                while (TypeScript.CharacterInfo.isHexDigit(str.charCodeAt(index))) {
                    index++;
                }
            }
            function isHexNumericLiteral(ch) {
                if (ch === 48 /* _0 */) {
                    var ch = str.charCodeAt(index);
                    if (ch === 120 /* x */ || ch === 88 /* X */) {
                        return TypeScript.CharacterInfo.isHexDigit(str.charCodeAt(index + 1));
                    }
                }
                return false;
            }
            function scanLessThanToken() {
                var ch0 = str.charCodeAt(index);
                if (ch0 === 61 /* equals */) {
                    index++;
                    return 87 /* LessThanEqualsToken */;
                }
                else if (ch0 === 60 /* lessThan */) {
                    index++;
                    if (str.charCodeAt(index) === 61 /* equals */) {
                        index++;
                        return 117 /* LessThanLessThanEqualsToken */;
                    }
                    else {
                        return 100 /* LessThanLessThanToken */;
                    }
                }
                else {
                    return 85 /* LessThanToken */;
                }
            }
            function scanGreaterThanToken(allowContextualToken) {
                if (allowContextualToken) {
                    var ch0 = str.charCodeAt(index);
                    if (ch0 === 62 /* greaterThan */) {
                        index++;
                        var ch1 = str.charCodeAt(index);
                        if (ch1 === 62 /* greaterThan */) {
                            index++;
                            var ch2 = str.charCodeAt(index);
                            if (ch2 === 61 /* equals */) {
                                index++;
                                return 119 /* GreaterThanGreaterThanGreaterThanEqualsToken */;
                            }
                            else {
                                return 102 /* GreaterThanGreaterThanGreaterThanToken */;
                            }
                        }
                        else if (ch1 === 61 /* equals */) {
                            index++;
                            return 118 /* GreaterThanGreaterThanEqualsToken */;
                        }
                        else {
                            return 101 /* GreaterThanGreaterThanToken */;
                        }
                    }
                    else if (ch0 === 61 /* equals */) {
                        index++;
                        return 88 /* GreaterThanEqualsToken */;
                    }
                }
                return 86 /* GreaterThanToken */;
            }
            function scanBarToken() {
                var ch = str.charCodeAt(index);
                if (ch === 61 /* equals */) {
                    index++;
                    return 121 /* BarEqualsToken */;
                }
                else if (ch === 124 /* bar */) {
                    index++;
                    return 109 /* BarBarToken */;
                }
                else {
                    return 104 /* BarToken */;
                }
            }
            function scanCaretToken() {
                if (str.charCodeAt(index) === 61 /* equals */) {
                    index++;
                    return 122 /* CaretEqualsToken */;
                }
                else {
                    return 105 /* CaretToken */;
                }
            }
            function scanCloseBraceToken(allowContextualToken, startChar) {
                return allowContextualToken ? scanTemplateToken(startChar) : 76 /* CloseBraceToken */;
            }
            function scanTemplateToken(startChar) {
                var startedWithBacktick = startChar === 96 /* backtick */;
                while (true) {
                    if (index === end) {
                        reportDiagnostic(end, 0, TypeScript.DiagnosticCode.Unterminated_template_literal);
                        break;
                    }
                    var ch = str.charCodeAt(index);
                    index++;
                    if (ch === 96 /* backtick */) {
                        break;
                    }
                    if (ch === 36 /* $ */ && index < end && str.charCodeAt(index) === 123 /* openBrace */) {
                        index++;
                        return startedWithBacktick ? 14 /* TemplateStartToken */ : 15 /* TemplateMiddleToken */;
                    }
                }
                return startedWithBacktick ? 13 /* NoSubstitutionTemplateToken */ : 16 /* TemplateEndToken */;
            }
            function scanAmpersandToken() {
                var character = str.charCodeAt(index);
                if (character === 61 /* equals */) {
                    index++;
                    return 120 /* AmpersandEqualsToken */;
                }
                else if (character === 38 /* ampersand */) {
                    index++;
                    return 108 /* AmpersandAmpersandToken */;
                }
                else {
                    return 103 /* AmpersandToken */;
                }
            }
            function scanPercentToken() {
                if (str.charCodeAt(index) === 61 /* equals */) {
                    index++;
                    return 116 /* PercentEqualsToken */;
                }
                else {
                    return 97 /* PercentToken */;
                }
            }
            function scanMinusToken() {
                var character = str.charCodeAt(index);
                if (character === 61 /* equals */) {
                    index++;
                    return 114 /* MinusEqualsToken */;
                }
                else if (character === 45 /* minus */) {
                    index++;
                    return 99 /* MinusMinusToken */;
                }
                else {
                    return 95 /* MinusToken */;
                }
            }
            function scanPlusToken() {
                var character = str.charCodeAt(index);
                if (character === 61 /* equals */) {
                    index++;
                    return 113 /* PlusEqualsToken */;
                }
                else if (character === 43 /* plus */) {
                    index++;
                    return 98 /* PlusPlusToken */;
                }
                else {
                    return 94 /* PlusToken */;
                }
            }
            function scanAsteriskToken() {
                if (str.charCodeAt(index) === 61 /* equals */) {
                    index++;
                    return 115 /* AsteriskEqualsToken */;
                }
                else {
                    return 96 /* AsteriskToken */;
                }
            }
            function scanEqualsToken() {
                var character = str.charCodeAt(index);
                if (character === 61 /* equals */) {
                    index++;
                    if (str.charCodeAt(index) === 61 /* equals */) {
                        index++;
                        return 92 /* EqualsEqualsEqualsToken */;
                    }
                    else {
                        return 89 /* EqualsEqualsToken */;
                    }
                }
                else if (character === 62 /* greaterThan */) {
                    index++;
                    return 90 /* EqualsGreaterThanToken */;
                }
                else {
                    return 112 /* EqualsToken */;
                }
            }
            function scanDotToken() {
                var nextChar = str.charCodeAt(index);
                if (TypeScript.CharacterInfo.isDecimalDigit(nextChar)) {
                    scanDecimalNumericLiteralAfterDot();
                    return 11 /* NumericLiteral */;
                }
                if (nextChar === 46 /* dot */ && str.charCodeAt(index + 1) === 46 /* dot */) {
                    index += 2;
                    return 82 /* DotDotDotToken */;
                }
                else {
                    return 81 /* DotToken */;
                }
            }
            function scanSlashToken(allowContextualToken) {
                if (allowContextualToken) {
                    return scanRegularExpressionToken();
                }
                if (str.charCodeAt(index) === 61 /* equals */) {
                    index++;
                    return 124 /* SlashEqualsToken */;
                }
                else {
                    return 123 /* SlashToken */;
                }
            }
            function scanRegularExpressionToken() {
                var startIndex = index;
                var inEscape = false;
                var inCharacterClass = false;
                while (true) {
                    var ch = str.charCodeAt(index);
                    if (isNaN(ch) || isNewLineCharacter(ch)) {
                        reportDiagnostic(index, 0, TypeScript.DiagnosticCode.Unterminated_regular_expression_literal);
                        break;
                    }
                    index++;
                    if (inEscape) {
                        inEscape = false;
                        continue;
                    }
                    switch (ch) {
                        case 92 /* backslash */:
                            inEscape = true;
                            continue;
                        case 91 /* openBracket */:
                            inCharacterClass = true;
                            continue;
                        case 93 /* closeBracket */:
                            inCharacterClass = false;
                            continue;
                        case 47 /* slash */:
                            if (inCharacterClass) {
                                continue;
                            }
                            break;
                        default:
                            continue;
                    }
                    break;
                }
                while (index < end && isIdentifierPartCharacter[str.charCodeAt(index)]) {
                    index++;
                }
                return 10 /* RegularExpressionLiteral */;
            }
            function scanExclamationToken() {
                if (str.charCodeAt(index) === 61 /* equals */) {
                    index++;
                    if (str.charCodeAt(index) === 61 /* equals */) {
                        index++;
                        return 93 /* ExclamationEqualsEqualsToken */;
                    }
                    else {
                        return 91 /* ExclamationEqualsToken */;
                    }
                }
                else {
                    return 106 /* ExclamationToken */;
                }
            }
            function getErrorMessageText(text) {
                if (text === "\\") {
                    return '"\\"';
                }
                return JSON.stringify(text);
            }
            function skipEscapeSequence() {
                var rewindPoint = index;
                index++;
                var ch = str.charCodeAt(index);
                if (isNaN(ch)) {
                    return;
                }
                index++;
                switch (ch) {
                    case 120 /* x */:
                    case 117 /* u */:
                        index = rewindPoint;
                        var value = scanUnicodeOrHexEscape(true);
                        break;
                    case 13 /* carriageReturn */:
                        if (str.charCodeAt(index) === 10 /* lineFeed */) {
                            index++;
                        }
                        break;
                    default:
                        break;
                }
            }
            function scanStringLiteral(quoteCharacter) {
                while (true) {
                    var ch = str.charCodeAt(index);
                    if (ch === 92 /* backslash */) {
                        skipEscapeSequence();
                    }
                    else if (ch === quoteCharacter) {
                        index++;
                        break;
                    }
                    else if (isNaN(ch) || isNewLineCharacter(ch)) {
                        reportDiagnostic(index, 0, TypeScript.DiagnosticCode.Unterminated_string_literal);
                        break;
                    }
                    else {
                        index++;
                    }
                }
                return 12 /* StringLiteral */;
            }
            function isUnicodeEscape(character) {
                return character === 92 /* backslash */ && str.charCodeAt(index + 1) === 117 /* u */;
            }
            function peekCharOrUnicodeEscape() {
                var character = str.charCodeAt(index);
                if (isUnicodeEscape(character)) {
                    return peekUnicodeOrHexEscape();
                }
                else {
                    return character;
                }
            }
            function peekUnicodeOrHexEscape() {
                var startIndex = index;
                var ch = scanUnicodeOrHexEscape(false);
                index = startIndex;
                return ch;
            }
            function scanCharOrUnicodeEscape() {
                if (str.charCodeAt(index) === 92 /* backslash */ && str.charCodeAt(index + 1) === 117 /* u */) {
                    scanUnicodeOrHexEscape(true);
                }
                else {
                    index++;
                }
            }
            function scanUnicodeOrHexEscape(report) {
                var start = index;
                var character = str.charCodeAt(index);
                index++;
                character = str.charCodeAt(index);
                var intChar = 0;
                index++;
                var count = character === 117 /* u */ ? 4 : 2;
                for (var i = 0; i < count; i++) {
                    var ch2 = str.charCodeAt(index);
                    if (!TypeScript.CharacterInfo.isHexDigit(ch2)) {
                        if (report) {
                            reportDiagnostic(start, index - start, TypeScript.DiagnosticCode.Unrecognized_escape_sequence, undefined);
                        }
                        break;
                    }
                    intChar = (intChar << 4) + TypeScript.CharacterInfo.hexValue(ch2);
                    index++;
                }
                return intChar;
            }
            function fillTokenInfo(token, text, tokenInfo) {
                var fullStart = token.fullStart();
                var fullEnd = fullStart + token.fullWidth();
                reset(text, fullStart, fullEnd);
                scanTriviaInfo();
                var start = index;
                tokenInfo.leadingTriviaWidth = start - fullStart;
            }
            reset(text, 0, text.length());
            return {
                setIndex: setIndex,
                scan: scan,
                fillTokenInfo: fillTokenInfo,
                scanTrivia: scanTrivia
            };
        }
        function isValidIdentifier(text, languageVersion) {
            var hadError = false;
            var scanner = createScanner(languageVersion, text, function () { return hadError = true; });
            var token = scanner.scan(false);
            return !hadError && TypeScript.SyntaxFacts.isIdentifierNameOrAnyKeyword(token) && TypeScript.width(token) === text.length();
        }
        Scanner.isValidIdentifier = isValidIdentifier;
        function createParserSource(fileName, text, languageVersion) {
            var _absolutePosition = 0;
            var _tokenDiagnostics = [];
            var lastDiagnostic = undefined;
            var reportDiagnostic = function (position, fullWidth, diagnosticKey, args) {
                lastDiagnostic = new TypeScript.Diagnostic(fileName, text.lineMap(), position, fullWidth, diagnosticKey, args);
            };
            var slidingWindow = new TypeScript.SlidingWindow(fetchNextItem, TypeScript.ArrayUtilities.createArray(1024, undefined), undefined);
            var scanner = createScanner(languageVersion, text, reportDiagnostic);
            function currentNode() {
                return undefined;
            }
            function absolutePosition() {
                TypeScript.Debug.assert(!isNaN(_absolutePosition));
                return _absolutePosition;
            }
            function diagnostics() {
                return _tokenDiagnostics;
            }
            function tryParse(callback) {
                var savedSlidingWindowIndex = slidingWindow.getAndPinAbsoluteIndex();
                var savedAbsolutePosition = _absolutePosition;
                var result = callback();
                if (!result) {
                    slidingWindow.rewindToPinnedIndex(savedSlidingWindowIndex);
                    _absolutePosition = savedAbsolutePosition;
                }
                return result;
            }
            function fetchNextItem(allowContextualToken) {
                var token = scanner.scan(allowContextualToken);
                if (lastDiagnostic === undefined) {
                    return token;
                }
                _tokenDiagnostics.push(lastDiagnostic);
                lastDiagnostic = undefined;
                return TypeScript.Syntax.realizeToken(token, text);
            }
            function peekToken(n) {
                return slidingWindow.peekItemN(n);
            }
            function consumeNodeOrToken(nodeOrToken) {
                if (nodeOrToken === slidingWindow.currentItemWithoutFetching()) {
                    _absolutePosition += nodeOrToken.fullWidth();
                    TypeScript.Debug.assert(!isNaN(_absolutePosition));
                    slidingWindow.moveToNextItem();
                }
                else {
                    resetToPosition(TypeScript.fullEnd(nodeOrToken));
                }
            }
            function currentToken() {
                return slidingWindow.currentItem(false);
            }
            function removeDiagnosticsOnOrAfterPosition(position) {
                var tokenDiagnosticsLength = _tokenDiagnostics.length;
                while (tokenDiagnosticsLength > 0) {
                    var diagnostic = _tokenDiagnostics[tokenDiagnosticsLength - 1];
                    if (diagnostic.start() >= position) {
                        tokenDiagnosticsLength--;
                        _tokenDiagnostics.pop();
                    }
                    else {
                        break;
                    }
                }
            }
            function resetToPosition(absolutePosition) {
                TypeScript.Debug.assert(absolutePosition <= text.length(), "Trying to set the position outside the bounds of the text!");
                var resetBackward = absolutePosition <= _absolutePosition;
                _absolutePosition = absolutePosition;
                if (resetBackward) {
                    removeDiagnosticsOnOrAfterPosition(absolutePosition);
                }
                slidingWindow.disgardAllItemsFromCurrentIndexOnwards();
                scanner.setIndex(absolutePosition);
            }
            function currentContextualToken() {
                resetToPosition(_absolutePosition);
                var token = slidingWindow.currentItem(true);
                return token;
            }
            return {
                text: text,
                fileName: fileName,
                languageVersion: languageVersion,
                currentNode: currentNode,
                currentToken: currentToken,
                currentContextualToken: currentContextualToken,
                peekToken: peekToken,
                consumeNodeOrToken: consumeNodeOrToken,
                tryParse: tryParse,
                diagnostics: diagnostics,
                absolutePosition: absolutePosition
            };
        }
        Scanner.createParserSource = createParserSource;
        var fixedWidthArray = TypeScript.ScannerUtilities.fixedWidthArray;
        function fixedWidthTokenLength(kind) {
            return fixedWidthArray[kind];
        }
    })(Scanner = TypeScript.Scanner || (TypeScript.Scanner = {}));
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var SlidingWindow = (function () {
        function SlidingWindow(fetchNextItem, window, defaultValue, sourceLength) {
            if (sourceLength === void 0) { sourceLength = -1; }
            this.fetchNextItem = fetchNextItem;
            this.window = window;
            this.defaultValue = defaultValue;
            this.sourceLength = sourceLength;
            this.windowCount = 0;
            this.windowAbsoluteStartIndex = 0;
            this.currentRelativeItemIndex = 0;
            this._pinCount = 0;
            this.firstPinnedAbsoluteIndex = -1;
        }
        SlidingWindow.prototype.addMoreItemsToWindow = function (argument) {
            var sourceLength = this.sourceLength;
            if (sourceLength >= 0 && this.absoluteIndex() >= sourceLength) {
                return false;
            }
            if (this.windowCount >= this.window.length) {
                this.tryShiftOrGrowWindow();
            }
            var item = this.fetchNextItem(argument);
            this.window[this.windowCount] = item;
            this.windowCount++;
            return true;
        };
        SlidingWindow.prototype.tryShiftOrGrowWindow = function () {
            var currentIndexIsPastWindowHalfwayPoint = this.currentRelativeItemIndex > (this.window.length >>> 1);
            var isAllowedToShift = this.firstPinnedAbsoluteIndex === -1 || this.firstPinnedAbsoluteIndex > this.windowAbsoluteStartIndex;
            if (currentIndexIsPastWindowHalfwayPoint && isAllowedToShift) {
                var shiftStartIndex = this.firstPinnedAbsoluteIndex === -1 ? this.currentRelativeItemIndex : this.firstPinnedAbsoluteIndex - this.windowAbsoluteStartIndex;
                var shiftCount = this.windowCount - shiftStartIndex;
                if (shiftCount > 0) {
                    TypeScript.ArrayUtilities.copy(this.window, shiftStartIndex, this.window, 0, shiftCount);
                }
                this.windowAbsoluteStartIndex += shiftStartIndex;
                this.windowCount -= shiftStartIndex;
                this.currentRelativeItemIndex -= shiftStartIndex;
            }
            else {
                TypeScript.ArrayUtilities.grow(this.window, this.window.length * 2, this.defaultValue);
            }
        };
        SlidingWindow.prototype.absoluteIndex = function () {
            return this.windowAbsoluteStartIndex + this.currentRelativeItemIndex;
        };
        SlidingWindow.prototype.isAtEndOfSource = function () {
            return this.absoluteIndex() >= this.sourceLength;
        };
        SlidingWindow.prototype.getAndPinAbsoluteIndex = function () {
            var absoluteIndex = this.absoluteIndex();
            var pinCount = this._pinCount++;
            if (pinCount === 0) {
                this.firstPinnedAbsoluteIndex = absoluteIndex;
            }
            return absoluteIndex;
        };
        SlidingWindow.prototype.releaseAndUnpinAbsoluteIndex = function (absoluteIndex) {
            this._pinCount--;
            if (this._pinCount === 0) {
                this.firstPinnedAbsoluteIndex = -1;
            }
        };
        SlidingWindow.prototype.rewindToPinnedIndex = function (absoluteIndex) {
            var relativeIndex = absoluteIndex - this.windowAbsoluteStartIndex;
            this.currentRelativeItemIndex = relativeIndex;
        };
        SlidingWindow.prototype.currentItem = function (argument) {
            if (this.currentRelativeItemIndex >= this.windowCount) {
                if (!this.addMoreItemsToWindow(argument)) {
                    return this.defaultValue;
                }
            }
            return this.window[this.currentRelativeItemIndex];
        };
        SlidingWindow.prototype.currentItemWithoutFetching = function () {
            if (this.currentRelativeItemIndex >= this.windowCount) {
                return undefined;
            }
            return this.window[this.currentRelativeItemIndex];
        };
        SlidingWindow.prototype.peekItemN = function (n) {
            while (this.currentRelativeItemIndex + n >= this.windowCount) {
                if (!this.addMoreItemsToWindow(undefined)) {
                    return this.defaultValue;
                }
            }
            return this.window[this.currentRelativeItemIndex + n];
        };
        SlidingWindow.prototype.moveToNextItem = function () {
            this.currentRelativeItemIndex++;
        };
        SlidingWindow.prototype.disgardAllItemsFromCurrentIndexOnwards = function () {
            this.windowCount = this.currentRelativeItemIndex;
        };
        return SlidingWindow;
    })();
    TypeScript.SlidingWindow = SlidingWindow;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var Syntax;
    (function (Syntax) {
        Syntax._nextSyntaxID = 1;
        function nodeHasSkippedOrMissingTokens(node) {
            for (var i = 0; i < TypeScript.childCount(node); i++) {
                var child = TypeScript.childAt(node, i);
                if (TypeScript.isToken(child)) {
                    var token = child;
                    if (token.hasLeadingSkippedToken() || (TypeScript.fullWidth(token) === 0 && token.kind !== 8 /* EndOfFileToken */)) {
                        return true;
                    }
                }
            }
            return false;
        }
        Syntax.nodeHasSkippedOrMissingTokens = nodeHasSkippedOrMissingTokens;
        function isUnterminatedStringLiteral(token) {
            if (token && token.kind === 12 /* StringLiteral */) {
                var text = token.text();
                return text.length < 2 || text.charCodeAt(text.length - 1) !== text.charCodeAt(0);
            }
            return false;
        }
        Syntax.isUnterminatedStringLiteral = isUnterminatedStringLiteral;
        function isUnterminatedMultilineCommentTrivia(trivia) {
            if (trivia && trivia.kind === 4 /* MultiLineCommentTrivia */) {
                var text = trivia.fullText();
                return text.length < 4 || text.substring(text.length - 2) !== "*/";
            }
            return false;
        }
        Syntax.isUnterminatedMultilineCommentTrivia = isUnterminatedMultilineCommentTrivia;
        function isEntirelyInsideCommentTrivia(trivia, fullStart, position) {
            if (trivia && trivia.isComment() && position > fullStart) {
                var end = fullStart + trivia.fullWidth();
                if (position < end) {
                    return true;
                }
                else if (position === end) {
                    return trivia.kind === 5 /* SingleLineCommentTrivia */ || isUnterminatedMultilineCommentTrivia(trivia);
                }
            }
            return false;
        }
        Syntax.isEntirelyInsideCommentTrivia = isEntirelyInsideCommentTrivia;
        function getAncestorOfKind(positionedToken, kind) {
            while (positionedToken && positionedToken.parent) {
                if (positionedToken.parent.kind === kind) {
                    return positionedToken.parent;
                }
                positionedToken = positionedToken.parent;
            }
            return undefined;
        }
        Syntax.getAncestorOfKind = getAncestorOfKind;
        function hasAncestorOfKind(positionedToken, kind) {
            return !!getAncestorOfKind(positionedToken, kind);
        }
        Syntax.hasAncestorOfKind = hasAncestorOfKind;
        function isIntegerLiteral(expression) {
            if (expression) {
                switch (expression.kind) {
                    case 171 /* PrefixUnaryExpression */:
                        var prefixExpr = expression;
                        if (prefixExpr.operatorToken.kind == 94 /* PlusToken */ || prefixExpr.operatorToken.kind === 95 /* MinusToken */) {
                            expression = prefixExpr.operand;
                            return TypeScript.isToken(expression) && TypeScript.IntegerUtilities.isInteger(expression.text());
                        }
                        return false;
                    case 11 /* NumericLiteral */:
                        var text = expression.text();
                        return TypeScript.IntegerUtilities.isInteger(text) || TypeScript.IntegerUtilities.isHexInteger(text);
                }
            }
            return false;
        }
        Syntax.isIntegerLiteral = isIntegerLiteral;
        function containingNode(element) {
            var current = element.parent;
            while (current && !TypeScript.isNode(current)) {
                current = current.parent;
            }
            return current;
        }
        Syntax.containingNode = containingNode;
        function findTokenOnLeft(sourceUnit, position) {
            var positionedToken = TypeScript.findToken(sourceUnit, position);
            var _start = TypeScript.start(positionedToken);
            if (position > _start) {
                return positionedToken;
            }
            if (positionedToken.fullStart() === 0) {
                return undefined;
            }
            return TypeScript.previousToken(positionedToken);
        }
        Syntax.findTokenOnLeft = findTokenOnLeft;
        function findCompleteTokenOnLeft(sourceUnit, position) {
            var positionedToken = TypeScript.findToken(sourceUnit, position);
            if (TypeScript.width(positionedToken) > 0 && position >= TypeScript.fullEnd(positionedToken)) {
                return positionedToken;
            }
            return TypeScript.previousToken(positionedToken);
        }
        Syntax.findCompleteTokenOnLeft = findCompleteTokenOnLeft;
    })(Syntax = TypeScript.Syntax || (TypeScript.Syntax = {}));
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    function syntaxTree(element) {
        if (element) {
            while (element) {
                if (element.kind === 125 /* SourceUnit */) {
                    return element.syntaxTree;
                }
                element = element.parent;
            }
        }
        return undefined;
    }
    TypeScript.syntaxTree = syntaxTree;
    function parserContextFlags(node) {
        var info = node.__data;
        if (info === undefined) {
            return 0;
        }
        return info & 31 /* Mask */;
    }
    TypeScript.parserContextFlags = parserContextFlags;
    function parsedInStrictModeContext(node) {
        return (parserContextFlags(node) & 1 /* StrictMode */) !== 0;
    }
    TypeScript.parsedInStrictModeContext = parsedInStrictModeContext;
    function parsedInDisallowInContext(node) {
        return (parserContextFlags(node) & 2 /* DisallowIn */) !== 0;
    }
    TypeScript.parsedInDisallowInContext = parsedInDisallowInContext;
    function parsedInYieldContext(node) {
        return (parserContextFlags(node) & 4 /* Yield */) !== 0;
    }
    TypeScript.parsedInYieldContext = parsedInYieldContext;
    function parsedInGeneratorParameterContext(node) {
        return (parserContextFlags(node) & 8 /* GeneratorParameter */) !== 0;
    }
    TypeScript.parsedInGeneratorParameterContext = parsedInGeneratorParameterContext;
    function parsedInAsyncContext(node) {
        return (parserContextFlags(node) & 16 /* Async */) !== 0;
    }
    TypeScript.parsedInAsyncContext = parsedInAsyncContext;
    function previousToken(token) {
        var start = token.fullStart();
        if (start === 0) {
            return undefined;
        }
        return findToken(syntaxTree(token).sourceUnit(), start - 1);
    }
    TypeScript.previousToken = previousToken;
    function findToken(sourceUnit, position) {
        if (position < 0) {
            throw TypeScript.Errors.argumentOutOfRange("position");
        }
        var token = findTokenInNodeOrToken(sourceUnit, 0, position);
        if (token) {
            TypeScript.Debug.assert(token.fullWidth() > 0);
            return token;
        }
        if (position === fullWidth(sourceUnit)) {
            return sourceUnit.endOfFileToken;
        }
        if (position > fullWidth(sourceUnit)) {
            throw TypeScript.Errors.argumentOutOfRange("position");
        }
        throw TypeScript.Errors.invalidOperation();
    }
    TypeScript.findToken = findToken;
    function findTokenWorker(element, elementPosition, position) {
        if (isList(element)) {
            return findTokenInList(element, elementPosition, position);
        }
        else {
            return findTokenInNodeOrToken(element, elementPosition, position);
        }
    }
    function findTokenInList(list, elementPosition, position) {
        for (var i = 0, n = list.length; i < n; i++) {
            var child = list[i];
            var childFullWidth = fullWidth(child);
            var elementEndPosition = elementPosition + childFullWidth;
            if (position < elementEndPosition) {
                return findTokenWorker(child, elementPosition, position);
            }
            elementPosition = elementEndPosition;
        }
        return undefined;
    }
    function findTokenInNodeOrToken(nodeOrToken, elementPosition, position) {
        if (isToken(nodeOrToken)) {
            return nodeOrToken;
        }
        for (var i = 0, n = TypeScript.childCount(nodeOrToken); i < n; i++) {
            var child = nodeOrToken.childAt(i);
            if (child) {
                var childFullWidth = fullWidth(child);
                var elementEndPosition = elementPosition + childFullWidth;
                if (position < elementEndPosition) {
                    return findTokenWorker(child, elementPosition, position);
                }
                elementPosition = elementEndPosition;
            }
        }
        return undefined;
    }
    function tryGetEndOfFileAt(element, position) {
        if (element.kind === 125 /* SourceUnit */ && position === fullWidth(element)) {
            var sourceUnit = element;
            return sourceUnit.endOfFileToken;
        }
        return undefined;
    }
    function nextToken(token, text) {
        if (token.kind === 8 /* EndOfFileToken */) {
            return undefined;
        }
        return findToken(syntaxTree(token).sourceUnit(), fullEnd(token));
    }
    TypeScript.nextToken = nextToken;
    function isNode(element) {
        if (element) {
            var kind = element.kind;
            return kind >= 125 /* FirstNode */ && kind <= 218 /* LastNode */;
        }
        return false;
    }
    TypeScript.isNode = isNode;
    function isTokenKind(kind) {
        return kind >= 7 /* FirstToken */ && kind <= 124 /* LastToken */;
    }
    function isToken(element) {
        if (element) {
            return isTokenKind(element.kind);
        }
        return false;
    }
    TypeScript.isToken = isToken;
    function isList(element) {
        return element instanceof Array;
    }
    TypeScript.isList = isList;
    function syntaxID(element) {
        var obj = element;
        if (obj._syntaxID === undefined) {
            obj._syntaxID = TypeScript.Syntax._nextSyntaxID++;
        }
        return obj._syntaxID;
    }
    TypeScript.syntaxID = syntaxID;
    function collectTextElements(element, elements, text) {
        if (element) {
            if (isToken(element)) {
                elements.push(element.fullText(text));
            }
            else {
                for (var i = 0, n = TypeScript.childCount(element); i < n; i++) {
                    collectTextElements(TypeScript.childAt(element, i), elements, text);
                }
            }
        }
    }
    function fullText(element, text) {
        if (isToken(element)) {
            return element.fullText(text);
        }
        var elements = [];
        collectTextElements(element, elements, text);
        return elements.join("");
    }
    TypeScript.fullText = fullText;
    function leadingTriviaWidth(element, text) {
        var token = firstToken(element);
        return token ? token.leadingTriviaWidth(text) : 0;
    }
    TypeScript.leadingTriviaWidth = leadingTriviaWidth;
    function firstToken(element) {
        if (element) {
            var kind = element.kind;
            if (isTokenKind(kind)) {
                return element.fullWidth() > 0 || kind === 8 /* EndOfFileToken */ ? element : undefined;
            }
            for (var i = 0, n = TypeScript.childCount(element); i < n; i++) {
                var token = firstToken(TypeScript.childAt(element, i));
                if (token) {
                    return token;
                }
            }
        }
        return undefined;
    }
    TypeScript.firstToken = firstToken;
    function lastToken(element) {
        if (isToken(element)) {
            return fullWidth(element) > 0 || element.kind === 8 /* EndOfFileToken */ ? element : undefined;
        }
        if (element.kind === 125 /* SourceUnit */) {
            return element.endOfFileToken;
        }
        for (var i = TypeScript.childCount(element) - 1; i >= 0; i--) {
            var child = TypeScript.childAt(element, i);
            if (child) {
                var token = lastToken(child);
                if (token) {
                    return token;
                }
            }
        }
        return undefined;
    }
    TypeScript.lastToken = lastToken;
    function fullStart(element) {
        var token = isToken(element) ? element : firstToken(element);
        return token ? token.fullStart() : -1;
    }
    TypeScript.fullStart = fullStart;
    function fullWidth(element) {
        if (isToken(element)) {
            return element.fullWidth();
        }
        var info = data(element);
        return (info / TypeScript.SyntaxNodeConstants.FullWidthShift) | 0;
    }
    TypeScript.fullWidth = fullWidth;
    function isIncrementallyUnusable(element) {
        if (isToken(element)) {
            return element.isIncrementallyUnusable();
        }
        return (data(element) & TypeScript.SyntaxNodeConstants.IncrementallyUnusableMask) !== 0;
    }
    TypeScript.isIncrementallyUnusable = isIncrementallyUnusable;
    function data(element) {
        var dataElement = element;
        var info = dataElement.__data;
        if (info === undefined) {
            info = 0;
        }
        if ((info & TypeScript.SyntaxNodeConstants.DataComputed) === 0) {
            info += computeData(element);
            dataElement.__data = info;
        }
        return info;
    }
    function combineData(fullWidth, isIncrementallyUnusable) {
        return (fullWidth * TypeScript.SyntaxNodeConstants.FullWidthShift) + (isIncrementallyUnusable ? TypeScript.SyntaxNodeConstants.IncrementallyUnusableMask : 0) + TypeScript.SyntaxNodeConstants.DataComputed;
    }
    function listComputeData(list) {
        var fullWidth = 0;
        var isIncrementallyUnusable = false;
        for (var i = 0, n = list.length; i < n; i++) {
            var child = list[i];
            fullWidth += TypeScript.fullWidth(child);
            isIncrementallyUnusable = isIncrementallyUnusable || TypeScript.isIncrementallyUnusable(child);
        }
        return combineData(fullWidth, isIncrementallyUnusable);
    }
    function computeData(element) {
        if (isList(element)) {
            return listComputeData(element);
        }
        else {
            return nodeOrTokenComputeData(element);
        }
    }
    function nodeOrTokenComputeData(nodeOrToken) {
        var fullWidth = 0;
        var slotCount = nodeOrToken.childCount;
        var isIncrementallyUnusable = slotCount === 0;
        for (var i = 0, n = slotCount; i < n; i++) {
            var child = nodeOrToken.childAt(i);
            if (child) {
                fullWidth += TypeScript.fullWidth(child);
                isIncrementallyUnusable = isIncrementallyUnusable || TypeScript.isIncrementallyUnusable(child);
            }
        }
        return combineData(fullWidth, isIncrementallyUnusable);
    }
    function start(element, text) {
        var token = isToken(element) ? element : firstToken(element);
        return token ? token.fullStart() + token.leadingTriviaWidth(text) : -1;
    }
    TypeScript.start = start;
    function width(element, text) {
        if (isToken(element)) {
            return element.text().length;
        }
        return fullWidth(element) - leadingTriviaWidth(element, text);
    }
    TypeScript.width = width;
    function fullEnd(element) {
        return fullStart(element) + fullWidth(element);
    }
    TypeScript.fullEnd = fullEnd;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var SyntaxFacts;
    (function (SyntaxFacts) {
        function isDirectivePrologueElement(node) {
            return node.kind === 156 /* ExpressionStatement */ && node.expression.kind === 12 /* StringLiteral */;
        }
        SyntaxFacts.isDirectivePrologueElement = isDirectivePrologueElement;
        function isUseStrictDirective(node) {
            var expressionStatement = node;
            var stringLiteral = expressionStatement.expression;
            var text = stringLiteral.text();
            return text === '"use strict"' || text === "'use strict'";
        }
        SyntaxFacts.isUseStrictDirective = isUseStrictDirective;
        function isIdentifierNameOrAnyKeyword(token) {
            var tokenKind = token.kind;
            return tokenKind === 9 /* IdentifierName */ || SyntaxFacts.isAnyKeyword(tokenKind);
        }
        SyntaxFacts.isIdentifierNameOrAnyKeyword = isIdentifierNameOrAnyKeyword;
        function isAccessibilityModifier(kind) {
            switch (kind) {
                case 59 /* PublicKeyword */:
                case 57 /* PrivateKeyword */:
                case 58 /* ProtectedKeyword */:
                    return true;
            }
            return false;
        }
        SyntaxFacts.isAccessibilityModifier = isAccessibilityModifier;
    })(SyntaxFacts = TypeScript.SyntaxFacts || (TypeScript.SyntaxFacts = {}));
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    function separatorCount(list) {
        return list === undefined ? 0 : list.length >> 1;
    }
    TypeScript.separatorCount = separatorCount;
    function nonSeparatorCount(list) {
        return list === undefined ? 0 : (list.length + 1) >> 1;
    }
    TypeScript.nonSeparatorCount = nonSeparatorCount;
    function separatorAt(list, index) {
        return list[(index << 1) + 1];
    }
    TypeScript.separatorAt = separatorAt;
    function nonSeparatorAt(list, index) {
        return list[index << 1];
    }
    TypeScript.nonSeparatorAt = nonSeparatorAt;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var Syntax;
    (function (Syntax) {
        function addArrayPrototypeValue(name, val) {
            if (Object.defineProperty && Array.prototype[name] === undefined) {
                Object.defineProperty(Array.prototype, name, { value: val, writable: false, enumerable: false });
            }
            else {
                Array.prototype[name] = val;
            }
        }
        addArrayPrototypeValue("kind", 1 /* List */);
    })(Syntax = TypeScript.Syntax || (TypeScript.Syntax = {}));
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    function tokenValue(token) {
        if (token.fullWidth() === 0) {
            return undefined;
        }
        var kind = token.kind;
        var text = token.text();
        if (kind === 9 /* IdentifierName */) {
            return massageEscapes(text);
        }
        switch (kind) {
            case 39 /* TrueKeyword */:
                return true;
            case 26 /* FalseKeyword */:
                return false;
            case 34 /* NullKeyword */:
                return undefined;
        }
        if (TypeScript.SyntaxFacts.isAnyKeyword(kind) || TypeScript.SyntaxFacts.isAnyPunctuation(kind)) {
            return TypeScript.SyntaxFacts.getText(kind);
        }
        if (kind === 11 /* NumericLiteral */) {
            return TypeScript.IntegerUtilities.isHexInteger(text) ? parseInt(text, 16) : parseFloat(text);
        }
        else if (kind === 12 /* StringLiteral */) {
            return (text.length > 1 && text.charCodeAt(text.length - 1) === text.charCodeAt(0)) ? massageEscapes(text.substr(1, text.length - "''".length)) : massageEscapes(text.substr(1));
        }
        else if (kind === 13 /* NoSubstitutionTemplateToken */ || kind === 16 /* TemplateEndToken */) {
            return (text.length > 1 && text.charCodeAt(text.length - 1) === 96 /* backtick */) ? massageTemplate(text.substr(1, text.length - "``".length)) : massageTemplate(text.substr(1));
        }
        else if (kind === 14 /* TemplateStartToken */ || kind === 15 /* TemplateMiddleToken */) {
            return massageTemplate(text.substr(1, text.length - "`${".length));
        }
        else if (kind === 10 /* RegularExpressionLiteral */) {
            return regularExpressionValue(text);
        }
        else if (kind === 8 /* EndOfFileToken */ || kind === 7 /* ErrorToken */) {
            return undefined;
        }
        else {
            throw TypeScript.Errors.invalidOperation();
        }
    }
    TypeScript.tokenValue = tokenValue;
    function tokenValueText(token) {
        var value = tokenValue(token);
        return value === undefined ? "" : massageDisallowedIdentifiers(value.toString());
    }
    TypeScript.tokenValueText = tokenValueText;
    function massageTemplate(text) {
        text = text.replace("\r\n", "\n").replace("\r", "\n");
        return massageEscapes(text);
    }
    function massageEscapes(text) {
        return text.indexOf("\\") >= 0 ? convertEscapes(text) : text;
    }
    TypeScript.massageEscapes = massageEscapes;
    function regularExpressionValue(text) {
        try {
            var lastSlash = text.lastIndexOf("/");
            var body = text.substring(1, lastSlash);
            var flags = text.substring(lastSlash + 1);
            return new RegExp(body, flags);
        }
        catch (e) {
            return undefined;
        }
    }
    function massageDisallowedIdentifiers(text) {
        if (text.charCodeAt(0) === 95 /* _ */ && text.charCodeAt(1) === 95 /* _ */) {
            return "_" + text;
        }
        return text;
    }
    var characterArray = [];
    function convertEscapes(text) {
        characterArray.length = 0;
        var result = "";
        for (var i = 0, n = text.length; i < n; i++) {
            var ch = text.charCodeAt(i);
            if (ch === 92 /* backslash */) {
                i++;
                if (i < n) {
                    ch = text.charCodeAt(i);
                    switch (ch) {
                        case 48 /* _0 */:
                            characterArray.push(0 /* nullCharacter */);
                            continue;
                        case 98 /* b */:
                            characterArray.push(8 /* backspace */);
                            continue;
                        case 102 /* f */:
                            characterArray.push(12 /* formFeed */);
                            continue;
                        case 110 /* n */:
                            characterArray.push(10 /* lineFeed */);
                            continue;
                        case 114 /* r */:
                            characterArray.push(13 /* carriageReturn */);
                            continue;
                        case 116 /* t */:
                            characterArray.push(9 /* tab */);
                            continue;
                        case 118 /* v */:
                            characterArray.push(11 /* verticalTab */);
                            continue;
                        case 120 /* x */:
                            characterArray.push(hexValue(text, i + 1, 2));
                            i += 2;
                            continue;
                        case 117 /* u */:
                            characterArray.push(hexValue(text, i + 1, 4));
                            i += 4;
                            continue;
                        case 13 /* carriageReturn */:
                            var nextIndex = i + 1;
                            if (nextIndex < text.length && text.charCodeAt(nextIndex) === 10 /* lineFeed */) {
                                i++;
                            }
                            continue;
                        case 10 /* lineFeed */:
                        case 8233 /* paragraphSeparator */:
                        case 8232 /* lineSeparator */:
                            continue;
                        default:
                    }
                }
            }
            characterArray.push(ch);
            if (i && !(i % 1024)) {
                result = result.concat(String.fromCharCode.apply(undefined, characterArray));
                characterArray.length = 0;
            }
        }
        if (characterArray.length) {
            result = result.concat(String.fromCharCode.apply(undefined, characterArray));
        }
        return result;
    }
    function hexValue(text, start, length) {
        var intChar = 0;
        for (var i = 0; i < length; i++) {
            var ch2 = text.charCodeAt(start + i);
            if (!TypeScript.CharacterInfo.isHexDigit(ch2)) {
                break;
            }
            intChar = (intChar << 4) + TypeScript.CharacterInfo.hexValue(ch2);
        }
        return intChar;
    }
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var Syntax;
    (function (Syntax) {
        function realizeToken(token, text) {
            return new RealizedToken(token.fullStart(), token.kind, token.isKeywordConvertedToIdentifier(), token.leadingTrivia(text), token.text());
        }
        Syntax.realizeToken = realizeToken;
        function convertKeywordToIdentifier(token) {
            return new ConvertedKeywordToken(token);
        }
        Syntax.convertKeywordToIdentifier = convertKeywordToIdentifier;
        function withLeadingTrivia(token, leadingTrivia, text) {
            return new RealizedToken(token.fullStart(), token.kind, token.isKeywordConvertedToIdentifier(), leadingTrivia, token.text());
        }
        Syntax.withLeadingTrivia = withLeadingTrivia;
        function emptyToken(kind, fullStart) {
            return new EmptyToken(kind, fullStart);
        }
        Syntax.emptyToken = emptyToken;
        var EmptyToken = (function () {
            function EmptyToken(kind, _fullStart) {
                this.kind = kind;
                this._fullStart = _fullStart;
                TypeScript.Debug.assert(!isNaN(_fullStart));
            }
            EmptyToken.prototype.setFullStart = function (fullStart) {
                this._fullStart = fullStart;
            };
            EmptyToken.prototype.childAt = function (index) {
                throw TypeScript.Errors.invalidOperation();
            };
            EmptyToken.prototype.clone = function () {
                return new EmptyToken(this.kind, this._fullStart);
            };
            EmptyToken.prototype.isIncrementallyUnusable = function () {
                return true;
            };
            EmptyToken.prototype.isKeywordConvertedToIdentifier = function () {
                return false;
            };
            EmptyToken.prototype.fullWidth = function () {
                return 0;
            };
            EmptyToken.prototype.fullStart = function () {
                return this._fullStart;
            };
            EmptyToken.prototype.text = function () {
                return "";
            };
            EmptyToken.prototype.fullText = function () {
                return "";
            };
            EmptyToken.prototype.hasLeadingTrivia = function () {
                return false;
            };
            EmptyToken.prototype.hasLeadingNewLine = function () {
                return false;
            };
            EmptyToken.prototype.hasLeadingComment = function () {
                return false;
            };
            EmptyToken.prototype.hasLeadingSkippedToken = function () {
                return false;
            };
            EmptyToken.prototype.leadingTriviaWidth = function () {
                return 0;
            };
            EmptyToken.prototype.leadingTrivia = function () {
                return Syntax.emptyTriviaList;
            };
            return EmptyToken;
        })();
        EmptyToken.prototype.childCount = 0;
        var RealizedToken = (function () {
            function RealizedToken(_fullStart, kind, isKeywordConvertedToIdentifier, leadingTrivia, text) {
                this._fullStart = _fullStart;
                this.kind = kind;
                TypeScript.Debug.assert(!isNaN(_fullStart));
                this._isKeywordConvertedToIdentifier = isKeywordConvertedToIdentifier;
                this._text = text;
                this._leadingTrivia = leadingTrivia.clone();
                if (!this._leadingTrivia.isShared()) {
                    this._leadingTrivia.parent = this;
                }
            }
            RealizedToken.prototype.setFullStart = function (fullStart) {
                this._fullStart = fullStart;
            };
            RealizedToken.prototype.childAt = function (index) {
                throw TypeScript.Errors.invalidOperation();
            };
            RealizedToken.prototype.clone = function () {
                return new RealizedToken(this._fullStart, this.kind, this._isKeywordConvertedToIdentifier, this._leadingTrivia, this._text);
            };
            RealizedToken.prototype.isIncrementallyUnusable = function () {
                return true;
            };
            RealizedToken.prototype.isKeywordConvertedToIdentifier = function () {
                return this._isKeywordConvertedToIdentifier;
            };
            RealizedToken.prototype.fullStart = function () {
                return this._fullStart;
            };
            RealizedToken.prototype.fullWidth = function () {
                return this._leadingTrivia.fullWidth() + this._text.length;
            };
            RealizedToken.prototype.text = function () {
                return this._text;
            };
            RealizedToken.prototype.fullText = function () {
                return this._leadingTrivia.fullText() + this.text();
            };
            RealizedToken.prototype.hasLeadingTrivia = function () {
                return this._leadingTrivia.count() > 0;
            };
            RealizedToken.prototype.hasLeadingNewLine = function () {
                return this._leadingTrivia.hasNewLine();
            };
            RealizedToken.prototype.hasLeadingComment = function () {
                return this._leadingTrivia.hasComment();
            };
            RealizedToken.prototype.hasLeadingSkippedToken = function () {
                return this._leadingTrivia.hasSkippedToken();
            };
            RealizedToken.prototype.leadingTrivia = function () {
                return this._leadingTrivia;
            };
            RealizedToken.prototype.leadingTriviaWidth = function () {
                return this._leadingTrivia.fullWidth();
            };
            return RealizedToken;
        })();
        RealizedToken.prototype.childCount = 0;
        var ConvertedKeywordToken = (function () {
            function ConvertedKeywordToken(underlyingToken) {
                this.underlyingToken = underlyingToken;
            }
            ConvertedKeywordToken.prototype.setFullStart = function (fullStart) {
                this.underlyingToken.setFullStart(fullStart);
            };
            ConvertedKeywordToken.prototype.childAt = function (index) {
                throw TypeScript.Errors.invalidOperation();
            };
            ConvertedKeywordToken.prototype.fullStart = function () {
                return this.underlyingToken.fullStart();
            };
            ConvertedKeywordToken.prototype.fullWidth = function () {
                return this.underlyingToken.fullWidth();
            };
            ConvertedKeywordToken.prototype.text = function () {
                return this.underlyingToken.text();
            };
            ConvertedKeywordToken.prototype.syntaxTreeText = function (text) {
                var result = text || TypeScript.syntaxTree(this).text;
                TypeScript.Debug.assert(result);
                return result;
            };
            ConvertedKeywordToken.prototype.fullText = function (text) {
                return this.underlyingToken.fullText(this.syntaxTreeText(text));
            };
            ConvertedKeywordToken.prototype.hasLeadingTrivia = function () {
                return this.underlyingToken.hasLeadingTrivia();
            };
            ConvertedKeywordToken.prototype.hasLeadingNewLine = function () {
                return this.underlyingToken.hasLeadingNewLine();
            };
            ConvertedKeywordToken.prototype.hasLeadingComment = function () {
                return this.underlyingToken.hasLeadingComment();
            };
            ConvertedKeywordToken.prototype.hasLeadingSkippedToken = function () {
                return this.underlyingToken.hasLeadingSkippedToken();
            };
            ConvertedKeywordToken.prototype.leadingTrivia = function (text) {
                var result = this.underlyingToken.leadingTrivia(this.syntaxTreeText(text));
                result.parent = this;
                return result;
            };
            ConvertedKeywordToken.prototype.leadingTriviaWidth = function (text) {
                return this.underlyingToken.leadingTriviaWidth(this.syntaxTreeText(text));
            };
            ConvertedKeywordToken.prototype.isKeywordConvertedToIdentifier = function () {
                return true;
            };
            ConvertedKeywordToken.prototype.isIncrementallyUnusable = function () {
                return this.underlyingToken.isIncrementallyUnusable();
            };
            ConvertedKeywordToken.prototype.clone = function () {
                return new ConvertedKeywordToken(this.underlyingToken);
            };
            return ConvertedKeywordToken;
        })();
        ConvertedKeywordToken.prototype.kind = 9 /* IdentifierName */;
        ConvertedKeywordToken.prototype.childCount = 0;
    })(Syntax = TypeScript.Syntax || (TypeScript.Syntax = {}));
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var Syntax;
    (function (Syntax) {
        var AbstractTrivia = (function () {
            function AbstractTrivia(kind) {
                this.kind = kind;
            }
            AbstractTrivia.prototype.clone = function () {
                throw TypeScript.Errors.abstract();
            };
            AbstractTrivia.prototype.fullStart = function () {
                throw TypeScript.Errors.abstract();
            };
            AbstractTrivia.prototype.fullWidth = function () {
                throw TypeScript.Errors.abstract();
            };
            AbstractTrivia.prototype.fullText = function () {
                throw TypeScript.Errors.abstract();
            };
            AbstractTrivia.prototype.skippedToken = function () {
                throw TypeScript.Errors.abstract();
            };
            AbstractTrivia.prototype.isWhitespace = function () {
                return this.kind === 2 /* WhitespaceTrivia */;
            };
            AbstractTrivia.prototype.isComment = function () {
                return this.kind === 5 /* SingleLineCommentTrivia */ || this.kind === 4 /* MultiLineCommentTrivia */;
            };
            AbstractTrivia.prototype.isNewLine = function () {
                return this.kind === 3 /* NewLineTrivia */;
            };
            AbstractTrivia.prototype.isSkippedToken = function () {
                return this.kind === 6 /* SkippedTokenTrivia */;
            };
            return AbstractTrivia;
        })();
        var SkippedTokenTrivia = (function (_super) {
            __extends(SkippedTokenTrivia, _super);
            function SkippedTokenTrivia(_skippedToken, _fullText) {
                _super.call(this, 6 /* SkippedTokenTrivia */);
                this._skippedToken = _skippedToken;
                this._fullText = _fullText;
                _skippedToken.parent = this;
            }
            SkippedTokenTrivia.prototype.clone = function () {
                return new SkippedTokenTrivia(this._skippedToken.clone(), this._fullText);
            };
            SkippedTokenTrivia.prototype.fullStart = function () {
                return this._skippedToken.fullStart();
            };
            SkippedTokenTrivia.prototype.fullWidth = function () {
                return this.fullText().length;
            };
            SkippedTokenTrivia.prototype.fullText = function () {
                return this._fullText;
            };
            SkippedTokenTrivia.prototype.skippedToken = function () {
                return this._skippedToken;
            };
            return SkippedTokenTrivia;
        })(AbstractTrivia);
        var DeferredTrivia = (function (_super) {
            __extends(DeferredTrivia, _super);
            function DeferredTrivia(kind, _text, _fullStart, _fullWidth) {
                _super.call(this, kind);
                this._text = _text;
                this._fullStart = _fullStart;
                this._fullWidth = _fullWidth;
            }
            DeferredTrivia.prototype.clone = function () {
                return new DeferredTrivia(this.kind, this._text, this._fullStart, this._fullWidth);
            };
            DeferredTrivia.prototype.fullStart = function () {
                return this._fullStart;
            };
            DeferredTrivia.prototype.fullWidth = function () {
                return this._fullWidth;
            };
            DeferredTrivia.prototype.fullText = function () {
                return this._text.substr(this._fullStart, this._fullWidth);
            };
            DeferredTrivia.prototype.skippedToken = function () {
                throw TypeScript.Errors.invalidOperation();
            };
            return DeferredTrivia;
        })(AbstractTrivia);
        function deferredTrivia(kind, text, fullStart, fullWidth) {
            return new DeferredTrivia(kind, text, fullStart, fullWidth);
        }
        Syntax.deferredTrivia = deferredTrivia;
        function skippedTokenTrivia(token, text) {
            TypeScript.Debug.assert(!token.hasLeadingTrivia());
            TypeScript.Debug.assert(token.fullWidth() > 0);
            return new SkippedTokenTrivia(token, token.fullText(text));
        }
        Syntax.skippedTokenTrivia = skippedTokenTrivia;
        function splitMultiLineCommentTriviaIntoMultipleLines(trivia) {
            var result = [];
            var triviaText = trivia.fullText();
            var currentIndex = 0;
            for (var i = 0; i < triviaText.length; i++) {
                var ch = triviaText.charCodeAt(i);
                switch (ch) {
                    case 13 /* carriageReturn */:
                        if (i < triviaText.length - 1 && triviaText.charCodeAt(i + 1) === 10 /* lineFeed */) {
                            i++;
                        }
                    case 10 /* lineFeed */:
                    case 8233 /* paragraphSeparator */:
                    case 8232 /* lineSeparator */:
                        result.push(triviaText.substring(currentIndex, i + 1));
                        currentIndex = i + 1;
                        continue;
                }
            }
            result.push(triviaText.substring(currentIndex));
            return result;
        }
        Syntax.splitMultiLineCommentTriviaIntoMultipleLines = splitMultiLineCommentTriviaIntoMultipleLines;
    })(Syntax = TypeScript.Syntax || (TypeScript.Syntax = {}));
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var Syntax;
    (function (Syntax) {
        var EmptyTriviaList = (function () {
            function EmptyTriviaList() {
            }
            EmptyTriviaList.prototype.isShared = function () {
                return true;
            };
            EmptyTriviaList.prototype.count = function () {
                return 0;
            };
            EmptyTriviaList.prototype.syntaxTriviaAt = function (index) {
                throw TypeScript.Errors.argumentOutOfRange("index");
            };
            EmptyTriviaList.prototype.last = function () {
                throw TypeScript.Errors.argumentOutOfRange("index");
            };
            EmptyTriviaList.prototype.fullWidth = function () {
                return 0;
            };
            EmptyTriviaList.prototype.fullText = function () {
                return "";
            };
            EmptyTriviaList.prototype.hasComment = function () {
                return false;
            };
            EmptyTriviaList.prototype.hasNewLine = function () {
                return false;
            };
            EmptyTriviaList.prototype.hasSkippedToken = function () {
                return false;
            };
            EmptyTriviaList.prototype.toArray = function () {
                return [];
            };
            EmptyTriviaList.prototype.clone = function () {
                return this;
            };
            return EmptyTriviaList;
        })();
        ;
        Syntax.emptyTriviaList = new EmptyTriviaList();
        function isComment(trivia) {
            return trivia.kind === 4 /* MultiLineCommentTrivia */ || trivia.kind === 5 /* SingleLineCommentTrivia */;
        }
        var SingletonSyntaxTriviaList = (function () {
            function SingletonSyntaxTriviaList(item) {
                this.item = item.clone();
                this.item.parent = this;
            }
            SingletonSyntaxTriviaList.prototype.isShared = function () {
                return false;
            };
            SingletonSyntaxTriviaList.prototype.count = function () {
                return 1;
            };
            SingletonSyntaxTriviaList.prototype.syntaxTriviaAt = function (index) {
                if (index !== 0) {
                    throw TypeScript.Errors.argumentOutOfRange("index");
                }
                return this.item;
            };
            SingletonSyntaxTriviaList.prototype.last = function () {
                return this.item;
            };
            SingletonSyntaxTriviaList.prototype.fullWidth = function () {
                return this.item.fullWidth();
            };
            SingletonSyntaxTriviaList.prototype.fullText = function () {
                return this.item.fullText();
            };
            SingletonSyntaxTriviaList.prototype.hasComment = function () {
                return isComment(this.item);
            };
            SingletonSyntaxTriviaList.prototype.hasNewLine = function () {
                return this.item.kind === 3 /* NewLineTrivia */;
            };
            SingletonSyntaxTriviaList.prototype.hasSkippedToken = function () {
                return this.item.kind === 6 /* SkippedTokenTrivia */;
            };
            SingletonSyntaxTriviaList.prototype.toArray = function () {
                return [this.item];
            };
            SingletonSyntaxTriviaList.prototype.clone = function () {
                return new SingletonSyntaxTriviaList(this.item.clone());
            };
            return SingletonSyntaxTriviaList;
        })();
        var NormalSyntaxTriviaList = (function () {
            function NormalSyntaxTriviaList(trivia) {
                var _this = this;
                this.trivia = trivia.map(function (t) {
                    var cloned = t.clone();
                    cloned.parent = _this;
                    return cloned;
                });
            }
            NormalSyntaxTriviaList.prototype.isShared = function () {
                return false;
            };
            NormalSyntaxTriviaList.prototype.count = function () {
                return this.trivia.length;
            };
            NormalSyntaxTriviaList.prototype.syntaxTriviaAt = function (index) {
                if (index < 0 || index >= this.trivia.length) {
                    throw TypeScript.Errors.argumentOutOfRange("index");
                }
                return this.trivia[index];
            };
            NormalSyntaxTriviaList.prototype.last = function () {
                return this.trivia[this.trivia.length - 1];
            };
            NormalSyntaxTriviaList.prototype.fullWidth = function () {
                return TypeScript.ArrayUtilities.sum(this.trivia, function (t) { return t.fullWidth(); });
            };
            NormalSyntaxTriviaList.prototype.fullText = function () {
                var result = [];
                for (var i = 0, n = this.trivia.length; i < n; i++) {
                    result.push(this.trivia[i].fullText());
                }
                return result.join("");
            };
            NormalSyntaxTriviaList.prototype.hasComment = function () {
                for (var i = 0; i < this.trivia.length; i++) {
                    if (isComment(this.trivia[i])) {
                        return true;
                    }
                }
                return false;
            };
            NormalSyntaxTriviaList.prototype.hasNewLine = function () {
                for (var i = 0; i < this.trivia.length; i++) {
                    if (this.trivia[i].kind === 3 /* NewLineTrivia */) {
                        return true;
                    }
                }
                return false;
            };
            NormalSyntaxTriviaList.prototype.hasSkippedToken = function () {
                for (var i = 0; i < this.trivia.length; i++) {
                    if (this.trivia[i].kind === 6 /* SkippedTokenTrivia */) {
                        return true;
                    }
                }
                return false;
            };
            NormalSyntaxTriviaList.prototype.toArray = function () {
                return this.trivia.slice(0);
            };
            NormalSyntaxTriviaList.prototype.clone = function () {
                return new NormalSyntaxTriviaList(this.trivia.map(function (t) { return t.clone(); }));
            };
            return NormalSyntaxTriviaList;
        })();
        function triviaList(trivia) {
            if (!trivia || trivia.length === 0) {
                return Syntax.emptyTriviaList;
            }
            if (trivia.length === 1) {
                return new SingletonSyntaxTriviaList(trivia[0]);
            }
            return new NormalSyntaxTriviaList(trivia);
        }
        Syntax.triviaList = triviaList;
    })(Syntax = TypeScript.Syntax || (TypeScript.Syntax = {}));
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    function visitNodeOrToken(visitor, element) {
        if (element === undefined) {
            return undefined;
        }
        switch (element.kind) {
            case 125 /* SourceUnit */: return visitor.visitSourceUnit(element);
            case 126 /* QualifiedName */: return visitor.visitQualifiedName(element);
            case 127 /* ObjectType */: return visitor.visitObjectType(element);
            case 128 /* FunctionType */: return visitor.visitFunctionType(element);
            case 129 /* ArrayType */: return visitor.visitArrayType(element);
            case 130 /* ConstructorType */: return visitor.visitConstructorType(element);
            case 131 /* GenericType */: return visitor.visitGenericType(element);
            case 132 /* TypeQuery */: return visitor.visitTypeQuery(element);
            case 133 /* TupleType */: return visitor.visitTupleType(element);
            case 134 /* UnionType */: return visitor.visitUnionType(element);
            case 135 /* ParenthesizedType */: return visitor.visitParenthesizedType(element);
            case 136 /* InterfaceDeclaration */: return visitor.visitInterfaceDeclaration(element);
            case 137 /* FunctionDeclaration */: return visitor.visitFunctionDeclaration(element);
            case 138 /* ModuleDeclaration */: return visitor.visitModuleDeclaration(element);
            case 139 /* ClassDeclaration */: return visitor.visitClassDeclaration(element);
            case 140 /* EnumDeclaration */: return visitor.visitEnumDeclaration(element);
            case 141 /* ImportDeclaration */: return visitor.visitImportDeclaration(element);
            case 142 /* ExportAssignment */: return visitor.visitExportAssignment(element);
            case 143 /* MethodDeclaration */: return visitor.visitMethodDeclaration(element);
            case 144 /* PropertyDeclaration */: return visitor.visitPropertyDeclaration(element);
            case 145 /* ConstructorDeclaration */: return visitor.visitConstructorDeclaration(element);
            case 146 /* GetAccessor */: return visitor.visitGetAccessor(element);
            case 147 /* SetAccessor */: return visitor.visitSetAccessor(element);
            case 148 /* PropertySignature */: return visitor.visitPropertySignature(element);
            case 149 /* CallSignature */: return visitor.visitCallSignature(element);
            case 150 /* ConstructSignature */: return visitor.visitConstructSignature(element);
            case 151 /* IndexSignature */: return visitor.visitIndexSignature(element);
            case 152 /* MethodSignature */: return visitor.visitMethodSignature(element);
            case 153 /* Block */: return visitor.visitBlock(element);
            case 154 /* IfStatement */: return visitor.visitIfStatement(element);
            case 155 /* VariableStatement */: return visitor.visitVariableStatement(element);
            case 156 /* ExpressionStatement */: return visitor.visitExpressionStatement(element);
            case 157 /* ReturnStatement */: return visitor.visitReturnStatement(element);
            case 158 /* SwitchStatement */: return visitor.visitSwitchStatement(element);
            case 159 /* BreakStatement */: return visitor.visitBreakStatement(element);
            case 160 /* ContinueStatement */: return visitor.visitContinueStatement(element);
            case 161 /* ForStatement */: return visitor.visitForStatement(element);
            case 162 /* ForInStatement */: return visitor.visitForInStatement(element);
            case 163 /* EmptyStatement */: return visitor.visitEmptyStatement(element);
            case 164 /* ThrowStatement */: return visitor.visitThrowStatement(element);
            case 165 /* WhileStatement */: return visitor.visitWhileStatement(element);
            case 166 /* TryStatement */: return visitor.visitTryStatement(element);
            case 167 /* LabeledStatement */: return visitor.visitLabeledStatement(element);
            case 168 /* DoStatement */: return visitor.visitDoStatement(element);
            case 169 /* DebuggerStatement */: return visitor.visitDebuggerStatement(element);
            case 170 /* WithStatement */: return visitor.visitWithStatement(element);
            case 171 /* PrefixUnaryExpression */: return visitor.visitPrefixUnaryExpression(element);
            case 172 /* DeleteExpression */: return visitor.visitDeleteExpression(element);
            case 173 /* TypeOfExpression */: return visitor.visitTypeOfExpression(element);
            case 174 /* VoidExpression */: return visitor.visitVoidExpression(element);
            case 175 /* ConditionalExpression */: return visitor.visitConditionalExpression(element);
            case 176 /* BinaryExpression */: return visitor.visitBinaryExpression(element);
            case 177 /* PostfixUnaryExpression */: return visitor.visitPostfixUnaryExpression(element);
            case 178 /* PropertyAccessExpression */: return visitor.visitPropertyAccessExpression(element);
            case 179 /* InvocationExpression */: return visitor.visitInvocationExpression(element);
            case 180 /* ArrayLiteralExpression */: return visitor.visitArrayLiteralExpression(element);
            case 181 /* ObjectLiteralExpression */: return visitor.visitObjectLiteralExpression(element);
            case 182 /* ObjectCreationExpression */: return visitor.visitObjectCreationExpression(element);
            case 183 /* ParenthesizedExpression */: return visitor.visitParenthesizedExpression(element);
            case 184 /* ParenthesizedArrowFunctionExpression */: return visitor.visitParenthesizedArrowFunctionExpression(element);
            case 185 /* SimpleArrowFunctionExpression */: return visitor.visitSimpleArrowFunctionExpression(element);
            case 186 /* TypeAssertionExpression */: return visitor.visitTypeAssertionExpression(element);
            case 187 /* ElementAccessExpression */: return visitor.visitElementAccessExpression(element);
            case 188 /* FunctionExpression */: return visitor.visitFunctionExpression(element);
            case 189 /* OmittedExpression */: return visitor.visitOmittedExpression(element);
            case 190 /* TemplateExpression */: return visitor.visitTemplateExpression(element);
            case 191 /* TemplateAccessExpression */: return visitor.visitTemplateAccessExpression(element);
            case 192 /* YieldExpression */: return visitor.visitYieldExpression(element);
            case 193 /* AwaitExpression */: return visitor.visitAwaitExpression(element);
            case 194 /* VariableDeclaration */: return visitor.visitVariableDeclaration(element);
            case 195 /* VariableDeclarator */: return visitor.visitVariableDeclarator(element);
            case 196 /* ArgumentList */: return visitor.visitArgumentList(element);
            case 197 /* ParameterList */: return visitor.visitParameterList(element);
            case 198 /* TypeArgumentList */: return visitor.visitTypeArgumentList(element);
            case 199 /* TypeParameterList */: return visitor.visitTypeParameterList(element);
            case 200 /* HeritageClause */: return visitor.visitHeritageClause(element);
            case 201 /* EqualsValueClause */: return visitor.visitEqualsValueClause(element);
            case 202 /* CaseSwitchClause */: return visitor.visitCaseSwitchClause(element);
            case 203 /* DefaultSwitchClause */: return visitor.visitDefaultSwitchClause(element);
            case 204 /* ElseClause */: return visitor.visitElseClause(element);
            case 205 /* CatchClause */: return visitor.visitCatchClause(element);
            case 206 /* FinallyClause */: return visitor.visitFinallyClause(element);
            case 207 /* TemplateClause */: return visitor.visitTemplateClause(element);
            case 208 /* TypeParameter */: return visitor.visitTypeParameter(element);
            case 209 /* Constraint */: return visitor.visitConstraint(element);
            case 210 /* Parameter */: return visitor.visitParameter(element);
            case 211 /* EnumElement */: return visitor.visitEnumElement(element);
            case 212 /* TypeAnnotation */: return visitor.visitTypeAnnotation(element);
            case 213 /* ExpressionBody */: return visitor.visitExpressionBody(element);
            case 214 /* ComputedPropertyName */: return visitor.visitComputedPropertyName(element);
            case 215 /* PropertyAssignment */: return visitor.visitPropertyAssignment(element);
            case 216 /* TypeAlias */: return visitor.visitTypeAlias(element);
            case 217 /* ExternalModuleReference */: return visitor.visitExternalModuleReference(element);
            case 218 /* ModuleNameModuleReference */: return visitor.visitModuleNameModuleReference(element);
            default: return visitor.visitToken(element);
        }
    }
    TypeScript.visitNodeOrToken = visitNodeOrToken;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var SyntaxWalker = (function () {
        function SyntaxWalker() {
        }
        SyntaxWalker.prototype.visitToken = function (token) {
        };
        SyntaxWalker.prototype.visitOptionalToken = function (token) {
            if (token === undefined) {
                return;
            }
            this.visitToken(token);
        };
        SyntaxWalker.prototype.visitList = function (list) {
            for (var i = 0, n = list.length; i < n; i++) {
                TypeScript.visitNodeOrToken(this, list[i]);
            }
        };
        SyntaxWalker.prototype.visitSourceUnit = function (node) {
            this.visitList(node.moduleElements);
            this.visitToken(node.endOfFileToken);
        };
        SyntaxWalker.prototype.visitQualifiedName = function (node) {
            TypeScript.visitNodeOrToken(this, node.left);
            this.visitToken(node.dotToken);
            this.visitToken(node.right);
        };
        SyntaxWalker.prototype.visitObjectType = function (node) {
            this.visitToken(node.openBraceToken);
            this.visitList(node.typeMembers);
            this.visitToken(node.closeBraceToken);
        };
        SyntaxWalker.prototype.visitFunctionType = function (node) {
            TypeScript.visitNodeOrToken(this, node.typeParameterList);
            TypeScript.visitNodeOrToken(this, node.parameterList);
            this.visitToken(node.equalsGreaterThanToken);
            TypeScript.visitNodeOrToken(this, node.type);
        };
        SyntaxWalker.prototype.visitArrayType = function (node) {
            TypeScript.visitNodeOrToken(this, node.type);
            this.visitToken(node.openBracketToken);
            this.visitToken(node.closeBracketToken);
        };
        SyntaxWalker.prototype.visitConstructorType = function (node) {
            this.visitToken(node.newKeyword);
            TypeScript.visitNodeOrToken(this, node.typeParameterList);
            TypeScript.visitNodeOrToken(this, node.parameterList);
            this.visitToken(node.equalsGreaterThanToken);
            TypeScript.visitNodeOrToken(this, node.type);
        };
        SyntaxWalker.prototype.visitGenericType = function (node) {
            TypeScript.visitNodeOrToken(this, node.name);
            TypeScript.visitNodeOrToken(this, node.typeArgumentList);
        };
        SyntaxWalker.prototype.visitTypeQuery = function (node) {
            this.visitToken(node.typeOfKeyword);
            TypeScript.visitNodeOrToken(this, node.name);
        };
        SyntaxWalker.prototype.visitTupleType = function (node) {
            this.visitToken(node.openBracketToken);
            this.visitList(node.types);
            this.visitToken(node.closeBracketToken);
        };
        SyntaxWalker.prototype.visitUnionType = function (node) {
            TypeScript.visitNodeOrToken(this, node.left);
            this.visitToken(node.barToken);
            TypeScript.visitNodeOrToken(this, node.right);
        };
        SyntaxWalker.prototype.visitParenthesizedType = function (node) {
            this.visitToken(node.openParenToken);
            TypeScript.visitNodeOrToken(this, node.type);
            this.visitToken(node.closeParenToken);
        };
        SyntaxWalker.prototype.visitInterfaceDeclaration = function (node) {
            this.visitList(node.modifiers);
            this.visitToken(node.interfaceKeyword);
            this.visitToken(node.identifier);
            TypeScript.visitNodeOrToken(this, node.typeParameterList);
            this.visitList(node.heritageClauses);
            TypeScript.visitNodeOrToken(this, node.body);
        };
        SyntaxWalker.prototype.visitFunctionDeclaration = function (node) {
            this.visitList(node.modifiers);
            this.visitToken(node.functionKeyword);
            this.visitOptionalToken(node.asterixToken);
            this.visitToken(node.identifier);
            TypeScript.visitNodeOrToken(this, node.callSignature);
            TypeScript.visitNodeOrToken(this, node.body);
        };
        SyntaxWalker.prototype.visitModuleDeclaration = function (node) {
            this.visitList(node.modifiers);
            this.visitToken(node.moduleKeyword);
            TypeScript.visitNodeOrToken(this, node.name);
            this.visitToken(node.openBraceToken);
            this.visitList(node.moduleElements);
            this.visitToken(node.closeBraceToken);
        };
        SyntaxWalker.prototype.visitClassDeclaration = function (node) {
            this.visitList(node.modifiers);
            this.visitToken(node.classKeyword);
            this.visitToken(node.identifier);
            TypeScript.visitNodeOrToken(this, node.typeParameterList);
            this.visitList(node.heritageClauses);
            this.visitToken(node.openBraceToken);
            this.visitList(node.classElements);
            this.visitToken(node.closeBraceToken);
        };
        SyntaxWalker.prototype.visitEnumDeclaration = function (node) {
            this.visitList(node.modifiers);
            this.visitToken(node.enumKeyword);
            this.visitToken(node.identifier);
            this.visitToken(node.openBraceToken);
            this.visitList(node.enumElements);
            this.visitToken(node.closeBraceToken);
        };
        SyntaxWalker.prototype.visitImportDeclaration = function (node) {
            this.visitList(node.modifiers);
            this.visitToken(node.importKeyword);
            this.visitToken(node.identifier);
            this.visitToken(node.equalsToken);
            TypeScript.visitNodeOrToken(this, node.moduleReference);
            this.visitOptionalToken(node.semicolonToken);
        };
        SyntaxWalker.prototype.visitExportAssignment = function (node) {
            this.visitList(node.modifiers);
            this.visitToken(node.exportKeyword);
            this.visitToken(node.equalsToken);
            this.visitToken(node.identifier);
            this.visitOptionalToken(node.semicolonToken);
        };
        SyntaxWalker.prototype.visitMethodDeclaration = function (node) {
            this.visitList(node.modifiers);
            this.visitOptionalToken(node.asterixToken);
            TypeScript.visitNodeOrToken(this, node.propertyName);
            TypeScript.visitNodeOrToken(this, node.callSignature);
            TypeScript.visitNodeOrToken(this, node.body);
        };
        SyntaxWalker.prototype.visitPropertyDeclaration = function (node) {
            this.visitList(node.modifiers);
            TypeScript.visitNodeOrToken(this, node.variableDeclarator);
            this.visitOptionalToken(node.semicolonToken);
        };
        SyntaxWalker.prototype.visitConstructorDeclaration = function (node) {
            this.visitList(node.modifiers);
            this.visitToken(node.constructorKeyword);
            TypeScript.visitNodeOrToken(this, node.callSignature);
            TypeScript.visitNodeOrToken(this, node.body);
        };
        SyntaxWalker.prototype.visitGetAccessor = function (node) {
            this.visitList(node.modifiers);
            this.visitToken(node.getKeyword);
            TypeScript.visitNodeOrToken(this, node.propertyName);
            TypeScript.visitNodeOrToken(this, node.callSignature);
            TypeScript.visitNodeOrToken(this, node.body);
        };
        SyntaxWalker.prototype.visitSetAccessor = function (node) {
            this.visitList(node.modifiers);
            this.visitToken(node.setKeyword);
            TypeScript.visitNodeOrToken(this, node.propertyName);
            TypeScript.visitNodeOrToken(this, node.callSignature);
            TypeScript.visitNodeOrToken(this, node.body);
        };
        SyntaxWalker.prototype.visitPropertySignature = function (node) {
            TypeScript.visitNodeOrToken(this, node.propertyName);
            this.visitOptionalToken(node.questionToken);
            TypeScript.visitNodeOrToken(this, node.typeAnnotation);
            this.visitOptionalToken(node.semicolonOrCommaToken);
        };
        SyntaxWalker.prototype.visitCallSignature = function (node) {
            TypeScript.visitNodeOrToken(this, node.typeParameterList);
            TypeScript.visitNodeOrToken(this, node.parameterList);
            TypeScript.visitNodeOrToken(this, node.typeAnnotation);
            this.visitOptionalToken(node.semicolonOrCommaToken);
        };
        SyntaxWalker.prototype.visitConstructSignature = function (node) {
            this.visitToken(node.newKeyword);
            TypeScript.visitNodeOrToken(this, node.callSignature);
        };
        SyntaxWalker.prototype.visitIndexSignature = function (node) {
            this.visitList(node.modifiers);
            this.visitToken(node.openBracketToken);
            this.visitList(node.parameters);
            this.visitToken(node.closeBracketToken);
            TypeScript.visitNodeOrToken(this, node.typeAnnotation);
            this.visitOptionalToken(node.semicolonOrCommaToken);
        };
        SyntaxWalker.prototype.visitMethodSignature = function (node) {
            TypeScript.visitNodeOrToken(this, node.propertyName);
            this.visitOptionalToken(node.questionToken);
            TypeScript.visitNodeOrToken(this, node.callSignature);
        };
        SyntaxWalker.prototype.visitBlock = function (node) {
            this.visitOptionalToken(node.equalsGreaterThanToken);
            this.visitToken(node.openBraceToken);
            this.visitList(node.statements);
            this.visitToken(node.closeBraceToken);
        };
        SyntaxWalker.prototype.visitIfStatement = function (node) {
            this.visitToken(node.ifKeyword);
            this.visitToken(node.openParenToken);
            TypeScript.visitNodeOrToken(this, node.condition);
            this.visitToken(node.closeParenToken);
            TypeScript.visitNodeOrToken(this, node.statement);
            TypeScript.visitNodeOrToken(this, node.elseClause);
        };
        SyntaxWalker.prototype.visitVariableStatement = function (node) {
            this.visitList(node.modifiers);
            TypeScript.visitNodeOrToken(this, node.variableDeclaration);
            this.visitOptionalToken(node.semicolonToken);
        };
        SyntaxWalker.prototype.visitExpressionStatement = function (node) {
            TypeScript.visitNodeOrToken(this, node.expression);
            this.visitOptionalToken(node.semicolonToken);
        };
        SyntaxWalker.prototype.visitReturnStatement = function (node) {
            this.visitToken(node.returnKeyword);
            TypeScript.visitNodeOrToken(this, node.expression);
            this.visitOptionalToken(node.semicolonToken);
        };
        SyntaxWalker.prototype.visitSwitchStatement = function (node) {
            this.visitToken(node.switchKeyword);
            this.visitToken(node.openParenToken);
            TypeScript.visitNodeOrToken(this, node.expression);
            this.visitToken(node.closeParenToken);
            this.visitToken(node.openBraceToken);
            this.visitList(node.switchClauses);
            this.visitToken(node.closeBraceToken);
        };
        SyntaxWalker.prototype.visitBreakStatement = function (node) {
            this.visitToken(node.breakKeyword);
            this.visitOptionalToken(node.identifier);
            this.visitOptionalToken(node.semicolonToken);
        };
        SyntaxWalker.prototype.visitContinueStatement = function (node) {
            this.visitToken(node.continueKeyword);
            this.visitOptionalToken(node.identifier);
            this.visitOptionalToken(node.semicolonToken);
        };
        SyntaxWalker.prototype.visitForStatement = function (node) {
            this.visitToken(node.forKeyword);
            this.visitToken(node.openParenToken);
            TypeScript.visitNodeOrToken(this, node.initializer);
            this.visitToken(node.firstSemicolonToken);
            TypeScript.visitNodeOrToken(this, node.condition);
            this.visitToken(node.secondSemicolonToken);
            TypeScript.visitNodeOrToken(this, node.incrementor);
            this.visitToken(node.closeParenToken);
            TypeScript.visitNodeOrToken(this, node.statement);
        };
        SyntaxWalker.prototype.visitForInStatement = function (node) {
            this.visitToken(node.forKeyword);
            this.visitToken(node.openParenToken);
            TypeScript.visitNodeOrToken(this, node.left);
            this.visitToken(node.inKeyword);
            TypeScript.visitNodeOrToken(this, node.right);
            this.visitToken(node.closeParenToken);
            TypeScript.visitNodeOrToken(this, node.statement);
        };
        SyntaxWalker.prototype.visitEmptyStatement = function (node) {
            this.visitToken(node.semicolonToken);
        };
        SyntaxWalker.prototype.visitThrowStatement = function (node) {
            this.visitToken(node.throwKeyword);
            TypeScript.visitNodeOrToken(this, node.expression);
            this.visitOptionalToken(node.semicolonToken);
        };
        SyntaxWalker.prototype.visitWhileStatement = function (node) {
            this.visitToken(node.whileKeyword);
            this.visitToken(node.openParenToken);
            TypeScript.visitNodeOrToken(this, node.condition);
            this.visitToken(node.closeParenToken);
            TypeScript.visitNodeOrToken(this, node.statement);
        };
        SyntaxWalker.prototype.visitTryStatement = function (node) {
            this.visitToken(node.tryKeyword);
            TypeScript.visitNodeOrToken(this, node.block);
            TypeScript.visitNodeOrToken(this, node.catchClause);
            TypeScript.visitNodeOrToken(this, node.finallyClause);
        };
        SyntaxWalker.prototype.visitLabeledStatement = function (node) {
            this.visitToken(node.identifier);
            this.visitToken(node.colonToken);
            TypeScript.visitNodeOrToken(this, node.statement);
        };
        SyntaxWalker.prototype.visitDoStatement = function (node) {
            this.visitToken(node.doKeyword);
            TypeScript.visitNodeOrToken(this, node.statement);
            this.visitToken(node.whileKeyword);
            this.visitToken(node.openParenToken);
            TypeScript.visitNodeOrToken(this, node.condition);
            this.visitToken(node.closeParenToken);
            this.visitOptionalToken(node.semicolonToken);
        };
        SyntaxWalker.prototype.visitDebuggerStatement = function (node) {
            this.visitToken(node.debuggerKeyword);
            this.visitOptionalToken(node.semicolonToken);
        };
        SyntaxWalker.prototype.visitWithStatement = function (node) {
            this.visitToken(node.withKeyword);
            this.visitToken(node.openParenToken);
            TypeScript.visitNodeOrToken(this, node.condition);
            this.visitToken(node.closeParenToken);
            TypeScript.visitNodeOrToken(this, node.statement);
        };
        SyntaxWalker.prototype.visitPrefixUnaryExpression = function (node) {
            this.visitToken(node.operatorToken);
            TypeScript.visitNodeOrToken(this, node.operand);
        };
        SyntaxWalker.prototype.visitDeleteExpression = function (node) {
            this.visitToken(node.deleteKeyword);
            TypeScript.visitNodeOrToken(this, node.expression);
        };
        SyntaxWalker.prototype.visitTypeOfExpression = function (node) {
            this.visitToken(node.typeOfKeyword);
            TypeScript.visitNodeOrToken(this, node.expression);
        };
        SyntaxWalker.prototype.visitVoidExpression = function (node) {
            this.visitToken(node.voidKeyword);
            TypeScript.visitNodeOrToken(this, node.expression);
        };
        SyntaxWalker.prototype.visitConditionalExpression = function (node) {
            TypeScript.visitNodeOrToken(this, node.condition);
            this.visitToken(node.questionToken);
            TypeScript.visitNodeOrToken(this, node.whenTrue);
            this.visitToken(node.colonToken);
            TypeScript.visitNodeOrToken(this, node.whenFalse);
        };
        SyntaxWalker.prototype.visitBinaryExpression = function (node) {
            TypeScript.visitNodeOrToken(this, node.left);
            this.visitToken(node.operatorToken);
            TypeScript.visitNodeOrToken(this, node.right);
        };
        SyntaxWalker.prototype.visitPostfixUnaryExpression = function (node) {
            TypeScript.visitNodeOrToken(this, node.operand);
            this.visitToken(node.operatorToken);
        };
        SyntaxWalker.prototype.visitPropertyAccessExpression = function (node) {
            TypeScript.visitNodeOrToken(this, node.expression);
            this.visitToken(node.dotToken);
            this.visitToken(node.name);
        };
        SyntaxWalker.prototype.visitInvocationExpression = function (node) {
            TypeScript.visitNodeOrToken(this, node.expression);
            TypeScript.visitNodeOrToken(this, node.argumentList);
        };
        SyntaxWalker.prototype.visitArrayLiteralExpression = function (node) {
            this.visitToken(node.openBracketToken);
            this.visitList(node.expressions);
            this.visitToken(node.closeBracketToken);
        };
        SyntaxWalker.prototype.visitObjectLiteralExpression = function (node) {
            this.visitToken(node.openBraceToken);
            this.visitList(node.propertyAssignments);
            this.visitToken(node.closeBraceToken);
        };
        SyntaxWalker.prototype.visitObjectCreationExpression = function (node) {
            this.visitToken(node.newKeyword);
            TypeScript.visitNodeOrToken(this, node.expression);
            TypeScript.visitNodeOrToken(this, node.argumentList);
        };
        SyntaxWalker.prototype.visitParenthesizedExpression = function (node) {
            this.visitToken(node.openParenToken);
            TypeScript.visitNodeOrToken(this, node.expression);
            this.visitToken(node.closeParenToken);
        };
        SyntaxWalker.prototype.visitParenthesizedArrowFunctionExpression = function (node) {
            this.visitOptionalToken(node.asyncKeyword);
            TypeScript.visitNodeOrToken(this, node.callSignature);
            this.visitOptionalToken(node.equalsGreaterThanToken);
            TypeScript.visitNodeOrToken(this, node.body);
        };
        SyntaxWalker.prototype.visitSimpleArrowFunctionExpression = function (node) {
            this.visitOptionalToken(node.asyncKeyword);
            TypeScript.visitNodeOrToken(this, node.parameter);
            this.visitToken(node.equalsGreaterThanToken);
            TypeScript.visitNodeOrToken(this, node.body);
        };
        SyntaxWalker.prototype.visitTypeAssertionExpression = function (node) {
            this.visitToken(node.lessThanToken);
            TypeScript.visitNodeOrToken(this, node.type);
            this.visitToken(node.greaterThanToken);
            TypeScript.visitNodeOrToken(this, node.expression);
        };
        SyntaxWalker.prototype.visitElementAccessExpression = function (node) {
            TypeScript.visitNodeOrToken(this, node.expression);
            this.visitToken(node.openBracketToken);
            TypeScript.visitNodeOrToken(this, node.argumentExpression);
            this.visitToken(node.closeBracketToken);
        };
        SyntaxWalker.prototype.visitFunctionExpression = function (node) {
            this.visitOptionalToken(node.asyncKeyword);
            this.visitToken(node.functionKeyword);
            this.visitOptionalToken(node.asterixToken);
            this.visitOptionalToken(node.identifier);
            TypeScript.visitNodeOrToken(this, node.callSignature);
            TypeScript.visitNodeOrToken(this, node.body);
        };
        SyntaxWalker.prototype.visitOmittedExpression = function (node) {
        };
        SyntaxWalker.prototype.visitTemplateExpression = function (node) {
            this.visitToken(node.templateStartToken);
            this.visitList(node.templateClauses);
        };
        SyntaxWalker.prototype.visitTemplateAccessExpression = function (node) {
            TypeScript.visitNodeOrToken(this, node.expression);
            TypeScript.visitNodeOrToken(this, node.templateExpression);
        };
        SyntaxWalker.prototype.visitYieldExpression = function (node) {
            this.visitToken(node.yieldKeyword);
            this.visitOptionalToken(node.asterixToken);
            TypeScript.visitNodeOrToken(this, node.expression);
        };
        SyntaxWalker.prototype.visitAwaitExpression = function (node) {
            this.visitToken(node.awaitKeyword);
            TypeScript.visitNodeOrToken(this, node.expression);
        };
        SyntaxWalker.prototype.visitVariableDeclaration = function (node) {
            this.visitToken(node.varConstOrLetKeyword);
            this.visitList(node.variableDeclarators);
        };
        SyntaxWalker.prototype.visitVariableDeclarator = function (node) {
            TypeScript.visitNodeOrToken(this, node.propertyName);
            TypeScript.visitNodeOrToken(this, node.typeAnnotation);
            TypeScript.visitNodeOrToken(this, node.equalsValueClause);
        };
        SyntaxWalker.prototype.visitArgumentList = function (node) {
            TypeScript.visitNodeOrToken(this, node.typeArgumentList);
            this.visitToken(node.openParenToken);
            this.visitList(node.arguments);
            this.visitToken(node.closeParenToken);
        };
        SyntaxWalker.prototype.visitParameterList = function (node) {
            this.visitToken(node.openParenToken);
            this.visitList(node.parameters);
            this.visitToken(node.closeParenToken);
        };
        SyntaxWalker.prototype.visitTypeArgumentList = function (node) {
            this.visitToken(node.lessThanToken);
            this.visitList(node.typeArguments);
            this.visitToken(node.greaterThanToken);
        };
        SyntaxWalker.prototype.visitTypeParameterList = function (node) {
            this.visitToken(node.lessThanToken);
            this.visitList(node.typeParameters);
            this.visitToken(node.greaterThanToken);
        };
        SyntaxWalker.prototype.visitHeritageClause = function (node) {
            this.visitToken(node.extendsOrImplementsKeyword);
            this.visitList(node.typeNames);
        };
        SyntaxWalker.prototype.visitEqualsValueClause = function (node) {
            this.visitToken(node.equalsToken);
            TypeScript.visitNodeOrToken(this, node.value);
        };
        SyntaxWalker.prototype.visitCaseSwitchClause = function (node) {
            this.visitToken(node.caseKeyword);
            TypeScript.visitNodeOrToken(this, node.expression);
            this.visitToken(node.colonToken);
            this.visitList(node.statements);
        };
        SyntaxWalker.prototype.visitDefaultSwitchClause = function (node) {
            this.visitToken(node.defaultKeyword);
            this.visitToken(node.colonToken);
            this.visitList(node.statements);
        };
        SyntaxWalker.prototype.visitElseClause = function (node) {
            this.visitToken(node.elseKeyword);
            TypeScript.visitNodeOrToken(this, node.statement);
        };
        SyntaxWalker.prototype.visitCatchClause = function (node) {
            this.visitToken(node.catchKeyword);
            this.visitToken(node.openParenToken);
            this.visitToken(node.identifier);
            TypeScript.visitNodeOrToken(this, node.typeAnnotation);
            this.visitToken(node.closeParenToken);
            TypeScript.visitNodeOrToken(this, node.block);
        };
        SyntaxWalker.prototype.visitFinallyClause = function (node) {
            this.visitToken(node.finallyKeyword);
            TypeScript.visitNodeOrToken(this, node.block);
        };
        SyntaxWalker.prototype.visitTemplateClause = function (node) {
            TypeScript.visitNodeOrToken(this, node.expression);
            this.visitToken(node.templateMiddleOrEndToken);
        };
        SyntaxWalker.prototype.visitTypeParameter = function (node) {
            this.visitToken(node.identifier);
            TypeScript.visitNodeOrToken(this, node.constraint);
        };
        SyntaxWalker.prototype.visitConstraint = function (node) {
            this.visitToken(node.extendsKeyword);
            TypeScript.visitNodeOrToken(this, node.typeOrExpression);
        };
        SyntaxWalker.prototype.visitParameter = function (node) {
            this.visitOptionalToken(node.dotDotDotToken);
            this.visitList(node.modifiers);
            this.visitToken(node.identifier);
            this.visitOptionalToken(node.questionToken);
            TypeScript.visitNodeOrToken(this, node.typeAnnotation);
            TypeScript.visitNodeOrToken(this, node.equalsValueClause);
        };
        SyntaxWalker.prototype.visitEnumElement = function (node) {
            TypeScript.visitNodeOrToken(this, node.propertyName);
            TypeScript.visitNodeOrToken(this, node.equalsValueClause);
        };
        SyntaxWalker.prototype.visitTypeAnnotation = function (node) {
            this.visitToken(node.colonToken);
            TypeScript.visitNodeOrToken(this, node.type);
        };
        SyntaxWalker.prototype.visitExpressionBody = function (node) {
            this.visitToken(node.equalsGreaterThanToken);
            TypeScript.visitNodeOrToken(this, node.expression);
        };
        SyntaxWalker.prototype.visitComputedPropertyName = function (node) {
            this.visitToken(node.openBracketToken);
            TypeScript.visitNodeOrToken(this, node.expression);
            this.visitToken(node.closeBracketToken);
        };
        SyntaxWalker.prototype.visitPropertyAssignment = function (node) {
            TypeScript.visitNodeOrToken(this, node.propertyName);
            this.visitToken(node.colonToken);
            TypeScript.visitNodeOrToken(this, node.expression);
        };
        SyntaxWalker.prototype.visitTypeAlias = function (node) {
            this.visitList(node.modifiers);
            this.visitToken(node.typeKeyword);
            this.visitToken(node.identifier);
            this.visitToken(node.equalsToken);
            TypeScript.visitNodeOrToken(this, node.type);
            this.visitOptionalToken(node.semicolonToken);
        };
        SyntaxWalker.prototype.visitExternalModuleReference = function (node) {
            this.visitToken(node.requireKeyword);
            this.visitToken(node.openParenToken);
            TypeScript.visitNodeOrToken(this, node.expression);
            this.visitToken(node.closeParenToken);
        };
        SyntaxWalker.prototype.visitModuleNameModuleReference = function (node) {
            TypeScript.visitNodeOrToken(this, node.moduleName);
        };
        return SyntaxWalker;
    })();
    TypeScript.SyntaxWalker = SyntaxWalker;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    function childCount(element) {
        if (TypeScript.isList(element)) {
            return element.length;
        }
        return element.childCount;
    }
    TypeScript.childCount = childCount;
    function childAt(element, index) {
        if (TypeScript.isList(element)) {
            return element[index];
        }
        return element.childAt(index);
    }
    TypeScript.childAt = childAt;
    var TokenCollectorWalker = (function (_super) {
        __extends(TokenCollectorWalker, _super);
        function TokenCollectorWalker() {
            _super.apply(this, arguments);
            this.tokens = [];
        }
        TokenCollectorWalker.prototype.visitToken = function (token) {
            this.tokens.push(token);
        };
        return TokenCollectorWalker;
    })(TypeScript.SyntaxWalker);
    var tokenCollectorWalker = new TokenCollectorWalker();
    function getTokens(node) {
        var tokens = node.__cachedTokens;
        if (!tokens) {
            tokens = [];
            tokenCollectorWalker.tokens = tokens;
            TypeScript.visitNodeOrToken(tokenCollectorWalker, node);
            node.__cachedTokens = tokens;
            tokenCollectorWalker.tokens = undefined;
        }
        return tokens;
    }
    TypeScript.getTokens = getTokens;
    var SyntaxUtilities;
    (function (SyntaxUtilities) {
        function isAnyFunctionExpressionOrDeclaration(ast) {
            switch (ast.kind) {
                case 185 /* SimpleArrowFunctionExpression */:
                case 184 /* ParenthesizedArrowFunctionExpression */:
                case 188 /* FunctionExpression */:
                case 137 /* FunctionDeclaration */:
                case 143 /* MethodDeclaration */:
                case 145 /* ConstructorDeclaration */:
                case 146 /* GetAccessor */:
                case 147 /* SetAccessor */:
                    return true;
            }
            return false;
        }
        SyntaxUtilities.isAnyFunctionExpressionOrDeclaration = isAnyFunctionExpressionOrDeclaration;
        function isLeftHandSizeExpression(element) {
            if (element) {
                switch (element.kind) {
                    case 178 /* PropertyAccessExpression */:
                    case 187 /* ElementAccessExpression */:
                    case 191 /* TemplateAccessExpression */:
                    case 182 /* ObjectCreationExpression */:
                    case 179 /* InvocationExpression */:
                    case 180 /* ArrayLiteralExpression */:
                    case 183 /* ParenthesizedExpression */:
                    case 181 /* ObjectLiteralExpression */:
                    case 188 /* FunctionExpression */:
                    case 9 /* IdentifierName */:
                    case 10 /* RegularExpressionLiteral */:
                    case 11 /* NumericLiteral */:
                    case 12 /* StringLiteral */:
                    case 26 /* FalseKeyword */:
                    case 34 /* NullKeyword */:
                    case 37 /* ThisKeyword */:
                    case 39 /* TrueKeyword */:
                    case 52 /* SuperKeyword */:
                        return true;
                }
            }
            return false;
        }
        SyntaxUtilities.isLeftHandSizeExpression = isLeftHandSizeExpression;
        function isSwitchClause(element) {
            if (element) {
                switch (element.kind) {
                    case 202 /* CaseSwitchClause */:
                    case 203 /* DefaultSwitchClause */:
                        return true;
                }
            }
            return false;
        }
        SyntaxUtilities.isSwitchClause = isSwitchClause;
        function isTypeMember(element) {
            if (element) {
                switch (element.kind) {
                    case 150 /* ConstructSignature */:
                    case 152 /* MethodSignature */:
                    case 151 /* IndexSignature */:
                    case 148 /* PropertySignature */:
                    case 149 /* CallSignature */:
                        return true;
                }
            }
            return false;
        }
        SyntaxUtilities.isTypeMember = isTypeMember;
        function isClassElement(element) {
            if (element) {
                switch (element.kind) {
                    case 145 /* ConstructorDeclaration */:
                    case 151 /* IndexSignature */:
                    case 143 /* MethodDeclaration */:
                    case 146 /* GetAccessor */:
                    case 147 /* SetAccessor */:
                    case 144 /* PropertyDeclaration */:
                        return true;
                }
            }
            return false;
        }
        SyntaxUtilities.isClassElement = isClassElement;
        function isModuleElement(element) {
            if (element) {
                switch (element.kind) {
                    case 141 /* ImportDeclaration */:
                    case 142 /* ExportAssignment */:
                    case 139 /* ClassDeclaration */:
                    case 136 /* InterfaceDeclaration */:
                    case 138 /* ModuleDeclaration */:
                    case 140 /* EnumDeclaration */:
                    case 137 /* FunctionDeclaration */:
                    case 155 /* VariableStatement */:
                    case 153 /* Block */:
                    case 154 /* IfStatement */:
                    case 156 /* ExpressionStatement */:
                    case 164 /* ThrowStatement */:
                    case 157 /* ReturnStatement */:
                    case 158 /* SwitchStatement */:
                    case 159 /* BreakStatement */:
                    case 160 /* ContinueStatement */:
                    case 162 /* ForInStatement */:
                    case 161 /* ForStatement */:
                    case 165 /* WhileStatement */:
                    case 170 /* WithStatement */:
                    case 163 /* EmptyStatement */:
                    case 166 /* TryStatement */:
                    case 167 /* LabeledStatement */:
                    case 168 /* DoStatement */:
                    case 169 /* DebuggerStatement */:
                        return true;
                }
            }
            return false;
        }
        SyntaxUtilities.isModuleElement = isModuleElement;
        function isStatement(element) {
            if (element) {
                switch (element.kind) {
                    case 137 /* FunctionDeclaration */:
                    case 155 /* VariableStatement */:
                    case 153 /* Block */:
                    case 154 /* IfStatement */:
                    case 156 /* ExpressionStatement */:
                    case 164 /* ThrowStatement */:
                    case 157 /* ReturnStatement */:
                    case 158 /* SwitchStatement */:
                    case 159 /* BreakStatement */:
                    case 160 /* ContinueStatement */:
                    case 162 /* ForInStatement */:
                    case 161 /* ForStatement */:
                    case 165 /* WhileStatement */:
                    case 170 /* WithStatement */:
                    case 163 /* EmptyStatement */:
                    case 166 /* TryStatement */:
                    case 167 /* LabeledStatement */:
                    case 168 /* DoStatement */:
                    case 169 /* DebuggerStatement */:
                        return true;
                }
            }
            return false;
        }
        SyntaxUtilities.isStatement = isStatement;
        function getToken(list, kind) {
            for (var i = 0, n = list.length; i < n; i++) {
                var token = list[i];
                if (token.kind === kind) {
                    return token;
                }
            }
            return undefined;
        }
        SyntaxUtilities.getToken = getToken;
        function containsToken(list, kind) {
            return !!SyntaxUtilities.getToken(list, kind);
        }
        SyntaxUtilities.containsToken = containsToken;
    })(SyntaxUtilities = TypeScript.SyntaxUtilities || (TypeScript.SyntaxUtilities = {}));
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var Parser;
    (function (Parser) {
        function createParseSyntaxTree() {
            var source;
            var listParsingState = 0;
            var contextFlags = 0;
            var diagnostics = [];
            var skippedTokens = undefined;
            function setContextFlag(val, flag) {
                if (val) {
                    contextFlags |= flag;
                }
                else {
                    contextFlags &= ~flag;
                }
            }
            function setStrictModeContext(val) {
                setContextFlag(val, 1 /* StrictMode */);
            }
            function setDisallowInContext(val) {
                setContextFlag(val, 2 /* DisallowIn */);
            }
            function setYieldContext(val) {
                setContextFlag(val, 4 /* Yield */);
            }
            function setGeneratorParameterContext(val) {
                setContextFlag(val, 8 /* GeneratorParameter */);
            }
            function setAsyncContext(val) {
                setContextFlag(val, 16 /* Async */);
            }
            function inStrictModeContext() {
                return (contextFlags & 1 /* StrictMode */) !== 0;
            }
            function inDisallowInContext() {
                return (contextFlags & 2 /* DisallowIn */) !== 0;
            }
            function inYieldContext() {
                return (contextFlags & 4 /* Yield */) !== 0;
            }
            function inGeneratorParameterContext() {
                return (contextFlags & 8 /* GeneratorParameter */) !== 0;
            }
            function inAsyncContext() {
                return (contextFlags & 16 /* Async */) !== 0;
            }
            function allowInAnd(func) {
                if (inDisallowInContext()) {
                    setDisallowInContext(false);
                    var result = func();
                    setDisallowInContext(true);
                    return result;
                }
                return func();
            }
            function disallowInAnd(func) {
                if (inDisallowInContext()) {
                    return func();
                }
                setDisallowInContext(true);
                var result = func();
                setDisallowInContext(false);
                return result;
            }
            function doInsideYieldContext(func) {
                if (inYieldContext()) {
                    return func();
                }
                setYieldContext(true);
                var result = func();
                setYieldContext(false);
                return result;
            }
            function doOutsideYieldContext(func) {
                if (inYieldContext()) {
                    setYieldContext(false);
                    var result = func();
                    setYieldContext(true);
                    return result;
                }
                return func();
            }
            function doInsideAsyncContext(func) {
                if (inAsyncContext()) {
                    return func();
                }
                setAsyncContext(true);
                var result = func();
                setAsyncContext(false);
                return result;
            }
            function doOutsideAsyncContext(func) {
                if (inAsyncContext()) {
                    setAsyncContext(false);
                    var result = func();
                    setAsyncContext(true);
                    return result;
                }
                return func();
            }
            function parseSyntaxTree(_source, isDeclaration) {
                source = _source;
                var result = parseSyntaxTreeWorker(isDeclaration);
                diagnostics = [];
                contextFlags = 0;
                source = undefined;
                return result;
            }
            function parseSyntaxTreeWorker(isDeclaration) {
                var sourceUnit = parseSourceUnit();
                setupParentsForSyntaxNodeOrToken(sourceUnit);
                var allDiagnostics = source.diagnostics().concat(diagnostics);
                allDiagnostics.sort(function (a, b) { return a.start() - b.start(); });
                return new TypeScript.SyntaxTree(sourceUnit, isDeclaration, allDiagnostics, source.fileName, source.text, source.languageVersion);
            }
            function setupParentsForElement(element, parent) {
                if (element) {
                    if (element.parent === parent) {
                        return;
                    }
                    element.parent = parent;
                    if (TypeScript.isList(element)) {
                        setupParentsForList(element);
                    }
                    else {
                        setupParentsForSyntaxNodeOrToken(element);
                    }
                }
            }
            function setupParentsForList(list) {
                for (var i = 0, n = list.length; i < n; i++) {
                    setupParentsForElement(list[i], list);
                }
            }
            function setupParentsForSyntaxNodeOrToken(nodeOrToken) {
                for (var i = 0, n = nodeOrToken.childCount; i < n; i++) {
                    setupParentsForElement(nodeOrToken.childAt(i), nodeOrToken);
                }
            }
            function tryParse(callback) {
                var savedDiagnosticsCount = diagnostics.length;
                var savedSkippedTokens = skippedTokens ? skippedTokens.slice(0) : undefined;
                var result = source.tryParse(callback);
                if (!result) {
                    diagnostics.length = savedDiagnosticsCount;
                    skippedTokens = savedSkippedTokens;
                }
                return result;
            }
            function currentToken() {
                return source.currentToken();
            }
            function currentContextualToken() {
                return source.currentContextualToken();
            }
            function peekToken(n) {
                return source.peekToken(n);
            }
            function skipToken(token) {
                skippedTokens = skippedTokens || [];
                skippedTokens.push(token);
                source.consumeNodeOrToken(token);
            }
            function consumeToken(token) {
                source.consumeNodeOrToken(token);
                if (skippedTokens) {
                    token = addSkippedTokensBeforeToken(token, skippedTokens);
                    skippedTokens = undefined;
                }
                return token;
            }
            function addSkippedTokensBeforeToken(token, skippedTokens) {
                var leadingTrivia = [];
                for (var i = 0, n = skippedTokens.length; i < n; i++) {
                    var skippedToken = skippedTokens[i];
                    addSkippedTokenToTriviaArray(leadingTrivia, skippedToken);
                }
                addTriviaTo(token.leadingTrivia(source.text), leadingTrivia);
                var updatedToken = TypeScript.Syntax.withLeadingTrivia(token, TypeScript.Syntax.triviaList(leadingTrivia), source.text);
                updatedToken.setFullStart(skippedTokens[0].fullStart());
                return updatedToken;
            }
            function addSkippedTokenToTriviaArray(array, skippedToken) {
                addTriviaTo(skippedToken.leadingTrivia(source.text), array);
                var trimmedToken = TypeScript.Syntax.withLeadingTrivia(skippedToken, TypeScript.Syntax.emptyTriviaList, source.text);
                trimmedToken.setFullStart(TypeScript.start(skippedToken, source.text));
                array.push(TypeScript.Syntax.skippedTokenTrivia(trimmedToken, source.text));
            }
            function addTriviaTo(list, array) {
                for (var i = 0, n = list.count(); i < n; i++) {
                    array.push(list.syntaxTriviaAt(i));
                }
            }
            function consumeNode(node) {
                TypeScript.Debug.assert(skippedTokens === undefined);
                source.consumeNodeOrToken(node);
                return node;
            }
            function eatToken(kind) {
                var token = currentToken();
                if (token.kind === kind) {
                    return consumeToken(token);
                }
                return createMissingToken(kind, token);
            }
            function tryEatToken(kind) {
                var _currentToken = currentToken();
                if (_currentToken.kind === kind) {
                    return consumeToken(_currentToken);
                }
                return undefined;
            }
            function isIdentifier(token) {
                var tokenKind = token.kind;
                if (tokenKind === 9 /* IdentifierName */) {
                    return true;
                }
                if (tokenKind === 61 /* YieldKeyword */ && inYieldContext()) {
                    return false;
                }
                if (tokenKind === 64 /* AwaitKeyword */ && inAsyncContext()) {
                    return false;
                }
                if (tokenKind >= 53 /* FirstFutureReservedStrictKeyword */) {
                    if (tokenKind <= 61 /* LastFutureReservedStrictKeyword */) {
                        return !inStrictModeContext();
                    }
                    return tokenKind <= 74 /* LastTypeScriptKeyword */;
                }
                return false;
            }
            function eatIdentifierNameToken() {
                var token = currentToken();
                var tokenKind = token.kind;
                if (tokenKind === 9 /* IdentifierName */) {
                    return consumeToken(token);
                }
                if (TypeScript.SyntaxFacts.isAnyKeyword(tokenKind)) {
                    return TypeScript.Syntax.convertKeywordToIdentifier(consumeToken(token));
                }
                return createMissingToken(9 /* IdentifierName */, token);
            }
            function eatOptionalIdentifierToken() {
                return isIdentifier(currentToken()) ? eatIdentifierToken() : undefined;
            }
            function eatIdentifierToken(diagnosticCode) {
                var token = currentToken();
                if (isIdentifier(token)) {
                    if (token.kind === 9 /* IdentifierName */) {
                        return consumeToken(token);
                    }
                    return TypeScript.Syntax.convertKeywordToIdentifier(consumeToken(token));
                }
                return createMissingToken(9 /* IdentifierName */, token, diagnosticCode);
            }
            function canEatAutomaticSemicolon() {
                var token = currentToken();
                var tokenKind = token.kind;
                if (tokenKind === 8 /* EndOfFileToken */) {
                    return true;
                }
                if (tokenKind === 76 /* CloseBraceToken */) {
                    return true;
                }
                if (token.hasLeadingNewLine()) {
                    return true;
                }
                return false;
            }
            function canEatExplicitOrAutomaticSemicolon() {
                var token = currentToken();
                if (token.kind === 83 /* SemicolonToken */) {
                    return true;
                }
                return canEatAutomaticSemicolon();
            }
            function eatExplicitOrAutomaticSemicolon() {
                var token = currentToken();
                if (token.kind === 83 /* SemicolonToken */) {
                    return consumeToken(token);
                }
                if (canEatAutomaticSemicolon()) {
                    return undefined;
                }
                return eatToken(83 /* SemicolonToken */);
            }
            function createEmptyToken(kind) {
                var fullStart = skippedTokens ? skippedTokens[0].fullStart() : source.absolutePosition();
                return TypeScript.Syntax.emptyToken(kind, fullStart);
            }
            function createMissingToken(expectedKind, actual, diagnosticCode, args) {
                var diagnostic = getExpectedTokenDiagnostic(expectedKind, actual, diagnosticCode, args);
                addDiagnostic(diagnostic);
                return createEmptyToken(expectedKind);
            }
            function getExpectedTokenDiagnostic(expectedKind, actual, diagnosticCode, args) {
                var token = currentToken();
                if (!diagnosticCode) {
                    if (TypeScript.SyntaxFacts.isAnyKeyword(expectedKind) || TypeScript.SyntaxFacts.isAnyPunctuation(expectedKind)) {
                        diagnosticCode = TypeScript.DiagnosticCode._0_expected;
                        args = [TypeScript.SyntaxFacts.getText(expectedKind)];
                    }
                    else {
                        if (actual && TypeScript.SyntaxFacts.isAnyKeyword(actual.kind)) {
                            diagnosticCode = TypeScript.DiagnosticCode.Identifier_expected_0_is_a_keyword;
                            args = [TypeScript.SyntaxFacts.getText(actual.kind)];
                        }
                        else {
                            diagnosticCode = TypeScript.DiagnosticCode.Identifier_expected;
                        }
                    }
                }
                return new TypeScript.Diagnostic(source.fileName, source.text.lineMap(), TypeScript.start(token, source.text), TypeScript.width(token), diagnosticCode, args);
            }
            function getBinaryExpressionPrecedence(tokenKind) {
                switch (tokenKind) {
                    case 109 /* BarBarToken */: return 2 /* LogicalOrExpressionPrecedence */;
                    case 108 /* AmpersandAmpersandToken */: return 3 /* LogicalAndExpressionPrecedence */;
                    case 104 /* BarToken */: return 4 /* BitwiseOrExpressionPrecedence */;
                    case 105 /* CaretToken */: return 5 /* BitwiseExclusiveOrExpressionPrecedence */;
                    case 103 /* AmpersandToken */: return 6 /* BitwiseAndExpressionPrecedence */;
                    case 89 /* EqualsEqualsToken */:
                    case 91 /* ExclamationEqualsToken */:
                    case 92 /* EqualsEqualsEqualsToken */:
                    case 93 /* ExclamationEqualsEqualsToken */:
                        return 7 /* EqualityExpressionPrecedence */;
                    case 85 /* LessThanToken */:
                    case 86 /* GreaterThanToken */:
                    case 87 /* LessThanEqualsToken */:
                    case 88 /* GreaterThanEqualsToken */:
                    case 32 /* InstanceOfKeyword */:
                    case 31 /* InKeyword */:
                        return 8 /* RelationalExpressionPrecedence */;
                    case 100 /* LessThanLessThanToken */:
                    case 101 /* GreaterThanGreaterThanToken */:
                    case 102 /* GreaterThanGreaterThanGreaterThanToken */:
                        return 9 /* ShiftExpressionPrecdence */;
                    case 94 /* PlusToken */:
                    case 95 /* MinusToken */:
                        return 10 /* AdditiveExpressionPrecedence */;
                    case 96 /* AsteriskToken */:
                    case 123 /* SlashToken */:
                    case 97 /* PercentToken */:
                        return 11 /* MultiplicativeExpressionPrecedence */;
                }
                throw TypeScript.Errors.invalidOperation();
            }
            function parseSourceUnit() {
                var savedIsInStrictMode = inStrictModeContext();
                var moduleElements = parseSyntaxList(0 /* SourceUnit_ModuleElements */, updateStrictModeState);
                setStrictModeContext(savedIsInStrictMode);
                var sourceUnit = new TypeScript.SourceUnitSyntax(contextFlags, moduleElements, consumeToken(currentToken()));
                if (TypeScript.Debug.shouldAssert(2 /* Aggressive */)) {
                    TypeScript.Debug.assert(TypeScript.fullWidth(sourceUnit) === source.text.length());
                    if (TypeScript.Debug.shouldAssert(3 /* VeryAggressive */)) {
                        TypeScript.Debug.assert(TypeScript.fullText(sourceUnit) === source.text.substr(0, source.text.length()));
                    }
                }
                return sourceUnit;
            }
            function isDirectivePrologueElement(node) {
                return node.kind === 156 /* ExpressionStatement */ && node.expression.kind === 12 /* StringLiteral */;
            }
            function updateStrictModeState(items) {
                if (!inStrictModeContext()) {
                    for (var i = 0, n = items.length; i < n; i++) {
                        if (!isDirectivePrologueElement(items[i])) {
                            return;
                        }
                    }
                    setStrictModeContext(TypeScript.SyntaxFacts.isUseStrictDirective(items[items.length - 1]));
                }
            }
            function isModuleElement(inErrorRecovery) {
                var _modifierCount = modifierCount();
                return isInterfaceEnumClassModuleImportExportOrTypeAlias(_modifierCount) || isStatement(_modifierCount, inErrorRecovery);
            }
            function tryParseModuleElement(inErrorRecovery) {
                var _currentToken = currentToken();
                var _modifierCount = modifierCount();
                if (_modifierCount) {
                    switch (peekToken(_modifierCount).kind) {
                        case 51 /* ImportKeyword */: return parseImportDeclaration();
                        case 69 /* ModuleKeyword */: return parseModuleDeclaration();
                        case 54 /* InterfaceKeyword */: return parseInterfaceDeclaration();
                        case 46 /* ClassKeyword */: return parseClassDeclaration();
                        case 48 /* EnumKeyword */: return parseEnumDeclaration();
                        case 49 /* ExportKeyword */: return parseExportAssignment();
                        case 73 /* TypeKeyword */: return parseTypeAlias();
                    }
                }
                var nextToken = peekToken(1);
                var currentTokenKind = _currentToken.kind;
                switch (currentTokenKind) {
                    case 69 /* ModuleKeyword */:
                        if (isIdentifier(nextToken) || nextToken.kind === 12 /* StringLiteral */) {
                            return parseModuleDeclaration();
                        }
                        break;
                    case 51 /* ImportKeyword */:
                        if (isIdentifier(nextToken)) {
                            return parseImportDeclaration();
                        }
                        break;
                    case 46 /* ClassKeyword */:
                        if (isIdentifier(nextToken)) {
                            return parseClassDeclaration();
                        }
                        break;
                    case 48 /* EnumKeyword */:
                        if (isIdentifier(nextToken)) {
                            return parseEnumDeclaration();
                        }
                        break;
                    case 54 /* InterfaceKeyword */:
                        if (isIdentifier(nextToken)) {
                            return parseInterfaceDeclaration();
                        }
                        break;
                    case 73 /* TypeKeyword */:
                        if (isIdentifier(nextToken)) {
                            return parseTypeAlias();
                        }
                        break;
                    case 49 /* ExportKeyword */:
                        if (nextToken.kind === 112 /* EqualsToken */) {
                            return parseExportAssignment();
                        }
                        break;
                }
                return tryParseStatementWorker(_currentToken, currentTokenKind, _modifierCount, inErrorRecovery);
            }
            function parseImportDeclaration() {
                return new TypeScript.ImportDeclarationSyntax(contextFlags, parseModifiers(), eatToken(51 /* ImportKeyword */), eatIdentifierToken(), eatToken(112 /* EqualsToken */), parseModuleReference(), eatExplicitOrAutomaticSemicolon());
            }
            function parseExportAssignment() {
                return new TypeScript.ExportAssignmentSyntax(contextFlags, parseModifiers(), eatToken(49 /* ExportKeyword */), eatToken(112 /* EqualsToken */), eatIdentifierToken(), eatExplicitOrAutomaticSemicolon());
            }
            function parseModuleReference() {
                return isExternalModuleReference() ? parseExternalModuleReference() : parseModuleNameModuleReference();
            }
            function isExternalModuleReference() {
                return currentToken().kind === 70 /* RequireKeyword */ && peekToken(1).kind === 77 /* OpenParenToken */;
            }
            function parseExternalModuleReference() {
                return new TypeScript.ExternalModuleReferenceSyntax(contextFlags, eatToken(70 /* RequireKeyword */), eatToken(77 /* OpenParenToken */), parseExpression(), eatToken(78 /* CloseParenToken */));
            }
            function parseModuleNameModuleReference() {
                return new TypeScript.ModuleNameModuleReferenceSyntax(contextFlags, parseName(false));
            }
            function parseName(allowIdentifierName) {
                return tryParseName(allowIdentifierName) || eatIdentifierToken();
            }
            function eatRightSideOfDot(allowIdentifierNames) {
                var _currentToken = currentToken();
                if (TypeScript.SyntaxFacts.isAnyKeyword(_currentToken.kind) && _currentToken.hasLeadingNewLine()) {
                    var token1 = peekToken(1);
                    if (!token1.hasLeadingNewLine() && TypeScript.SyntaxFacts.isIdentifierNameOrAnyKeyword(token1)) {
                        return createMissingToken(9 /* IdentifierName */, _currentToken);
                    }
                }
                return allowIdentifierNames ? eatIdentifierNameToken() : eatIdentifierToken();
            }
            function tryParseName(allowIdentifierNames) {
                var token0 = currentToken();
                var shouldContinue = isIdentifier(token0);
                if (!shouldContinue) {
                    return undefined;
                }
                var current = eatIdentifierToken();
                while (shouldContinue && currentToken().kind === 81 /* DotToken */) {
                    var dotToken = consumeToken(currentToken());
                    var identifierName = eatRightSideOfDot(allowIdentifierNames);
                    current = new TypeScript.QualifiedNameSyntax(contextFlags, current, dotToken, identifierName);
                    shouldContinue = identifierName.fullWidth() > 0;
                }
                return current;
            }
            function parseEnumDeclaration() {
                var openBraceToken;
                return new TypeScript.EnumDeclarationSyntax(contextFlags, parseModifiers(), eatToken(48 /* EnumKeyword */), eatIdentifierToken(), openBraceToken = eatToken(75 /* OpenBraceToken */), openBraceToken.fullWidth() > 0 ? parseSeparatedSyntaxList(8 /* EnumDeclaration_EnumElements */) : [], eatToken(76 /* CloseBraceToken */));
            }
            function isEnumElement(inErrorRecovery) {
                return isPropertyName(0, inErrorRecovery);
            }
            function tryParseEnumElementEqualsValueClause() {
                return isEqualsValueClause(false) ? allowInAnd(parseEqualsValueClause) : undefined;
            }
            function tryParseEnumElement(inErrorRecovery) {
                if (!isPropertyName(0, inErrorRecovery)) {
                    return undefined;
                }
                return new TypeScript.EnumElementSyntax(contextFlags, parsePropertyName(), tryParseEnumElementEqualsValueClause());
            }
            function isModifierKind(kind) {
                switch (kind) {
                    case 49 /* ExportKeyword */:
                    case 59 /* PublicKeyword */:
                    case 57 /* PrivateKeyword */:
                    case 58 /* ProtectedKeyword */:
                    case 60 /* StaticKeyword */:
                    case 67 /* DeclareKeyword */:
                    case 63 /* AsyncKeyword */:
                    case 47 /* ConstKeyword */:
                        return true;
                }
                return false;
            }
            function isModifier(token, peekIndex) {
                if (isModifierKind(token.kind)) {
                    var nextToken = peekToken(peekIndex + 1);
                    if (token.kind === 63 /* AsyncKeyword */) {
                        if (nextToken.hasLeadingNewLine()) {
                            return false;
                        }
                    }
                    if (token.kind === 47 /* ConstKeyword */) {
                        return nextToken.kind === 48 /* EnumKeyword */;
                    }
                    var nextTokenKind = nextToken.kind;
                    switch (nextTokenKind) {
                        case 9 /* IdentifierName */:
                        case 79 /* OpenBracketToken */:
                        case 11 /* NumericLiteral */:
                        case 12 /* StringLiteral */:
                        case 13 /* NoSubstitutionTemplateToken */:
                        case 96 /* AsteriskToken */:
                            return true;
                        default:
                            return TypeScript.SyntaxFacts.isAnyKeyword(nextTokenKind);
                    }
                }
                return false;
            }
            function isAtModifier() {
                return isModifier(currentToken(), 0);
            }
            function modifierCount() {
                var modifierCount = 0;
                while (isModifier(peekToken(modifierCount), modifierCount)) {
                    modifierCount++;
                }
                return modifierCount;
            }
            function parseModifiers() {
                var tokens = [];
                while (true) {
                    var token = currentToken();
                    if (isModifier(token, 0)) {
                        tokens.push(consumeToken(token));
                        continue;
                    }
                    break;
                }
                return tokens;
            }
            function parseHeritageClauses(isClassHeritageClause) {
                if (isHeritageClause()) {
                    return isClassHeritageClause && inGeneratorParameterContext() ? doOutsideYieldContext(parseHeritageClausesWorker) : parseHeritageClausesWorker();
                }
                return [];
            }
            function parseHeritageClausesWorker() {
                return parseSyntaxList(10 /* ClassOrInterfaceDeclaration_HeritageClauses */);
            }
            function tryParseHeritageClauseTypeName() {
                return isHeritageClauseTypeName() ? tryParseNameOrGenericType() : undefined;
            }
            function parseClassDeclaration() {
                var openBraceToken;
                return new TypeScript.ClassDeclarationSyntax(contextFlags, parseModifiers(), eatToken(46 /* ClassKeyword */), eatIdentifierToken(), tryParseTypeParameterList(false), parseHeritageClauses(true), openBraceToken = eatToken(75 /* OpenBraceToken */), openBraceToken.fullWidth() > 0 ? parseSyntaxList(1 /* ClassDeclaration_ClassElements */) : [], eatToken(76 /* CloseBraceToken */));
            }
            function parseClassElement(openBraceToken) {
                if (openBraceToken.fullWidth() > 0) {
                    return inGeneratorParameterContext() ? doOutsideYieldContext(parseClassElements) : parseClassElements();
                }
                return [];
            }
            function parseClassElements() {
                return parseSyntaxList(1 /* ClassDeclaration_ClassElements */);
            }
            function isAccessor(inErrorRecovery) {
                var tokenKind = currentToken().kind;
                if (tokenKind !== 68 /* GetKeyword */ && tokenKind !== 72 /* SetKeyword */) {
                    return false;
                }
                return isPropertyName(1, inErrorRecovery);
            }
            function parseAccessor(modifiers) {
                var _currentToken = currentToken();
                var tokenKind = _currentToken.kind;
                if (tokenKind === 68 /* GetKeyword */) {
                    return parseGetAccessor(modifiers, _currentToken);
                }
                else if (tokenKind === 72 /* SetKeyword */) {
                    return parseSetAccessor(modifiers, _currentToken);
                }
                else {
                    throw TypeScript.Errors.invalidOperation();
                }
            }
            function parseGetAccessor(modifiers, getKeyword) {
                return new TypeScript.GetAccessorSyntax(contextFlags, modifiers, consumeToken(getKeyword), parsePropertyName(), parseCallSignatureWithoutSemicolonOrComma(false, false, false), parseFunctionBody(false, false));
            }
            function parseSetAccessor(modifiers, setKeyword) {
                return new TypeScript.SetAccessorSyntax(contextFlags, modifiers, consumeToken(setKeyword), parsePropertyName(), parseCallSignatureWithoutSemicolonOrComma(false, false, false), parseFunctionBody(false, false));
            }
            function isClassElement(inErrorRecovery) {
                return isAtModifier() || isConstructorDeclaration() || isAccessor(inErrorRecovery) || isIndexMemberDeclaration() || isMemberVariableOrFunctionDeclaration(inErrorRecovery);
            }
            function isMemberVariableOrFunctionDeclaration(inErrorRecovery) {
                var token0 = currentToken();
                var token0Kind = token0.kind;
                if (token0Kind === 96 /* AsteriskToken */) {
                    if (inErrorRecovery) {
                        return peekToken(1).kind === 9 /* IdentifierName */ && isCallSignature(2);
                    }
                    return true;
                }
                if (!isPropertyName(0, inErrorRecovery)) {
                    return false;
                }
                if (!TypeScript.SyntaxFacts.isAnyKeyword(token0Kind)) {
                    return true;
                }
                var nextToken = peekToken(1);
                switch (nextToken.kind) {
                    case 83 /* SemicolonToken */:
                    case 112 /* EqualsToken */:
                    case 111 /* ColonToken */:
                    case 76 /* CloseBraceToken */:
                    case 77 /* OpenParenToken */:
                    case 85 /* LessThanToken */:
                    case 8 /* EndOfFileToken */:
                        return true;
                    default:
                        return nextToken.hasLeadingNewLine();
                }
            }
            function tryParseClassElement(inErrorRecovery) {
                var modifiers = parseModifiers();
                if (isConstructorDeclaration()) {
                    return parseConstructorDeclaration(modifiers);
                }
                else if (isIndexSignature(0)) {
                    return parseIndexSignature(modifiers);
                }
                else if (isAccessor(inErrorRecovery)) {
                    return parseAccessor(modifiers);
                }
                else if (modifiers.length > 0 || isMemberVariableOrFunctionDeclaration(inErrorRecovery)) {
                    var asterixToken = tryEatToken(96 /* AsteriskToken */);
                    var propertyName = parsePropertyName();
                    if (asterixToken || isCallSignature(0)) {
                        return parseMethodDeclaration(modifiers, asterixToken, propertyName);
                    }
                    else {
                        return parsePropertyDeclaration(modifiers, propertyName);
                    }
                }
                else {
                    return undefined;
                }
            }
            function isConstructorDeclaration() {
                return currentToken().kind === 66 /* ConstructorKeyword */;
            }
            function parseConstructorDeclaration(modifiers) {
                return new TypeScript.ConstructorDeclarationSyntax(contextFlags, modifiers, eatToken(66 /* ConstructorKeyword */), parseCallSignatureWithoutSemicolonOrComma(false, false, false), parseFunctionBody(false, false));
            }
            function parseMethodDeclaration(modifiers, asteriskToken, propertyName) {
                var asyncContext = containsAsync(modifiers);
                var isGenerator = asteriskToken !== undefined;
                return new TypeScript.MethodDeclarationSyntax(contextFlags, modifiers, asteriskToken, propertyName, parseCallSignatureWithoutSemicolonOrComma(false, isGenerator, asyncContext), parseFunctionBody(isGenerator, asyncContext));
            }
            function containsAsync(modifiers) {
                for (var i = 0, n = modifiers.length; i < n; i++) {
                    if (modifiers[i].kind === 63 /* AsyncKeyword */) {
                        return true;
                    }
                }
                return false;
            }
            function parsePropertyDeclaration(modifiers, propertyName) {
                return new TypeScript.PropertyDeclarationSyntax(contextFlags, modifiers, new TypeScript.VariableDeclaratorSyntax(contextFlags, propertyName, parseOptionalTypeAnnotation(false), isEqualsValueClause(false) ? allowInAnd(parseEqualsValueClause) : undefined), eatExplicitOrAutomaticSemicolon());
            }
            function isIndexMemberDeclaration() {
                return isIndexSignature(0);
            }
            function isFunctionDeclaration(modifierCount) {
                return peekToken(modifierCount).kind === 29 /* FunctionKeyword */;
            }
            function parseFunctionDeclaration() {
                return parseFunctionDeclarationWorker(parseModifiers(), eatToken(29 /* FunctionKeyword */), tryEatToken(96 /* AsteriskToken */));
            }
            function parseFunctionDeclarationWorker(modifiers, functionKeyword, asteriskToken) {
                var asyncContext = containsAsync(modifiers);
                var isGenerator = asteriskToken !== undefined;
                return new TypeScript.FunctionDeclarationSyntax(contextFlags, modifiers, functionKeyword, asteriskToken, eatIdentifierToken(), parseCallSignatureWithoutSemicolonOrComma(false, isGenerator, asyncContext), parseFunctionBody(isGenerator, asyncContext));
            }
            function parseFunctionBody(isGenerator, asyncContext) {
                return isBlockOrArrow() ? parseFunctionBlockOrExpressionBody(isGenerator, asyncContext) : eatExplicitOrAutomaticSemicolon();
            }
            function parseModuleName() {
                return currentToken().kind === 12 /* StringLiteral */ ? eatToken(12 /* StringLiteral */) : parseName(false);
            }
            function parseModuleDeclaration() {
                var openBraceToken;
                return new TypeScript.ModuleDeclarationSyntax(contextFlags, parseModifiers(), eatToken(69 /* ModuleKeyword */), parseModuleName(), openBraceToken = eatToken(75 /* OpenBraceToken */), openBraceToken.fullWidth() > 0 ? parseSyntaxList(2 /* ModuleDeclaration_ModuleElements */) : [], eatToken(76 /* CloseBraceToken */));
            }
            function parseInterfaceDeclaration() {
                return new TypeScript.InterfaceDeclarationSyntax(contextFlags, parseModifiers(), eatToken(54 /* InterfaceKeyword */), eatIdentifierToken(), tryParseTypeParameterList(false), parseHeritageClauses(false), parseObjectType());
            }
            function parseTypeAlias() {
                return new TypeScript.TypeAliasSyntax(contextFlags, parseModifiers(), eatToken(73 /* TypeKeyword */), eatIdentifierToken(), eatToken(112 /* EqualsToken */), parseType(), eatExplicitOrAutomaticSemicolon());
            }
            function parseObjectType() {
                var openBraceToken;
                return new TypeScript.ObjectTypeSyntax(contextFlags, openBraceToken = eatToken(75 /* OpenBraceToken */), openBraceToken.fullWidth() > 0 ? parseSyntaxList(9 /* ObjectType_TypeMembers */) : [], eatToken(76 /* CloseBraceToken */));
            }
            function parseTupleType(currentToken) {
                return new TypeScript.TupleTypeSyntax(contextFlags, consumeToken(currentToken), parseSeparatedSyntaxList(20 /* TupleType_Types */), eatToken(80 /* CloseBracketToken */));
            }
            function isTypeMember(inErrorRecovery) {
                return isCallSignature(0) || isConstructSignature() || isIndexSignature(0) || isMethodOrPropertySignature(inErrorRecovery);
            }
            function isMethodOrPropertySignature(inErrorRecovery) {
                var _currentToken = currentToken();
                if (isModifier(_currentToken, 0)) {
                    var token1 = peekToken(1);
                    if (!token1.hasLeadingNewLine() && isPropertyNameToken(token1, inErrorRecovery)) {
                        return false;
                    }
                }
                return isPropertyName(0, inErrorRecovery);
            }
            function tryParseTypeMember(inErrorRecovery) {
                if (isCallSignature(0)) {
                    return parseCallSignatureWithSemicolonOrComma(false, false, false);
                }
                else if (isConstructSignature()) {
                    return parseConstructSignature();
                }
                else if (isIndexSignature(0)) {
                    return parseIndexSignature([]);
                }
                else if (isMethodOrPropertySignature(inErrorRecovery)) {
                    var propertyName = parsePropertyName();
                    var questionToken = tryEatToken(110 /* QuestionToken */);
                    if (isCallSignature(0)) {
                        return parseMethodSignature(propertyName, questionToken);
                    }
                    else {
                        return parsePropertySignature(propertyName, questionToken);
                    }
                }
                else {
                    return undefined;
                }
            }
            function parseConstructSignature() {
                return new TypeScript.ConstructSignatureSyntax(contextFlags, eatToken(33 /* NewKeyword */), parseCallSignatureWithSemicolonOrComma(false, false, false));
            }
            function parseIndexSignature(modifiers) {
                return new TypeScript.IndexSignatureSyntax(contextFlags, modifiers, eatToken(79 /* OpenBracketToken */), parseSeparatedSyntaxList(17 /* IndexSignature_Parameters */), eatToken(80 /* CloseBracketToken */), parseOptionalTypeAnnotation(false), eatExplicitOrAutomaticSemicolonOrComma());
            }
            function parseMethodSignature(propertyName, questionToken) {
                return new TypeScript.MethodSignatureSyntax(contextFlags, propertyName, questionToken, parseCallSignatureWithSemicolonOrComma(false, false, false));
            }
            function parsePropertySignature(propertyName, questionToken) {
                return new TypeScript.PropertySignatureSyntax(contextFlags, propertyName, questionToken, parseOptionalTypeAnnotation(false), eatExplicitOrAutomaticSemicolonOrComma());
            }
            function isCallSignature(peekIndex) {
                var tokenKind = peekToken(peekIndex).kind;
                return tokenKind === 77 /* OpenParenToken */ || tokenKind === 85 /* LessThanToken */;
            }
            function isConstructSignature() {
                if (currentToken().kind !== 33 /* NewKeyword */) {
                    return false;
                }
                return isCallSignature(1);
            }
            function isIndexSignature(peekIndex) {
                if (peekToken(peekIndex).kind === 79 /* OpenBracketToken */) {
                    var token1 = peekToken(peekIndex + 1);
                    if (token1.kind === 82 /* DotDotDotToken */ || token1.kind === 80 /* CloseBracketToken */) {
                        return true;
                    }
                    if (isIdentifier(token1)) {
                        var token2 = peekToken(peekIndex + 2);
                        if (token2.kind === 111 /* ColonToken */ || token2.kind === 84 /* CommaToken */) {
                            return true;
                        }
                    }
                    if (token1.kind === 59 /* PublicKeyword */ || token1.kind === 57 /* PrivateKeyword */) {
                        var token2 = peekToken(peekIndex + 2);
                        return isIdentifier(token2);
                    }
                }
                return false;
            }
            function isHeritageClause() {
                var tokenKind = currentToken().kind;
                return tokenKind === 50 /* ExtendsKeyword */ || tokenKind === 53 /* ImplementsKeyword */;
            }
            function isNotHeritageClauseTypeName() {
                var tokenKind = currentToken().kind;
                if (tokenKind === 53 /* ImplementsKeyword */ || tokenKind === 50 /* ExtendsKeyword */) {
                    return isIdentifier(peekToken(1));
                }
                return false;
            }
            function isHeritageClauseTypeName() {
                if (isIdentifier(currentToken())) {
                    return !isNotHeritageClauseTypeName();
                }
                return false;
            }
            function tryParseHeritageClause() {
                var extendsOrImplementsKeyword = currentToken();
                var tokenKind = extendsOrImplementsKeyword.kind;
                if (tokenKind !== 50 /* ExtendsKeyword */ && tokenKind !== 53 /* ImplementsKeyword */) {
                    return undefined;
                }
                return new TypeScript.HeritageClauseSyntax(contextFlags, consumeToken(extendsOrImplementsKeyword), parseSeparatedSyntaxList(11 /* HeritageClause_TypeNameList */));
            }
            function isInterfaceEnumClassModuleImportExportOrTypeAlias(modifierCount, _currentToken) {
                if (modifierCount) {
                    switch (peekToken(modifierCount).kind) {
                        case 51 /* ImportKeyword */:
                        case 69 /* ModuleKeyword */:
                        case 54 /* InterfaceKeyword */:
                        case 46 /* ClassKeyword */:
                        case 48 /* EnumKeyword */:
                        case 49 /* ExportKeyword */:
                        case 73 /* TypeKeyword */:
                            return true;
                    }
                }
                _currentToken = _currentToken || currentToken();
                switch (_currentToken.kind) {
                    case 69 /* ModuleKeyword */:
                        var nextToken = peekToken(1);
                        return isIdentifier(nextToken) || nextToken.kind === 12 /* StringLiteral */;
                    case 51 /* ImportKeyword */:
                    case 46 /* ClassKeyword */:
                    case 48 /* EnumKeyword */:
                    case 54 /* InterfaceKeyword */:
                    case 73 /* TypeKeyword */:
                        return isIdentifier(peekToken(1));
                    case 49 /* ExportKeyword */:
                        return peekToken(1).kind === 112 /* EqualsToken */;
                }
                return false;
            }
            function isDefinitelyNotStatement() {
                var _currentToken = currentToken();
                var currentTokenKind = _currentToken.kind;
                if (currentTokenKind !== 63 /* AsyncKeyword */) {
                    switch (currentTokenKind) {
                        case 59 /* PublicKeyword */:
                        case 57 /* PrivateKeyword */:
                        case 58 /* ProtectedKeyword */:
                        case 60 /* StaticKeyword */:
                            var token1 = peekToken(1);
                            if (!token1.hasLeadingNewLine() && TypeScript.SyntaxFacts.isIdentifierNameOrAnyKeyword(token1)) {
                                return true;
                            }
                    }
                    if (isInterfaceEnumClassModuleImportExportOrTypeAlias(modifierCount(), _currentToken)) {
                        return true;
                    }
                }
                return false;
            }
            function isStatement(modifierCount, inErrorRecovery) {
                if (isDefinitelyNotStatement()) {
                    return false;
                }
                var _currentToken = currentToken();
                var currentTokenKind = _currentToken.kind;
                switch (currentTokenKind) {
                    case 30 /* IfKeyword */:
                    case 75 /* OpenBraceToken */:
                    case 35 /* ReturnKeyword */:
                    case 36 /* SwitchKeyword */:
                    case 38 /* ThrowKeyword */:
                    case 17 /* BreakKeyword */:
                    case 20 /* ContinueKeyword */:
                    case 28 /* ForKeyword */:
                    case 44 /* WhileKeyword */:
                    case 45 /* WithKeyword */:
                    case 24 /* DoKeyword */:
                    case 40 /* TryKeyword */:
                    case 21 /* DebuggerKeyword */:
                        return true;
                }
                return isLabeledStatement(_currentToken) || isVariableStatement(modifierCount) || isFunctionDeclaration(modifierCount) || isEmptyStatement(_currentToken, inErrorRecovery) || isExpressionStatement(_currentToken);
            }
            function parseStatement(inErrorRecovery) {
                return tryParseStatement(inErrorRecovery) || parseExpressionStatement();
            }
            function tryParseStatement(inErrorRecovery) {
                var _currentToken = currentToken();
                var currentTokenKind = _currentToken.kind;
                return tryParseStatementWorker(_currentToken, currentTokenKind, modifierCount(), inErrorRecovery);
            }
            function tryParseStatementWorker(_currentToken, currentTokenKind, modifierCount, inErrorRecovery) {
                if (isDefinitelyNotStatement()) {
                    return undefined;
                }
                switch (currentTokenKind) {
                    case 30 /* IfKeyword */: return parseIfStatement(_currentToken);
                    case 75 /* OpenBraceToken */: return parseStatementBlock();
                    case 35 /* ReturnKeyword */: return parseReturnStatement(_currentToken);
                    case 36 /* SwitchKeyword */: return parseSwitchStatement(_currentToken);
                    case 38 /* ThrowKeyword */: return parseThrowStatement(_currentToken);
                    case 17 /* BreakKeyword */: return parseBreakStatement(_currentToken);
                    case 20 /* ContinueKeyword */: return parseContinueStatement(_currentToken);
                    case 28 /* ForKeyword */: return parseForOrForInStatement(_currentToken);
                    case 44 /* WhileKeyword */: return parseWhileStatement(_currentToken);
                    case 45 /* WithKeyword */: return parseWithStatement(_currentToken);
                    case 24 /* DoKeyword */: return parseDoStatement(_currentToken);
                    case 40 /* TryKeyword */: return parseTryStatement(_currentToken);
                    case 21 /* DebuggerKeyword */: return parseDebuggerStatement(_currentToken);
                }
                if (isVariableStatement(modifierCount)) {
                    return parseVariableStatement();
                }
                else if (isLabeledStatement(_currentToken)) {
                    return parseLabeledStatement(_currentToken);
                }
                else if (isFunctionDeclaration(modifierCount)) {
                    return parseFunctionDeclaration();
                }
                else if (isEmptyStatement(_currentToken, inErrorRecovery)) {
                    return parseEmptyStatement(_currentToken);
                }
                else if (isExpressionStatement(_currentToken)) {
                    return parseExpressionStatement();
                }
                else {
                    return undefined;
                }
            }
            function parseDebuggerStatement(debuggerKeyword) {
                return new TypeScript.DebuggerStatementSyntax(contextFlags, consumeToken(debuggerKeyword), eatExplicitOrAutomaticSemicolon());
            }
            function parseDoStatement(doKeyword) {
                return new TypeScript.DoStatementSyntax(contextFlags, consumeToken(doKeyword), parseStatement(false), eatToken(44 /* WhileKeyword */), eatToken(77 /* OpenParenToken */), allowInAnd(parseExpression), eatToken(78 /* CloseParenToken */), tryEatToken(83 /* SemicolonToken */));
            }
            function isLabeledStatement(currentToken) {
                return isIdentifier(currentToken) && peekToken(1).kind === 111 /* ColonToken */;
            }
            function parseLabeledStatement(identifierToken) {
                return new TypeScript.LabeledStatementSyntax(contextFlags, consumeToken(identifierToken), eatToken(111 /* ColonToken */), parseStatement(false));
            }
            function parseTryStatement(tryKeyword) {
                var tryKeyword = consumeToken(tryKeyword);
                var savedListParsingState = listParsingState;
                listParsingState |= (1 << 6 /* TryBlock_Statements */);
                var block = parseStatementBlock();
                listParsingState = savedListParsingState;
                var catchClause = undefined;
                if (currentToken().kind === 19 /* CatchKeyword */) {
                    catchClause = parseCatchClause();
                }
                var finallyClause = undefined;
                if (!catchClause || currentToken().kind === 27 /* FinallyKeyword */) {
                    finallyClause = parseFinallyClause();
                }
                return new TypeScript.TryStatementSyntax(contextFlags, tryKeyword, block, catchClause, finallyClause);
            }
            function parseCatchClauseBlock() {
                var savedListParsingState = listParsingState;
                listParsingState |= (1 << 7 /* CatchBlock_Statements */);
                var block = parseStatementBlock();
                listParsingState = savedListParsingState;
                return block;
            }
            function parseCatchClause() {
                return new TypeScript.CatchClauseSyntax(contextFlags, eatToken(19 /* CatchKeyword */), eatToken(77 /* OpenParenToken */), eatIdentifierToken(), parseOptionalTypeAnnotation(false), eatToken(78 /* CloseParenToken */), parseCatchClauseBlock());
            }
            function parseFinallyClause() {
                return new TypeScript.FinallyClauseSyntax(contextFlags, eatToken(27 /* FinallyKeyword */), parseStatementBlock());
            }
            function parseWithStatement(withKeyword) {
                return new TypeScript.WithStatementSyntax(contextFlags, consumeToken(withKeyword), eatToken(77 /* OpenParenToken */), allowInAnd(parseExpression), eatToken(78 /* CloseParenToken */), parseStatement(false));
            }
            function parseWhileStatement(whileKeyword) {
                return new TypeScript.WhileStatementSyntax(contextFlags, consumeToken(whileKeyword), eatToken(77 /* OpenParenToken */), allowInAnd(parseExpression), eatToken(78 /* CloseParenToken */), parseStatement(false));
            }
            function isEmptyStatement(currentToken, inErrorRecovery) {
                if (inErrorRecovery) {
                    return false;
                }
                return currentToken.kind === 83 /* SemicolonToken */;
            }
            function parseEmptyStatement(semicolonToken) {
                return new TypeScript.EmptyStatementSyntax(contextFlags, consumeToken(semicolonToken));
            }
            function parseForOrForInStatement(forKeyword) {
                forKeyword = consumeToken(forKeyword);
                var openParenToken = eatToken(77 /* OpenParenToken */);
                var _currentToken = currentToken();
                var tokenKind = _currentToken.kind;
                var initializer = tokenKind === 83 /* SemicolonToken */ ? undefined : isVariableDeclaration(tokenKind) ? disallowInAnd(parseVariableDeclaration) : disallowInAnd(parseExpression);
                if (initializer !== undefined && currentToken().kind === 31 /* InKeyword */) {
                    return new TypeScript.ForInStatementSyntax(contextFlags, forKeyword, openParenToken, initializer, eatToken(31 /* InKeyword */), allowInAnd(parseExpression), eatToken(78 /* CloseParenToken */), parseStatement(false));
                }
                else {
                    return new TypeScript.ForStatementSyntax(contextFlags, forKeyword, openParenToken, initializer, eatToken(83 /* SemicolonToken */), tryParseForStatementCondition(), eatToken(83 /* SemicolonToken */), tryParseForStatementIncrementor(), eatToken(78 /* CloseParenToken */), parseStatement(false));
                }
            }
            function tryParseForStatementCondition() {
                var tokenKind = currentToken().kind;
                if (tokenKind !== 83 /* SemicolonToken */ && tokenKind !== 78 /* CloseParenToken */ && tokenKind !== 8 /* EndOfFileToken */) {
                    return allowInAnd(parseExpression);
                }
                return undefined;
            }
            function tryParseForStatementIncrementor() {
                var tokenKind = currentToken().kind;
                if (tokenKind !== 78 /* CloseParenToken */ && tokenKind !== 8 /* EndOfFileToken */) {
                    return allowInAnd(parseExpression);
                }
                return undefined;
            }
            function tryEatBreakOrContinueLabel() {
                var identifier = undefined;
                if (!canEatExplicitOrAutomaticSemicolon()) {
                    if (isIdentifier(currentToken())) {
                        return eatIdentifierToken();
                    }
                }
                return undefined;
            }
            function parseBreakStatement(breakKeyword) {
                return new TypeScript.BreakStatementSyntax(contextFlags, consumeToken(breakKeyword), tryEatBreakOrContinueLabel(), eatExplicitOrAutomaticSemicolon());
            }
            function parseContinueStatement(continueKeyword) {
                return new TypeScript.ContinueStatementSyntax(contextFlags, consumeToken(continueKeyword), tryEatBreakOrContinueLabel(), eatExplicitOrAutomaticSemicolon());
            }
            function parseSwitchExpression(openParenToken) {
                return openParenToken.fullWidth() === 0 && currentToken().kind === 75 /* OpenBraceToken */ ? eatIdentifierToken() : allowInAnd(parseExpression);
            }
            function parseSwitchStatement(switchKeyword) {
                var openParenToken;
                var openBraceToken;
                return new TypeScript.SwitchStatementSyntax(contextFlags, consumeToken(switchKeyword), openParenToken = eatToken(77 /* OpenParenToken */), parseSwitchExpression(openParenToken), eatToken(78 /* CloseParenToken */), openBraceToken = eatToken(75 /* OpenBraceToken */), openBraceToken.fullWidth() > 0 ? parseSyntaxList(3 /* SwitchStatement_SwitchClauses */) : [], eatToken(76 /* CloseBraceToken */));
            }
            function isSwitchClause() {
                var currentTokenKind = currentToken().kind;
                return currentTokenKind === 18 /* CaseKeyword */ || currentTokenKind === 22 /* DefaultKeyword */;
            }
            function tryParseSwitchClause() {
                var _currentToken = currentToken();
                switch (_currentToken.kind) {
                    case 18 /* CaseKeyword */:
                        return parseCaseSwitchClause(_currentToken);
                    case 22 /* DefaultKeyword */:
                        return parseDefaultSwitchClause(_currentToken);
                }
                return undefined;
            }
            function parseCaseSwitchClause(caseKeyword) {
                return new TypeScript.CaseSwitchClauseSyntax(contextFlags, consumeToken(caseKeyword), allowInAnd(parseExpression), eatToken(111 /* ColonToken */), parseSyntaxList(4 /* SwitchClause_Statements */));
            }
            function parseDefaultSwitchClause(defaultKeyword) {
                return new TypeScript.DefaultSwitchClauseSyntax(contextFlags, consumeToken(defaultKeyword), eatToken(111 /* ColonToken */), parseSyntaxList(4 /* SwitchClause_Statements */));
            }
            function parseThrowStatement(throwKeyword) {
                return new TypeScript.ThrowStatementSyntax(contextFlags, consumeToken(throwKeyword), tryParseThrowStatementExpression(), eatExplicitOrAutomaticSemicolon());
            }
            function tryParseThrowStatementExpression() {
                return canEatExplicitOrAutomaticSemicolon() ? undefined : allowInAnd(parseExpression);
            }
            function parseReturnStatement(returnKeyword) {
                return new TypeScript.ReturnStatementSyntax(contextFlags, consumeToken(returnKeyword), tryParseReturnStatementExpression(), eatExplicitOrAutomaticSemicolon());
            }
            function tryParseReturnStatementExpression() {
                return canEatExplicitOrAutomaticSemicolon() ? undefined : allowInAnd(parseExpression);
            }
            function isExpressionStatement(currentToken) {
                var tokenKind = currentToken.kind;
                return tokenKind !== 75 /* OpenBraceToken */ && tokenKind !== 29 /* FunctionKeyword */ && isExpression(currentToken);
            }
            function isAssignmentOrOmittedExpression() {
                var _currentToken = currentToken();
                return _currentToken.kind === 84 /* CommaToken */ || isExpression(_currentToken);
            }
            function tryParseAssignmentOrOmittedExpression() {
                if (currentToken().kind === 84 /* CommaToken */) {
                    return new TypeScript.OmittedExpressionSyntax(contextFlags);
                }
                return isExpression(currentToken()) ? allowInAnd(parseAssignmentExpressionOrHigher) : undefined;
            }
            function isExpression(currentToken) {
                switch (currentToken.kind) {
                    case 11 /* NumericLiteral */:
                    case 12 /* StringLiteral */:
                    case 10 /* RegularExpressionLiteral */:
                    case 13 /* NoSubstitutionTemplateToken */:
                    case 14 /* TemplateStartToken */:
                    case 79 /* OpenBracketToken */:
                    case 77 /* OpenParenToken */:
                    case 85 /* LessThanToken */:
                    case 98 /* PlusPlusToken */:
                    case 99 /* MinusMinusToken */:
                    case 94 /* PlusToken */:
                    case 95 /* MinusToken */:
                    case 107 /* TildeToken */:
                    case 106 /* ExclamationToken */:
                    case 75 /* OpenBraceToken */:
                    case 90 /* EqualsGreaterThanToken */:
                    case 123 /* SlashToken */:
                    case 124 /* SlashEqualsToken */:
                    case 52 /* SuperKeyword */:
                    case 37 /* ThisKeyword */:
                    case 39 /* TrueKeyword */:
                    case 26 /* FalseKeyword */:
                    case 34 /* NullKeyword */:
                    case 33 /* NewKeyword */:
                    case 23 /* DeleteKeyword */:
                    case 43 /* VoidKeyword */:
                    case 41 /* TypeOfKeyword */:
                    case 29 /* FunctionKeyword */:
                        return true;
                    case 61 /* YieldKeyword */:
                        return true;
                    case 64 /* AwaitKeyword */:
                        return true;
                    case 63 /* AsyncKeyword */:
                        return true;
                }
                return isIdentifier(currentToken);
            }
            function parseExpressionStatement() {
                return new TypeScript.ExpressionStatementSyntax(contextFlags, allowInAnd(parseExpression), eatExplicitOrAutomaticSemicolon());
            }
            function parseIfStatement(ifKeyword) {
                return new TypeScript.IfStatementSyntax(contextFlags, consumeToken(ifKeyword), eatToken(77 /* OpenParenToken */), allowInAnd(parseExpression), eatToken(78 /* CloseParenToken */), parseStatement(false), parseOptionalElseClause());
            }
            function parseOptionalElseClause() {
                return currentToken().kind === 25 /* ElseKeyword */ ? parseElseClause() : undefined;
            }
            function parseElseClause() {
                return new TypeScript.ElseClauseSyntax(contextFlags, eatToken(25 /* ElseKeyword */), parseStatement(false));
            }
            function isVariableStatement(modifierCount) {
                return isVariableDeclaration(peekToken(modifierCount).kind);
            }
            function isVariableDeclaration(tokenKind) {
                if (tokenKind === 42 /* VarKeyword */ || tokenKind === 47 /* ConstKeyword */) {
                    return true;
                }
                if (tokenKind === 55 /* LetKeyword */) {
                    if (inStrictModeContext()) {
                        return true;
                    }
                    return isIdentifier(peekToken(1));
                }
                return false;
            }
            function parseVariableStatement() {
                return new TypeScript.VariableStatementSyntax(contextFlags, parseModifiers(), allowInAnd(parseVariableDeclaration), eatExplicitOrAutomaticSemicolon());
            }
            function parseVariableDeclaration() {
                return new TypeScript.VariableDeclarationSyntax(contextFlags, consumeToken(currentToken()), parseSeparatedSyntaxList(12 /* VariableDeclaration_VariableDeclarators */));
            }
            function isVariableDeclarator() {
                return isIdentifier(currentToken());
            }
            function tryParseVariableDeclarator() {
                if (!isIdentifier(currentToken())) {
                    return undefined;
                }
                var propertyName = eatIdentifierToken();
                var equalsValueClause = undefined;
                var typeAnnotation = undefined;
                if (TypeScript.fullWidth(propertyName) > 0) {
                    typeAnnotation = parseOptionalTypeAnnotation(false);
                    if (isEqualsValueClause(false)) {
                        equalsValueClause = parseEqualsValueClause();
                    }
                }
                return new TypeScript.VariableDeclaratorSyntax(contextFlags, propertyName, typeAnnotation, equalsValueClause);
            }
            function isEqualsValueClause(inParameter) {
                var token0 = currentToken();
                if (token0.kind === 112 /* EqualsToken */) {
                    return true;
                }
                if (!token0.hasLeadingNewLine()) {
                    var tokenKind = token0.kind;
                    if (tokenKind === 90 /* EqualsGreaterThanToken */) {
                        return false;
                    }
                    if (tokenKind === 75 /* OpenBraceToken */ && inParameter) {
                        return false;
                    }
                    return isExpression(token0);
                }
                return false;
            }
            function parseEqualsValueClause() {
                return new TypeScript.EqualsValueClauseSyntax(contextFlags, eatToken(112 /* EqualsToken */), parseAssignmentExpressionOrHigher());
            }
            function parseExpression() {
                var leftOperand = parseAssignmentExpressionOrHigher();
                while (true) {
                    var _currentToken = currentToken();
                    if (_currentToken.kind !== 84 /* CommaToken */) {
                        break;
                    }
                    leftOperand = new TypeScript.BinaryExpressionSyntax(contextFlags, leftOperand, consumeToken(_currentToken), parseAssignmentExpressionOrHigher());
                }
                return leftOperand;
            }
            function parseAssignmentExpressionOrHigher() {
                var _currentToken = currentToken();
                if (isYieldExpression(_currentToken)) {
                    return parseYieldExpression(_currentToken);
                }
                var arrowFunction = tryParseAnyArrowFunctionExpression(_currentToken);
                if (arrowFunction) {
                    return arrowFunction;
                }
                var leftOperand = parseBinaryExpressionOrHigher(_currentToken, 1 /* Lowest */);
                if (TypeScript.SyntaxUtilities.isLeftHandSizeExpression(leftOperand)) {
                    var operatorToken = currentOperatorToken();
                    if (TypeScript.SyntaxFacts.isAssignmentOperatorToken(operatorToken.kind)) {
                        return new TypeScript.BinaryExpressionSyntax(contextFlags, leftOperand, consumeToken(operatorToken), parseAssignmentExpressionOrHigher());
                    }
                }
                return parseConditionalExpressionRest(leftOperand);
            }
            function parsePossibleAwaitExpression(awaitKeyword) {
                if (inAsyncContext()) {
                    return parseAwaitExpression(awaitKeyword);
                }
                if (isUnambiguouslyYieldOrAwaitExpression()) {
                    return parseAwaitExpression(awaitKeyword);
                }
                return parsePostfixExpressionOrHigher(awaitKeyword);
            }
            function parseAwaitExpression(awaitKeyword) {
                return new TypeScript.AwaitExpressionSyntax(contextFlags, consumeToken(awaitKeyword), parseUnaryExpressionOrHigher(currentToken()));
            }
            function isYieldExpression(_currentToken) {
                if (_currentToken.kind === 61 /* YieldKeyword */) {
                    if (inYieldContext()) {
                        return true;
                    }
                    if (inStrictModeContext()) {
                        return true;
                    }
                    return isUnambiguouslyYieldOrAwaitExpression();
                }
                return false;
            }
            function isUnambiguouslyYieldOrAwaitExpression() {
                var token1 = peekToken(1);
                if (token1.hasLeadingNewLine()) {
                    return false;
                }
                if (isIdentifier(token1)) {
                    return true;
                }
                var currentTokenKind = token1.kind;
                switch (currentTokenKind) {
                    case 37 /* ThisKeyword */:
                    case 39 /* TrueKeyword */:
                    case 26 /* FalseKeyword */:
                    case 34 /* NullKeyword */:
                    case 11 /* NumericLiteral */:
                    case 12 /* StringLiteral */:
                    case 29 /* FunctionKeyword */:
                    case 75 /* OpenBraceToken */:
                    case 33 /* NewKeyword */:
                        return true;
                    case 13 /* NoSubstitutionTemplateToken */:
                    case 14 /* TemplateStartToken */:
                        return false;
                    case 123 /* SlashToken */:
                    case 124 /* SlashEqualsToken */:
                        return false;
                    case 79 /* OpenBracketToken */:
                        return false;
                    case 77 /* OpenParenToken */:
                        return false;
                    default:
                        return false;
                }
            }
            function parseYieldExpression(yieldKeyword) {
                yieldKeyword = consumeToken(yieldKeyword);
                var _currentToken = currentToken();
                if (!_currentToken.hasLeadingNewLine() && (_currentToken.kind === 96 /* AsteriskToken */ || isExpression(_currentToken))) {
                    return new TypeScript.YieldExpressionSyntax(contextFlags, yieldKeyword, tryEatToken(96 /* AsteriskToken */), parseAssignmentExpressionOrHigher());
                }
                else {
                    return new TypeScript.YieldExpressionSyntax(contextFlags, yieldKeyword, undefined, undefined);
                }
            }
            function tryParseAnyArrowFunctionExpression(_currentToken) {
                return isSimpleArrowFunctionExpression(_currentToken) ? parseSimpleArrowFunctionExpression() : tryParseParenthesizedArrowFunctionExpression();
            }
            function parseUnaryExpressionOrHigher(_currentToken) {
                var currentTokenKind = _currentToken.kind;
                switch (currentTokenKind) {
                    case 94 /* PlusToken */:
                    case 95 /* MinusToken */:
                    case 107 /* TildeToken */:
                    case 106 /* ExclamationToken */:
                    case 98 /* PlusPlusToken */:
                    case 99 /* MinusMinusToken */:
                        return new TypeScript.PrefixUnaryExpressionSyntax(contextFlags, consumeToken(_currentToken), parseUnaryExpressionOrHigher(currentToken()));
                    case 41 /* TypeOfKeyword */:
                        return parseTypeOfExpression(_currentToken);
                    case 43 /* VoidKeyword */:
                        return parseVoidExpression(_currentToken);
                    case 23 /* DeleteKeyword */:
                        return parseDeleteExpression(_currentToken);
                    case 85 /* LessThanToken */:
                        return parseTypeAssertionExpression(_currentToken);
                    case 64 /* AwaitKeyword */:
                        return parsePossibleAwaitExpression(_currentToken);
                    default:
                        return parsePostfixExpressionOrHigher(_currentToken);
                }
            }
            function parseBinaryExpressionOrHigher(_currentToken, precedence) {
                var leftOperand = parseUnaryExpressionOrHigher(_currentToken);
                return parseBinaryExpressionRest(precedence, leftOperand);
            }
            function parseConditionalExpressionRest(leftOperand) {
                var _currentToken = currentToken();
                if (_currentToken.kind !== 110 /* QuestionToken */) {
                    return leftOperand;
                }
                return new TypeScript.ConditionalExpressionSyntax(contextFlags, leftOperand, consumeToken(_currentToken), allowInAnd(parseAssignmentExpressionOrHigher), eatToken(111 /* ColonToken */), parseAssignmentExpressionOrHigher());
            }
            function parseBinaryExpressionRest(precedence, leftOperand) {
                while (true) {
                    var operatorToken = currentOperatorToken();
                    var tokenKind = operatorToken.kind;
                    if (!TypeScript.SyntaxFacts.isBinaryExpressionOperatorToken(tokenKind) || tokenKind === 84 /* CommaToken */ || TypeScript.SyntaxFacts.isAssignmentOperatorToken(tokenKind)) {
                        break;
                    }
                    if (tokenKind === 31 /* InKeyword */ && inDisallowInContext()) {
                        break;
                    }
                    var newPrecedence = getBinaryExpressionPrecedence(tokenKind);
                    if (newPrecedence <= precedence) {
                        break;
                    }
                    leftOperand = new TypeScript.BinaryExpressionSyntax(contextFlags, leftOperand, consumeToken(operatorToken), parseBinaryExpressionOrHigher(currentToken(), newPrecedence));
                }
                return leftOperand;
            }
            function currentOperatorToken() {
                var token0 = currentToken();
                if (token0.kind === 86 /* GreaterThanToken */) {
                    return currentContextualToken();
                }
                return token0;
            }
            function parseMemberExpressionOrHigher(_currentToken) {
                var expression = parsePrimaryExpression(_currentToken);
                return parseMemberExpressionRest(expression);
            }
            function parseMemberExpressionRest(expression) {
                while (true) {
                    var _currentToken = currentToken();
                    var currentTokenKind = _currentToken.kind;
                    switch (currentTokenKind) {
                        case 79 /* OpenBracketToken */:
                            expression = parseElementAccessExpression(expression, _currentToken);
                            continue;
                        case 81 /* DotToken */:
                            expression = new TypeScript.PropertyAccessExpressionSyntax(contextFlags, expression, consumeToken(_currentToken), eatRightSideOfDot(true));
                            continue;
                        case 13 /* NoSubstitutionTemplateToken */:
                        case 14 /* TemplateStartToken */:
                            expression = new TypeScript.TemplateAccessExpressionSyntax(contextFlags, expression, parseTemplateExpression(_currentToken));
                            continue;
                    }
                    return expression;
                }
            }
            function parseCallExpressionRest(expression) {
                while (true) {
                    expression = parseMemberExpressionRest(expression);
                    var _currentToken = currentToken();
                    var currentTokenKind = _currentToken.kind;
                    switch (currentTokenKind) {
                        case 77 /* OpenParenToken */:
                            expression = new TypeScript.InvocationExpressionSyntax(contextFlags, expression, parseArgumentList(undefined, _currentToken));
                            continue;
                        case 85 /* LessThanToken */:
                            var argumentList = tryParseArgumentList();
                            if (argumentList === undefined) {
                                break;
                            }
                            expression = new TypeScript.InvocationExpressionSyntax(contextFlags, expression, argumentList);
                            continue;
                    }
                    return expression;
                }
            }
            function parseLeftHandSideExpressionOrHigher(_currentToken) {
                var expression = _currentToken.kind === 52 /* SuperKeyword */ ? parseSuperExpression(_currentToken) : parseMemberExpressionOrHigher(_currentToken);
                return parseCallExpressionRest(expression);
            }
            function parseSuperExpression(superToken) {
                var expression = consumeToken(superToken);
                var currentTokenKind = currentToken().kind;
                if (currentTokenKind === 77 /* OpenParenToken */ || currentTokenKind === 81 /* DotToken */) {
                    return expression;
                }
                return new TypeScript.PropertyAccessExpressionSyntax(contextFlags, expression, eatToken(81 /* DotToken */), eatRightSideOfDot(true));
            }
            function parsePostfixExpressionOrHigher(_currentToken) {
                var expression = parseLeftHandSideExpressionOrHigher(_currentToken);
                var _currentToken = currentToken();
                var currentTokenKind = _currentToken.kind;
                switch (currentTokenKind) {
                    case 98 /* PlusPlusToken */:
                    case 99 /* MinusMinusToken */:
                        if (_currentToken.hasLeadingNewLine()) {
                            break;
                        }
                        return new TypeScript.PostfixUnaryExpressionSyntax(contextFlags, expression, consumeToken(_currentToken));
                }
                return expression;
            }
            function tryParseGenericArgumentList() {
                var typeArgumentList = tryParse(speculativeParseTypeArgumentList);
                if (!typeArgumentList) {
                    return undefined;
                }
                var _currentToken = currentToken();
                if (_currentToken.kind === 77 /* OpenParenToken */) {
                    return parseArgumentList(typeArgumentList, _currentToken);
                }
                return new TypeScript.ArgumentListSyntax(contextFlags, typeArgumentList, createMissingToken(77 /* OpenParenToken */, undefined, TypeScript.DiagnosticCode.A_parameter_list_must_follow_a_generic_type_argument_list_expected), [], eatToken(78 /* CloseParenToken */));
            }
            function speculativeParseTypeArgumentList() {
                var lessThanToken = consumeToken(currentToken());
                var typeArguments = parseSeparatedSyntaxList(18 /* TypeArgumentList_Types */);
                var greaterThanToken = tryEatToken(86 /* GreaterThanToken */);
                if (greaterThanToken === undefined || !canFollowTypeArgumentListInExpression(currentToken().kind)) {
                    return undefined;
                }
                return new TypeScript.TypeArgumentListSyntax(contextFlags, lessThanToken, typeArguments, greaterThanToken);
            }
            function canFollowTypeArgumentListInExpression(kind) {
                switch (kind) {
                    case 77 /* OpenParenToken */:
                    case 81 /* DotToken */:
                    case 78 /* CloseParenToken */:
                    case 80 /* CloseBracketToken */:
                    case 111 /* ColonToken */:
                    case 83 /* SemicolonToken */:
                    case 84 /* CommaToken */:
                    case 110 /* QuestionToken */:
                    case 89 /* EqualsEqualsToken */:
                    case 92 /* EqualsEqualsEqualsToken */:
                    case 91 /* ExclamationEqualsToken */:
                    case 93 /* ExclamationEqualsEqualsToken */:
                    case 108 /* AmpersandAmpersandToken */:
                    case 109 /* BarBarToken */:
                    case 105 /* CaretToken */:
                    case 103 /* AmpersandToken */:
                    case 104 /* BarToken */:
                    case 76 /* CloseBraceToken */:
                    case 8 /* EndOfFileToken */:
                        return true;
                    default:
                        return false;
                }
            }
            function tryParseArgumentList() {
                var _currentToken = currentToken();
                var tokenKind = _currentToken.kind;
                if (tokenKind === 85 /* LessThanToken */) {
                    return tryParseGenericArgumentList();
                }
                if (tokenKind === 77 /* OpenParenToken */) {
                    return parseArgumentList(undefined, _currentToken);
                }
                return undefined;
            }
            function parseArgumentList(typeArgumentList, openParenToken) {
                TypeScript.Debug.assert(openParenToken.kind === 77 /* OpenParenToken */ && openParenToken.fullWidth() > 0);
                return new TypeScript.ArgumentListSyntax(contextFlags, typeArgumentList, consumeToken(openParenToken), parseSeparatedSyntaxList(13 /* ArgumentList_AssignmentExpressions */), eatToken(78 /* CloseParenToken */));
            }
            function tryParseArgumentListExpression() {
                var force = currentToken().kind === 84 /* CommaToken */;
                return (force || isExpression(currentToken())) ? allowInAnd(parseAssignmentExpressionOrHigher) : undefined;
            }
            function parseElementAccessArgumentExpression(openBracketToken) {
                return currentToken().kind === 80 /* CloseBracketToken */ ? undefined : allowInAnd(parseExpression);
            }
            function parseElementAccessExpression(expression, openBracketToken) {
                return new TypeScript.ElementAccessExpressionSyntax(contextFlags, expression, consumeToken(openBracketToken), parseElementAccessArgumentExpression(openBracketToken), eatToken(80 /* CloseBracketToken */));
            }
            function parsePrimaryExpression(_currentToken) {
                var currentTokenKind = _currentToken.kind;
                switch (currentTokenKind) {
                    case 37 /* ThisKeyword */:
                    case 39 /* TrueKeyword */:
                    case 26 /* FalseKeyword */:
                    case 34 /* NullKeyword */:
                    case 11 /* NumericLiteral */:
                    case 10 /* RegularExpressionLiteral */:
                    case 12 /* StringLiteral */:
                        return consumeToken(_currentToken);
                    case 29 /* FunctionKeyword */:
                        return parseFunctionExpression();
                    case 79 /* OpenBracketToken */:
                        return parseArrayLiteralExpression(_currentToken);
                    case 75 /* OpenBraceToken */:
                        return parseObjectLiteralExpression(_currentToken);
                    case 77 /* OpenParenToken */:
                        return parseParenthesizedExpression(_currentToken);
                    case 33 /* NewKeyword */:
                        return parseObjectCreationExpression(_currentToken);
                    case 13 /* NoSubstitutionTemplateToken */:
                    case 14 /* TemplateStartToken */:
                        return parseTemplateExpression(_currentToken);
                    case 123 /* SlashToken */:
                    case 124 /* SlashEqualsToken */:
                        return reparseDivideAsRegularExpression();
                    case 63 /* AsyncKeyword */:
                        var token1 = peekToken(1);
                        if (!token1.hasLeadingNewLine() && token1.kind === 29 /* FunctionKeyword */) {
                            return parseFunctionExpression();
                        }
                        break;
                }
                return eatIdentifierToken(TypeScript.DiagnosticCode.Expression_expected);
            }
            function reparseDivideAsRegularExpression() {
                var currentToken = currentContextualToken();
                var tokenKind = currentToken.kind;
                TypeScript.Debug.assert(tokenKind === 10 /* RegularExpressionLiteral */);
                return consumeToken(currentToken);
            }
            function parseTypeOfExpression(typeOfKeyword) {
                return new TypeScript.TypeOfExpressionSyntax(contextFlags, consumeToken(typeOfKeyword), parseUnaryExpressionOrHigher(currentToken()));
            }
            function parseDeleteExpression(deleteKeyword) {
                return new TypeScript.DeleteExpressionSyntax(contextFlags, consumeToken(deleteKeyword), parseUnaryExpressionOrHigher(currentToken()));
            }
            function parseVoidExpression(voidKeyword) {
                return new TypeScript.VoidExpressionSyntax(contextFlags, consumeToken(voidKeyword), parseUnaryExpressionOrHigher(currentToken()));
            }
            function parseFunctionExpression() {
                var asyncKeyword;
                var asteriskToken;
                return new TypeScript.FunctionExpressionSyntax(contextFlags, asyncKeyword = tryEatToken(63 /* AsyncKeyword */), eatToken(29 /* FunctionKeyword */), asteriskToken = tryEatToken(96 /* AsteriskToken */), tryEatFunctionExpressionIdentifier(!!asteriskToken, !!asyncKeyword), parseCallSignatureWithoutSemicolonOrComma(false, !!asteriskToken, !!asyncKeyword), parseFunctionBody(!!asteriskToken, !!asyncKeyword));
            }
            function tryEatFunctionExpressionIdentifier(yieldContext, asyncContext) {
                var savedYieldContext = inYieldContext();
                var savedAsyncContext = inAsyncContext();
                setYieldContext(yieldContext);
                setAsyncContext(asyncContext);
                var result = eatOptionalIdentifierToken();
                setYieldContext(savedYieldContext);
                setAsyncContext(savedAsyncContext);
                return result;
            }
            function parseObjectCreationExpression(newKeyword) {
                return new TypeScript.ObjectCreationExpressionSyntax(contextFlags, consumeToken(newKeyword), parseMemberExpressionOrHigher(currentToken()), tryParseArgumentList());
            }
            function parseTemplateExpression(startToken) {
                startToken = consumeToken(startToken);
                if (startToken.kind === 13 /* NoSubstitutionTemplateToken */) {
                    return startToken;
                }
                var templateClauses = [];
                do {
                    templateClauses.push(parseTemplateClause());
                } while (templateClauses[templateClauses.length - 1].templateMiddleOrEndToken.kind === 15 /* TemplateMiddleToken */);
                return new TypeScript.TemplateExpressionSyntax(contextFlags, startToken, templateClauses);
            }
            function parseTemplateClause() {
                var expression = allowInAnd(parseExpression);
                var token = currentToken();
                if (token.kind === 76 /* CloseBraceToken */) {
                    token = currentContextualToken();
                    TypeScript.Debug.assert(token.kind === 15 /* TemplateMiddleToken */ || token.kind === 16 /* TemplateEndToken */);
                    token = consumeToken(token);
                }
                else {
                    token = createMissingToken(16 /* TemplateEndToken */, undefined, TypeScript.DiagnosticCode._0_expected, ["{"]);
                }
                return new TypeScript.TemplateClauseSyntax(contextFlags, expression, token);
            }
            function parseTypeAssertionExpression(lessThanToken) {
                return new TypeScript.TypeAssertionExpressionSyntax(contextFlags, consumeToken(lessThanToken), parseType(), eatToken(86 /* GreaterThanToken */), parseUnaryExpressionOrHigher(currentToken()));
            }
            function parseParenthesizedExpression(openParenToken) {
                return new TypeScript.ParenthesizedExpressionSyntax(contextFlags, consumeToken(openParenToken), allowInAnd(parseExpression), eatToken(78 /* CloseParenToken */));
            }
            function tryParseParenthesizedArrowFunctionExpression() {
                var tokenKind = currentToken().kind;
                if (tokenKind !== 63 /* AsyncKeyword */ && tokenKind !== 77 /* OpenParenToken */ && tokenKind !== 85 /* LessThanToken */) {
                    return undefined;
                }
                if (isDefinitelyArrowFunctionExpression()) {
                    return parseParenthesizedArrowFunctionExpressionWorker(false);
                }
                if (!isPossiblyArrowFunctionExpression()) {
                    return undefined;
                }
                return tryParse(speculativeParseParenthesizedArrowFunctionExpression);
            }
            function speculativeParseParenthesizedArrowFunctionExpression() {
                return parseParenthesizedArrowFunctionExpressionWorker(true);
            }
            function parseParenthesizedArrowFunctionExpressionWorker(requireArrow) {
                var asyncKeyword = tryEatToken(63 /* AsyncKeyword */);
                var callSignature = parseCallSignatureWithoutSemicolonOrComma(true, inYieldContext(), !!asyncKeyword);
                if (requireArrow && currentToken().kind !== 90 /* EqualsGreaterThanToken */) {
                    return undefined;
                }
                return new TypeScript.ParenthesizedArrowFunctionExpressionSyntax(contextFlags, asyncKeyword, callSignature, eatToken(90 /* EqualsGreaterThanToken */), parseArrowFunctionBody(!!asyncKeyword));
            }
            function parseArrowFunctionBody(asyncContext) {
                if (currentToken().kind === 75 /* OpenBraceToken */) {
                    return parseFunctionBlock(false, asyncContext, undefined);
                }
                var _modifierCount = modifierCount();
                if (isStatement(_modifierCount, false) && !isExpression(currentToken())) {
                    return new TypeScript.BlockSyntax(contextFlags, undefined, eatToken(75 /* OpenBraceToken */), parseFunctionBlockStatements(false, asyncContext), eatToken(76 /* CloseBraceToken */));
                }
                return asyncContext ? doInsideAsyncContext(parseAssignmentExpressionOrHigher) : doOutsideAsyncContext(parseAssignmentExpressionOrHigher);
            }
            function isSimpleArrowFunctionExpression(_currentToken) {
                if (_currentToken.kind === 90 /* EqualsGreaterThanToken */) {
                    return true;
                }
                if (_currentToken.kind === 63 /* AsyncKeyword */) {
                    var token1 = peekToken(1);
                    if (!token1.hasLeadingNewLine() && isIdentifier(peekToken(1))) {
                        return true;
                    }
                }
                return isIdentifier(_currentToken) && peekToken(1).kind === 90 /* EqualsGreaterThanToken */;
            }
            function parseSimpleArrowFunctionExpression() {
                var asyncKeyword;
                return new TypeScript.SimpleArrowFunctionExpressionSyntax(contextFlags, asyncKeyword = tryEatToken(63 /* AsyncKeyword */), asyncKeyword ? doInsideAsyncContext(eatSimpleParameter) : doOutsideAsyncContext(eatSimpleParameter), eatToken(90 /* EqualsGreaterThanToken */), parseArrowFunctionBody(!!asyncKeyword));
            }
            function isStartOfFunctionBlock() {
                var currentTokenKind = currentToken().kind;
                return currentTokenKind === 75 /* OpenBraceToken */ || currentTokenKind === 90 /* EqualsGreaterThanToken */;
            }
            function isBlockOrArrow() {
                var _currentToken = currentToken();
                return _currentToken.kind === 75 /* OpenBraceToken */ || _currentToken.kind === 90 /* EqualsGreaterThanToken */;
            }
            function isDefinitelyArrowFunctionExpression() {
                var peekIndex = 0;
                if (currentToken().kind === 63 /* AsyncKeyword */) {
                    if (peekToken(1).hasLeadingNewLine()) {
                        return false;
                    }
                    peekIndex++;
                }
                var token0 = peekToken(peekIndex);
                if (token0.kind !== 77 /* OpenParenToken */) {
                    return false;
                }
                var token1 = peekToken(peekIndex + 1);
                var token1Kind = token1.kind;
                var token2;
                if (token1Kind === 78 /* CloseParenToken */) {
                    token2 = peekToken(peekIndex + 2);
                    var token2Kind = token2.kind;
                    return token2Kind === 111 /* ColonToken */ || token2Kind === 90 /* EqualsGreaterThanToken */ || token2Kind === 75 /* OpenBraceToken */;
                }
                if (token1Kind === 82 /* DotDotDotToken */) {
                    return true;
                }
                token2 = peekToken(peekIndex + 2);
                token2Kind = token2.kind;
                if (TypeScript.SyntaxFacts.isAccessibilityModifier(token1Kind)) {
                    if (isIdentifier(token2)) {
                        return true;
                    }
                }
                if (!isIdentifier(token1)) {
                    return false;
                }
                if (token2Kind === 111 /* ColonToken */) {
                    return true;
                }
                var token3 = peekToken(peekIndex + 3);
                var token3Kind = token3.kind;
                if (token2Kind === 110 /* QuestionToken */) {
                    if (token3Kind === 111 /* ColonToken */ || token3Kind === 78 /* CloseParenToken */ || token3Kind === 84 /* CommaToken */) {
                        return true;
                    }
                }
                if (token2Kind === 78 /* CloseParenToken */) {
                    if (token3Kind === 90 /* EqualsGreaterThanToken */) {
                        return true;
                    }
                }
                return false;
            }
            function isPossiblyArrowFunctionExpression() {
                var peekIndex = 0;
                if (currentToken().kind === 63 /* AsyncKeyword */) {
                    if (peekToken(1).hasLeadingNewLine()) {
                        return false;
                    }
                    peekIndex++;
                }
                var token0 = peekToken(peekIndex);
                if (token0.kind !== 77 /* OpenParenToken */) {
                    return true;
                }
                var token1 = peekToken(peekIndex + 1);
                if (!isIdentifier(token1)) {
                    return false;
                }
                var token2 = peekToken(peekIndex + 2);
                var token2Kind = token2.kind;
                if (token2Kind === 112 /* EqualsToken */) {
                    return true;
                }
                if (token2Kind === 84 /* CommaToken */) {
                    return true;
                }
                if (token2Kind === 78 /* CloseParenToken */) {
                    var token3 = peekToken(peekIndex + 3);
                    if (token3.kind === 111 /* ColonToken */) {
                        return true;
                    }
                }
                return false;
            }
            function parseObjectLiteralExpression(openBraceToken) {
                return new TypeScript.ObjectLiteralExpressionSyntax(contextFlags, consumeToken(openBraceToken), parseSeparatedSyntaxList(14 /* ObjectLiteralExpression_PropertyAssignments */), eatToken(76 /* CloseBraceToken */));
            }
            function tryParsePropertyAssignment(inErrorRecovery) {
                var modifiers = parseModifiers();
                if (isAccessor(inErrorRecovery)) {
                    return parseAccessor(modifiers);
                }
                var _currentToken = currentToken();
                if (modifiers.length === 0) {
                    if (isIdentifier(_currentToken)) {
                        var token1 = peekToken(1);
                        if (token1.kind !== 111 /* ColonToken */ && token1.kind !== 77 /* OpenParenToken */ && token1.kind !== 85 /* LessThanToken */) {
                            return eatIdentifierToken();
                        }
                    }
                }
                if (modifiers.length > 0 || _currentToken.kind === 96 /* AsteriskToken */ || isPropertyName(0, inErrorRecovery)) {
                    var asterixToken = tryEatToken(96 /* AsteriskToken */);
                    var propertyName = parsePropertyName();
                    if (modifiers.length > 0 || asterixToken !== undefined || isCallSignature(0)) {
                        return parseMethodDeclaration(modifiers, asterixToken, propertyName);
                    }
                    else {
                        return new TypeScript.PropertyAssignmentSyntax(contextFlags, propertyName, eatToken(111 /* ColonToken */), allowInAnd(parseAssignmentExpressionOrHigher));
                    }
                }
                return undefined;
            }
            function isPropertyAssignment(inErrorRecovery) {
                return isAtModifier() || isAccessor(inErrorRecovery) || currentToken().kind === 96 /* AsteriskToken */ || isPropertyName(0, inErrorRecovery);
            }
            function isPropertyName(peekIndex, inErrorRecovery) {
                var token = peekToken(peekIndex);
                if (token.kind === 79 /* OpenBracketToken */) {
                    return !isIndexSignature(peekIndex);
                }
                return isPropertyNameToken(token, inErrorRecovery);
            }
            function isPropertyNameToken(token, inErrorRecovery) {
                if (TypeScript.SyntaxFacts.isIdentifierNameOrAnyKeyword(token)) {
                    if (inErrorRecovery) {
                        return isIdentifier(token);
                    }
                    else {
                        return true;
                    }
                }
                return isLiteralPropertyName(token);
            }
            function isLiteralPropertyName(token) {
                var kind = token.kind;
                return kind === 12 /* StringLiteral */ || kind === 11 /* NumericLiteral */ || kind === 13 /* NoSubstitutionTemplateToken */;
            }
            function parsePropertyName() {
                var _currentToken = currentToken();
                if (_currentToken.kind === 79 /* OpenBracketToken */) {
                    return inGeneratorParameterContext() ? doOutsideYieldContext(parseComputedPropertyName) : parseComputedPropertyName();
                }
                else if (TypeScript.SyntaxFacts.isIdentifierNameOrAnyKeyword(_currentToken)) {
                    return eatIdentifierNameToken();
                }
                else if (isLiteralPropertyName(_currentToken)) {
                    return consumeToken(_currentToken);
                }
                else {
                    return eatIdentifierToken();
                }
            }
            function parseComputedPropertyName() {
                return new TypeScript.ComputedPropertyNameSyntax(contextFlags, eatToken(79 /* OpenBracketToken */), allowInAnd(parseExpression), eatToken(80 /* CloseBracketToken */));
            }
            function parseArrayLiteralExpression(openBracketToken) {
                return new TypeScript.ArrayLiteralExpressionSyntax(contextFlags, consumeToken(openBracketToken), parseSeparatedSyntaxList(15 /* ArrayLiteralExpression_AssignmentExpressions */), eatToken(80 /* CloseBracketToken */));
            }
            function parseStatementBlock() {
                var openBraceToken;
                return new TypeScript.BlockSyntax(contextFlags, tryEatToken(90 /* EqualsGreaterThanToken */), openBraceToken = eatToken(75 /* OpenBraceToken */), openBraceToken.fullWidth() > 0 ? parseSyntaxList(5 /* Block_Statements */) : [], eatToken(76 /* CloseBraceToken */));
            }
            function parseFunctionBlockOrExpressionBody(yieldContext, asyncContext) {
                var equalsGreaterThanToken = tryEatToken(90 /* EqualsGreaterThanToken */);
                if (equalsGreaterThanToken) {
                    if (isExpression(currentToken())) {
                        return new TypeScript.ExpressionBody(contextFlags, equalsGreaterThanToken, parseExpression());
                    }
                }
                return parseFunctionBlock(yieldContext, asyncContext, equalsGreaterThanToken);
            }
            function parseFunctionBlock(yieldContext, asyncContext, equalsGreaterThanToken) {
                var openBraceToken;
                return new TypeScript.BlockSyntax(contextFlags, equalsGreaterThanToken, openBraceToken = eatToken(75 /* OpenBraceToken */), equalsGreaterThanToken || openBraceToken.fullWidth() > 0 ? parseFunctionBlockStatements(yieldContext, asyncContext) : [], eatToken(76 /* CloseBraceToken */));
            }
            function parseFunctionBlockStatements(yieldContext, asyncContext) {
                var savedStrictModeContext = inStrictModeContext();
                var savedYieldContext = inYieldContext();
                var savedAsyncContext = inAsyncContext();
                setYieldContext(yieldContext);
                setAsyncContext(asyncContext);
                var statements = parseSyntaxList(5 /* Block_Statements */, updateStrictModeState);
                setStrictModeContext(savedStrictModeContext);
                setYieldContext(savedYieldContext);
                setAsyncContext(savedAsyncContext);
                return statements;
            }
            function parseCallSignatureWithoutSemicolonOrComma(requireCompleteTypeParameterList, yieldAndGeneratorParameterContext, asyncContext) {
                return parseCallSignatureWorker(requireCompleteTypeParameterList, yieldAndGeneratorParameterContext, asyncContext, false);
            }
            function parseCallSignatureWithSemicolonOrComma(requireCompleteTypeParameterList, yieldAndGeneratorParameterContext, asyncContext) {
                return parseCallSignatureWorker(requireCompleteTypeParameterList, yieldAndGeneratorParameterContext, asyncContext, true);
            }
            function parseCallSignatureWorker(requireCompleteTypeParameterList, yieldAndGeneratorParameterContext, asyncContext, withSemicolonOrComma) {
                return new TypeScript.CallSignatureSyntax(contextFlags, tryParseTypeParameterList(requireCompleteTypeParameterList), parseParameterList(yieldAndGeneratorParameterContext, asyncContext), parseOptionalTypeAnnotation(false), withSemicolonOrComma ? eatExplicitOrAutomaticSemicolonOrComma() : undefined);
            }
            function eatExplicitOrAutomaticSemicolonOrComma() {
                var _currentToken = currentToken();
                if (_currentToken.kind === 84 /* CommaToken */) {
                    return consumeToken(_currentToken);
                }
                return eatExplicitOrAutomaticSemicolon();
            }
            function tryParseTypeParameterList(requireCompleteTypeParameterList) {
                var _currentToken = currentToken();
                if (_currentToken.kind !== 85 /* LessThanToken */) {
                    return undefined;
                }
                return requireCompleteTypeParameterList ? tryParse(speculativeParseTypeParameterList) : parseTypeArgumentListWorker(false);
            }
            function speculativeParseTypeParameterList() {
                return parseTypeArgumentListWorker(true);
            }
            function parseTypeArgumentListWorker(requireCompleteTypeParameterList) {
                var lessThanToken = consumeToken(currentToken());
                var typeParameters = parseSeparatedSyntaxList(19 /* TypeParameterList_TypeParameters */);
                if (requireCompleteTypeParameterList && currentToken().kind !== 86 /* GreaterThanToken */) {
                    return undefined;
                }
                return new TypeScript.TypeParameterListSyntax(contextFlags, lessThanToken, typeParameters, eatToken(86 /* GreaterThanToken */));
            }
            function isTypeParameter() {
                return isIdentifier(currentToken());
            }
            function tryParseTypeParameter() {
                if (!isIdentifier(currentToken())) {
                    return undefined;
                }
                return new TypeScript.TypeParameterSyntax(contextFlags, eatIdentifierToken(), tryParseConstraint());
            }
            function tryParseConstraint() {
                if (currentToken().kind !== 50 /* ExtendsKeyword */) {
                    return undefined;
                }
                return new TypeScript.ConstraintSyntax(contextFlags, eatToken(50 /* ExtendsKeyword */), parseTypeOrExpression());
            }
            function parseParameterList(yieldAndGeneratorParameterContext, asyncContext) {
                var savedYieldContext = inYieldContext();
                var savedGeneratorParameterContext = inGeneratorParameterContext();
                var savedAsyncContext = inAsyncContext();
                setYieldContext(yieldAndGeneratorParameterContext);
                setGeneratorParameterContext(yieldAndGeneratorParameterContext);
                setAsyncContext(asyncContext);
                var openParenToken;
                var result = new TypeScript.ParameterListSyntax(contextFlags, openParenToken = eatToken(77 /* OpenParenToken */), openParenToken.fullWidth() > 0 ? parseSeparatedSyntaxList(16 /* ParameterList_Parameters */) : [], eatToken(78 /* CloseParenToken */));
                setYieldContext(savedYieldContext);
                setGeneratorParameterContext(savedGeneratorParameterContext);
                setAsyncContext(savedAsyncContext);
                return result;
            }
            function parseOptionalTypeAnnotation(allowStringLiteral) {
                return currentToken().kind === 111 /* ColonToken */ ? parseTypeAnnotation(allowStringLiteral) : undefined;
            }
            function parseTypeAnnotationType(allowStringLiteral) {
                if (allowStringLiteral) {
                    var _currentToken = currentToken();
                    if (_currentToken.kind === 12 /* StringLiteral */) {
                        return consumeToken(_currentToken);
                    }
                }
                return parseType();
            }
            function parseTypeAnnotation(allowStringLiteral) {
                return new TypeScript.TypeAnnotationSyntax(contextFlags, consumeToken(currentToken()), parseTypeAnnotationType(allowStringLiteral));
            }
            function isType() {
                var _currentToken = currentToken();
                switch (_currentToken.kind) {
                    case 41 /* TypeOfKeyword */:
                    case 62 /* AnyKeyword */:
                    case 71 /* NumberKeyword */:
                    case 65 /* BooleanKeyword */:
                    case 74 /* StringKeyword */:
                    case 43 /* VoidKeyword */:
                    case 75 /* OpenBraceToken */:
                    case 77 /* OpenParenToken */:
                    case 85 /* LessThanToken */:
                    case 33 /* NewKeyword */:
                        return true;
                    default:
                        return isIdentifier(_currentToken);
                }
            }
            function parseTypeOrExpression() {
                var result = tryParseType();
                if (result) {
                    return result;
                }
                var _currentToken = currentToken();
                if (isExpression(_currentToken)) {
                    return parseUnaryExpressionOrHigher(_currentToken);
                }
                return eatIdentifierToken(TypeScript.DiagnosticCode.Type_expected);
            }
            function parseType() {
                return tryParseType() || eatIdentifierToken(TypeScript.DiagnosticCode.Type_expected);
            }
            function tryParseType() {
                var savedYieldContext = inYieldContext();
                var savedGeneratorParameterContext = inGeneratorParameterContext();
                setYieldContext(false);
                setGeneratorParameterContext(false);
                var result = tryParseTypeWorker();
                setYieldContext(savedYieldContext);
                setGeneratorParameterContext(savedGeneratorParameterContext);
                return result;
            }
            function tryParseTypeWorker() {
                if (isFunctionType()) {
                    return parseFunctionType();
                }
                if (currentToken().kind === 33 /* NewKeyword */) {
                    return parseConstructorType();
                }
                return tryParseUnionTypeOrHigher();
            }
            function tryParseUnionTypeOrHigher() {
                var type = tryParsePrimaryType();
                if (type) {
                    var barToken;
                    while ((barToken = currentToken()).kind === 104 /* BarToken */) {
                        type = new TypeScript.UnionTypeSyntax(contextFlags, type, consumeToken(barToken), parsePrimaryType());
                    }
                }
                return type;
            }
            function parsePrimaryType() {
                return tryParsePrimaryType() || eatIdentifierToken(TypeScript.DiagnosticCode.Type_expected);
            }
            function tryParsePrimaryType() {
                var type = tryParseNonArrayType();
                while (type) {
                    var _currentToken = currentToken();
                    if (_currentToken.hasLeadingNewLine() || _currentToken.kind !== 79 /* OpenBracketToken */) {
                        break;
                    }
                    type = new TypeScript.ArrayTypeSyntax(contextFlags, type, consumeToken(_currentToken), eatToken(80 /* CloseBracketToken */));
                }
                return type;
            }
            function parseTypeQuery(typeOfKeyword) {
                return new TypeScript.TypeQuerySyntax(contextFlags, consumeToken(typeOfKeyword), parseName(true));
            }
            function tryParseNonArrayType() {
                var _currentToken = currentToken();
                switch (_currentToken.kind) {
                    case 62 /* AnyKeyword */:
                    case 71 /* NumberKeyword */:
                    case 65 /* BooleanKeyword */:
                    case 74 /* StringKeyword */:
                        if (peekToken(1).kind === 81 /* DotToken */) {
                            break;
                        }
                        return consumeToken(_currentToken);
                    case 43 /* VoidKeyword */: return consumeToken(_currentToken);
                    case 77 /* OpenParenToken */: return parseParenthesizedType(_currentToken);
                    case 75 /* OpenBraceToken */: return parseObjectType();
                    case 41 /* TypeOfKeyword */: return parseTypeQuery(_currentToken);
                    case 79 /* OpenBracketToken */: return parseTupleType(_currentToken);
                }
                return tryParseNameOrGenericType();
            }
            function parseParenthesizedType(openParenToken) {
                return new TypeScript.ParenthesizedTypeSyntax(contextFlags, consumeToken(openParenToken), parseType(), eatToken(78 /* CloseParenToken */));
            }
            function tryParseNameOrGenericType() {
                var name = tryParseName(false);
                if (name === undefined) {
                    return undefined;
                }
                if (currentToken().hasLeadingNewLine()) {
                    return name;
                }
                var _currentToken = currentToken();
                if (_currentToken.kind !== 85 /* LessThanToken */) {
                    return name;
                }
                return new TypeScript.GenericTypeSyntax(contextFlags, name, new TypeScript.TypeArgumentListSyntax(contextFlags, consumeToken(_currentToken), parseSeparatedSyntaxList(18 /* TypeArgumentList_Types */), eatToken(86 /* GreaterThanToken */)));
            }
            function isFunctionType() {
                var token0 = currentToken();
                var token0Kind = token0.kind;
                if (token0Kind === 85 /* LessThanToken */) {
                    return true;
                }
                if (token0Kind === 77 /* OpenParenToken */) {
                    var token1 = peekToken(1);
                    var token1Kind = token1.kind;
                    if (token1Kind === 78 /* CloseParenToken */ || token1Kind === 82 /* DotDotDotToken */) {
                        return true;
                    }
                    if (isModifierKind(token1Kind) || isIdentifier(token1)) {
                        var token2 = peekToken(2);
                        var token2Kind = token2.kind;
                        if (token2Kind === 111 /* ColonToken */ || token2Kind === 84 /* CommaToken */ || token2Kind === 110 /* QuestionToken */ || token2Kind === 112 /* EqualsToken */ || isIdentifier(token2) || isModifierKind(token2Kind)) {
                            return true;
                        }
                        if (token2Kind === 78 /* CloseParenToken */) {
                            return peekToken(3).kind === 90 /* EqualsGreaterThanToken */;
                        }
                    }
                }
                return false;
            }
            function parseFunctionType() {
                return new TypeScript.FunctionTypeSyntax(contextFlags, tryParseTypeParameterList(false), parseParameterList(false, false), eatToken(90 /* EqualsGreaterThanToken */), parseType());
            }
            function parseConstructorType() {
                return new TypeScript.ConstructorTypeSyntax(contextFlags, eatToken(33 /* NewKeyword */), tryParseTypeParameterList(false), parseParameterList(false, false), eatToken(90 /* EqualsGreaterThanToken */), parseType());
            }
            function isParameter() {
                return isParameterHelper(currentToken());
            }
            function isParameterHelper(token) {
                var tokenKind = token.kind;
                return tokenKind === 82 /* DotDotDotToken */ || isModifierKind(tokenKind) || isIdentifier(token);
            }
            function eatSimpleParameter() {
                return new TypeScript.ParameterSyntax(contextFlags, undefined, [], eatIdentifierToken(), undefined, undefined, undefined);
            }
            function tryParseParameter() {
                var dotDotDotToken = tryEatToken(82 /* DotDotDotToken */);
                var modifiers = parseModifiers();
                var _currentToken = currentToken();
                if (!isIdentifier(_currentToken) && !dotDotDotToken && modifiers.length === 0) {
                    if (isModifierKind(_currentToken.kind)) {
                        modifiers = [consumeToken(_currentToken)];
                    }
                    else {
                        return undefined;
                    }
                }
                var identifier = inGeneratorParameterContext() ? doInsideYieldContext(eatIdentifierToken) : eatIdentifierToken();
                var questionToken = tryEatToken(110 /* QuestionToken */);
                var typeAnnotation = parseOptionalTypeAnnotation(true);
                var equalsValueClause = undefined;
                if (isEqualsValueClause(true)) {
                    equalsValueClause = inGeneratorParameterContext() ? doOutsideYieldContext(parseEqualsValueClause) : parseEqualsValueClause();
                }
                return new TypeScript.ParameterSyntax(contextFlags, dotDotDotToken, modifiers, identifier, questionToken, typeAnnotation, equalsValueClause);
            }
            function parseSyntaxList(currentListType, processItems) {
                var savedListParsingState = listParsingState;
                listParsingState |= (1 << currentListType);
                var result = parseSyntaxListWorker(currentListType, processItems);
                listParsingState = savedListParsingState;
                return result;
            }
            function parseSeparatedSyntaxList(currentListType) {
                var savedListParsingState = listParsingState;
                listParsingState |= (1 << currentListType);
                var result = parseSeparatedSyntaxListWorker(currentListType);
                listParsingState = savedListParsingState;
                return result;
            }
            function abortParsingListOrMoveToNextToken(currentListType) {
                reportUnexpectedTokenDiagnostic(currentListType);
                for (var state = ListParsingState.LastListParsingState; state >= ListParsingState.FirstListParsingState; state--) {
                    if ((listParsingState & (1 << state)) !== 0) {
                        if (isExpectedListTerminator(state) || isExpectedListItem(state, true)) {
                            return true;
                        }
                    }
                }
                skipToken(currentToken());
                return false;
            }
            function tryParseExpectedListItem(currentListType, inErrorRecovery, items, processItems) {
                var item = tryParseExpectedListItemWorker(currentListType, inErrorRecovery);
                if (item !== undefined) {
                    items.push(item);
                    if (processItems) {
                        processItems(items);
                    }
                }
            }
            function listIsTerminated(currentListType) {
                return isExpectedListTerminator(currentListType) || currentToken().kind === 8 /* EndOfFileToken */;
            }
            function parseSyntaxListWorker(currentListType, processItems) {
                var items = [];
                while (true) {
                    var oldItemsLength = items.length;
                    tryParseExpectedListItem(currentListType, false, items, processItems);
                    if (items.length === oldItemsLength) {
                        if (listIsTerminated(currentListType)) {
                            break;
                        }
                        var abort = abortParsingListOrMoveToNextToken(currentListType);
                        if (abort) {
                            break;
                        }
                    }
                }
                return items;
            }
            function parseSeparatedSyntaxListWorker(currentListType) {
                var nodesAndSeparators = [];
                var inErrorRecovery = false;
                while (true) {
                    var oldArrayLength = nodesAndSeparators.length;
                    tryParseExpectedListItem(currentListType, inErrorRecovery, nodesAndSeparators, undefined);
                    if (nodesAndSeparators.length === oldArrayLength) {
                        if (listIsTerminated(currentListType)) {
                            break;
                        }
                        var abort = abortParsingListOrMoveToNextToken(currentListType);
                        if (abort) {
                            break;
                        }
                        else {
                            inErrorRecovery = true;
                            continue;
                        }
                    }
                    inErrorRecovery = false;
                    var _currentToken = currentToken();
                    if (_currentToken.kind === 84 /* CommaToken */) {
                        nodesAndSeparators.push(consumeToken(_currentToken));
                        continue;
                    }
                    if (listIsTerminated(currentListType)) {
                        break;
                    }
                    nodesAndSeparators.push(eatToken(84 /* CommaToken */));
                    inErrorRecovery = true;
                }
                return nodesAndSeparators;
            }
            function reportUnexpectedTokenDiagnostic(listType) {
                var token = currentToken();
                var diagnostic = new TypeScript.Diagnostic(source.fileName, source.text.lineMap(), TypeScript.start(token, source.text), TypeScript.width(token), TypeScript.DiagnosticCode.Unexpected_token_0_expected, [getExpectedListElementType(listType)]);
                addDiagnostic(diagnostic);
            }
            function addDiagnostic(diagnostic) {
                if (diagnostics.length > 0 && diagnostics[diagnostics.length - 1].start() === diagnostic.start()) {
                    return;
                }
                diagnostics.push(diagnostic);
            }
            function isExpectedListTerminator(currentListType) {
                switch (currentListType) {
                    case 0 /* SourceUnit_ModuleElements */: return isExpectedSourceUnit_ModuleElementsTerminator();
                    case 1 /* ClassDeclaration_ClassElements */: return isExpectedClassDeclaration_ClassElementsTerminator();
                    case 2 /* ModuleDeclaration_ModuleElements */: return isExpectedModuleDeclaration_ModuleElementsTerminator();
                    case 3 /* SwitchStatement_SwitchClauses */: return isExpectedSwitchStatement_SwitchClausesTerminator();
                    case 4 /* SwitchClause_Statements */: return isExpectedSwitchClause_StatementsTerminator();
                    case 5 /* Block_Statements */: return isExpectedBlock_StatementsTerminator();
                    case 6 /* TryBlock_Statements */: return isExpectedTryBlock_StatementsTerminator();
                    case 7 /* CatchBlock_Statements */: return isExpectedCatchBlock_StatementsTerminator();
                    case 8 /* EnumDeclaration_EnumElements */: return isExpectedEnumDeclaration_EnumElementsTerminator();
                    case 9 /* ObjectType_TypeMembers */: return isExpectedObjectType_TypeMembersTerminator();
                    case 10 /* ClassOrInterfaceDeclaration_HeritageClauses */: return isExpectedClassOrInterfaceDeclaration_HeritageClausesTerminator();
                    case 11 /* HeritageClause_TypeNameList */: return isExpectedHeritageClause_TypeNameListTerminator();
                    case 12 /* VariableDeclaration_VariableDeclarators */: return isExpectedVariableDeclaration_VariableDeclaratorsTerminator();
                    case 13 /* ArgumentList_AssignmentExpressions */: return isExpectedArgumentList_AssignmentExpressionsTerminator();
                    case 14 /* ObjectLiteralExpression_PropertyAssignments */: return isExpectedObjectLiteralExpression_PropertyAssignmentsTerminator();
                    case 15 /* ArrayLiteralExpression_AssignmentExpressions */: return isExpectedLiteralExpression_AssignmentExpressionsTerminator();
                    case 16 /* ParameterList_Parameters */: return isExpectedParameterList_ParametersTerminator();
                    case 17 /* IndexSignature_Parameters */: return isExpectedIndexSignature_ParametersTerminator();
                    case 18 /* TypeArgumentList_Types */: return isExpectedTypeArgumentList_TypesTerminator();
                    case 19 /* TypeParameterList_TypeParameters */: return isExpectedTypeParameterList_TypeParametersTerminator();
                    case 20 /* TupleType_Types */: return isExpectedTupleType_TypesTerminator();
                    default:
                        throw TypeScript.Errors.invalidOperation();
                }
            }
            function isExpectedSourceUnit_ModuleElementsTerminator() {
                return currentToken().kind === 8 /* EndOfFileToken */;
            }
            function isExpectedEnumDeclaration_EnumElementsTerminator() {
                return currentToken().kind === 76 /* CloseBraceToken */;
            }
            function isExpectedModuleDeclaration_ModuleElementsTerminator() {
                return currentToken().kind === 76 /* CloseBraceToken */;
            }
            function isExpectedObjectType_TypeMembersTerminator() {
                return currentToken().kind === 76 /* CloseBraceToken */;
            }
            function isExpectedObjectLiteralExpression_PropertyAssignmentsTerminator() {
                return currentToken().kind === 76 /* CloseBraceToken */;
            }
            function isExpectedLiteralExpression_AssignmentExpressionsTerminator() {
                return currentToken().kind === 80 /* CloseBracketToken */;
            }
            function isExpectedTypeArgumentList_TypesTerminator() {
                var token = currentToken();
                var tokenKind = token.kind;
                if (tokenKind === 86 /* GreaterThanToken */) {
                    return true;
                }
                if (canFollowTypeArgumentListInExpression(tokenKind)) {
                    return true;
                }
                return false;
            }
            function isExpectedTupleType_TypesTerminator() {
                var token = currentToken();
                var tokenKind = token.kind;
                if (tokenKind === 80 /* CloseBracketToken */) {
                    return true;
                }
                return false;
            }
            function isExpectedTypeParameterList_TypeParametersTerminator() {
                var tokenKind = currentToken().kind;
                if (tokenKind === 86 /* GreaterThanToken */) {
                    return true;
                }
                if (tokenKind === 77 /* OpenParenToken */ || tokenKind === 75 /* OpenBraceToken */ || tokenKind === 50 /* ExtendsKeyword */ || tokenKind === 53 /* ImplementsKeyword */) {
                    return true;
                }
                return false;
            }
            function isExpectedParameterList_ParametersTerminator() {
                var tokenKind = currentToken().kind;
                if (tokenKind === 78 /* CloseParenToken */) {
                    return true;
                }
                if (tokenKind === 75 /* OpenBraceToken */) {
                    return true;
                }
                if (tokenKind === 90 /* EqualsGreaterThanToken */) {
                    return true;
                }
                return false;
            }
            function isExpectedIndexSignature_ParametersTerminator() {
                var tokenKind = currentToken().kind;
                if (tokenKind === 80 /* CloseBracketToken */) {
                    return true;
                }
                if (tokenKind === 75 /* OpenBraceToken */) {
                    return true;
                }
                return false;
            }
            function isExpectedVariableDeclaration_VariableDeclaratorsTerminator() {
                if (inDisallowInContext()) {
                    var tokenKind = currentToken().kind;
                    if (tokenKind === 83 /* SemicolonToken */ || tokenKind === 78 /* CloseParenToken */) {
                        return true;
                    }
                    if (tokenKind === 31 /* InKeyword */) {
                        return true;
                    }
                    return false;
                }
                else {
                    if (currentToken().kind === 90 /* EqualsGreaterThanToken */) {
                        return true;
                    }
                    return canEatExplicitOrAutomaticSemicolon();
                }
            }
            function isExpectedClassOrInterfaceDeclaration_HeritageClausesTerminator() {
                var tokenKind = currentToken().kind;
                if (tokenKind === 75 /* OpenBraceToken */ || tokenKind === 76 /* CloseBraceToken */) {
                    return true;
                }
                return false;
            }
            function isExpectedHeritageClause_TypeNameListTerminator() {
                var tokenKind = currentToken().kind;
                if (tokenKind === 50 /* ExtendsKeyword */ || tokenKind === 53 /* ImplementsKeyword */) {
                    return true;
                }
                if (isExpectedClassOrInterfaceDeclaration_HeritageClausesTerminator()) {
                    return true;
                }
                return false;
            }
            function isExpectedArgumentList_AssignmentExpressionsTerminator() {
                var token0 = currentToken();
                var tokenKind = token0.kind;
                return tokenKind === 78 /* CloseParenToken */ || tokenKind === 83 /* SemicolonToken */;
            }
            function isExpectedClassDeclaration_ClassElementsTerminator() {
                return currentToken().kind === 76 /* CloseBraceToken */;
            }
            function isExpectedSwitchStatement_SwitchClausesTerminator() {
                return currentToken().kind === 76 /* CloseBraceToken */;
            }
            function isExpectedSwitchClause_StatementsTerminator() {
                return currentToken().kind === 76 /* CloseBraceToken */ || isSwitchClause();
            }
            function isExpectedBlock_StatementsTerminator() {
                return currentToken().kind === 76 /* CloseBraceToken */;
            }
            function isExpectedTryBlock_StatementsTerminator() {
                var tokenKind = currentToken().kind;
                return tokenKind === 19 /* CatchKeyword */ || tokenKind === 27 /* FinallyKeyword */;
            }
            function isExpectedCatchBlock_StatementsTerminator() {
                return currentToken().kind === 27 /* FinallyKeyword */;
            }
            function isExpectedListItem(currentListType, inErrorRecovery) {
                var node = currentNode(currentListType);
                if (node) {
                    return true;
                }
                switch (currentListType) {
                    case 0 /* SourceUnit_ModuleElements */: return isModuleElement(inErrorRecovery);
                    case 1 /* ClassDeclaration_ClassElements */: return isClassElement(inErrorRecovery);
                    case 2 /* ModuleDeclaration_ModuleElements */: return isModuleElement(inErrorRecovery);
                    case 3 /* SwitchStatement_SwitchClauses */: return isSwitchClause();
                    case 4 /* SwitchClause_Statements */: return isStatement(modifierCount(), inErrorRecovery);
                    case 5 /* Block_Statements */: return isStatement(modifierCount(), inErrorRecovery);
                    case 6 /* TryBlock_Statements */: return false;
                    case 7 /* CatchBlock_Statements */: return false;
                    case 8 /* EnumDeclaration_EnumElements */: return isEnumElement(inErrorRecovery);
                    case 9 /* ObjectType_TypeMembers */: return isTypeMember(inErrorRecovery);
                    case 10 /* ClassOrInterfaceDeclaration_HeritageClauses */: return isHeritageClause();
                    case 11 /* HeritageClause_TypeNameList */: return isHeritageClauseTypeName();
                    case 12 /* VariableDeclaration_VariableDeclarators */: return isVariableDeclarator();
                    case 13 /* ArgumentList_AssignmentExpressions */: return isExpectedArgumentList_AssignmentExpression();
                    case 14 /* ObjectLiteralExpression_PropertyAssignments */: return isPropertyAssignment(inErrorRecovery);
                    case 15 /* ArrayLiteralExpression_AssignmentExpressions */: return isAssignmentOrOmittedExpression();
                    case 16 /* ParameterList_Parameters */: return isParameter();
                    case 17 /* IndexSignature_Parameters */: return isParameter();
                    case 18 /* TypeArgumentList_Types */: return isType();
                    case 19 /* TypeParameterList_TypeParameters */: return isTypeParameter();
                    case 20 /* TupleType_Types */: return isType();
                    default: throw TypeScript.Errors.invalidOperation();
                }
            }
            function isExpectedArgumentList_AssignmentExpression() {
                var _currentToken = currentToken();
                if (isExpression(_currentToken)) {
                    return true;
                }
                if (_currentToken.kind === 84 /* CommaToken */) {
                    return true;
                }
                return false;
            }
            function tryParseExpectedListItemWorker(currentListType, inErrorRecovery) {
                var node = currentNode(currentListType);
                if (node) {
                    return node;
                }
                switch (currentListType) {
                    case 0 /* SourceUnit_ModuleElements */: return tryParseModuleElement(inErrorRecovery);
                    case 1 /* ClassDeclaration_ClassElements */: return tryParseClassElement(inErrorRecovery);
                    case 2 /* ModuleDeclaration_ModuleElements */: return tryParseModuleElement(inErrorRecovery);
                    case 3 /* SwitchStatement_SwitchClauses */: return tryParseSwitchClause();
                    case 4 /* SwitchClause_Statements */: return tryParseStatement(inErrorRecovery);
                    case 5 /* Block_Statements */: return tryParseStatement(inErrorRecovery);
                    case 6 /* TryBlock_Statements */: return tryParseStatement(inErrorRecovery);
                    case 7 /* CatchBlock_Statements */: return tryParseStatement(inErrorRecovery);
                    case 8 /* EnumDeclaration_EnumElements */: return tryParseEnumElement(inErrorRecovery);
                    case 9 /* ObjectType_TypeMembers */: return tryParseTypeMember(inErrorRecovery);
                    case 10 /* ClassOrInterfaceDeclaration_HeritageClauses */: return tryParseHeritageClause();
                    case 11 /* HeritageClause_TypeNameList */: return tryParseHeritageClauseTypeName();
                    case 12 /* VariableDeclaration_VariableDeclarators */: return tryParseVariableDeclarator();
                    case 13 /* ArgumentList_AssignmentExpressions */: return tryParseArgumentListExpression();
                    case 14 /* ObjectLiteralExpression_PropertyAssignments */: return tryParsePropertyAssignment(inErrorRecovery);
                    case 15 /* ArrayLiteralExpression_AssignmentExpressions */: return tryParseAssignmentOrOmittedExpression();
                    case 16 /* ParameterList_Parameters */: return tryParseParameter();
                    case 17 /* IndexSignature_Parameters */: return tryParseParameter();
                    case 18 /* TypeArgumentList_Types */: return tryParseType();
                    case 19 /* TypeParameterList_TypeParameters */: return tryParseTypeParameter();
                    case 20 /* TupleType_Types */: return tryParseType();
                    default: throw TypeScript.Errors.invalidOperation();
                }
            }
            function currentNode(currentListType) {
                if (skippedTokens) {
                    return undefined;
                }
                var node = source.currentNode();
                if (!node) {
                    return undefined;
                }
                if (TypeScript.parserContextFlags(node) !== contextFlags) {
                    return undefined;
                }
                if (!canReuseNode(node, currentListType)) {
                    return undefined;
                }
                return consumeNode(node);
            }
            function canReuseNode(node, listParsingState) {
                switch (listParsingState) {
                    case 0 /* SourceUnit_ModuleElements */:
                        return TypeScript.SyntaxUtilities.isModuleElement(node);
                    case 1 /* ClassDeclaration_ClassElements */:
                        return TypeScript.SyntaxUtilities.isClassElement(node);
                    case 2 /* ModuleDeclaration_ModuleElements */:
                        return TypeScript.SyntaxUtilities.isModuleElement(node);
                    case 3 /* SwitchStatement_SwitchClauses */:
                        return TypeScript.SyntaxUtilities.isSwitchClause(node);
                    case 4 /* SwitchClause_Statements */:
                    case 5 /* Block_Statements */:
                    case 6 /* TryBlock_Statements */:
                    case 7 /* CatchBlock_Statements */:
                        return TypeScript.SyntaxUtilities.isStatement(node);
                    case 8 /* EnumDeclaration_EnumElements */:
                        return node.kind === 211 /* EnumElement */;
                    case 9 /* ObjectType_TypeMembers */:
                        return TypeScript.SyntaxUtilities.isTypeMember(node);
                    case 12 /* VariableDeclaration_VariableDeclarators */:
                        return canReuseVariableDeclaratorNode(node);
                    case 16 /* ParameterList_Parameters */:
                    case 17 /* IndexSignature_Parameters */:
                        return node.kind === 210 /* Parameter */;
                    case 10 /* ClassOrInterfaceDeclaration_HeritageClauses */:
                    case 11 /* HeritageClause_TypeNameList */:
                    case 19 /* TypeParameterList_TypeParameters */:
                    case 20 /* TupleType_Types */:
                    case 18 /* TypeArgumentList_Types */:
                    case 13 /* ArgumentList_AssignmentExpressions */:
                    case 15 /* ArrayLiteralExpression_AssignmentExpressions */:
                    case 14 /* ObjectLiteralExpression_PropertyAssignments */:
                }
                return false;
            }
            function canReuseVariableDeclaratorNode(node) {
                if (node.kind !== 195 /* VariableDeclarator */) {
                    return false;
                }
                var variableDeclarator = node;
                return variableDeclarator.equalsValueClause === undefined;
            }
            function getExpectedListElementType(currentListType) {
                switch (currentListType) {
                    case 0 /* SourceUnit_ModuleElements */: return TypeScript.getLocalizedText(TypeScript.DiagnosticCode.module_class_interface_enum_import_or_statement, undefined);
                    case 10 /* ClassOrInterfaceDeclaration_HeritageClauses */: return '{';
                    case 1 /* ClassDeclaration_ClassElements */: return TypeScript.getLocalizedText(TypeScript.DiagnosticCode.constructor_function_accessor_or_variable, undefined);
                    case 2 /* ModuleDeclaration_ModuleElements */: return TypeScript.getLocalizedText(TypeScript.DiagnosticCode.module_class_interface_enum_import_or_statement, undefined);
                    case 3 /* SwitchStatement_SwitchClauses */: return TypeScript.getLocalizedText(TypeScript.DiagnosticCode.case_or_default_clause, undefined);
                    case 4 /* SwitchClause_Statements */: return TypeScript.getLocalizedText(TypeScript.DiagnosticCode.statement, undefined);
                    case 5 /* Block_Statements */: return TypeScript.getLocalizedText(TypeScript.DiagnosticCode.statement, undefined);
                    case 12 /* VariableDeclaration_VariableDeclarators */: return TypeScript.getLocalizedText(TypeScript.DiagnosticCode.identifier, undefined);
                    case 8 /* EnumDeclaration_EnumElements */: return TypeScript.getLocalizedText(TypeScript.DiagnosticCode.identifier, undefined);
                    case 9 /* ObjectType_TypeMembers */: return TypeScript.getLocalizedText(TypeScript.DiagnosticCode.call_construct_index_property_or_function_signature, undefined);
                    case 13 /* ArgumentList_AssignmentExpressions */: return TypeScript.getLocalizedText(TypeScript.DiagnosticCode.expression, undefined);
                    case 11 /* HeritageClause_TypeNameList */: return TypeScript.getLocalizedText(TypeScript.DiagnosticCode.type_name, undefined);
                    case 14 /* ObjectLiteralExpression_PropertyAssignments */: return TypeScript.getLocalizedText(TypeScript.DiagnosticCode.property_or_accessor, undefined);
                    case 16 /* ParameterList_Parameters */: return TypeScript.getLocalizedText(TypeScript.DiagnosticCode.parameter, undefined);
                    case 17 /* IndexSignature_Parameters */: return TypeScript.getLocalizedText(TypeScript.DiagnosticCode.parameter, undefined);
                    case 18 /* TypeArgumentList_Types */: return TypeScript.getLocalizedText(TypeScript.DiagnosticCode.type, undefined);
                    case 19 /* TypeParameterList_TypeParameters */: return TypeScript.getLocalizedText(TypeScript.DiagnosticCode.type_parameter, undefined);
                    case 20 /* TupleType_Types */: return TypeScript.getLocalizedText(TypeScript.DiagnosticCode.type, undefined);
                    case 15 /* ArrayLiteralExpression_AssignmentExpressions */: return TypeScript.getLocalizedText(TypeScript.DiagnosticCode.expression, undefined);
                    default: throw TypeScript.Errors.invalidOperation();
                }
            }
            return parseSyntaxTree;
        }
        var BinaryExpressionPrecedence;
        (function (BinaryExpressionPrecedence) {
            BinaryExpressionPrecedence[BinaryExpressionPrecedence["Lowest"] = 1] = "Lowest";
            BinaryExpressionPrecedence[BinaryExpressionPrecedence["LogicalOrExpressionPrecedence"] = 2] = "LogicalOrExpressionPrecedence";
            BinaryExpressionPrecedence[BinaryExpressionPrecedence["LogicalAndExpressionPrecedence"] = 3] = "LogicalAndExpressionPrecedence";
            BinaryExpressionPrecedence[BinaryExpressionPrecedence["BitwiseOrExpressionPrecedence"] = 4] = "BitwiseOrExpressionPrecedence";
            BinaryExpressionPrecedence[BinaryExpressionPrecedence["BitwiseExclusiveOrExpressionPrecedence"] = 5] = "BitwiseExclusiveOrExpressionPrecedence";
            BinaryExpressionPrecedence[BinaryExpressionPrecedence["BitwiseAndExpressionPrecedence"] = 6] = "BitwiseAndExpressionPrecedence";
            BinaryExpressionPrecedence[BinaryExpressionPrecedence["EqualityExpressionPrecedence"] = 7] = "EqualityExpressionPrecedence";
            BinaryExpressionPrecedence[BinaryExpressionPrecedence["RelationalExpressionPrecedence"] = 8] = "RelationalExpressionPrecedence";
            BinaryExpressionPrecedence[BinaryExpressionPrecedence["ShiftExpressionPrecdence"] = 9] = "ShiftExpressionPrecdence";
            BinaryExpressionPrecedence[BinaryExpressionPrecedence["AdditiveExpressionPrecedence"] = 10] = "AdditiveExpressionPrecedence";
            BinaryExpressionPrecedence[BinaryExpressionPrecedence["MultiplicativeExpressionPrecedence"] = 11] = "MultiplicativeExpressionPrecedence";
        })(BinaryExpressionPrecedence || (BinaryExpressionPrecedence = {}));
        var ListParsingState;
        (function (ListParsingState) {
            ListParsingState[ListParsingState["SourceUnit_ModuleElements"] = 0] = "SourceUnit_ModuleElements";
            ListParsingState[ListParsingState["ClassDeclaration_ClassElements"] = 1] = "ClassDeclaration_ClassElements";
            ListParsingState[ListParsingState["ModuleDeclaration_ModuleElements"] = 2] = "ModuleDeclaration_ModuleElements";
            ListParsingState[ListParsingState["SwitchStatement_SwitchClauses"] = 3] = "SwitchStatement_SwitchClauses";
            ListParsingState[ListParsingState["SwitchClause_Statements"] = 4] = "SwitchClause_Statements";
            ListParsingState[ListParsingState["Block_Statements"] = 5] = "Block_Statements";
            ListParsingState[ListParsingState["TryBlock_Statements"] = 6] = "TryBlock_Statements";
            ListParsingState[ListParsingState["CatchBlock_Statements"] = 7] = "CatchBlock_Statements";
            ListParsingState[ListParsingState["EnumDeclaration_EnumElements"] = 8] = "EnumDeclaration_EnumElements";
            ListParsingState[ListParsingState["ObjectType_TypeMembers"] = 9] = "ObjectType_TypeMembers";
            ListParsingState[ListParsingState["ClassOrInterfaceDeclaration_HeritageClauses"] = 10] = "ClassOrInterfaceDeclaration_HeritageClauses";
            ListParsingState[ListParsingState["HeritageClause_TypeNameList"] = 11] = "HeritageClause_TypeNameList";
            ListParsingState[ListParsingState["VariableDeclaration_VariableDeclarators"] = 12] = "VariableDeclaration_VariableDeclarators";
            ListParsingState[ListParsingState["ArgumentList_AssignmentExpressions"] = 13] = "ArgumentList_AssignmentExpressions";
            ListParsingState[ListParsingState["ObjectLiteralExpression_PropertyAssignments"] = 14] = "ObjectLiteralExpression_PropertyAssignments";
            ListParsingState[ListParsingState["ArrayLiteralExpression_AssignmentExpressions"] = 15] = "ArrayLiteralExpression_AssignmentExpressions";
            ListParsingState[ListParsingState["ParameterList_Parameters"] = 16] = "ParameterList_Parameters";
            ListParsingState[ListParsingState["IndexSignature_Parameters"] = 17] = "IndexSignature_Parameters";
            ListParsingState[ListParsingState["TypeArgumentList_Types"] = 18] = "TypeArgumentList_Types";
            ListParsingState[ListParsingState["TypeParameterList_TypeParameters"] = 19] = "TypeParameterList_TypeParameters";
            ListParsingState[ListParsingState["TupleType_Types"] = 20] = "TupleType_Types";
            ListParsingState[ListParsingState["FirstListParsingState"] = ListParsingState.SourceUnit_ModuleElements] = "FirstListParsingState";
            ListParsingState[ListParsingState["LastListParsingState"] = ListParsingState.TupleType_Types] = "LastListParsingState";
        })(ListParsingState || (ListParsingState = {}));
        TypeScript.Debug.assert(ListParsingState.LastListParsingState <= 30);
        var parseSyntaxTree = createParseSyntaxTree();
        function parse(fileName, text, languageVersion, isDeclaration) {
            return parseSource(TypeScript.Scanner.createParserSource(fileName, text, languageVersion), isDeclaration);
        }
        Parser.parse = parse;
        function parseSource(source, isDeclaration) {
            return parseSyntaxTree(source, isDeclaration);
        }
        Parser.parseSource = parseSource;
    })(Parser = TypeScript.Parser || (TypeScript.Parser = {}));
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    TypeScript.SourceUnitSyntax = function (data, moduleElements, endOfFileToken) {
        if (data) {
            this.__data = data;
        }
        this.moduleElements = moduleElements, this.endOfFileToken = endOfFileToken;
    };
    TypeScript.SourceUnitSyntax.prototype.kind = 125 /* SourceUnit */;
    TypeScript.SourceUnitSyntax.prototype.childCount = 2;
    TypeScript.SourceUnitSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.moduleElements;
            case 1: return this.endOfFileToken;
        }
    };
    TypeScript.QualifiedNameSyntax = function (data, left, dotToken, right) {
        if (data) {
            this.__data = data;
        }
        this.left = left, this.dotToken = dotToken, this.right = right;
    };
    TypeScript.QualifiedNameSyntax.prototype.kind = 126 /* QualifiedName */;
    TypeScript.QualifiedNameSyntax.prototype.childCount = 3;
    TypeScript.QualifiedNameSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.left;
            case 1: return this.dotToken;
            case 2: return this.right;
        }
    };
    TypeScript.ObjectTypeSyntax = function (data, openBraceToken, typeMembers, closeBraceToken) {
        if (data) {
            this.__data = data;
        }
        this.openBraceToken = openBraceToken, this.typeMembers = typeMembers, this.closeBraceToken = closeBraceToken;
    };
    TypeScript.ObjectTypeSyntax.prototype.kind = 127 /* ObjectType */;
    TypeScript.ObjectTypeSyntax.prototype.childCount = 3;
    TypeScript.ObjectTypeSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.openBraceToken;
            case 1: return this.typeMembers;
            case 2: return this.closeBraceToken;
        }
    };
    TypeScript.FunctionTypeSyntax = function (data, typeParameterList, parameterList, equalsGreaterThanToken, type) {
        if (data) {
            this.__data = data;
        }
        this.typeParameterList = typeParameterList, this.parameterList = parameterList, this.equalsGreaterThanToken = equalsGreaterThanToken, this.type = type;
    };
    TypeScript.FunctionTypeSyntax.prototype.kind = 128 /* FunctionType */;
    TypeScript.FunctionTypeSyntax.prototype.childCount = 4;
    TypeScript.FunctionTypeSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.typeParameterList;
            case 1: return this.parameterList;
            case 2: return this.equalsGreaterThanToken;
            case 3: return this.type;
        }
    };
    TypeScript.ArrayTypeSyntax = function (data, type, openBracketToken, closeBracketToken) {
        if (data) {
            this.__data = data;
        }
        this.type = type, this.openBracketToken = openBracketToken, this.closeBracketToken = closeBracketToken;
    };
    TypeScript.ArrayTypeSyntax.prototype.kind = 129 /* ArrayType */;
    TypeScript.ArrayTypeSyntax.prototype.childCount = 3;
    TypeScript.ArrayTypeSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.type;
            case 1: return this.openBracketToken;
            case 2: return this.closeBracketToken;
        }
    };
    TypeScript.ConstructorTypeSyntax = function (data, newKeyword, typeParameterList, parameterList, equalsGreaterThanToken, type) {
        if (data) {
            this.__data = data;
        }
        this.newKeyword = newKeyword, this.typeParameterList = typeParameterList, this.parameterList = parameterList, this.equalsGreaterThanToken = equalsGreaterThanToken, this.type = type;
    };
    TypeScript.ConstructorTypeSyntax.prototype.kind = 130 /* ConstructorType */;
    TypeScript.ConstructorTypeSyntax.prototype.childCount = 5;
    TypeScript.ConstructorTypeSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.newKeyword;
            case 1: return this.typeParameterList;
            case 2: return this.parameterList;
            case 3: return this.equalsGreaterThanToken;
            case 4: return this.type;
        }
    };
    TypeScript.GenericTypeSyntax = function (data, name, typeArgumentList) {
        if (data) {
            this.__data = data;
        }
        this.name = name, this.typeArgumentList = typeArgumentList;
    };
    TypeScript.GenericTypeSyntax.prototype.kind = 131 /* GenericType */;
    TypeScript.GenericTypeSyntax.prototype.childCount = 2;
    TypeScript.GenericTypeSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.name;
            case 1: return this.typeArgumentList;
        }
    };
    TypeScript.TypeQuerySyntax = function (data, typeOfKeyword, name) {
        if (data) {
            this.__data = data;
        }
        this.typeOfKeyword = typeOfKeyword, this.name = name;
    };
    TypeScript.TypeQuerySyntax.prototype.kind = 132 /* TypeQuery */;
    TypeScript.TypeQuerySyntax.prototype.childCount = 2;
    TypeScript.TypeQuerySyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.typeOfKeyword;
            case 1: return this.name;
        }
    };
    TypeScript.TupleTypeSyntax = function (data, openBracketToken, types, closeBracketToken) {
        if (data) {
            this.__data = data;
        }
        this.openBracketToken = openBracketToken, this.types = types, this.closeBracketToken = closeBracketToken;
    };
    TypeScript.TupleTypeSyntax.prototype.kind = 133 /* TupleType */;
    TypeScript.TupleTypeSyntax.prototype.childCount = 3;
    TypeScript.TupleTypeSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.openBracketToken;
            case 1: return this.types;
            case 2: return this.closeBracketToken;
        }
    };
    TypeScript.UnionTypeSyntax = function (data, left, barToken, right) {
        if (data) {
            this.__data = data;
        }
        this.left = left, this.barToken = barToken, this.right = right;
    };
    TypeScript.UnionTypeSyntax.prototype.kind = 134 /* UnionType */;
    TypeScript.UnionTypeSyntax.prototype.childCount = 3;
    TypeScript.UnionTypeSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.left;
            case 1: return this.barToken;
            case 2: return this.right;
        }
    };
    TypeScript.ParenthesizedTypeSyntax = function (data, openParenToken, type, closeParenToken) {
        if (data) {
            this.__data = data;
        }
        this.openParenToken = openParenToken, this.type = type, this.closeParenToken = closeParenToken;
    };
    TypeScript.ParenthesizedTypeSyntax.prototype.kind = 135 /* ParenthesizedType */;
    TypeScript.ParenthesizedTypeSyntax.prototype.childCount = 3;
    TypeScript.ParenthesizedTypeSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.openParenToken;
            case 1: return this.type;
            case 2: return this.closeParenToken;
        }
    };
    TypeScript.InterfaceDeclarationSyntax = function (data, modifiers, interfaceKeyword, identifier, typeParameterList, heritageClauses, body) {
        if (data) {
            this.__data = data;
        }
        this.modifiers = modifiers, this.interfaceKeyword = interfaceKeyword, this.identifier = identifier, this.typeParameterList = typeParameterList, this.heritageClauses = heritageClauses, this.body = body;
    };
    TypeScript.InterfaceDeclarationSyntax.prototype.kind = 136 /* InterfaceDeclaration */;
    TypeScript.InterfaceDeclarationSyntax.prototype.childCount = 6;
    TypeScript.InterfaceDeclarationSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.modifiers;
            case 1: return this.interfaceKeyword;
            case 2: return this.identifier;
            case 3: return this.typeParameterList;
            case 4: return this.heritageClauses;
            case 5: return this.body;
        }
    };
    TypeScript.FunctionDeclarationSyntax = function (data, modifiers, functionKeyword, asterixToken, identifier, callSignature, body) {
        if (data) {
            this.__data = data;
        }
        this.modifiers = modifiers, this.functionKeyword = functionKeyword, this.asterixToken = asterixToken, this.identifier = identifier, this.callSignature = callSignature, this.body = body;
    };
    TypeScript.FunctionDeclarationSyntax.prototype.kind = 137 /* FunctionDeclaration */;
    TypeScript.FunctionDeclarationSyntax.prototype.childCount = 6;
    TypeScript.FunctionDeclarationSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.modifiers;
            case 1: return this.functionKeyword;
            case 2: return this.asterixToken;
            case 3: return this.identifier;
            case 4: return this.callSignature;
            case 5: return this.body;
        }
    };
    TypeScript.ModuleDeclarationSyntax = function (data, modifiers, moduleKeyword, name, openBraceToken, moduleElements, closeBraceToken) {
        if (data) {
            this.__data = data;
        }
        this.modifiers = modifiers, this.moduleKeyword = moduleKeyword, this.name = name, this.openBraceToken = openBraceToken, this.moduleElements = moduleElements, this.closeBraceToken = closeBraceToken;
    };
    TypeScript.ModuleDeclarationSyntax.prototype.kind = 138 /* ModuleDeclaration */;
    TypeScript.ModuleDeclarationSyntax.prototype.childCount = 6;
    TypeScript.ModuleDeclarationSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.modifiers;
            case 1: return this.moduleKeyword;
            case 2: return this.name;
            case 3: return this.openBraceToken;
            case 4: return this.moduleElements;
            case 5: return this.closeBraceToken;
        }
    };
    TypeScript.ClassDeclarationSyntax = function (data, modifiers, classKeyword, identifier, typeParameterList, heritageClauses, openBraceToken, classElements, closeBraceToken) {
        if (data) {
            this.__data = data;
        }
        this.modifiers = modifiers, this.classKeyword = classKeyword, this.identifier = identifier, this.typeParameterList = typeParameterList, this.heritageClauses = heritageClauses, this.openBraceToken = openBraceToken, this.classElements = classElements, this.closeBraceToken = closeBraceToken;
    };
    TypeScript.ClassDeclarationSyntax.prototype.kind = 139 /* ClassDeclaration */;
    TypeScript.ClassDeclarationSyntax.prototype.childCount = 8;
    TypeScript.ClassDeclarationSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.modifiers;
            case 1: return this.classKeyword;
            case 2: return this.identifier;
            case 3: return this.typeParameterList;
            case 4: return this.heritageClauses;
            case 5: return this.openBraceToken;
            case 6: return this.classElements;
            case 7: return this.closeBraceToken;
        }
    };
    TypeScript.EnumDeclarationSyntax = function (data, modifiers, enumKeyword, identifier, openBraceToken, enumElements, closeBraceToken) {
        if (data) {
            this.__data = data;
        }
        this.modifiers = modifiers, this.enumKeyword = enumKeyword, this.identifier = identifier, this.openBraceToken = openBraceToken, this.enumElements = enumElements, this.closeBraceToken = closeBraceToken;
    };
    TypeScript.EnumDeclarationSyntax.prototype.kind = 140 /* EnumDeclaration */;
    TypeScript.EnumDeclarationSyntax.prototype.childCount = 6;
    TypeScript.EnumDeclarationSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.modifiers;
            case 1: return this.enumKeyword;
            case 2: return this.identifier;
            case 3: return this.openBraceToken;
            case 4: return this.enumElements;
            case 5: return this.closeBraceToken;
        }
    };
    TypeScript.ImportDeclarationSyntax = function (data, modifiers, importKeyword, identifier, equalsToken, moduleReference, semicolonToken) {
        if (data) {
            this.__data = data;
        }
        this.modifiers = modifiers, this.importKeyword = importKeyword, this.identifier = identifier, this.equalsToken = equalsToken, this.moduleReference = moduleReference, this.semicolonToken = semicolonToken;
    };
    TypeScript.ImportDeclarationSyntax.prototype.kind = 141 /* ImportDeclaration */;
    TypeScript.ImportDeclarationSyntax.prototype.childCount = 6;
    TypeScript.ImportDeclarationSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.modifiers;
            case 1: return this.importKeyword;
            case 2: return this.identifier;
            case 3: return this.equalsToken;
            case 4: return this.moduleReference;
            case 5: return this.semicolonToken;
        }
    };
    TypeScript.ExportAssignmentSyntax = function (data, modifiers, exportKeyword, equalsToken, identifier, semicolonToken) {
        if (data) {
            this.__data = data;
        }
        this.modifiers = modifiers, this.exportKeyword = exportKeyword, this.equalsToken = equalsToken, this.identifier = identifier, this.semicolonToken = semicolonToken;
    };
    TypeScript.ExportAssignmentSyntax.prototype.kind = 142 /* ExportAssignment */;
    TypeScript.ExportAssignmentSyntax.prototype.childCount = 5;
    TypeScript.ExportAssignmentSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.modifiers;
            case 1: return this.exportKeyword;
            case 2: return this.equalsToken;
            case 3: return this.identifier;
            case 4: return this.semicolonToken;
        }
    };
    TypeScript.MethodDeclarationSyntax = function (data, modifiers, asterixToken, propertyName, callSignature, body) {
        if (data) {
            this.__data = data;
        }
        this.modifiers = modifiers, this.asterixToken = asterixToken, this.propertyName = propertyName, this.callSignature = callSignature, this.body = body;
    };
    TypeScript.MethodDeclarationSyntax.prototype.kind = 143 /* MethodDeclaration */;
    TypeScript.MethodDeclarationSyntax.prototype.childCount = 5;
    TypeScript.MethodDeclarationSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.modifiers;
            case 1: return this.asterixToken;
            case 2: return this.propertyName;
            case 3: return this.callSignature;
            case 4: return this.body;
        }
    };
    TypeScript.PropertyDeclarationSyntax = function (data, modifiers, variableDeclarator, semicolonToken) {
        if (data) {
            this.__data = data;
        }
        this.modifiers = modifiers, this.variableDeclarator = variableDeclarator, this.semicolonToken = semicolonToken;
    };
    TypeScript.PropertyDeclarationSyntax.prototype.kind = 144 /* PropertyDeclaration */;
    TypeScript.PropertyDeclarationSyntax.prototype.childCount = 3;
    TypeScript.PropertyDeclarationSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.modifiers;
            case 1: return this.variableDeclarator;
            case 2: return this.semicolonToken;
        }
    };
    TypeScript.ConstructorDeclarationSyntax = function (data, modifiers, constructorKeyword, callSignature, body) {
        if (data) {
            this.__data = data;
        }
        this.modifiers = modifiers, this.constructorKeyword = constructorKeyword, this.callSignature = callSignature, this.body = body;
    };
    TypeScript.ConstructorDeclarationSyntax.prototype.kind = 145 /* ConstructorDeclaration */;
    TypeScript.ConstructorDeclarationSyntax.prototype.childCount = 4;
    TypeScript.ConstructorDeclarationSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.modifiers;
            case 1: return this.constructorKeyword;
            case 2: return this.callSignature;
            case 3: return this.body;
        }
    };
    TypeScript.GetAccessorSyntax = function (data, modifiers, getKeyword, propertyName, callSignature, body) {
        if (data) {
            this.__data = data;
        }
        this.modifiers = modifiers, this.getKeyword = getKeyword, this.propertyName = propertyName, this.callSignature = callSignature, this.body = body;
    };
    TypeScript.GetAccessorSyntax.prototype.kind = 146 /* GetAccessor */;
    TypeScript.GetAccessorSyntax.prototype.childCount = 5;
    TypeScript.GetAccessorSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.modifiers;
            case 1: return this.getKeyword;
            case 2: return this.propertyName;
            case 3: return this.callSignature;
            case 4: return this.body;
        }
    };
    TypeScript.SetAccessorSyntax = function (data, modifiers, setKeyword, propertyName, callSignature, body) {
        if (data) {
            this.__data = data;
        }
        this.modifiers = modifiers, this.setKeyword = setKeyword, this.propertyName = propertyName, this.callSignature = callSignature, this.body = body;
    };
    TypeScript.SetAccessorSyntax.prototype.kind = 147 /* SetAccessor */;
    TypeScript.SetAccessorSyntax.prototype.childCount = 5;
    TypeScript.SetAccessorSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.modifiers;
            case 1: return this.setKeyword;
            case 2: return this.propertyName;
            case 3: return this.callSignature;
            case 4: return this.body;
        }
    };
    TypeScript.PropertySignatureSyntax = function (data, propertyName, questionToken, typeAnnotation, semicolonOrCommaToken) {
        if (data) {
            this.__data = data;
        }
        this.propertyName = propertyName, this.questionToken = questionToken, this.typeAnnotation = typeAnnotation, this.semicolonOrCommaToken = semicolonOrCommaToken;
    };
    TypeScript.PropertySignatureSyntax.prototype.kind = 148 /* PropertySignature */;
    TypeScript.PropertySignatureSyntax.prototype.childCount = 4;
    TypeScript.PropertySignatureSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.propertyName;
            case 1: return this.questionToken;
            case 2: return this.typeAnnotation;
            case 3: return this.semicolonOrCommaToken;
        }
    };
    TypeScript.CallSignatureSyntax = function (data, typeParameterList, parameterList, typeAnnotation, semicolonOrCommaToken) {
        if (data) {
            this.__data = data;
        }
        this.typeParameterList = typeParameterList, this.parameterList = parameterList, this.typeAnnotation = typeAnnotation, this.semicolonOrCommaToken = semicolonOrCommaToken;
    };
    TypeScript.CallSignatureSyntax.prototype.kind = 149 /* CallSignature */;
    TypeScript.CallSignatureSyntax.prototype.childCount = 4;
    TypeScript.CallSignatureSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.typeParameterList;
            case 1: return this.parameterList;
            case 2: return this.typeAnnotation;
            case 3: return this.semicolonOrCommaToken;
        }
    };
    TypeScript.ConstructSignatureSyntax = function (data, newKeyword, callSignature) {
        if (data) {
            this.__data = data;
        }
        this.newKeyword = newKeyword, this.callSignature = callSignature;
    };
    TypeScript.ConstructSignatureSyntax.prototype.kind = 150 /* ConstructSignature */;
    TypeScript.ConstructSignatureSyntax.prototype.childCount = 2;
    TypeScript.ConstructSignatureSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.newKeyword;
            case 1: return this.callSignature;
        }
    };
    TypeScript.IndexSignatureSyntax = function (data, modifiers, openBracketToken, parameters, closeBracketToken, typeAnnotation, semicolonOrCommaToken) {
        if (data) {
            this.__data = data;
        }
        this.modifiers = modifiers, this.openBracketToken = openBracketToken, this.parameters = parameters, this.closeBracketToken = closeBracketToken, this.typeAnnotation = typeAnnotation, this.semicolonOrCommaToken = semicolonOrCommaToken;
    };
    TypeScript.IndexSignatureSyntax.prototype.kind = 151 /* IndexSignature */;
    TypeScript.IndexSignatureSyntax.prototype.childCount = 6;
    TypeScript.IndexSignatureSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.modifiers;
            case 1: return this.openBracketToken;
            case 2: return this.parameters;
            case 3: return this.closeBracketToken;
            case 4: return this.typeAnnotation;
            case 5: return this.semicolonOrCommaToken;
        }
    };
    TypeScript.MethodSignatureSyntax = function (data, propertyName, questionToken, callSignature) {
        if (data) {
            this.__data = data;
        }
        this.propertyName = propertyName, this.questionToken = questionToken, this.callSignature = callSignature;
    };
    TypeScript.MethodSignatureSyntax.prototype.kind = 152 /* MethodSignature */;
    TypeScript.MethodSignatureSyntax.prototype.childCount = 3;
    TypeScript.MethodSignatureSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.propertyName;
            case 1: return this.questionToken;
            case 2: return this.callSignature;
        }
    };
    TypeScript.BlockSyntax = function (data, equalsGreaterThanToken, openBraceToken, statements, closeBraceToken) {
        if (data) {
            this.__data = data;
        }
        this.equalsGreaterThanToken = equalsGreaterThanToken, this.openBraceToken = openBraceToken, this.statements = statements, this.closeBraceToken = closeBraceToken;
    };
    TypeScript.BlockSyntax.prototype.kind = 153 /* Block */;
    TypeScript.BlockSyntax.prototype.childCount = 4;
    TypeScript.BlockSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.equalsGreaterThanToken;
            case 1: return this.openBraceToken;
            case 2: return this.statements;
            case 3: return this.closeBraceToken;
        }
    };
    TypeScript.IfStatementSyntax = function (data, ifKeyword, openParenToken, condition, closeParenToken, statement, elseClause) {
        if (data) {
            this.__data = data;
        }
        this.ifKeyword = ifKeyword, this.openParenToken = openParenToken, this.condition = condition, this.closeParenToken = closeParenToken, this.statement = statement, this.elseClause = elseClause;
    };
    TypeScript.IfStatementSyntax.prototype.kind = 154 /* IfStatement */;
    TypeScript.IfStatementSyntax.prototype.childCount = 6;
    TypeScript.IfStatementSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.ifKeyword;
            case 1: return this.openParenToken;
            case 2: return this.condition;
            case 3: return this.closeParenToken;
            case 4: return this.statement;
            case 5: return this.elseClause;
        }
    };
    TypeScript.VariableStatementSyntax = function (data, modifiers, variableDeclaration, semicolonToken) {
        if (data) {
            this.__data = data;
        }
        this.modifiers = modifiers, this.variableDeclaration = variableDeclaration, this.semicolonToken = semicolonToken;
    };
    TypeScript.VariableStatementSyntax.prototype.kind = 155 /* VariableStatement */;
    TypeScript.VariableStatementSyntax.prototype.childCount = 3;
    TypeScript.VariableStatementSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.modifiers;
            case 1: return this.variableDeclaration;
            case 2: return this.semicolonToken;
        }
    };
    TypeScript.ExpressionStatementSyntax = function (data, expression, semicolonToken) {
        if (data) {
            this.__data = data;
        }
        this.expression = expression, this.semicolonToken = semicolonToken;
    };
    TypeScript.ExpressionStatementSyntax.prototype.kind = 156 /* ExpressionStatement */;
    TypeScript.ExpressionStatementSyntax.prototype.childCount = 2;
    TypeScript.ExpressionStatementSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.expression;
            case 1: return this.semicolonToken;
        }
    };
    TypeScript.ReturnStatementSyntax = function (data, returnKeyword, expression, semicolonToken) {
        if (data) {
            this.__data = data;
        }
        this.returnKeyword = returnKeyword, this.expression = expression, this.semicolonToken = semicolonToken;
    };
    TypeScript.ReturnStatementSyntax.prototype.kind = 157 /* ReturnStatement */;
    TypeScript.ReturnStatementSyntax.prototype.childCount = 3;
    TypeScript.ReturnStatementSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.returnKeyword;
            case 1: return this.expression;
            case 2: return this.semicolonToken;
        }
    };
    TypeScript.SwitchStatementSyntax = function (data, switchKeyword, openParenToken, expression, closeParenToken, openBraceToken, switchClauses, closeBraceToken) {
        if (data) {
            this.__data = data;
        }
        this.switchKeyword = switchKeyword, this.openParenToken = openParenToken, this.expression = expression, this.closeParenToken = closeParenToken, this.openBraceToken = openBraceToken, this.switchClauses = switchClauses, this.closeBraceToken = closeBraceToken;
    };
    TypeScript.SwitchStatementSyntax.prototype.kind = 158 /* SwitchStatement */;
    TypeScript.SwitchStatementSyntax.prototype.childCount = 7;
    TypeScript.SwitchStatementSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.switchKeyword;
            case 1: return this.openParenToken;
            case 2: return this.expression;
            case 3: return this.closeParenToken;
            case 4: return this.openBraceToken;
            case 5: return this.switchClauses;
            case 6: return this.closeBraceToken;
        }
    };
    TypeScript.BreakStatementSyntax = function (data, breakKeyword, identifier, semicolonToken) {
        if (data) {
            this.__data = data;
        }
        this.breakKeyword = breakKeyword, this.identifier = identifier, this.semicolonToken = semicolonToken;
    };
    TypeScript.BreakStatementSyntax.prototype.kind = 159 /* BreakStatement */;
    TypeScript.BreakStatementSyntax.prototype.childCount = 3;
    TypeScript.BreakStatementSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.breakKeyword;
            case 1: return this.identifier;
            case 2: return this.semicolonToken;
        }
    };
    TypeScript.ContinueStatementSyntax = function (data, continueKeyword, identifier, semicolonToken) {
        if (data) {
            this.__data = data;
        }
        this.continueKeyword = continueKeyword, this.identifier = identifier, this.semicolonToken = semicolonToken;
    };
    TypeScript.ContinueStatementSyntax.prototype.kind = 160 /* ContinueStatement */;
    TypeScript.ContinueStatementSyntax.prototype.childCount = 3;
    TypeScript.ContinueStatementSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.continueKeyword;
            case 1: return this.identifier;
            case 2: return this.semicolonToken;
        }
    };
    TypeScript.ForStatementSyntax = function (data, forKeyword, openParenToken, initializer, firstSemicolonToken, condition, secondSemicolonToken, incrementor, closeParenToken, statement) {
        if (data) {
            this.__data = data;
        }
        this.forKeyword = forKeyword, this.openParenToken = openParenToken, this.initializer = initializer, this.firstSemicolonToken = firstSemicolonToken, this.condition = condition, this.secondSemicolonToken = secondSemicolonToken, this.incrementor = incrementor, this.closeParenToken = closeParenToken, this.statement = statement;
    };
    TypeScript.ForStatementSyntax.prototype.kind = 161 /* ForStatement */;
    TypeScript.ForStatementSyntax.prototype.childCount = 9;
    TypeScript.ForStatementSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.forKeyword;
            case 1: return this.openParenToken;
            case 2: return this.initializer;
            case 3: return this.firstSemicolonToken;
            case 4: return this.condition;
            case 5: return this.secondSemicolonToken;
            case 6: return this.incrementor;
            case 7: return this.closeParenToken;
            case 8: return this.statement;
        }
    };
    TypeScript.ForInStatementSyntax = function (data, forKeyword, openParenToken, left, inKeyword, right, closeParenToken, statement) {
        if (data) {
            this.__data = data;
        }
        this.forKeyword = forKeyword, this.openParenToken = openParenToken, this.left = left, this.inKeyword = inKeyword, this.right = right, this.closeParenToken = closeParenToken, this.statement = statement;
    };
    TypeScript.ForInStatementSyntax.prototype.kind = 162 /* ForInStatement */;
    TypeScript.ForInStatementSyntax.prototype.childCount = 7;
    TypeScript.ForInStatementSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.forKeyword;
            case 1: return this.openParenToken;
            case 2: return this.left;
            case 3: return this.inKeyword;
            case 4: return this.right;
            case 5: return this.closeParenToken;
            case 6: return this.statement;
        }
    };
    TypeScript.EmptyStatementSyntax = function (data, semicolonToken) {
        if (data) {
            this.__data = data;
        }
        this.semicolonToken = semicolonToken;
    };
    TypeScript.EmptyStatementSyntax.prototype.kind = 163 /* EmptyStatement */;
    TypeScript.EmptyStatementSyntax.prototype.childCount = 1;
    TypeScript.EmptyStatementSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.semicolonToken;
        }
    };
    TypeScript.ThrowStatementSyntax = function (data, throwKeyword, expression, semicolonToken) {
        if (data) {
            this.__data = data;
        }
        this.throwKeyword = throwKeyword, this.expression = expression, this.semicolonToken = semicolonToken;
    };
    TypeScript.ThrowStatementSyntax.prototype.kind = 164 /* ThrowStatement */;
    TypeScript.ThrowStatementSyntax.prototype.childCount = 3;
    TypeScript.ThrowStatementSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.throwKeyword;
            case 1: return this.expression;
            case 2: return this.semicolonToken;
        }
    };
    TypeScript.WhileStatementSyntax = function (data, whileKeyword, openParenToken, condition, closeParenToken, statement) {
        if (data) {
            this.__data = data;
        }
        this.whileKeyword = whileKeyword, this.openParenToken = openParenToken, this.condition = condition, this.closeParenToken = closeParenToken, this.statement = statement;
    };
    TypeScript.WhileStatementSyntax.prototype.kind = 165 /* WhileStatement */;
    TypeScript.WhileStatementSyntax.prototype.childCount = 5;
    TypeScript.WhileStatementSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.whileKeyword;
            case 1: return this.openParenToken;
            case 2: return this.condition;
            case 3: return this.closeParenToken;
            case 4: return this.statement;
        }
    };
    TypeScript.TryStatementSyntax = function (data, tryKeyword, block, catchClause, finallyClause) {
        if (data) {
            this.__data = data;
        }
        this.tryKeyword = tryKeyword, this.block = block, this.catchClause = catchClause, this.finallyClause = finallyClause;
    };
    TypeScript.TryStatementSyntax.prototype.kind = 166 /* TryStatement */;
    TypeScript.TryStatementSyntax.prototype.childCount = 4;
    TypeScript.TryStatementSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.tryKeyword;
            case 1: return this.block;
            case 2: return this.catchClause;
            case 3: return this.finallyClause;
        }
    };
    TypeScript.LabeledStatementSyntax = function (data, identifier, colonToken, statement) {
        if (data) {
            this.__data = data;
        }
        this.identifier = identifier, this.colonToken = colonToken, this.statement = statement;
    };
    TypeScript.LabeledStatementSyntax.prototype.kind = 167 /* LabeledStatement */;
    TypeScript.LabeledStatementSyntax.prototype.childCount = 3;
    TypeScript.LabeledStatementSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.identifier;
            case 1: return this.colonToken;
            case 2: return this.statement;
        }
    };
    TypeScript.DoStatementSyntax = function (data, doKeyword, statement, whileKeyword, openParenToken, condition, closeParenToken, semicolonToken) {
        if (data) {
            this.__data = data;
        }
        this.doKeyword = doKeyword, this.statement = statement, this.whileKeyword = whileKeyword, this.openParenToken = openParenToken, this.condition = condition, this.closeParenToken = closeParenToken, this.semicolonToken = semicolonToken;
    };
    TypeScript.DoStatementSyntax.prototype.kind = 168 /* DoStatement */;
    TypeScript.DoStatementSyntax.prototype.childCount = 7;
    TypeScript.DoStatementSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.doKeyword;
            case 1: return this.statement;
            case 2: return this.whileKeyword;
            case 3: return this.openParenToken;
            case 4: return this.condition;
            case 5: return this.closeParenToken;
            case 6: return this.semicolonToken;
        }
    };
    TypeScript.DebuggerStatementSyntax = function (data, debuggerKeyword, semicolonToken) {
        if (data) {
            this.__data = data;
        }
        this.debuggerKeyword = debuggerKeyword, this.semicolonToken = semicolonToken;
    };
    TypeScript.DebuggerStatementSyntax.prototype.kind = 169 /* DebuggerStatement */;
    TypeScript.DebuggerStatementSyntax.prototype.childCount = 2;
    TypeScript.DebuggerStatementSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.debuggerKeyword;
            case 1: return this.semicolonToken;
        }
    };
    TypeScript.WithStatementSyntax = function (data, withKeyword, openParenToken, condition, closeParenToken, statement) {
        if (data) {
            this.__data = data;
        }
        this.withKeyword = withKeyword, this.openParenToken = openParenToken, this.condition = condition, this.closeParenToken = closeParenToken, this.statement = statement;
    };
    TypeScript.WithStatementSyntax.prototype.kind = 170 /* WithStatement */;
    TypeScript.WithStatementSyntax.prototype.childCount = 5;
    TypeScript.WithStatementSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.withKeyword;
            case 1: return this.openParenToken;
            case 2: return this.condition;
            case 3: return this.closeParenToken;
            case 4: return this.statement;
        }
    };
    TypeScript.PrefixUnaryExpressionSyntax = function (data, operatorToken, operand) {
        if (data) {
            this.__data = data;
        }
        this.operatorToken = operatorToken, this.operand = operand;
    };
    TypeScript.PrefixUnaryExpressionSyntax.prototype.kind = 171 /* PrefixUnaryExpression */;
    TypeScript.PrefixUnaryExpressionSyntax.prototype.childCount = 2;
    TypeScript.PrefixUnaryExpressionSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.operatorToken;
            case 1: return this.operand;
        }
    };
    TypeScript.DeleteExpressionSyntax = function (data, deleteKeyword, expression) {
        if (data) {
            this.__data = data;
        }
        this.deleteKeyword = deleteKeyword, this.expression = expression;
    };
    TypeScript.DeleteExpressionSyntax.prototype.kind = 172 /* DeleteExpression */;
    TypeScript.DeleteExpressionSyntax.prototype.childCount = 2;
    TypeScript.DeleteExpressionSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.deleteKeyword;
            case 1: return this.expression;
        }
    };
    TypeScript.TypeOfExpressionSyntax = function (data, typeOfKeyword, expression) {
        if (data) {
            this.__data = data;
        }
        this.typeOfKeyword = typeOfKeyword, this.expression = expression;
    };
    TypeScript.TypeOfExpressionSyntax.prototype.kind = 173 /* TypeOfExpression */;
    TypeScript.TypeOfExpressionSyntax.prototype.childCount = 2;
    TypeScript.TypeOfExpressionSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.typeOfKeyword;
            case 1: return this.expression;
        }
    };
    TypeScript.VoidExpressionSyntax = function (data, voidKeyword, expression) {
        if (data) {
            this.__data = data;
        }
        this.voidKeyword = voidKeyword, this.expression = expression;
    };
    TypeScript.VoidExpressionSyntax.prototype.kind = 174 /* VoidExpression */;
    TypeScript.VoidExpressionSyntax.prototype.childCount = 2;
    TypeScript.VoidExpressionSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.voidKeyword;
            case 1: return this.expression;
        }
    };
    TypeScript.ConditionalExpressionSyntax = function (data, condition, questionToken, whenTrue, colonToken, whenFalse) {
        if (data) {
            this.__data = data;
        }
        this.condition = condition, this.questionToken = questionToken, this.whenTrue = whenTrue, this.colonToken = colonToken, this.whenFalse = whenFalse;
    };
    TypeScript.ConditionalExpressionSyntax.prototype.kind = 175 /* ConditionalExpression */;
    TypeScript.ConditionalExpressionSyntax.prototype.childCount = 5;
    TypeScript.ConditionalExpressionSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.condition;
            case 1: return this.questionToken;
            case 2: return this.whenTrue;
            case 3: return this.colonToken;
            case 4: return this.whenFalse;
        }
    };
    TypeScript.BinaryExpressionSyntax = function (data, left, operatorToken, right) {
        if (data) {
            this.__data = data;
        }
        this.left = left, this.operatorToken = operatorToken, this.right = right;
    };
    TypeScript.BinaryExpressionSyntax.prototype.kind = 176 /* BinaryExpression */;
    TypeScript.BinaryExpressionSyntax.prototype.childCount = 3;
    TypeScript.BinaryExpressionSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.left;
            case 1: return this.operatorToken;
            case 2: return this.right;
        }
    };
    TypeScript.PostfixUnaryExpressionSyntax = function (data, operand, operatorToken) {
        if (data) {
            this.__data = data;
        }
        this.operand = operand, this.operatorToken = operatorToken;
    };
    TypeScript.PostfixUnaryExpressionSyntax.prototype.kind = 177 /* PostfixUnaryExpression */;
    TypeScript.PostfixUnaryExpressionSyntax.prototype.childCount = 2;
    TypeScript.PostfixUnaryExpressionSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.operand;
            case 1: return this.operatorToken;
        }
    };
    TypeScript.PropertyAccessExpressionSyntax = function (data, expression, dotToken, name) {
        if (data) {
            this.__data = data;
        }
        this.expression = expression, this.dotToken = dotToken, this.name = name;
    };
    TypeScript.PropertyAccessExpressionSyntax.prototype.kind = 178 /* PropertyAccessExpression */;
    TypeScript.PropertyAccessExpressionSyntax.prototype.childCount = 3;
    TypeScript.PropertyAccessExpressionSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.expression;
            case 1: return this.dotToken;
            case 2: return this.name;
        }
    };
    TypeScript.InvocationExpressionSyntax = function (data, expression, argumentList) {
        if (data) {
            this.__data = data;
        }
        this.expression = expression, this.argumentList = argumentList;
    };
    TypeScript.InvocationExpressionSyntax.prototype.kind = 179 /* InvocationExpression */;
    TypeScript.InvocationExpressionSyntax.prototype.childCount = 2;
    TypeScript.InvocationExpressionSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.expression;
            case 1: return this.argumentList;
        }
    };
    TypeScript.ArrayLiteralExpressionSyntax = function (data, openBracketToken, expressions, closeBracketToken) {
        if (data) {
            this.__data = data;
        }
        this.openBracketToken = openBracketToken, this.expressions = expressions, this.closeBracketToken = closeBracketToken;
    };
    TypeScript.ArrayLiteralExpressionSyntax.prototype.kind = 180 /* ArrayLiteralExpression */;
    TypeScript.ArrayLiteralExpressionSyntax.prototype.childCount = 3;
    TypeScript.ArrayLiteralExpressionSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.openBracketToken;
            case 1: return this.expressions;
            case 2: return this.closeBracketToken;
        }
    };
    TypeScript.ObjectLiteralExpressionSyntax = function (data, openBraceToken, propertyAssignments, closeBraceToken) {
        if (data) {
            this.__data = data;
        }
        this.openBraceToken = openBraceToken, this.propertyAssignments = propertyAssignments, this.closeBraceToken = closeBraceToken;
    };
    TypeScript.ObjectLiteralExpressionSyntax.prototype.kind = 181 /* ObjectLiteralExpression */;
    TypeScript.ObjectLiteralExpressionSyntax.prototype.childCount = 3;
    TypeScript.ObjectLiteralExpressionSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.openBraceToken;
            case 1: return this.propertyAssignments;
            case 2: return this.closeBraceToken;
        }
    };
    TypeScript.ObjectCreationExpressionSyntax = function (data, newKeyword, expression, argumentList) {
        if (data) {
            this.__data = data;
        }
        this.newKeyword = newKeyword, this.expression = expression, this.argumentList = argumentList;
    };
    TypeScript.ObjectCreationExpressionSyntax.prototype.kind = 182 /* ObjectCreationExpression */;
    TypeScript.ObjectCreationExpressionSyntax.prototype.childCount = 3;
    TypeScript.ObjectCreationExpressionSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.newKeyword;
            case 1: return this.expression;
            case 2: return this.argumentList;
        }
    };
    TypeScript.ParenthesizedExpressionSyntax = function (data, openParenToken, expression, closeParenToken) {
        if (data) {
            this.__data = data;
        }
        this.openParenToken = openParenToken, this.expression = expression, this.closeParenToken = closeParenToken;
    };
    TypeScript.ParenthesizedExpressionSyntax.prototype.kind = 183 /* ParenthesizedExpression */;
    TypeScript.ParenthesizedExpressionSyntax.prototype.childCount = 3;
    TypeScript.ParenthesizedExpressionSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.openParenToken;
            case 1: return this.expression;
            case 2: return this.closeParenToken;
        }
    };
    TypeScript.ParenthesizedArrowFunctionExpressionSyntax = function (data, asyncKeyword, callSignature, equalsGreaterThanToken, body) {
        if (data) {
            this.__data = data;
        }
        this.asyncKeyword = asyncKeyword, this.callSignature = callSignature, this.equalsGreaterThanToken = equalsGreaterThanToken, this.body = body;
    };
    TypeScript.ParenthesizedArrowFunctionExpressionSyntax.prototype.kind = 184 /* ParenthesizedArrowFunctionExpression */;
    TypeScript.ParenthesizedArrowFunctionExpressionSyntax.prototype.childCount = 4;
    TypeScript.ParenthesizedArrowFunctionExpressionSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.asyncKeyword;
            case 1: return this.callSignature;
            case 2: return this.equalsGreaterThanToken;
            case 3: return this.body;
        }
    };
    TypeScript.SimpleArrowFunctionExpressionSyntax = function (data, asyncKeyword, parameter, equalsGreaterThanToken, body) {
        if (data) {
            this.__data = data;
        }
        this.asyncKeyword = asyncKeyword, this.parameter = parameter, this.equalsGreaterThanToken = equalsGreaterThanToken, this.body = body;
    };
    TypeScript.SimpleArrowFunctionExpressionSyntax.prototype.kind = 185 /* SimpleArrowFunctionExpression */;
    TypeScript.SimpleArrowFunctionExpressionSyntax.prototype.childCount = 4;
    TypeScript.SimpleArrowFunctionExpressionSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.asyncKeyword;
            case 1: return this.parameter;
            case 2: return this.equalsGreaterThanToken;
            case 3: return this.body;
        }
    };
    TypeScript.TypeAssertionExpressionSyntax = function (data, lessThanToken, type, greaterThanToken, expression) {
        if (data) {
            this.__data = data;
        }
        this.lessThanToken = lessThanToken, this.type = type, this.greaterThanToken = greaterThanToken, this.expression = expression;
    };
    TypeScript.TypeAssertionExpressionSyntax.prototype.kind = 186 /* TypeAssertionExpression */;
    TypeScript.TypeAssertionExpressionSyntax.prototype.childCount = 4;
    TypeScript.TypeAssertionExpressionSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.lessThanToken;
            case 1: return this.type;
            case 2: return this.greaterThanToken;
            case 3: return this.expression;
        }
    };
    TypeScript.ElementAccessExpressionSyntax = function (data, expression, openBracketToken, argumentExpression, closeBracketToken) {
        if (data) {
            this.__data = data;
        }
        this.expression = expression, this.openBracketToken = openBracketToken, this.argumentExpression = argumentExpression, this.closeBracketToken = closeBracketToken;
    };
    TypeScript.ElementAccessExpressionSyntax.prototype.kind = 187 /* ElementAccessExpression */;
    TypeScript.ElementAccessExpressionSyntax.prototype.childCount = 4;
    TypeScript.ElementAccessExpressionSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.expression;
            case 1: return this.openBracketToken;
            case 2: return this.argumentExpression;
            case 3: return this.closeBracketToken;
        }
    };
    TypeScript.FunctionExpressionSyntax = function (data, asyncKeyword, functionKeyword, asterixToken, identifier, callSignature, body) {
        if (data) {
            this.__data = data;
        }
        this.asyncKeyword = asyncKeyword, this.functionKeyword = functionKeyword, this.asterixToken = asterixToken, this.identifier = identifier, this.callSignature = callSignature, this.body = body;
    };
    TypeScript.FunctionExpressionSyntax.prototype.kind = 188 /* FunctionExpression */;
    TypeScript.FunctionExpressionSyntax.prototype.childCount = 6;
    TypeScript.FunctionExpressionSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.asyncKeyword;
            case 1: return this.functionKeyword;
            case 2: return this.asterixToken;
            case 3: return this.identifier;
            case 4: return this.callSignature;
            case 5: return this.body;
        }
    };
    TypeScript.OmittedExpressionSyntax = function (data) {
        if (data) {
            this.__data = data;
        }
    };
    TypeScript.OmittedExpressionSyntax.prototype.kind = 189 /* OmittedExpression */;
    TypeScript.OmittedExpressionSyntax.prototype.childCount = 0;
    TypeScript.OmittedExpressionSyntax.prototype.childAt = function (index) {
        throw TypeScript.Errors.invalidOperation();
    };
    TypeScript.TemplateExpressionSyntax = function (data, templateStartToken, templateClauses) {
        if (data) {
            this.__data = data;
        }
        this.templateStartToken = templateStartToken, this.templateClauses = templateClauses;
    };
    TypeScript.TemplateExpressionSyntax.prototype.kind = 190 /* TemplateExpression */;
    TypeScript.TemplateExpressionSyntax.prototype.childCount = 2;
    TypeScript.TemplateExpressionSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.templateStartToken;
            case 1: return this.templateClauses;
        }
    };
    TypeScript.TemplateAccessExpressionSyntax = function (data, expression, templateExpression) {
        if (data) {
            this.__data = data;
        }
        this.expression = expression, this.templateExpression = templateExpression;
    };
    TypeScript.TemplateAccessExpressionSyntax.prototype.kind = 191 /* TemplateAccessExpression */;
    TypeScript.TemplateAccessExpressionSyntax.prototype.childCount = 2;
    TypeScript.TemplateAccessExpressionSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.expression;
            case 1: return this.templateExpression;
        }
    };
    TypeScript.YieldExpressionSyntax = function (data, yieldKeyword, asterixToken, expression) {
        if (data) {
            this.__data = data;
        }
        this.yieldKeyword = yieldKeyword, this.asterixToken = asterixToken, this.expression = expression;
    };
    TypeScript.YieldExpressionSyntax.prototype.kind = 192 /* YieldExpression */;
    TypeScript.YieldExpressionSyntax.prototype.childCount = 3;
    TypeScript.YieldExpressionSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.yieldKeyword;
            case 1: return this.asterixToken;
            case 2: return this.expression;
        }
    };
    TypeScript.AwaitExpressionSyntax = function (data, awaitKeyword, expression) {
        if (data) {
            this.__data = data;
        }
        this.awaitKeyword = awaitKeyword, this.expression = expression;
    };
    TypeScript.AwaitExpressionSyntax.prototype.kind = 193 /* AwaitExpression */;
    TypeScript.AwaitExpressionSyntax.prototype.childCount = 2;
    TypeScript.AwaitExpressionSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.awaitKeyword;
            case 1: return this.expression;
        }
    };
    TypeScript.VariableDeclarationSyntax = function (data, varConstOrLetKeyword, variableDeclarators) {
        if (data) {
            this.__data = data;
        }
        this.varConstOrLetKeyword = varConstOrLetKeyword, this.variableDeclarators = variableDeclarators;
    };
    TypeScript.VariableDeclarationSyntax.prototype.kind = 194 /* VariableDeclaration */;
    TypeScript.VariableDeclarationSyntax.prototype.childCount = 2;
    TypeScript.VariableDeclarationSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.varConstOrLetKeyword;
            case 1: return this.variableDeclarators;
        }
    };
    TypeScript.VariableDeclaratorSyntax = function (data, propertyName, typeAnnotation, equalsValueClause) {
        if (data) {
            this.__data = data;
        }
        this.propertyName = propertyName, this.typeAnnotation = typeAnnotation, this.equalsValueClause = equalsValueClause;
    };
    TypeScript.VariableDeclaratorSyntax.prototype.kind = 195 /* VariableDeclarator */;
    TypeScript.VariableDeclaratorSyntax.prototype.childCount = 3;
    TypeScript.VariableDeclaratorSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.propertyName;
            case 1: return this.typeAnnotation;
            case 2: return this.equalsValueClause;
        }
    };
    TypeScript.ArgumentListSyntax = function (data, typeArgumentList, openParenToken, _arguments, closeParenToken) {
        if (data) {
            this.__data = data;
        }
        this.typeArgumentList = typeArgumentList, this.openParenToken = openParenToken, this.arguments = _arguments, this.closeParenToken = closeParenToken;
    };
    TypeScript.ArgumentListSyntax.prototype.kind = 196 /* ArgumentList */;
    TypeScript.ArgumentListSyntax.prototype.childCount = 4;
    TypeScript.ArgumentListSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.typeArgumentList;
            case 1: return this.openParenToken;
            case 2: return this.arguments;
            case 3: return this.closeParenToken;
        }
    };
    TypeScript.ParameterListSyntax = function (data, openParenToken, parameters, closeParenToken) {
        if (data) {
            this.__data = data;
        }
        this.openParenToken = openParenToken, this.parameters = parameters, this.closeParenToken = closeParenToken;
    };
    TypeScript.ParameterListSyntax.prototype.kind = 197 /* ParameterList */;
    TypeScript.ParameterListSyntax.prototype.childCount = 3;
    TypeScript.ParameterListSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.openParenToken;
            case 1: return this.parameters;
            case 2: return this.closeParenToken;
        }
    };
    TypeScript.TypeArgumentListSyntax = function (data, lessThanToken, typeArguments, greaterThanToken) {
        if (data) {
            this.__data = data;
        }
        this.lessThanToken = lessThanToken, this.typeArguments = typeArguments, this.greaterThanToken = greaterThanToken;
    };
    TypeScript.TypeArgumentListSyntax.prototype.kind = 198 /* TypeArgumentList */;
    TypeScript.TypeArgumentListSyntax.prototype.childCount = 3;
    TypeScript.TypeArgumentListSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.lessThanToken;
            case 1: return this.typeArguments;
            case 2: return this.greaterThanToken;
        }
    };
    TypeScript.TypeParameterListSyntax = function (data, lessThanToken, typeParameters, greaterThanToken) {
        if (data) {
            this.__data = data;
        }
        this.lessThanToken = lessThanToken, this.typeParameters = typeParameters, this.greaterThanToken = greaterThanToken;
    };
    TypeScript.TypeParameterListSyntax.prototype.kind = 199 /* TypeParameterList */;
    TypeScript.TypeParameterListSyntax.prototype.childCount = 3;
    TypeScript.TypeParameterListSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.lessThanToken;
            case 1: return this.typeParameters;
            case 2: return this.greaterThanToken;
        }
    };
    TypeScript.HeritageClauseSyntax = function (data, extendsOrImplementsKeyword, typeNames) {
        if (data) {
            this.__data = data;
        }
        this.extendsOrImplementsKeyword = extendsOrImplementsKeyword, this.typeNames = typeNames;
    };
    TypeScript.HeritageClauseSyntax.prototype.kind = 200 /* HeritageClause */;
    TypeScript.HeritageClauseSyntax.prototype.childCount = 2;
    TypeScript.HeritageClauseSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.extendsOrImplementsKeyword;
            case 1: return this.typeNames;
        }
    };
    TypeScript.EqualsValueClauseSyntax = function (data, equalsToken, value) {
        if (data) {
            this.__data = data;
        }
        this.equalsToken = equalsToken, this.value = value;
    };
    TypeScript.EqualsValueClauseSyntax.prototype.kind = 201 /* EqualsValueClause */;
    TypeScript.EqualsValueClauseSyntax.prototype.childCount = 2;
    TypeScript.EqualsValueClauseSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.equalsToken;
            case 1: return this.value;
        }
    };
    TypeScript.CaseSwitchClauseSyntax = function (data, caseKeyword, expression, colonToken, statements) {
        if (data) {
            this.__data = data;
        }
        this.caseKeyword = caseKeyword, this.expression = expression, this.colonToken = colonToken, this.statements = statements;
    };
    TypeScript.CaseSwitchClauseSyntax.prototype.kind = 202 /* CaseSwitchClause */;
    TypeScript.CaseSwitchClauseSyntax.prototype.childCount = 4;
    TypeScript.CaseSwitchClauseSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.caseKeyword;
            case 1: return this.expression;
            case 2: return this.colonToken;
            case 3: return this.statements;
        }
    };
    TypeScript.DefaultSwitchClauseSyntax = function (data, defaultKeyword, colonToken, statements) {
        if (data) {
            this.__data = data;
        }
        this.defaultKeyword = defaultKeyword, this.colonToken = colonToken, this.statements = statements;
    };
    TypeScript.DefaultSwitchClauseSyntax.prototype.kind = 203 /* DefaultSwitchClause */;
    TypeScript.DefaultSwitchClauseSyntax.prototype.childCount = 3;
    TypeScript.DefaultSwitchClauseSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.defaultKeyword;
            case 1: return this.colonToken;
            case 2: return this.statements;
        }
    };
    TypeScript.ElseClauseSyntax = function (data, elseKeyword, statement) {
        if (data) {
            this.__data = data;
        }
        this.elseKeyword = elseKeyword, this.statement = statement;
    };
    TypeScript.ElseClauseSyntax.prototype.kind = 204 /* ElseClause */;
    TypeScript.ElseClauseSyntax.prototype.childCount = 2;
    TypeScript.ElseClauseSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.elseKeyword;
            case 1: return this.statement;
        }
    };
    TypeScript.CatchClauseSyntax = function (data, catchKeyword, openParenToken, identifier, typeAnnotation, closeParenToken, block) {
        if (data) {
            this.__data = data;
        }
        this.catchKeyword = catchKeyword, this.openParenToken = openParenToken, this.identifier = identifier, this.typeAnnotation = typeAnnotation, this.closeParenToken = closeParenToken, this.block = block;
    };
    TypeScript.CatchClauseSyntax.prototype.kind = 205 /* CatchClause */;
    TypeScript.CatchClauseSyntax.prototype.childCount = 6;
    TypeScript.CatchClauseSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.catchKeyword;
            case 1: return this.openParenToken;
            case 2: return this.identifier;
            case 3: return this.typeAnnotation;
            case 4: return this.closeParenToken;
            case 5: return this.block;
        }
    };
    TypeScript.FinallyClauseSyntax = function (data, finallyKeyword, block) {
        if (data) {
            this.__data = data;
        }
        this.finallyKeyword = finallyKeyword, this.block = block;
    };
    TypeScript.FinallyClauseSyntax.prototype.kind = 206 /* FinallyClause */;
    TypeScript.FinallyClauseSyntax.prototype.childCount = 2;
    TypeScript.FinallyClauseSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.finallyKeyword;
            case 1: return this.block;
        }
    };
    TypeScript.TemplateClauseSyntax = function (data, expression, templateMiddleOrEndToken) {
        if (data) {
            this.__data = data;
        }
        this.expression = expression, this.templateMiddleOrEndToken = templateMiddleOrEndToken;
    };
    TypeScript.TemplateClauseSyntax.prototype.kind = 207 /* TemplateClause */;
    TypeScript.TemplateClauseSyntax.prototype.childCount = 2;
    TypeScript.TemplateClauseSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.expression;
            case 1: return this.templateMiddleOrEndToken;
        }
    };
    TypeScript.TypeParameterSyntax = function (data, identifier, constraint) {
        if (data) {
            this.__data = data;
        }
        this.identifier = identifier, this.constraint = constraint;
    };
    TypeScript.TypeParameterSyntax.prototype.kind = 208 /* TypeParameter */;
    TypeScript.TypeParameterSyntax.prototype.childCount = 2;
    TypeScript.TypeParameterSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.identifier;
            case 1: return this.constraint;
        }
    };
    TypeScript.ConstraintSyntax = function (data, extendsKeyword, typeOrExpression) {
        if (data) {
            this.__data = data;
        }
        this.extendsKeyword = extendsKeyword, this.typeOrExpression = typeOrExpression;
    };
    TypeScript.ConstraintSyntax.prototype.kind = 209 /* Constraint */;
    TypeScript.ConstraintSyntax.prototype.childCount = 2;
    TypeScript.ConstraintSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.extendsKeyword;
            case 1: return this.typeOrExpression;
        }
    };
    TypeScript.ParameterSyntax = function (data, dotDotDotToken, modifiers, identifier, questionToken, typeAnnotation, equalsValueClause) {
        if (data) {
            this.__data = data;
        }
        this.dotDotDotToken = dotDotDotToken, this.modifiers = modifiers, this.identifier = identifier, this.questionToken = questionToken, this.typeAnnotation = typeAnnotation, this.equalsValueClause = equalsValueClause;
    };
    TypeScript.ParameterSyntax.prototype.kind = 210 /* Parameter */;
    TypeScript.ParameterSyntax.prototype.childCount = 6;
    TypeScript.ParameterSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.dotDotDotToken;
            case 1: return this.modifiers;
            case 2: return this.identifier;
            case 3: return this.questionToken;
            case 4: return this.typeAnnotation;
            case 5: return this.equalsValueClause;
        }
    };
    TypeScript.EnumElementSyntax = function (data, propertyName, equalsValueClause) {
        if (data) {
            this.__data = data;
        }
        this.propertyName = propertyName, this.equalsValueClause = equalsValueClause;
    };
    TypeScript.EnumElementSyntax.prototype.kind = 211 /* EnumElement */;
    TypeScript.EnumElementSyntax.prototype.childCount = 2;
    TypeScript.EnumElementSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.propertyName;
            case 1: return this.equalsValueClause;
        }
    };
    TypeScript.TypeAnnotationSyntax = function (data, colonToken, type) {
        if (data) {
            this.__data = data;
        }
        this.colonToken = colonToken, this.type = type;
    };
    TypeScript.TypeAnnotationSyntax.prototype.kind = 212 /* TypeAnnotation */;
    TypeScript.TypeAnnotationSyntax.prototype.childCount = 2;
    TypeScript.TypeAnnotationSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.colonToken;
            case 1: return this.type;
        }
    };
    TypeScript.ExpressionBody = function (data, equalsGreaterThanToken, expression) {
        if (data) {
            this.__data = data;
        }
        this.equalsGreaterThanToken = equalsGreaterThanToken, this.expression = expression;
    };
    TypeScript.ExpressionBody.prototype.kind = 213 /* ExpressionBody */;
    TypeScript.ExpressionBody.prototype.childCount = 2;
    TypeScript.ExpressionBody.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.equalsGreaterThanToken;
            case 1: return this.expression;
        }
    };
    TypeScript.ComputedPropertyNameSyntax = function (data, openBracketToken, expression, closeBracketToken) {
        if (data) {
            this.__data = data;
        }
        this.openBracketToken = openBracketToken, this.expression = expression, this.closeBracketToken = closeBracketToken;
    };
    TypeScript.ComputedPropertyNameSyntax.prototype.kind = 214 /* ComputedPropertyName */;
    TypeScript.ComputedPropertyNameSyntax.prototype.childCount = 3;
    TypeScript.ComputedPropertyNameSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.openBracketToken;
            case 1: return this.expression;
            case 2: return this.closeBracketToken;
        }
    };
    TypeScript.PropertyAssignmentSyntax = function (data, propertyName, colonToken, expression) {
        if (data) {
            this.__data = data;
        }
        this.propertyName = propertyName, this.colonToken = colonToken, this.expression = expression;
    };
    TypeScript.PropertyAssignmentSyntax.prototype.kind = 215 /* PropertyAssignment */;
    TypeScript.PropertyAssignmentSyntax.prototype.childCount = 3;
    TypeScript.PropertyAssignmentSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.propertyName;
            case 1: return this.colonToken;
            case 2: return this.expression;
        }
    };
    TypeScript.TypeAliasSyntax = function (data, modifiers, typeKeyword, identifier, equalsToken, type, semicolonToken) {
        if (data) {
            this.__data = data;
        }
        this.modifiers = modifiers, this.typeKeyword = typeKeyword, this.identifier = identifier, this.equalsToken = equalsToken, this.type = type, this.semicolonToken = semicolonToken;
    };
    TypeScript.TypeAliasSyntax.prototype.kind = 216 /* TypeAlias */;
    TypeScript.TypeAliasSyntax.prototype.childCount = 6;
    TypeScript.TypeAliasSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.modifiers;
            case 1: return this.typeKeyword;
            case 2: return this.identifier;
            case 3: return this.equalsToken;
            case 4: return this.type;
            case 5: return this.semicolonToken;
        }
    };
    TypeScript.ExternalModuleReferenceSyntax = function (data, requireKeyword, openParenToken, expression, closeParenToken) {
        if (data) {
            this.__data = data;
        }
        this.requireKeyword = requireKeyword, this.openParenToken = openParenToken, this.expression = expression, this.closeParenToken = closeParenToken;
    };
    TypeScript.ExternalModuleReferenceSyntax.prototype.kind = 217 /* ExternalModuleReference */;
    TypeScript.ExternalModuleReferenceSyntax.prototype.childCount = 4;
    TypeScript.ExternalModuleReferenceSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.requireKeyword;
            case 1: return this.openParenToken;
            case 2: return this.expression;
            case 3: return this.closeParenToken;
        }
    };
    TypeScript.ModuleNameModuleReferenceSyntax = function (data, moduleName) {
        if (data) {
            this.__data = data;
        }
        this.moduleName = moduleName;
    };
    TypeScript.ModuleNameModuleReferenceSyntax.prototype.kind = 218 /* ModuleNameModuleReference */;
    TypeScript.ModuleNameModuleReferenceSyntax.prototype.childCount = 1;
    TypeScript.ModuleNameModuleReferenceSyntax.prototype.childAt = function (index) {
        switch (index) {
            case 0: return this.moduleName;
        }
    };
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    TypeScript.syntaxDiagnosticsTime = 0;
    var SyntaxTree = (function () {
        function SyntaxTree(sourceUnit, isDeclaration, diagnostics, fileName, text, languageVersion) {
            this.text = text;
            this._allDiagnostics = undefined;
            this._sourceUnit = sourceUnit;
            this._isDeclaration = isDeclaration;
            this._parserDiagnostics = diagnostics;
            this._fileName = fileName;
            this._lineMap = text.lineMap();
            this._languageVersion = languageVersion;
            sourceUnit.syntaxTree = this;
        }
        SyntaxTree.prototype.sourceUnit = function () {
            return this._sourceUnit;
        };
        SyntaxTree.prototype.isDeclaration = function () {
            return this._isDeclaration;
        };
        SyntaxTree.prototype.computeDiagnostics = function () {
            if (this._parserDiagnostics.length > 0) {
                return this._parserDiagnostics;
            }
            var diagnostics = [];
            TypeScript.visitNodeOrToken(new GrammarCheckerWalker(this, diagnostics), this.sourceUnit());
            return diagnostics;
        };
        SyntaxTree.prototype.diagnostics = function () {
            if (!this._allDiagnostics) {
                var start = new Date().getTime();
                this._allDiagnostics = this.computeDiagnostics();
                TypeScript.syntaxDiagnosticsTime += new Date().getTime() - start;
            }
            return this._allDiagnostics;
        };
        SyntaxTree.prototype.fileName = function () {
            return this._fileName;
        };
        SyntaxTree.prototype.lineMap = function () {
            return this._lineMap;
        };
        SyntaxTree.prototype.languageVersion = function () {
            return this._languageVersion;
        };
        SyntaxTree.prototype.getAmdDependency = function (comment) {
            var amdDependencyRegEx = /^\/\/\/\s*<amd-dependency\s+path=('|")(.+?)\1/gim;
            var match = amdDependencyRegEx.exec(comment);
            return match ? match[2] : undefined;
        };
        return SyntaxTree;
    })();
    TypeScript.SyntaxTree = SyntaxTree;
    var GrammarCheckerWalker = (function (_super) {
        __extends(GrammarCheckerWalker, _super);
        function GrammarCheckerWalker(syntaxTree, diagnostics) {
            _super.call(this);
            this.syntaxTree = syntaxTree;
            this.diagnostics = diagnostics;
            this.inAmbientDeclaration = false;
            this.inBlock = false;
            this.inObjectLiteralExpression = false;
            this.text = syntaxTree.text;
        }
        GrammarCheckerWalker.prototype.pushDiagnostic = function (element, diagnosticKey, args) {
            return this.pushDiagnosticAt(TypeScript.start(element, this.text), TypeScript.width(element), diagnosticKey, args);
        };
        GrammarCheckerWalker.prototype.pushDiagnosticAt = function (start, length, diagnosticKey, args) {
            this.diagnostics.push(new TypeScript.Diagnostic(this.syntaxTree.fileName(), this.syntaxTree.lineMap(), start, length, diagnosticKey, args));
            return true;
        };
        GrammarCheckerWalker.prototype.visitCallSignature = function (node) {
            if (this.checkForCommaInsteadOfSemicolon(node.semicolonOrCommaToken)) {
                return;
            }
            _super.prototype.visitCallSignature.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitCatchClause = function (node) {
            if (this.checkForCatchClauseTypeAnnotation(node) || this.checkForDisallowedEvalOrArguments(node, node.identifier)) {
                return;
            }
            _super.prototype.visitCatchClause.call(this, node);
        };
        GrammarCheckerWalker.prototype.checkForCatchClauseTypeAnnotation = function (node) {
            if (node.typeAnnotation) {
                return this.pushDiagnostic(node.typeAnnotation.colonToken, TypeScript.DiagnosticCode.Catch_clause_parameter_cannot_have_a_type_annotation);
            }
            return false;
        };
        GrammarCheckerWalker.prototype.checkParameterListOrder = function (node) {
            var seenOptionalParameter = false;
            var parameterCount = TypeScript.nonSeparatorCount(node.parameters);
            for (var i = 0; i < parameterCount; i++) {
                var parameter = TypeScript.nonSeparatorAt(node.parameters, i);
                if (parameter.dotDotDotToken) {
                    if (i !== (parameterCount - 1)) {
                        return this.pushDiagnostic(parameter, TypeScript.DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list);
                    }
                    if (parameter.questionToken) {
                        return this.pushDiagnostic(parameter, TypeScript.DiagnosticCode.A_rest_parameter_cannot_be_optional);
                    }
                    if (parameter.equalsValueClause) {
                        return this.pushDiagnostic(parameter, TypeScript.DiagnosticCode.A_rest_parameter_cannot_have_an_initializer);
                    }
                }
                else if (parameter.questionToken || parameter.equalsValueClause) {
                    seenOptionalParameter = true;
                    if (parameter.questionToken && parameter.equalsValueClause) {
                        return this.pushDiagnostic(parameter, TypeScript.DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer);
                    }
                }
                else {
                    if (seenOptionalParameter) {
                        return this.pushDiagnostic(parameter, TypeScript.DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter);
                    }
                }
            }
            return false;
        };
        GrammarCheckerWalker.prototype.checkParameterAccessibilityModifiers = function (parameter) {
            if (parameter.modifiers.length > 0) {
                var modifiers = parameter.modifiers;
                for (var i = 0, n = modifiers.length; i < n; i++) {
                    var modifier = modifiers[i];
                    if (this.checkParameterAccessibilityModifier(modifier, i)) {
                        return true;
                    }
                }
            }
            return false;
        };
        GrammarCheckerWalker.prototype.checkParameterAccessibilityModifier = function (modifier, modifierIndex) {
            if (!TypeScript.SyntaxFacts.isAccessibilityModifier(modifier.kind)) {
                return this.pushDiagnostic(modifier, TypeScript.DiagnosticCode._0_modifier_cannot_appear_on_a_parameter, [modifier.text()]);
            }
            else {
                if (modifierIndex > 0) {
                    return this.pushDiagnostic(modifier, TypeScript.DiagnosticCode.Accessibility_modifier_already_seen);
                }
            }
            return false;
        };
        GrammarCheckerWalker.prototype.checkForTrailingComma = function (list) {
            if (list.length === 0 || list.length % 2 === 1) {
                return false;
            }
            var child = list[list.length - 1];
            return this.pushDiagnostic(child, TypeScript.DiagnosticCode.Trailing_comma_not_allowed);
        };
        GrammarCheckerWalker.prototype.checkForAtLeastOneElement = function (list, reportToken, listKind) {
            if (TypeScript.childCount(list) > 0) {
                return false;
            }
            return this.pushDiagnostic(reportToken, TypeScript.DiagnosticCode._0_list_cannot_be_empty, [listKind]);
        };
        GrammarCheckerWalker.prototype.visitParameterList = function (node) {
            if (this.checkParameterListOrder(node) || this.checkForTrailingComma(node.parameters)) {
                return;
            }
            _super.prototype.visitParameterList.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitHeritageClause = function (node) {
            if (this.checkForTrailingComma(node.typeNames) || this.checkForAtLeastOneElement(node.typeNames, node.extendsOrImplementsKeyword, TypeScript.SyntaxFacts.getText(node.extendsOrImplementsKeyword.kind))) {
                return;
            }
            _super.prototype.visitHeritageClause.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitArgumentList = function (node) {
            if (this.checkForTrailingComma(node.arguments)) {
                return;
            }
            _super.prototype.visitArgumentList.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitVariableDeclaration = function (node) {
            if (this.checkForAtLeastOneElement(node.variableDeclarators, node.varConstOrLetKeyword, TypeScript.getLocalizedText(TypeScript.DiagnosticCode.variable_declaration, undefined)) || this.checkForTrailingComma(node.variableDeclarators)) {
                return;
            }
            _super.prototype.visitVariableDeclaration.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitTypeAlias = function (node) {
            if (node.modifiers.length > 0) {
                this.pushDiagnostic(node.modifiers[0], TypeScript.DiagnosticCode.Modifiers_cannot_appear_here);
                return;
            }
            _super.prototype.visitTypeAlias.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitTypeArgumentList = function (node) {
            if (this.checkForTrailingComma(node.typeArguments) || this.checkForAtLeastOneElement(node.typeArguments, node.lessThanToken, TypeScript.getLocalizedText(TypeScript.DiagnosticCode.type_argument, undefined))) {
                return;
            }
            _super.prototype.visitTypeArgumentList.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitTupleType = function (node) {
            if (this.checkForTrailingComma(node.types) || this.checkForAtLeastOneElement(node.types, node.openBracketToken, TypeScript.getLocalizedText(TypeScript.DiagnosticCode.type, undefined))) {
                return;
            }
            _super.prototype.visitTupleType.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitTypeParameterList = function (node) {
            if (this.checkForTrailingComma(node.typeParameters) || this.checkForAtLeastOneElement(node.typeParameters, node.lessThanToken, TypeScript.getLocalizedText(TypeScript.DiagnosticCode.type_parameter, undefined))) {
                return;
            }
            _super.prototype.visitTypeParameterList.call(this, node);
        };
        GrammarCheckerWalker.prototype.checkIndexSignatureParameter = function (node) {
            if (node.parameters.length !== 1) {
                return this.pushDiagnostic(node.openBracketToken, TypeScript.DiagnosticCode.Index_signature_must_have_exactly_one_parameter);
            }
            var parameter = TypeScript.nonSeparatorAt(node.parameters, 0);
            if (parameter.dotDotDotToken) {
                return this.pushDiagnostic(parameter, TypeScript.DiagnosticCode.Index_signatures_cannot_have_rest_parameters);
            }
            else if (parameter.modifiers.length > 0) {
                return this.pushDiagnostic(parameter, TypeScript.DiagnosticCode.Index_signature_parameter_cannot_have_modifiers);
            }
            else if (parameter.questionToken) {
                return this.pushDiagnostic(parameter, TypeScript.DiagnosticCode.Index_signature_parameter_cannot_have_a_question_mark);
            }
            else if (parameter.equalsValueClause) {
                return this.pushDiagnostic(parameter, TypeScript.DiagnosticCode.Index_signature_parameter_cannot_have_an_initializer);
            }
            else if (!parameter.typeAnnotation) {
                return this.pushDiagnostic(parameter, TypeScript.DiagnosticCode.Index_signature_parameter_must_have_a_type_annotation);
            }
            else if (parameter.typeAnnotation.type.kind !== 74 /* StringKeyword */ && parameter.typeAnnotation.type.kind !== 71 /* NumberKeyword */) {
                return this.pushDiagnostic(parameter, TypeScript.DiagnosticCode.Index_signature_parameter_type_must_be_string_or_number);
            }
            return false;
        };
        GrammarCheckerWalker.prototype.checkForCommaInsteadOfSemicolon = function (commaOrSemicolon) {
            if (commaOrSemicolon && commaOrSemicolon.kind === 84 /* CommaToken */) {
                return this.pushDiagnostic(commaOrSemicolon, TypeScript.DiagnosticCode._0_expected, [TypeScript.SyntaxFacts.getText(83 /* SemicolonToken */)]);
            }
            return false;
        };
        GrammarCheckerWalker.prototype.visitIndexSignature = function (node) {
            if (this.checkIndexSignatureParameter(node) || this.checkForCommaInsteadOfSemicolon(node.semicolonOrCommaToken) || this.checkIndexSignatureModifiers(node)) {
                return;
            }
            if (!node.typeAnnotation) {
                this.pushDiagnostic(node, TypeScript.DiagnosticCode.Index_signature_must_have_a_type_annotation);
                return;
            }
            _super.prototype.visitIndexSignature.call(this, node);
        };
        GrammarCheckerWalker.prototype.checkClassDeclarationHeritageClauses = function (node) {
            var seenExtendsClause = false;
            var seenImplementsClause = false;
            for (var i = 0, n = node.heritageClauses.length; i < n; i++) {
                TypeScript.Debug.assert(i <= 2);
                var heritageClause = node.heritageClauses[i];
                if (heritageClause.extendsOrImplementsKeyword.kind === 50 /* ExtendsKeyword */) {
                    if (seenExtendsClause) {
                        return this.pushDiagnostic(heritageClause, TypeScript.DiagnosticCode.extends_clause_already_seen);
                    }
                    if (seenImplementsClause) {
                        return this.pushDiagnostic(heritageClause, TypeScript.DiagnosticCode.extends_clause_must_precede_implements_clause);
                    }
                    if (TypeScript.nonSeparatorCount(heritageClause.typeNames) > 1) {
                        return this.pushDiagnostic(heritageClause, TypeScript.DiagnosticCode.Classes_can_only_extend_a_single_class);
                    }
                    seenExtendsClause = true;
                }
                else {
                    TypeScript.Debug.assert(heritageClause.extendsOrImplementsKeyword.kind === 53 /* ImplementsKeyword */);
                    if (seenImplementsClause) {
                        return this.pushDiagnostic(heritageClause, TypeScript.DiagnosticCode.implements_clause_already_seen);
                    }
                    seenImplementsClause = true;
                }
            }
            return false;
        };
        GrammarCheckerWalker.prototype.checkForDisallowedDeclareModifier = function (modifiers) {
            if (this.inAmbientDeclaration) {
                var declareToken = TypeScript.SyntaxUtilities.getToken(modifiers, 67 /* DeclareKeyword */);
                if (declareToken) {
                    return this.pushDiagnostic(declareToken, TypeScript.DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context);
                }
            }
            return false;
        };
        GrammarCheckerWalker.prototype.checkForRequiredDeclareModifier = function (moduleElement, reportToken, modifiers) {
            if (!this.inAmbientDeclaration && this.syntaxTree.isDeclaration()) {
                if (!TypeScript.SyntaxUtilities.containsToken(modifiers, 67 /* DeclareKeyword */)) {
                    return this.pushDiagnostic(reportToken, TypeScript.DiagnosticCode.A_declare_modifier_is_required_for_a_top_level_declaration_in_a_d_ts_file);
                }
            }
        };
        GrammarCheckerWalker.prototype.visitClassDeclaration = function (node) {
            if (this.checkForDisallowedDeclareModifier(node.modifiers) || this.checkForRequiredDeclareModifier(node, node.identifier, node.modifiers) || this.checkModuleElementModifiers(node.modifiers) || this.checkClassDeclarationHeritageClauses(node) || this.checkForDisallowedAsyncModifier(node.modifiers)) {
                return;
            }
            var savedInAmbientDeclaration = this.inAmbientDeclaration;
            this.inAmbientDeclaration = this.inAmbientDeclaration || this.syntaxTree.isDeclaration() || TypeScript.SyntaxUtilities.containsToken(node.modifiers, 67 /* DeclareKeyword */);
            _super.prototype.visitClassDeclaration.call(this, node);
            this.inAmbientDeclaration = savedInAmbientDeclaration;
        };
        GrammarCheckerWalker.prototype.checkInterfaceDeclarationHeritageClauses = function (node) {
            var seenExtendsClause = false;
            for (var i = 0, n = node.heritageClauses.length; i < n; i++) {
                TypeScript.Debug.assert(i <= 1);
                var heritageClause = node.heritageClauses[i];
                if (heritageClause.extendsOrImplementsKeyword.kind === 50 /* ExtendsKeyword */) {
                    if (seenExtendsClause) {
                        return this.pushDiagnostic(heritageClause, TypeScript.DiagnosticCode.extends_clause_already_seen);
                    }
                    seenExtendsClause = true;
                }
                else {
                    TypeScript.Debug.assert(heritageClause.extendsOrImplementsKeyword.kind === 53 /* ImplementsKeyword */);
                    return this.pushDiagnostic(heritageClause, TypeScript.DiagnosticCode.Interface_declaration_cannot_have_implements_clause);
                }
            }
            return false;
        };
        GrammarCheckerWalker.prototype.checkInterfaceModifiers = function (modifiers) {
            for (var i = 0, n = modifiers.length; i < n; i++) {
                var modifier = modifiers[i];
                if (modifier.kind === 67 /* DeclareKeyword */) {
                    return this.pushDiagnostic(modifier, TypeScript.DiagnosticCode.A_declare_modifier_cannot_be_used_with_an_interface_declaration);
                }
            }
            return false;
        };
        GrammarCheckerWalker.prototype.visitInterfaceDeclaration = function (node) {
            if (this.checkInterfaceModifiers(node.modifiers) || this.checkModuleElementModifiers(node.modifiers) || this.checkInterfaceDeclarationHeritageClauses(node) || this.checkForDisallowedAsyncModifier(node.modifiers)) {
                return;
            }
            _super.prototype.visitInterfaceDeclaration.call(this, node);
        };
        GrammarCheckerWalker.prototype.checkClassElementModifiers = function (list) {
            var seenAccessibilityModifier = false;
            var seenStaticModifier = false;
            var seenAsyncModifier = false;
            for (var i = 0, n = list.length; i < n; i++) {
                var modifier = list[i];
                if (TypeScript.SyntaxFacts.isAccessibilityModifier(modifier.kind)) {
                    if (seenAccessibilityModifier) {
                        return this.pushDiagnostic(modifier, TypeScript.DiagnosticCode.Accessibility_modifier_already_seen);
                    }
                    if (seenStaticModifier) {
                        return this.pushDiagnostic(modifier, TypeScript.DiagnosticCode._0_modifier_must_precede_1_modifier, [modifier.text(), list[i - 1].text()]);
                    }
                    if (seenAsyncModifier) {
                        return this.pushDiagnostic(modifier, TypeScript.DiagnosticCode._0_modifier_must_precede_1_modifier, [modifier.text(), TypeScript.SyntaxFacts.getText(63 /* AsyncKeyword */)]);
                    }
                    seenAccessibilityModifier = true;
                }
                else if (modifier.kind === 60 /* StaticKeyword */) {
                    if (seenStaticModifier) {
                        return this.pushDiagnostic(modifier, TypeScript.DiagnosticCode._0_modifier_already_seen, [modifier.text()]);
                    }
                    if (seenAsyncModifier) {
                        return this.pushDiagnostic(modifier, TypeScript.DiagnosticCode._0_modifier_must_precede_1_modifier, [modifier.text(), TypeScript.SyntaxFacts.getText(63 /* AsyncKeyword */)]);
                    }
                    seenStaticModifier = true;
                }
                else if (modifier.kind === 63 /* AsyncKeyword */) {
                    if (seenAsyncModifier) {
                        return this.pushDiagnostic(modifier, TypeScript.DiagnosticCode._0_modifier_already_seen, [modifier.text()]);
                    }
                    seenAsyncModifier = true;
                }
                else {
                    return this.pushDiagnostic(modifier, TypeScript.DiagnosticCode._0_modifier_cannot_appear_on_a_class_element, [modifier.text()]);
                }
            }
            return false;
        };
        GrammarCheckerWalker.prototype.visitPropertyDeclaration = function (node) {
            if (this.checkClassElementModifiers(node.modifiers) || this.checkForDisallowedAsyncModifier(node.modifiers)) {
                return;
            }
            _super.prototype.visitPropertyDeclaration.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitMethodSignature = function (node) {
            if (this.checkForDisallowedTemplatePropertyName(node.propertyName) || this.checkForDisallowedComputedPropertyName(node.propertyName)) {
                return;
            }
            _super.prototype.visitMethodSignature.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitPropertySignature = function (node) {
            if (this.checkForDisallowedTemplatePropertyName(node.propertyName) || this.checkForDisallowedComputedPropertyName(node.propertyName) || this.checkForCommaInsteadOfSemicolon(node.semicolonOrCommaToken)) {
                return;
            }
            _super.prototype.visitPropertySignature.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitMethodDeclaration = function (node) {
            if (node.parent && node.parent.parent && node.parent.kind === 1 /* List */ && node.parent.parent.kind === 181 /* ObjectLiteralExpression */) {
                if (this.checkForSemicolonInsteadOfBlock(node, node.body) || this.checkForDisallowedObjectLiteralMethod(node.modifiers)) {
                    return;
                }
            }
            else {
                if (this.checkClassElementModifiers(node.modifiers)) {
                    return;
                }
            }
            if (this.checkForDisallowedTemplatePropertyName(node.propertyName) || this.checkForAsyncGenerator(this.getAsyncModifier(node.modifiers), node.asterixToken)) {
                return;
            }
            _super.prototype.visitMethodDeclaration.call(this, node);
        };
        GrammarCheckerWalker.prototype.checkForDisallowedObjectLiteralMethod = function (modifiers) {
            for (var i = 0, n = modifiers.length; i < n; i++) {
                var modifier = modifiers[i];
                if (modifier.kind !== 63 /* AsyncKeyword */) {
                    return this.pushDiagnostic(modifier, TypeScript.DiagnosticCode.Modifiers_cannot_appear_here);
                }
            }
            return false;
        };
        GrammarCheckerWalker.prototype.checkGetAccessorParameter = function (node) {
            if (node.callSignature.parameterList.parameters.length !== 0) {
                return this.pushDiagnostic(node.propertyName, TypeScript.DiagnosticCode.get_accessor_cannot_have_parameters);
            }
            return false;
        };
        GrammarCheckerWalker.prototype.checkIndexSignatureModifiers = function (node) {
            if (node.modifiers.length > 0) {
                return this.pushDiagnostic(node.modifiers[0], TypeScript.DiagnosticCode.Modifiers_cannot_appear_here);
            }
            return false;
        };
        GrammarCheckerWalker.prototype.checkEcmaScriptVersionIsAtLeast = function (reportToken, languageVersion, diagnosticKey) {
            if (this.syntaxTree.languageVersion() < languageVersion) {
                return this.pushDiagnostic(reportToken, diagnosticKey);
            }
            return false;
        };
        GrammarCheckerWalker.prototype.visitObjectLiteralExpression = function (node) {
            var savedInObjectLiteralExpression = this.inObjectLiteralExpression;
            this.inObjectLiteralExpression = true;
            _super.prototype.visitObjectLiteralExpression.call(this, node);
            this.inObjectLiteralExpression = savedInObjectLiteralExpression;
        };
        GrammarCheckerWalker.prototype.visitGetAccessor = function (node) {
            if (this.checkForAccessorDeclarationInAmbientContext(node) || this.checkEcmaScriptVersionIsAtLeast(node.getKeyword, 1 /* ES5 */, TypeScript.DiagnosticCode.Accessors_are_only_available_when_targeting_ECMAScript_5_and_higher) || this.checkForDisallowedModifiersInBlockOrObjectLitera(node.modifiers) || this.checkClassElementModifiers(node.modifiers) || this.checkForDisallowedAccessorTypeParameters(node.callSignature) || this.checkGetAccessorParameter(node) || this.checkForDisallowedTemplatePropertyName(node.propertyName) || this.checkForSemicolonInsteadOfBlock(node, node.body) || this.checkForDisallowedAsyncModifier(node.modifiers)) {
                return;
            }
            _super.prototype.visitGetAccessor.call(this, node);
        };
        GrammarCheckerWalker.prototype.checkForSemicolonInsteadOfBlock = function (parent, node) {
            if (node === undefined) {
                return this.pushDiagnosticAt(TypeScript.fullEnd(parent), 0, TypeScript.DiagnosticCode._0_expected, ["{"]);
            }
            else if (node.kind === 83 /* SemicolonToken */) {
                return this.pushDiagnostic(node, TypeScript.DiagnosticCode._0_expected, ["{"]);
            }
            return false;
        };
        GrammarCheckerWalker.prototype.checkForDisallowedSetAccessorTypeAnnotation = function (accessor) {
            if (accessor.callSignature.typeAnnotation) {
                return this.pushDiagnostic(accessor.callSignature.typeAnnotation, TypeScript.DiagnosticCode.Type_annotation_cannot_appear_on_a_set_accessor);
            }
            return false;
        };
        GrammarCheckerWalker.prototype.checkForDisallowedAccessorTypeParameters = function (callSignature) {
            if (callSignature.typeParameterList) {
                return this.pushDiagnostic(callSignature.typeParameterList, TypeScript.DiagnosticCode.Type_parameters_cannot_appear_on_an_accessor);
            }
            return false;
        };
        GrammarCheckerWalker.prototype.checkForAccessorDeclarationInAmbientContext = function (accessor) {
            if (this.inAmbientDeclaration) {
                return this.pushDiagnostic(accessor, TypeScript.DiagnosticCode.Accessors_are_not_allowed_in_ambient_contexts);
            }
            return false;
        };
        GrammarCheckerWalker.prototype.checkSetAccessorParameter = function (node) {
            var parameters = node.callSignature.parameterList.parameters;
            if (TypeScript.nonSeparatorCount(parameters) !== 1) {
                return this.pushDiagnostic(node.propertyName, TypeScript.DiagnosticCode.set_accessor_must_have_exactly_one_parameter);
            }
            var parameter = TypeScript.nonSeparatorAt(parameters, 0);
            if (parameter.questionToken) {
                return this.pushDiagnostic(parameter, TypeScript.DiagnosticCode.set_accessor_parameter_cannot_be_optional);
            }
            if (parameter.equalsValueClause) {
                return this.pushDiagnostic(parameter, TypeScript.DiagnosticCode.set_accessor_parameter_cannot_have_an_initializer);
            }
            if (parameter.dotDotDotToken) {
                return this.pushDiagnostic(parameter, TypeScript.DiagnosticCode.set_accessor_cannot_have_rest_parameter);
            }
            return false;
        };
        GrammarCheckerWalker.prototype.visitSimpleArrowFunctionExpression = function (node) {
            if (node.asyncKeyword) {
                this.pushDiagnostic(node.asyncKeyword, TypeScript.DiagnosticCode.async_arrow_function_parameters_must_be_parenthesized);
                return;
            }
            _super.prototype.visitSimpleArrowFunctionExpression.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitPropertyAssignment = function (node) {
            if (this.checkForDisallowedTemplatePropertyName(node.propertyName)) {
                return;
            }
            _super.prototype.visitPropertyAssignment.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitSetAccessor = function (node) {
            if (this.checkForAccessorDeclarationInAmbientContext(node) || this.checkEcmaScriptVersionIsAtLeast(node.setKeyword, 1 /* ES5 */, TypeScript.DiagnosticCode.Accessors_are_only_available_when_targeting_ECMAScript_5_and_higher) || this.checkForDisallowedModifiersInBlockOrObjectLitera(node.modifiers) || this.checkClassElementModifiers(node.modifiers) || this.checkForDisallowedAccessorTypeParameters(node.callSignature) || this.checkForDisallowedSetAccessorTypeAnnotation(node) || this.checkSetAccessorParameter(node) || this.checkForDisallowedTemplatePropertyName(node.propertyName) || this.checkForSemicolonInsteadOfBlock(node, node.body) || this.checkForDisallowedAsyncModifier(node.modifiers)) {
                return;
            }
            _super.prototype.visitSetAccessor.call(this, node);
        };
        GrammarCheckerWalker.prototype.checkForDisallowedAsyncModifier = function (modifiers) {
            var asyncKeyword = this.getAsyncModifier(modifiers);
            if (asyncKeyword) {
                return this.pushDiagnostic(asyncKeyword, TypeScript.DiagnosticCode.async_modifier_cannot_appear_here);
            }
            return false;
        };
        GrammarCheckerWalker.prototype.visitElementAccessExpression = function (node) {
            if (this.checkForMissingArgumentExpression(node)) {
                return;
            }
            _super.prototype.visitElementAccessExpression.call(this, node);
        };
        GrammarCheckerWalker.prototype.checkForMissingArgumentExpression = function (node) {
            if (node.argumentExpression === undefined) {
                if (node.parent.kind === 182 /* ObjectCreationExpression */ && node.parent.expression === node) {
                    var start = TypeScript.start(node.openBracketToken);
                    var end = TypeScript.fullEnd(node.closeBracketToken);
                    return this.pushDiagnosticAt(start, end - start, TypeScript.DiagnosticCode.new_T_cannot_be_used_to_create_an_array_Use_new_Array_T_instead);
                }
                else {
                    return this.pushDiagnostic(node.closeBracketToken, TypeScript.DiagnosticCode.Expression_expected);
                }
            }
            return false;
        };
        GrammarCheckerWalker.prototype.visitEnumDeclaration = function (node) {
            if (this.checkForDisallowedDeclareModifier(node.modifiers) || this.checkForRequiredDeclareModifier(node, node.identifier, node.modifiers) || this.checkModuleElementModifiers(node.modifiers), this.checkEnumElements(node) || this.checkForDisallowedAsyncModifier(node.modifiers)) {
                return;
            }
            var savedInAmbientDeclaration = this.inAmbientDeclaration;
            this.inAmbientDeclaration = this.inAmbientDeclaration || this.syntaxTree.isDeclaration() || TypeScript.SyntaxUtilities.containsToken(node.modifiers, 67 /* DeclareKeyword */);
            _super.prototype.visitEnumDeclaration.call(this, node);
            this.inAmbientDeclaration = savedInAmbientDeclaration;
        };
        GrammarCheckerWalker.prototype.checkEnumElements = function (node) {
            var previousValueWasComputed = false;
            for (var i = 0, n = TypeScript.nonSeparatorCount(node.enumElements); i < n; i++) {
                var enumElement = TypeScript.nonSeparatorAt(node.enumElements, i);
                if (!enumElement.equalsValueClause && previousValueWasComputed) {
                    return this.pushDiagnostic(enumElement, TypeScript.DiagnosticCode.Enum_member_must_have_initializer);
                }
                if (enumElement.equalsValueClause) {
                    var value = enumElement.equalsValueClause.value;
                    previousValueWasComputed = !TypeScript.Syntax.isIntegerLiteral(value);
                }
            }
            return false;
        };
        GrammarCheckerWalker.prototype.visitEnumElement = function (node) {
            if (this.checkForDisallowedTemplatePropertyName(node.propertyName) || this.checkForDisallowedComputedPropertyName(node.propertyName)) {
                return;
            }
            if (this.inAmbientDeclaration && node.equalsValueClause) {
                var expression = node.equalsValueClause.value;
                if (!TypeScript.Syntax.isIntegerLiteral(expression)) {
                    this.pushDiagnostic(node.equalsValueClause.value, TypeScript.DiagnosticCode.Ambient_enum_elements_can_only_have_integer_literal_initializers);
                    return;
                }
            }
            _super.prototype.visitEnumElement.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitInvocationExpression = function (node) {
            if (node.expression.kind === 52 /* SuperKeyword */ && node.argumentList.typeArgumentList) {
                this.pushDiagnostic(node, TypeScript.DiagnosticCode.super_invocation_cannot_have_type_arguments);
            }
            _super.prototype.visitInvocationExpression.call(this, node);
        };
        GrammarCheckerWalker.prototype.checkModuleElementModifiers = function (modifiers) {
            var seenExportModifier = false;
            var seenDeclareModifier = false;
            var seenAsyncModifier = false;
            for (var i = 0, n = modifiers.length; i < n; i++) {
                var modifier = modifiers[i];
                if (TypeScript.SyntaxFacts.isAccessibilityModifier(modifier.kind) || modifier.kind === 60 /* StaticKeyword */) {
                    return this.pushDiagnostic(modifier, TypeScript.DiagnosticCode._0_modifier_cannot_appear_on_a_module_element, [modifier.text()]);
                }
                if (modifier.kind === 67 /* DeclareKeyword */) {
                    if (seenDeclareModifier) {
                        this.pushDiagnostic(modifier, TypeScript.DiagnosticCode.Accessibility_modifier_already_seen);
                        return;
                    }
                    if (seenAsyncModifier) {
                        this.pushDiagnostic(modifier, TypeScript.DiagnosticCode._0_modifier_must_precede_1_modifier, [TypeScript.SyntaxFacts.getText(67 /* DeclareKeyword */), TypeScript.SyntaxFacts.getText(63 /* AsyncKeyword */)]);
                        return;
                    }
                    seenDeclareModifier = true;
                }
                else if (modifier.kind === 49 /* ExportKeyword */) {
                    if (seenExportModifier) {
                        this.pushDiagnostic(modifier, TypeScript.DiagnosticCode._0_modifier_already_seen, [modifier.text()]);
                        return;
                    }
                    if (seenDeclareModifier) {
                        this.pushDiagnostic(modifier, TypeScript.DiagnosticCode._0_modifier_must_precede_1_modifier, [TypeScript.SyntaxFacts.getText(49 /* ExportKeyword */), TypeScript.SyntaxFacts.getText(67 /* DeclareKeyword */)]);
                        return;
                    }
                    if (seenAsyncModifier) {
                        this.pushDiagnostic(modifier, TypeScript.DiagnosticCode._0_modifier_must_precede_1_modifier, [TypeScript.SyntaxFacts.getText(49 /* ExportKeyword */), TypeScript.SyntaxFacts.getText(63 /* AsyncKeyword */)]);
                        return;
                    }
                    seenExportModifier = true;
                }
                else if (modifier.kind === 63 /* AsyncKeyword */) {
                    if (seenAsyncModifier) {
                        this.pushDiagnostic(modifier, TypeScript.DiagnosticCode._0_modifier_already_seen, [modifier.text()]);
                        return;
                    }
                    seenAsyncModifier = true;
                }
            }
            return false;
        };
        GrammarCheckerWalker.prototype.checkForDisallowedImportDeclaration = function (node) {
            if (node.name.kind !== 12 /* StringLiteral */) {
                for (var i = 0, n = node.moduleElements.length; i < n; i++) {
                    var child = node.moduleElements[i];
                    if (child.kind === 141 /* ImportDeclaration */) {
                        var importDeclaration = child;
                        if (importDeclaration.moduleReference.kind === 217 /* ExternalModuleReference */) {
                            this.pushDiagnostic(importDeclaration, TypeScript.DiagnosticCode.Import_declarations_in_an_internal_module_cannot_reference_an_external_module);
                        }
                    }
                }
            }
            return false;
        };
        GrammarCheckerWalker.prototype.checkForDisallowedDeclareModifierOnImportDeclaration = function (modifiers) {
            var declareToken = TypeScript.SyntaxUtilities.getToken(modifiers, 67 /* DeclareKeyword */);
            if (declareToken) {
                return this.pushDiagnostic(declareToken, TypeScript.DiagnosticCode.A_declare_modifier_cannot_be_used_with_an_import_declaration);
            }
        };
        GrammarCheckerWalker.prototype.visitImportDeclaration = function (node) {
            if (this.checkForDisallowedDeclareModifierOnImportDeclaration(node.modifiers) || this.checkModuleElementModifiers(node.modifiers) || this.checkForDisallowedAsyncModifier(node.modifiers)) {
                return;
            }
            _super.prototype.visitImportDeclaration.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitModuleDeclaration = function (node) {
            if (this.checkForDisallowedDeclareModifier(node.modifiers) || this.checkForRequiredDeclareModifier(node, TypeScript.firstToken(node.name), node.modifiers) || this.checkModuleElementModifiers(node.modifiers) || this.checkForDisallowedImportDeclaration(node) || this.checkForDisallowedAsyncModifier(node.modifiers)) {
                return;
            }
            if (node.name.kind === 12 /* StringLiteral */) {
                if (!this.inAmbientDeclaration && !TypeScript.SyntaxUtilities.containsToken(node.modifiers, 67 /* DeclareKeyword */)) {
                    this.pushDiagnostic(node.name, TypeScript.DiagnosticCode.Only_ambient_modules_can_use_quoted_names);
                    return;
                }
            }
            if (node.name.kind !== 12 /* StringLiteral */ && this.checkForDisallowedExportAssignment(node)) {
                return;
            }
            var savedInAmbientDeclaration = this.inAmbientDeclaration;
            this.inAmbientDeclaration = this.inAmbientDeclaration || this.syntaxTree.isDeclaration() || TypeScript.SyntaxUtilities.containsToken(node.modifiers, 67 /* DeclareKeyword */);
            _super.prototype.visitModuleDeclaration.call(this, node);
            this.inAmbientDeclaration = savedInAmbientDeclaration;
        };
        GrammarCheckerWalker.prototype.checkForDisallowedExportAssignment = function (node) {
            for (var i = 0, n = node.moduleElements.length; i < n; i++) {
                var child = node.moduleElements[i];
                if (child.kind === 142 /* ExportAssignment */) {
                    return this.pushDiagnostic(child, TypeScript.DiagnosticCode.Export_assignment_cannot_be_used_in_internal_modules);
                }
            }
            return false;
        };
        GrammarCheckerWalker.prototype.visitBlock = function (node) {
            if (this.checkForBlockInAmbientContext(node) || this.checkForMalformedBlock(node)) {
                return;
            }
            var savedInBlock = this.inBlock;
            this.inBlock = true;
            _super.prototype.visitBlock.call(this, node);
            this.inBlock = savedInBlock;
        };
        GrammarCheckerWalker.prototype.checkForMalformedBlock = function (node) {
            if (node.equalsGreaterThanToken || node.openBraceToken === undefined) {
                return this.pushDiagnostic(TypeScript.firstToken(node), TypeScript.DiagnosticCode._0_expected, ["{"]);
            }
            return false;
        };
        GrammarCheckerWalker.prototype.checkForBlockInAmbientContext = function (node) {
            if (this.inAmbientDeclaration || this.syntaxTree.isDeclaration()) {
                if (node.parent.kind === 1 /* List */) {
                    return this.pushDiagnostic(TypeScript.firstToken(node), TypeScript.DiagnosticCode.Statements_are_not_allowed_in_ambient_contexts);
                }
                else {
                    return this.pushDiagnostic(TypeScript.firstToken(node), TypeScript.DiagnosticCode.A_function_implementation_cannot_be_declared_in_an_ambient_context);
                }
            }
            return false;
        };
        GrammarCheckerWalker.prototype.checkForStatementInAmbientContxt = function (node) {
            if (this.inAmbientDeclaration || this.syntaxTree.isDeclaration()) {
                return this.pushDiagnostic(TypeScript.firstToken(node), TypeScript.DiagnosticCode.Statements_are_not_allowed_in_ambient_contexts);
            }
            return false;
        };
        GrammarCheckerWalker.prototype.visitExportAssignment = function (node) {
            if (node.modifiers.length > 0) {
                this.pushDiagnostic(node.modifiers[0], TypeScript.DiagnosticCode.Modifiers_cannot_appear_here);
                return;
            }
            _super.prototype.visitExportAssignment.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitExternalModuleReference = function (node) {
            if (node.expression.kind !== 12 /* StringLiteral */) {
                this.pushDiagnostic(node.expression, TypeScript.DiagnosticCode.String_literal_expected);
                return;
            }
            _super.prototype.visitExternalModuleReference.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitExpressionBody = function (node) {
            this.pushDiagnostic(node.equalsGreaterThanToken, TypeScript.DiagnosticCode._0_expected, ["{"]);
        };
        GrammarCheckerWalker.prototype.visitBreakStatement = function (node) {
            if (this.checkForStatementInAmbientContxt(node) || this.checkBreakStatementTarget(node)) {
                return;
            }
            _super.prototype.visitBreakStatement.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitComputedPropertyName = function (node) {
            if (node.expression.kind === 176 /* BinaryExpression */ && node.expression.operatorToken.kind === 84 /* CommaToken */) {
                this.pushDiagnostic(node.expression.operatorToken, TypeScript.DiagnosticCode.comma_expression_cannot_appear_in_a_computed_property_name);
                return;
            }
            _super.prototype.visitComputedPropertyName.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitContinueStatement = function (node) {
            if (this.checkForStatementInAmbientContxt(node) || this.checkContinueStatementTarget(node)) {
                return;
            }
            _super.prototype.visitContinueStatement.call(this, node);
        };
        GrammarCheckerWalker.prototype.checkBreakStatementTarget = function (node) {
            if (node.identifier) {
                var breakableLabels = this.getEnclosingLabels(node, true, false);
                if (!TypeScript.ArrayUtilities.any(breakableLabels, function (s) { return TypeScript.tokenValueText(s.identifier) === TypeScript.tokenValueText(node.identifier); })) {
                    var breakableLabels = this.getEnclosingLabels(node, true, true);
                    if (TypeScript.ArrayUtilities.any(breakableLabels, function (s) { return TypeScript.tokenValueText(s.identifier) === TypeScript.tokenValueText(node.identifier); })) {
                        return this.pushDiagnostic(node, TypeScript.DiagnosticCode.Jump_target_cannot_cross_function_boundary);
                    }
                    else {
                        return this.pushDiagnostic(node, TypeScript.DiagnosticCode.Jump_target_not_found);
                    }
                }
            }
            else if (!this.inIterationStatement(node, false) && !this.inSwitchStatement(node)) {
                if (this.inIterationStatement(node, true)) {
                    return this.pushDiagnostic(node, TypeScript.DiagnosticCode.Jump_target_cannot_cross_function_boundary);
                }
                else {
                    return this.pushDiagnostic(node, TypeScript.DiagnosticCode.break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement);
                }
            }
            return false;
        };
        GrammarCheckerWalker.prototype.inSwitchStatement = function (ast) {
            while (ast) {
                if (ast.kind === 158 /* SwitchStatement */) {
                    return true;
                }
                if (TypeScript.SyntaxUtilities.isAnyFunctionExpressionOrDeclaration(ast)) {
                    return false;
                }
                ast = ast.parent;
            }
            return false;
        };
        GrammarCheckerWalker.prototype.isIterationStatement = function (ast) {
            switch (ast.kind) {
                case 161 /* ForStatement */:
                case 162 /* ForInStatement */:
                case 165 /* WhileStatement */:
                case 168 /* DoStatement */:
                    return true;
            }
            return false;
        };
        GrammarCheckerWalker.prototype.inIterationStatement = function (element, crossFunctions) {
            while (element) {
                if (this.isIterationStatement(element)) {
                    return true;
                }
                if (!crossFunctions && TypeScript.SyntaxUtilities.isAnyFunctionExpressionOrDeclaration(element)) {
                    return false;
                }
                element = element.parent;
            }
            return false;
        };
        GrammarCheckerWalker.prototype.getEnclosingLabels = function (element, breakable, crossFunctions) {
            var result = [];
            element = element.parent;
            while (element) {
                if (element.kind === 167 /* LabeledStatement */) {
                    var labeledStatement = element;
                    if (breakable) {
                        result.push(labeledStatement);
                    }
                    else {
                        if (this.labelIsOnContinuableConstruct(labeledStatement.statement)) {
                            result.push(labeledStatement);
                        }
                    }
                }
                if (!crossFunctions && TypeScript.SyntaxUtilities.isAnyFunctionExpressionOrDeclaration(element)) {
                    break;
                }
                element = element.parent;
            }
            return result;
        };
        GrammarCheckerWalker.prototype.labelIsOnContinuableConstruct = function (statement) {
            switch (statement.kind) {
                case 167 /* LabeledStatement */:
                    return this.labelIsOnContinuableConstruct(statement.statement);
                case 165 /* WhileStatement */:
                case 161 /* ForStatement */:
                case 162 /* ForInStatement */:
                case 168 /* DoStatement */:
                    return true;
                default:
                    return false;
            }
        };
        GrammarCheckerWalker.prototype.checkContinueStatementTarget = function (node) {
            if (!this.inIterationStatement(node, false)) {
                if (this.inIterationStatement(node, true)) {
                    return this.pushDiagnostic(node, TypeScript.DiagnosticCode.Jump_target_cannot_cross_function_boundary);
                }
                else {
                    return this.pushDiagnostic(node, TypeScript.DiagnosticCode.continue_statement_can_only_be_used_within_an_enclosing_iteration_statement);
                }
            }
            else if (node.identifier) {
                var continuableLabels = this.getEnclosingLabels(node, false, false);
                if (!TypeScript.ArrayUtilities.any(continuableLabels, function (s) { return TypeScript.tokenValueText(s.identifier) === TypeScript.tokenValueText(node.identifier); })) {
                    var continuableLabels = this.getEnclosingLabels(node, false, true);
                    if (TypeScript.ArrayUtilities.any(continuableLabels, function (s) { return TypeScript.tokenValueText(s.identifier) === TypeScript.tokenValueText(node.identifier); })) {
                        return this.pushDiagnostic(node, TypeScript.DiagnosticCode.Jump_target_cannot_cross_function_boundary);
                    }
                    else {
                        return this.pushDiagnostic(node, TypeScript.DiagnosticCode.Jump_target_not_found);
                    }
                }
            }
            return false;
        };
        GrammarCheckerWalker.prototype.visitDebuggerStatement = function (node) {
            if (this.checkForStatementInAmbientContxt(node)) {
                return;
            }
            _super.prototype.visitDebuggerStatement.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitDoStatement = function (node) {
            if (this.checkForStatementInAmbientContxt(node)) {
                return;
            }
            _super.prototype.visitDoStatement.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitEmptyStatement = function (node) {
            if (this.checkForStatementInAmbientContxt(node)) {
                return;
            }
            _super.prototype.visitEmptyStatement.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitExpressionStatement = function (node) {
            if (this.checkForStatementInAmbientContxt(node)) {
                return;
            }
            _super.prototype.visitExpressionStatement.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitForInStatement = function (node) {
            if (this.checkForStatementInAmbientContxt(node) || this.checkForInStatementVariableDeclaration(node) || this.checkForInLeftHandSideExpression(node)) {
                return;
            }
            _super.prototype.visitForInStatement.call(this, node);
        };
        GrammarCheckerWalker.prototype.checkForInLeftHandSideExpression = function (node) {
            if (node.left.kind !== 194 /* VariableDeclaration */ && !TypeScript.SyntaxUtilities.isLeftHandSizeExpression(node.left)) {
                return this.pushDiagnostic(node.left, TypeScript.DiagnosticCode.Invalid_left_hand_side_in_for_in_statement);
            }
            return false;
        };
        GrammarCheckerWalker.prototype.checkForInStatementVariableDeclaration = function (node) {
            if (node.left.kind === 194 /* VariableDeclaration */ && node.left.variableDeclarators.length > 1) {
                return this.pushDiagnostic(node.left, TypeScript.DiagnosticCode.Only_a_single_variable_declaration_is_allowed_in_a_for_in_statement);
            }
            return false;
        };
        GrammarCheckerWalker.prototype.visitForStatement = function (node) {
            if (this.checkForStatementInAmbientContxt(node)) {
                return;
            }
            _super.prototype.visitForStatement.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitIfStatement = function (node) {
            if (this.checkForStatementInAmbientContxt(node)) {
                return;
            }
            _super.prototype.visitIfStatement.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitLabeledStatement = function (node) {
            if (this.checkForStatementInAmbientContxt(node) || this.checkForInvalidLabelIdentifier(node)) {
                return;
            }
            _super.prototype.visitLabeledStatement.call(this, node);
        };
        GrammarCheckerWalker.prototype.checkForInvalidLabelIdentifier = function (node) {
            var labelIdentifier = TypeScript.tokenValueText(node.identifier);
            var breakableLabels = this.getEnclosingLabels(node, true, false);
            var matchingLabel = TypeScript.ArrayUtilities.firstOrDefault(breakableLabels, function (s) { return TypeScript.tokenValueText(s.identifier) === labelIdentifier; });
            if (matchingLabel) {
                return this.pushDiagnostic(node.identifier, TypeScript.DiagnosticCode.Duplicate_identifier_0, [labelIdentifier]);
            }
            return false;
        };
        GrammarCheckerWalker.prototype.visitReturnStatement = function (node) {
            if (this.checkForStatementInAmbientContxt(node) || this.checkForReturnStatementNotInFunctionBody(node)) {
                return;
            }
            _super.prototype.visitReturnStatement.call(this, node);
        };
        GrammarCheckerWalker.prototype.checkForReturnStatementNotInFunctionBody = function (node) {
            for (var element = node; element; element = element.parent) {
                if (TypeScript.SyntaxUtilities.isAnyFunctionExpressionOrDeclaration(element)) {
                    return false;
                }
            }
            return this.pushDiagnostic(TypeScript.firstToken(node), TypeScript.DiagnosticCode.return_statement_must_be_contained_within_a_function_body);
        };
        GrammarCheckerWalker.prototype.visitSwitchStatement = function (node) {
            if (this.checkForStatementInAmbientContxt(node)) {
                return;
            }
            _super.prototype.visitSwitchStatement.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitThrowStatement = function (node) {
            if (this.checkForStatementInAmbientContxt(node) || this.checkForMissingThrowStatementExpression(node)) {
                return;
            }
            _super.prototype.visitThrowStatement.call(this, node);
        };
        GrammarCheckerWalker.prototype.checkForMissingThrowStatementExpression = function (node) {
            if (node.expression === undefined) {
                return this.pushDiagnosticAt(TypeScript.fullEnd(node.throwKeyword), 0, TypeScript.DiagnosticCode.Expression_expected);
            }
            return false;
        };
        GrammarCheckerWalker.prototype.visitTryStatement = function (node) {
            if (this.checkForStatementInAmbientContxt(node)) {
                return;
            }
            _super.prototype.visitTryStatement.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitWhileStatement = function (node) {
            if (this.checkForStatementInAmbientContxt(node)) {
                return;
            }
            _super.prototype.visitWhileStatement.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitWithStatement = function (node) {
            if (this.checkForStatementInAmbientContxt(node) || this.checkForWithInStrictMode(node)) {
                return;
            }
            _super.prototype.visitWithStatement.call(this, node);
        };
        GrammarCheckerWalker.prototype.checkForWithInStrictMode = function (node) {
            if (TypeScript.parsedInStrictModeContext(node)) {
                return this.pushDiagnostic(TypeScript.firstToken(node), TypeScript.DiagnosticCode.with_statements_are_not_allowed_in_strict_mode);
            }
            return false;
        };
        GrammarCheckerWalker.prototype.checkForDisallowedModifiersInBlockOrObjectLitera = function (modifiers) {
            if (this.inBlock || this.inObjectLiteralExpression) {
                if (modifiers.length > 0) {
                    return this.pushDiagnostic(modifiers[0], TypeScript.DiagnosticCode.Modifiers_cannot_appear_here);
                }
            }
            return false;
        };
        GrammarCheckerWalker.prototype.visitFunctionDeclaration = function (node) {
            if (this.checkForDisallowedDeclareModifier(node.modifiers) || this.checkForDisallowedModifiersInBlockOrObjectLitera(node.modifiers) || this.checkForRequiredDeclareModifier(node, node.identifier, node.modifiers) || this.checkModuleElementModifiers(node.modifiers) || this.checkForDisallowedEvalOrArguments(node, node.identifier) || this.checkForAsyncGenerator(this.getAsyncModifier(node.modifiers), node.asterixToken)) {
                return;
            }
            var savedInAmbientDeclaration = this.inAmbientDeclaration;
            this.inAmbientDeclaration = this.inAmbientDeclaration || this.syntaxTree.isDeclaration() || TypeScript.SyntaxUtilities.containsToken(node.modifiers, 67 /* DeclareKeyword */);
            _super.prototype.visitFunctionDeclaration.call(this, node);
            this.inAmbientDeclaration = savedInAmbientDeclaration;
        };
        GrammarCheckerWalker.prototype.getAsyncModifier = function (modifiers) {
            for (var i = 0, n = modifiers.length; i < n; i++) {
                var modifier = modifiers[i];
                if (modifier.kind === 63 /* AsyncKeyword */) {
                    return modifier;
                }
            }
            return undefined;
        };
        GrammarCheckerWalker.prototype.checkForAsyncGenerator = function (asyncKeyword, asterixToken) {
            if (asyncKeyword && asterixToken) {
                return this.pushDiagnostic(asyncKeyword, TypeScript.DiagnosticCode.A_generator_declaration_cannot_have_the_async_modifier);
            }
            return false;
        };
        GrammarCheckerWalker.prototype.visitFunctionExpression = function (node) {
            if (this.checkForDisallowedEvalOrArguments(node, node.identifier) || this.checkForSemicolonInsteadOfBlock(node, node.body) || this.checkForAsyncGenerator(node.asyncKeyword, node.asterixToken)) {
                return;
            }
            _super.prototype.visitFunctionExpression.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitVariableStatement = function (node) {
            if (this.checkForDisallowedDeclareModifier(node.modifiers) || this.checkForDisallowedModifiersInBlockOrObjectLitera(node.modifiers) || this.checkForRequiredDeclareModifier(node, node.variableDeclaration.varConstOrLetKeyword, node.modifiers) || this.checkModuleElementModifiers(node.modifiers) || this.checkForDisallowedAsyncModifier(node.modifiers)) {
                return;
            }
            var savedInAmbientDeclaration = this.inAmbientDeclaration;
            this.inAmbientDeclaration = this.inAmbientDeclaration || this.syntaxTree.isDeclaration() || TypeScript.SyntaxUtilities.containsToken(node.modifiers, 67 /* DeclareKeyword */);
            _super.prototype.visitVariableStatement.call(this, node);
            this.inAmbientDeclaration = savedInAmbientDeclaration;
        };
        GrammarCheckerWalker.prototype.visitObjectType = function (node) {
            var savedInAmbientDeclaration = this.inAmbientDeclaration;
            this.inAmbientDeclaration = true;
            _super.prototype.visitObjectType.call(this, node);
            this.inAmbientDeclaration = savedInAmbientDeclaration;
        };
        GrammarCheckerWalker.prototype.visitArrayType = function (node) {
            var savedInAmbientDeclaration = this.inAmbientDeclaration;
            this.inAmbientDeclaration = true;
            _super.prototype.visitArrayType.call(this, node);
            this.inAmbientDeclaration = savedInAmbientDeclaration;
        };
        GrammarCheckerWalker.prototype.visitFunctionType = function (node) {
            var savedInAmbientDeclaration = this.inAmbientDeclaration;
            this.inAmbientDeclaration = true;
            _super.prototype.visitFunctionType.call(this, node);
            this.inAmbientDeclaration = savedInAmbientDeclaration;
        };
        GrammarCheckerWalker.prototype.visitConstructorType = function (node) {
            var savedInAmbientDeclaration = this.inAmbientDeclaration;
            this.inAmbientDeclaration = true;
            _super.prototype.visitConstructorType.call(this, node);
            this.inAmbientDeclaration = savedInAmbientDeclaration;
        };
        GrammarCheckerWalker.prototype.visitVariableDeclarator = function (node) {
            if (this.checkVariableDeclaratorInitializer(node) || this.checkVariableDeclaratorIdentifier(node) || this.checkForDisallowedTemplatePropertyName(node.propertyName)) {
                return;
            }
            _super.prototype.visitVariableDeclarator.call(this, node);
        };
        GrammarCheckerWalker.prototype.checkForDisallowedTemplatePropertyName = function (propertyName) {
            if (propertyName.kind === 13 /* NoSubstitutionTemplateToken */) {
                return this.pushDiagnostic(propertyName, TypeScript.DiagnosticCode.Template_literal_cannot_be_used_as_an_element_name);
            }
            return false;
        };
        GrammarCheckerWalker.prototype.checkForDisallowedComputedPropertyName = function (propertyName) {
            if (propertyName.kind === 214 /* ComputedPropertyName */) {
                return this.pushDiagnostic(propertyName, TypeScript.DiagnosticCode.Computed_property_names_cannot_be_used_here);
            }
            return false;
        };
        GrammarCheckerWalker.prototype.checkVariableDeclaratorIdentifier = function (node) {
            if (node.parent.kind !== 144 /* PropertyDeclaration */) {
                TypeScript.Debug.assert(TypeScript.isToken(node.propertyName), "A normal variable declarator must always have a token for a name.");
                if (this.checkForDisallowedEvalOrArguments(node, node.propertyName)) {
                    return true;
                }
            }
            return false;
        };
        GrammarCheckerWalker.prototype.checkVariableDeclaratorInitializer = function (node) {
            if (this.inAmbientDeclaration && node.equalsValueClause) {
                return this.pushDiagnostic(TypeScript.firstToken(node.equalsValueClause.value), TypeScript.DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts);
            }
            return false;
        };
        GrammarCheckerWalker.prototype.visitConstructorDeclaration = function (node) {
            if (this.checkClassElementModifiers(node.modifiers) || this.checkConstructorModifiers(node.modifiers) || this.checkConstructorTypeParameterList(node) || this.checkConstructorTypeAnnotation(node) || this.checkForDisallowedAsyncModifier(node.modifiers)) {
                return;
            }
            _super.prototype.visitConstructorDeclaration.call(this, node);
        };
        GrammarCheckerWalker.prototype.checkConstructorModifiers = function (modifiers) {
            for (var i = 0, n = modifiers.length; i < n; i++) {
                var child = modifiers[i];
                if (child.kind !== 59 /* PublicKeyword */) {
                    return this.pushDiagnostic(child, TypeScript.DiagnosticCode._0_modifier_cannot_appear_on_a_constructor_declaration, [TypeScript.SyntaxFacts.getText(child.kind)]);
                }
            }
            return false;
        };
        GrammarCheckerWalker.prototype.checkConstructorTypeParameterList = function (node) {
            if (node.callSignature.typeParameterList) {
                return this.pushDiagnostic(node.callSignature.typeParameterList, TypeScript.DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration);
            }
            return false;
        };
        GrammarCheckerWalker.prototype.checkConstructorTypeAnnotation = function (node) {
            if (node.callSignature.typeAnnotation) {
                return this.pushDiagnostic(node.callSignature.typeAnnotation, TypeScript.DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration);
            }
            return false;
        };
        GrammarCheckerWalker.prototype.visitBinaryExpression = function (node) {
            if (this.checkIllegalAssignment(node)) {
                return;
            }
            _super.prototype.visitBinaryExpression.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitPrefixUnaryExpression = function (node) {
            if (TypeScript.parsedInStrictModeContext(node) && this.isPreIncrementOrDecrementExpression(node) && this.isEvalOrArguments(node.operand)) {
                this.pushDiagnostic(node.operatorToken, TypeScript.DiagnosticCode.Invalid_use_of_0_in_strict_mode, [this.getEvalOrArguments(node.operand)]);
            }
            _super.prototype.visitPrefixUnaryExpression.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitPostfixUnaryExpression = function (node) {
            if (TypeScript.parsedInStrictModeContext(node) && this.isEvalOrArguments(node.operand)) {
                this.pushDiagnostic(node.operatorToken, TypeScript.DiagnosticCode.Invalid_use_of_0_in_strict_mode, [this.getEvalOrArguments(node.operand)]);
            }
            _super.prototype.visitPostfixUnaryExpression.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitParameter = function (node) {
            if (this.checkParameterAccessibilityModifiers(node) || this.checkForDisallowedEvalOrArguments(node, node.identifier)) {
                return;
            }
            _super.prototype.visitParameter.call(this, node);
        };
        GrammarCheckerWalker.prototype.checkForDisallowedEvalOrArguments = function (node, token) {
            if (token) {
                if (TypeScript.parsedInStrictModeContext(node) && this.isEvalOrArguments(token)) {
                    return this.pushDiagnostic(token, TypeScript.DiagnosticCode.Invalid_use_of_0_in_strict_mode, [this.getEvalOrArguments(token)]);
                }
            }
            return false;
        };
        GrammarCheckerWalker.prototype.isPreIncrementOrDecrementExpression = function (node) {
            switch (node.operatorToken.kind) {
                case 99 /* MinusMinusToken */:
                case 98 /* PlusPlusToken */:
                    return true;
            }
            return false;
        };
        GrammarCheckerWalker.prototype.visitDeleteExpression = function (node) {
            if (TypeScript.parsedInStrictModeContext(node) && node.expression.kind === 9 /* IdentifierName */) {
                this.pushDiagnostic(node.deleteKeyword, TypeScript.DiagnosticCode.delete_cannot_be_called_on_an_identifier_in_strict_mode);
                return;
            }
            _super.prototype.visitDeleteExpression.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitYieldExpression = function (node) {
            if (!TypeScript.parsedInYieldContext(node)) {
                this.pushDiagnostic(node.yieldKeyword, TypeScript.DiagnosticCode.yield_expression_must_be_contained_within_a_generator_declaration);
                return;
            }
            _super.prototype.visitYieldExpression.call(this, node);
        };
        GrammarCheckerWalker.prototype.visitAwaitExpression = function (node) {
            if (!TypeScript.parsedInAsyncContext(node)) {
                this.pushDiagnostic(node.awaitKeyword, TypeScript.DiagnosticCode.await_expression_must_be_contained_within_an_async_declaration);
                return;
            }
            _super.prototype.visitAwaitExpression.call(this, node);
        };
        GrammarCheckerWalker.prototype.checkIllegalAssignment = function (node) {
            if (TypeScript.parsedInStrictModeContext(node) && TypeScript.SyntaxFacts.isAssignmentOperatorToken(node.operatorToken.kind) && this.isEvalOrArguments(node.left)) {
                return this.pushDiagnostic(node.operatorToken, TypeScript.DiagnosticCode.Invalid_use_of_0_in_strict_mode, [this.getEvalOrArguments(node.left)]);
            }
            return false;
        };
        GrammarCheckerWalker.prototype.getEvalOrArguments = function (expr) {
            if (expr.kind === 9 /* IdentifierName */) {
                var text = TypeScript.tokenValueText(expr);
                if (text === "eval" || text === "arguments") {
                    return text;
                }
            }
            return undefined;
        };
        GrammarCheckerWalker.prototype.isEvalOrArguments = function (expr) {
            return !!this.getEvalOrArguments(expr);
        };
        GrammarCheckerWalker.prototype.visitConstraint = function (node) {
            if (this.checkConstraintType(node)) {
                return;
            }
            _super.prototype.visitConstraint.call(this, node);
        };
        GrammarCheckerWalker.prototype.checkConstraintType = function (node) {
            if (!TypeScript.SyntaxFacts.isType(node.typeOrExpression.kind)) {
                return this.pushDiagnostic(node.typeOrExpression, TypeScript.DiagnosticCode.Type_expected);
            }
            return false;
        };
        return GrammarCheckerWalker;
    })(TypeScript.SyntaxWalker);
    function firstSyntaxTreeToken(syntaxTree) {
        var scanner = TypeScript.Scanner.createScanner(syntaxTree.languageVersion(), syntaxTree.text, function () {
        });
        return scanner.scan(false);
    }
    function implicitImportSpan(sourceUnitLeadingTrivia) {
        for (var i = 0, n = sourceUnitLeadingTrivia.count(); i < n; i++) {
            var trivia = sourceUnitLeadingTrivia.syntaxTriviaAt(i);
            if (trivia.isComment()) {
                var span = implicitImportSpanWorker(trivia);
                if (span) {
                    return span;
                }
            }
        }
        return undefined;
    }
    function implicitImportSpanWorker(trivia) {
        var implicitImportRegEx = /^(\/\/\/\s*<implicit-import\s*)*\/>/gim;
        var match = implicitImportRegEx.exec(trivia.fullText());
        if (match) {
            return new TypeScript.TextSpan(trivia.fullStart(), trivia.fullWidth());
        }
        return undefined;
    }
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var Unicode = (function () {
        function Unicode() {
        }
        Unicode.lookupInUnicodeMap = function (code, map) {
            if (code < map[0]) {
                return false;
            }
            var lo = 0;
            var hi = map.length;
            var mid;
            while (lo + 1 < hi) {
                mid = lo + (hi - lo) / 2;
                mid -= mid % 2;
                if (map[mid] <= code && code <= map[mid + 1]) {
                    return true;
                }
                if (code < map[mid]) {
                    hi = mid;
                }
                else {
                    lo = mid + 2;
                }
            }
            return false;
        };
        Unicode.isIdentifierStart = function (code, languageVersion) {
            if (languageVersion === 0 /* ES3 */) {
                return Unicode.lookupInUnicodeMap(code, Unicode.unicodeES3IdentifierStart);
            }
            else if (languageVersion >= 1 /* ES5 */) {
                return Unicode.lookupInUnicodeMap(code, Unicode.unicodeES5IdentifierStart);
            }
            else {
                throw TypeScript.Errors.argumentOutOfRange("languageVersion");
            }
        };
        Unicode.isIdentifierPart = function (code, languageVersion) {
            if (languageVersion === 0 /* ES3 */) {
                return Unicode.lookupInUnicodeMap(code, Unicode.unicodeES3IdentifierPart);
            }
            else if (languageVersion >= 1 /* ES5 */) {
                return Unicode.lookupInUnicodeMap(code, Unicode.unicodeES5IdentifierPart);
            }
            else {
                throw TypeScript.Errors.argumentOutOfRange("languageVersion");
            }
        };
        Unicode.unicodeES3IdentifierStart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685, 688, 696, 699, 705, 720, 721, 736, 740, 750, 750, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974, 976, 983, 986, 1011, 1024, 1153, 1164, 1220, 1223, 1224, 1227, 1228, 1232, 1269, 1272, 1273, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1569, 1594, 1600, 1610, 1649, 1747, 1749, 1749, 1765, 1766, 1786, 1788, 1808, 1808, 1810, 1836, 1920, 1957, 2309, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2784, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3294, 3294, 3296, 3297, 3333, 3340, 3342, 3344, 3346, 3368, 3370, 3385, 3424, 3425, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3805, 3840, 3840, 3904, 3911, 3913, 3946, 3976, 3979, 4096, 4129, 4131, 4135, 4137, 4138, 4176, 4181, 4256, 4293, 4304, 4342, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878, 4880, 4880, 4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 5024, 5108, 5121, 5740, 5743, 5750, 5761, 5786, 5792, 5866, 6016, 6067, 6176, 6263, 6272, 6312, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8319, 8319, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8497, 8499, 8505, 8544, 8579, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12346, 12353, 12436, 12445, 12446, 12449, 12538, 12540, 12542, 12549, 12588, 12593, 12686, 12704, 12727, 13312, 19893, 19968, 40869, 40960, 42124, 44032, 55203, 63744, 64045, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65138, 65140, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,];
        Unicode.unicodeES3IdentifierPart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685, 688, 696, 699, 705, 720, 721, 736, 740, 750, 750, 768, 846, 864, 866, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974, 976, 983, 986, 1011, 1024, 1153, 1155, 1158, 1164, 1220, 1223, 1224, 1227, 1228, 1232, 1269, 1272, 1273, 1329, 1366, 1369, 1369, 1377, 1415, 1425, 1441, 1443, 1465, 1467, 1469, 1471, 1471, 1473, 1474, 1476, 1476, 1488, 1514, 1520, 1522, 1569, 1594, 1600, 1621, 1632, 1641, 1648, 1747, 1749, 1756, 1759, 1768, 1770, 1773, 1776, 1788, 1808, 1836, 1840, 1866, 1920, 1968, 2305, 2307, 2309, 2361, 2364, 2381, 2384, 2388, 2392, 2403, 2406, 2415, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2492, 2492, 2494, 2500, 2503, 2504, 2507, 2509, 2519, 2519, 2524, 2525, 2527, 2531, 2534, 2545, 2562, 2562, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2649, 2652, 2654, 2654, 2662, 2676, 2689, 2691, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765, 2768, 2768, 2784, 2784, 2790, 2799, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870, 2873, 2876, 2883, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2913, 2918, 2927, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3006, 3010, 3014, 3016, 3018, 3021, 3031, 3031, 3047, 3055, 3073, 3075, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3134, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3168, 3169, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3262, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3294, 3294, 3296, 3297, 3302, 3311, 3330, 3331, 3333, 3340, 3342, 3344, 3346, 3368, 3370, 3385, 3390, 3395, 3398, 3400, 3402, 3405, 3415, 3415, 3424, 3425, 3430, 3439, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789, 3792, 3801, 3804, 3805, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3911, 3913, 3946, 3953, 3972, 3974, 3979, 3984, 3991, 3993, 4028, 4038, 4038, 4096, 4129, 4131, 4135, 4137, 4138, 4140, 4146, 4150, 4153, 4160, 4169, 4176, 4185, 4256, 4293, 4304, 4342, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878, 4880, 4880, 4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 4969, 4977, 5024, 5108, 5121, 5740, 5743, 5750, 5761, 5786, 5792, 5866, 6016, 6099, 6112, 6121, 6160, 6169, 6176, 6263, 6272, 6313, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8255, 8256, 8319, 8319, 8400, 8412, 8417, 8417, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8497, 8499, 8505, 8544, 8579, 12293, 12295, 12321, 12335, 12337, 12341, 12344, 12346, 12353, 12436, 12441, 12442, 12445, 12446, 12449, 12542, 12549, 12588, 12593, 12686, 12704, 12727, 13312, 19893, 19968, 40869, 40960, 42124, 44032, 55203, 63744, 64045, 64256, 64262, 64275, 64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65056, 65059, 65075, 65076, 65101, 65103, 65136, 65138, 65140, 65140, 65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65381, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,];
        Unicode.unicodeES5IdentifierStart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774, 1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969, 1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088, 2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840, 3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186, 4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016, 6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389, 6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688, 6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141, 7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424, 7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538, 42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015, 43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259, 43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520, 43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695, 43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739, 43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,];
        Unicode.unicodeES5IdentifierPart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520, 1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788, 1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112, 2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423, 2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525, 2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929, 2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018, 3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424, 3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789, 3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028, 4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099, 6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783, 6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155, 7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205, 8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417, 8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335, 12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072, 43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309, 43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584, 43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741, 43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140, 65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,];
        return Unicode;
    })();
    TypeScript.Unicode = Unicode;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var IncrementalParser;
    (function (IncrementalParser) {
        function createSyntaxCursorPiece(element, indexInParent) {
            return { element: element, indexInParent: indexInParent };
        }
        var syntaxCursorPool = [];
        var syntaxCursorPoolCount = 0;
        function returnSyntaxCursor(cursor) {
            cursor.clean();
            syntaxCursorPool[syntaxCursorPoolCount] = cursor;
            syntaxCursorPoolCount++;
        }
        IncrementalParser.returnSyntaxCursor = returnSyntaxCursor;
        function getSyntaxCursor() {
            var cursor = syntaxCursorPoolCount > 0 ? syntaxCursorPool[syntaxCursorPoolCount - 1] : createSyntaxCursor();
            if (syntaxCursorPoolCount > 0) {
                syntaxCursorPoolCount--;
                syntaxCursorPool[syntaxCursorPoolCount] = undefined;
            }
            return cursor;
        }
        IncrementalParser.getSyntaxCursor = getSyntaxCursor;
        function cloneSyntaxCursor(cursor) {
            var newCursor = getSyntaxCursor();
            newCursor.deepCopyFrom(cursor);
            return newCursor;
        }
        IncrementalParser.cloneSyntaxCursor = cloneSyntaxCursor;
        function createSyntaxCursor() {
            var pieces = [];
            var currentPieceIndex = -1;
            function clean() {
                for (var i = 0, n = pieces.length; i < n; i++) {
                    var piece = pieces[i];
                    if (piece.element === undefined) {
                        break;
                    }
                    piece.element = undefined;
                    piece.indexInParent = -1;
                }
                currentPieceIndex = -1;
            }
            function deepCopyFrom(other) {
                for (var i = 0, n = other.pieces.length; i < n; i++) {
                    var piece = other.pieces[i];
                    if (piece.element === undefined) {
                        break;
                    }
                    pushElement(piece.element, piece.indexInParent);
                }
            }
            function isFinished() {
                return currentPieceIndex < 0;
            }
            function currentNodeOrToken() {
                if (isFinished()) {
                    return undefined;
                }
                var result = pieces[currentPieceIndex].element;
                return result;
            }
            function currentNode() {
                var element = currentNodeOrToken();
                return TypeScript.isNode(element) ? element : undefined;
            }
            function isEmptyList(element) {
                return TypeScript.isList(element) && element.length === 0;
            }
            function moveToFirstChild() {
                var nodeOrToken = currentNodeOrToken();
                if (nodeOrToken === undefined) {
                    return;
                }
                if (TypeScript.isToken(nodeOrToken)) {
                    return;
                }
                for (var i = 0, n = TypeScript.childCount(nodeOrToken); i < n; i++) {
                    var child = TypeScript.childAt(nodeOrToken, i);
                    if (child && !isEmptyList(child)) {
                        pushElement(child, i);
                        moveToFirstChildIfList();
                        return;
                    }
                }
                moveToNextSibling();
            }
            function moveToNextSibling() {
                while (!isFinished()) {
                    var currentPiece = pieces[currentPieceIndex];
                    var parent = currentPiece.element.parent;
                    for (var i = currentPiece.indexInParent + 1, n = TypeScript.childCount(parent); i < n; i++) {
                        var sibling = TypeScript.childAt(parent, i);
                        if (sibling && !isEmptyList(sibling)) {
                            currentPiece.element = sibling;
                            currentPiece.indexInParent = i;
                            moveToFirstChildIfList();
                            return;
                        }
                    }
                    currentPiece.element = undefined;
                    currentPiece.indexInParent = -1;
                    currentPieceIndex--;
                }
            }
            function moveToFirstChildIfList() {
                var element = pieces[currentPieceIndex].element;
                if (TypeScript.isList(element)) {
                    pushElement(TypeScript.childAt(element, 0), 0);
                }
            }
            function pushElement(element, indexInParent) {
                currentPieceIndex++;
                if (currentPieceIndex === pieces.length) {
                    pieces.push(createSyntaxCursorPiece(element, indexInParent));
                }
                else {
                    var piece = pieces[currentPieceIndex];
                    piece.element = element;
                    piece.indexInParent = indexInParent;
                }
            }
            function moveToFirstToken() {
                while (!isFinished()) {
                    var element = pieces[currentPieceIndex].element;
                    if (TypeScript.isNode(element)) {
                        moveToFirstChild();
                        continue;
                    }
                    return;
                }
            }
            function currentToken() {
                moveToFirstToken();
                var element = currentNodeOrToken();
                return element;
            }
            return {
                pieces: pieces,
                clean: clean,
                isFinished: isFinished,
                moveToFirstChild: moveToFirstChild,
                moveToFirstToken: moveToFirstToken,
                moveToNextSibling: moveToNextSibling,
                currentNodeOrToken: currentNodeOrToken,
                currentNode: currentNode,
                currentToken: currentToken,
                pushElement: pushElement,
                deepCopyFrom: deepCopyFrom
            };
        }
    })(IncrementalParser = TypeScript.IncrementalParser || (TypeScript.IncrementalParser = {}));
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var IncrementalParser;
    (function (IncrementalParser) {
        function createParserSource(oldSyntaxTree, textChangeRange, text) {
            var scannerParserSource = TypeScript.Scanner.createParserSource(oldSyntaxTree.fileName(), text, oldSyntaxTree.languageVersion());
            var oldSourceUnit = oldSyntaxTree.sourceUnit();
            var oldSourceUnitCursor = IncrementalParser.getSyntaxCursor();
            if (oldSourceUnit.moduleElements.length > 0) {
                oldSourceUnitCursor.pushElement(TypeScript.childAt(oldSourceUnit.moduleElements, 0), 0);
            }
            var changeRange = extendToAffectedRange(textChangeRange, oldSourceUnit);
            if (TypeScript.Debug.shouldAssert(2 /* Aggressive */)) {
                TypeScript.Debug.assert((TypeScript.fullWidth(oldSourceUnit) - changeRange.span().length() + changeRange.newLength()) === text.length());
            }
            var delta = changeRange.newSpan().length() - changeRange.span().length();
            updateTokenPositionsAndMarkElements(oldSourceUnit, changeRange.span().start(), changeRange.span().end(), delta, 0);
            function extendToAffectedRange(changeRange, sourceUnit) {
                var maxLookahead = 1;
                var start = changeRange.span().start();
                for (var i = 0; start > 0 && i <= maxLookahead; i++) {
                    var token = TypeScript.findToken(sourceUnit, start);
                    var position = token.fullStart();
                    start = Math.max(0, position - 1);
                }
                var finalSpan = TypeScript.TextSpan.fromBounds(start, changeRange.span().end());
                var finalLength = changeRange.newLength() + (changeRange.span().start() - start);
                return new TypeScript.TextChangeRange(finalSpan, finalLength);
            }
            function absolutePosition() {
                return scannerParserSource.absolutePosition();
            }
            function tryParse(callback) {
                var savedOldSourceUnitCursor = IncrementalParser.cloneSyntaxCursor(oldSourceUnitCursor);
                var result = scannerParserSource.tryParse(callback);
                if (!result) {
                    IncrementalParser.returnSyntaxCursor(oldSourceUnitCursor);
                    oldSourceUnitCursor = savedOldSourceUnitCursor;
                }
                else {
                    IncrementalParser.returnSyntaxCursor(savedOldSourceUnitCursor);
                }
                return result;
            }
            function trySynchronizeCursorToPosition() {
                var absolutePos = absolutePosition();
                while (true) {
                    if (oldSourceUnitCursor.isFinished()) {
                        return false;
                    }
                    var currentNodeOrToken = oldSourceUnitCursor.currentNodeOrToken();
                    if (currentNodeOrToken.intersectsChange) {
                        if (TypeScript.isNode(currentNodeOrToken)) {
                            oldSourceUnitCursor.moveToFirstChild();
                        }
                        else {
                            oldSourceUnitCursor.moveToNextSibling();
                        }
                        continue;
                    }
                    var currentNodeOrTokenFullStart = TypeScript.fullStart(currentNodeOrToken);
                    if (currentNodeOrTokenFullStart === absolutePos) {
                        return true;
                    }
                    if (currentNodeOrTokenFullStart > absolutePos) {
                        return false;
                    }
                    var currentNodeOrTokenFullWidth = TypeScript.fullWidth(currentNodeOrToken);
                    var currentNodeOrTokenFullEnd = currentNodeOrTokenFullStart + currentNodeOrTokenFullWidth;
                    if (currentNodeOrTokenFullEnd <= absolutePos || TypeScript.isToken(currentNodeOrToken)) {
                        oldSourceUnitCursor.moveToNextSibling();
                    }
                    else {
                        oldSourceUnitCursor.moveToFirstChild();
                    }
                }
            }
            function currentNode() {
                if (trySynchronizeCursorToPosition()) {
                    var node = tryGetNodeFromOldSourceUnit();
                    if (node) {
                        return node;
                    }
                }
                return undefined;
            }
            function currentToken() {
                if (trySynchronizeCursorToPosition()) {
                    var token = tryGetTokenFromOldSourceUnit();
                    if (token) {
                        return token;
                    }
                }
                return scannerParserSource.currentToken();
            }
            function tryGetNodeFromOldSourceUnit() {
                while (true) {
                    var node = oldSourceUnitCursor.currentNode();
                    if (node === undefined) {
                        return undefined;
                    }
                    if (!TypeScript.isIncrementallyUnusable(node)) {
                        return node;
                    }
                    oldSourceUnitCursor.moveToFirstChild();
                }
            }
            function canReuseTokenFromOldSourceUnit(token) {
                return token && !token.intersectsChange && !token.isIncrementallyUnusable() && !TypeScript.Scanner.isContextualToken(token);
            }
            function tryGetTokenFromOldSourceUnit() {
                var token = oldSourceUnitCursor.currentToken();
                return canReuseTokenFromOldSourceUnit(token) ? token : undefined;
            }
            function peekToken(n) {
                if (trySynchronizeCursorToPosition()) {
                    var token = tryPeekTokenFromOldSourceUnit(n);
                    if (token) {
                        return token;
                    }
                }
                return scannerParserSource.peekToken(n);
            }
            function tryPeekTokenFromOldSourceUnit(n) {
                var cursorClone = IncrementalParser.cloneSyntaxCursor(oldSourceUnitCursor);
                var token = tryPeekTokenFromOldSourceUnitWorker(n);
                IncrementalParser.returnSyntaxCursor(oldSourceUnitCursor);
                oldSourceUnitCursor = cursorClone;
                return token;
            }
            function tryPeekTokenFromOldSourceUnitWorker(n) {
                oldSourceUnitCursor.moveToFirstToken();
                for (var i = 0; i < n; i++) {
                    var interimToken = oldSourceUnitCursor.currentToken();
                    if (!canReuseTokenFromOldSourceUnit(interimToken)) {
                        return undefined;
                    }
                    oldSourceUnitCursor.moveToNextSibling();
                }
                var token = oldSourceUnitCursor.currentToken();
                return canReuseTokenFromOldSourceUnit(token) ? token : undefined;
            }
            var currentContextualToken = scannerParserSource.currentContextualToken;
            var consumeNodeOrToken = scannerParserSource.consumeNodeOrToken;
            var diagnostics = scannerParserSource.diagnostics;
            var fileName = oldSyntaxTree.fileName();
            var languageVersion = oldSyntaxTree.languageVersion();
            return { fileName: fileName, languageVersion: languageVersion, text: text, absolutePosition: absolutePosition, currentNode: currentNode, currentToken: currentToken, peekToken: peekToken, tryParse: tryParse, currentContextualToken: currentContextualToken, consumeNodeOrToken: consumeNodeOrToken, diagnostics: diagnostics };
        }
        function updateTokenPositionsAndMarkElements(element, changeStart, changeRangeOldEnd, delta, fullStart) {
            if (fullStart > changeRangeOldEnd) {
                forceUpdateTokenPositionsForElement(element, delta);
            }
            else {
                var fullEnd = fullStart + TypeScript.fullWidth(element);
                if (fullEnd >= changeStart) {
                    element.intersectsChange = true;
                    if (TypeScript.isList(element)) {
                        var list = element;
                        for (var i = 0, n = list.length; i < n; i++) {
                            var child = list[i];
                            updateTokenPositionsAndMarkElements(child, changeStart, changeRangeOldEnd, delta, fullStart);
                            fullStart += TypeScript.fullWidth(child);
                        }
                    }
                    else if (TypeScript.isNode(element)) {
                        var node = element;
                        for (var i = 0, n = node.childCount; i < n; i++) {
                            var child = node.childAt(i);
                            if (child) {
                                updateTokenPositionsAndMarkElements(child, changeStart, changeRangeOldEnd, delta, fullStart);
                                fullStart += TypeScript.fullWidth(child);
                            }
                        }
                    }
                }
            }
        }
        function forceUpdateTokenPositionsForElement(element, delta) {
            if (delta !== 0) {
                if (TypeScript.isList(element)) {
                    var list = element;
                    for (var i = 0, n = list.length; i < n; i++) {
                        forceUpdateTokenPositionForNodeOrToken(list[i], delta);
                    }
                }
                else {
                    forceUpdateTokenPositionForNodeOrToken(element, delta);
                }
            }
        }
        function forceUpdateTokenPosition(token, delta) {
            token.setFullStart(token.fullStart() + delta);
        }
        function forceUpdateTokenPositionForNodeOrToken(nodeOrToken, delta) {
            if (TypeScript.isToken(nodeOrToken)) {
                forceUpdateTokenPosition(nodeOrToken, delta);
            }
            else {
                var tokens = TypeScript.getTokens(nodeOrToken);
                for (var i = 0, n = tokens.length; i < n; i++) {
                    forceUpdateTokenPosition(tokens[i], delta);
                }
            }
        }
        function parse(oldSyntaxTree, textChangeRange, newText) {
            if (textChangeRange.isUnchanged()) {
                return oldSyntaxTree;
            }
            return TypeScript.Parser.parseSource(createParserSource(oldSyntaxTree, textChangeRange, newText), oldSyntaxTree.isDeclaration());
        }
        IncrementalParser.parse = parse;
    })(IncrementalParser = TypeScript.IncrementalParser || (TypeScript.IncrementalParser = {}));
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    var PrettyPrinter;
    (function (PrettyPrinter) {
        function prettyPrint(node, indentWhitespace) {
            if (indentWhitespace === void 0) { indentWhitespace = "    "; }
            var impl = new PrettyPrinterImpl(indentWhitespace);
            TypeScript.visitNodeOrToken(impl, node);
            return impl.result.join("");
        }
        PrettyPrinter.prettyPrint = prettyPrint;
        var PrettyPrinterImpl = (function () {
            function PrettyPrinterImpl(indentWhitespace) {
                this.indentWhitespace = indentWhitespace;
                this.result = [];
                this.indentations = [];
                this.indentation = 0;
            }
            PrettyPrinterImpl.prototype.newLineCountBetweenModuleElements = function (element1, element2) {
                if (!element1 || !element2) {
                    return 0;
                }
                if (TypeScript.lastToken(element1).kind === 76 /* CloseBraceToken */) {
                    return 2;
                }
                return 1;
            };
            PrettyPrinterImpl.prototype.newLineCountBetweenClassElements = function (element1, element2) {
                if (!element1 || !element2) {
                    return 0;
                }
                return 1;
            };
            PrettyPrinterImpl.prototype.newLineCountBetweenStatements = function (element1, element2) {
                if (!element1 || !element2) {
                    return 0;
                }
                if (TypeScript.lastToken(element1).kind === 76 /* CloseBraceToken */) {
                    return 2;
                }
                return 1;
            };
            PrettyPrinterImpl.prototype.newLineCountBetweenSwitchClauses = function (element1, element2) {
                if (!element1 || !element2) {
                    return 0;
                }
                if (TypeScript.childCount(element1.statements) === 0) {
                    return 1;
                }
                return 2;
            };
            PrettyPrinterImpl.prototype.ensureSpace = function () {
                if (this.result.length > 0) {
                    var last = TypeScript.ArrayUtilities.last(this.result);
                    if (last !== " " && last !== "\r\n") {
                        this.appendText(" ");
                    }
                }
            };
            PrettyPrinterImpl.prototype.ensureNewLine = function () {
                if (this.result.length > 0) {
                    var last = TypeScript.ArrayUtilities.last(this.result);
                    if (last !== "\r\n") {
                        this.appendText("\r\n");
                    }
                }
            };
            PrettyPrinterImpl.prototype.appendNewLines = function (count) {
                for (var i = 0; i < count; i++) {
                    this.appendText("\r\n");
                }
            };
            PrettyPrinterImpl.prototype.getIndentation = function (count) {
                for (var i = this.indentations.length; i <= count; i++) {
                    var text = i === 0 ? "" : this.indentations[i - 1] + this.indentWhitespace;
                    this.indentations[i] = text;
                }
                return this.indentations[count];
            };
            PrettyPrinterImpl.prototype.appendIndentationIfAfterNewLine = function () {
                if (this.result.length > 0) {
                    if (TypeScript.ArrayUtilities.last(this.result) === "\r\n") {
                        this.result.push(this.getIndentation(this.indentation));
                    }
                }
            };
            PrettyPrinterImpl.prototype.appendText = function (text) {
                this.result.push(text);
            };
            PrettyPrinterImpl.prototype.appendElement = function (element) {
                if (TypeScript.isToken(element)) {
                    this.appendToken(element);
                }
                else if (TypeScript.isNode(element)) {
                    this.appendNode(element);
                }
            };
            PrettyPrinterImpl.prototype.appendNode = function (node) {
                TypeScript.visitNodeOrToken(this, node);
            };
            PrettyPrinterImpl.prototype.appendToken = function (token) {
                if (token && token.fullWidth() > 0) {
                    this.appendIndentationIfAfterNewLine();
                    this.appendText(token.text());
                }
            };
            PrettyPrinterImpl.prototype.visitToken = function (token) {
                this.appendToken(token);
            };
            PrettyPrinterImpl.prototype.appendSpaceList = function (list) {
                for (var i = 0, n = TypeScript.childCount(list); i < n; i++) {
                    if (TypeScript.isNode(TypeScript.childAt(list, i))) {
                        this.appendNode(TypeScript.childAt(list, i));
                    }
                    else {
                        this.appendToken(TypeScript.childAt(list, i));
                    }
                    this.ensureSpace();
                }
            };
            PrettyPrinterImpl.prototype.appendSeparatorSpaceList = function (list) {
                for (var i = 0, n = TypeScript.childCount(list); i < n; i++) {
                    if (i % 2 === 0) {
                        if (i > 0) {
                            this.ensureSpace();
                        }
                        TypeScript.visitNodeOrToken(this, list[i]);
                    }
                    else {
                        this.appendToken(TypeScript.childAt(list, i));
                    }
                }
            };
            PrettyPrinterImpl.prototype.appendSeparatorNewLineList = function (list) {
                for (var i = 0, n = TypeScript.childCount(list); i < n; i++) {
                    if (i % 2 === 0) {
                        if (i > 0) {
                            this.ensureNewLine();
                        }
                        TypeScript.visitNodeOrToken(this, list[i]);
                    }
                    else {
                        this.appendToken(TypeScript.childAt(list, i));
                    }
                }
            };
            PrettyPrinterImpl.prototype.appendModuleElements = function (list) {
                var lastModuleElement = undefined;
                for (var i = 0, n = list.length; i < n; i++) {
                    var moduleElement = list[i];
                    var newLineCount = this.newLineCountBetweenModuleElements(lastModuleElement, moduleElement);
                    this.appendNewLines(newLineCount);
                    TypeScript.visitNodeOrToken(this, moduleElement);
                    lastModuleElement = moduleElement;
                }
            };
            PrettyPrinterImpl.prototype.visitSourceUnit = function (node) {
                this.appendModuleElements(node.moduleElements);
            };
            PrettyPrinterImpl.prototype.visitExternalModuleReference = function (node) {
                this.appendToken(node.requireKeyword);
                this.appendToken(node.openParenToken);
                TypeScript.visitNodeOrToken(this, node.expression);
                this.appendToken(node.closeParenToken);
            };
            PrettyPrinterImpl.prototype.visitModuleNameModuleReference = function (node) {
                TypeScript.visitNodeOrToken(this, node.moduleName);
            };
            PrettyPrinterImpl.prototype.visitImportDeclaration = function (node) {
                this.appendToken(node.importKeyword);
                this.ensureSpace();
                this.appendToken(node.identifier);
                this.ensureSpace();
                this.appendToken(node.equalsToken);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.moduleReference);
                this.appendToken(node.semicolonToken);
            };
            PrettyPrinterImpl.prototype.visitExportAssignment = function (node) {
                this.appendToken(node.exportKeyword);
                this.ensureSpace();
                this.appendToken(node.equalsToken);
                this.ensureSpace();
                this.appendToken(node.identifier);
                this.appendToken(node.semicolonToken);
            };
            PrettyPrinterImpl.prototype.visitClassDeclaration = function (node) {
                this.appendSpaceList(node.modifiers);
                this.ensureSpace();
                this.appendToken(node.classKeyword);
                this.ensureSpace();
                this.appendToken(node.identifier);
                this.appendNode(node.typeParameterList);
                this.ensureSpace();
                this.appendSpaceList(node.heritageClauses);
                this.ensureSpace();
                this.appendToken(node.openBraceToken);
                this.ensureNewLine();
                this.indentation++;
                var lastClassElement = undefined;
                for (var i = 0, n = node.classElements.length; i < n; i++) {
                    var classElement = node.classElements[i];
                    var newLineCount = this.newLineCountBetweenClassElements(lastClassElement, classElement);
                    this.appendNewLines(newLineCount);
                    TypeScript.visitNodeOrToken(this, classElement);
                    lastClassElement = classElement;
                }
                this.indentation--;
                this.ensureNewLine();
                this.appendToken(node.closeBraceToken);
            };
            PrettyPrinterImpl.prototype.visitInterfaceDeclaration = function (node) {
                this.appendSpaceList(node.modifiers);
                this.ensureSpace();
                this.appendToken(node.interfaceKeyword);
                this.ensureSpace();
                this.appendToken(node.identifier);
                this.appendNode(node.typeParameterList);
                this.ensureSpace();
                this.appendSpaceList(node.heritageClauses);
                this.ensureSpace();
                this.appendObjectType(node.body, true);
            };
            PrettyPrinterImpl.prototype.visitTypeAlias = function (node) {
                this.appendSpaceList(node.modifiers);
                this.ensureSpace();
                this.appendToken(node.typeKeyword);
                this.ensureSpace();
                this.appendToken(node.identifier);
                this.ensureSpace();
                this.appendToken(node.equalsToken);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.type);
                this.appendToken(node.semicolonToken);
            };
            PrettyPrinterImpl.prototype.appendObjectType = function (node, appendNewLines) {
                this.appendToken(node.openBraceToken);
                if (appendNewLines) {
                    this.ensureNewLine();
                    this.indentation++;
                }
                else {
                    this.ensureSpace();
                }
                for (var i = 0, n = TypeScript.childCount(node.typeMembers); i < n; i++) {
                    TypeScript.visitNodeOrToken(this, node.typeMembers[i]);
                    if (appendNewLines) {
                        this.ensureNewLine();
                    }
                    else {
                        this.ensureSpace();
                    }
                }
                this.indentation--;
                this.appendToken(node.closeBraceToken);
            };
            PrettyPrinterImpl.prototype.visitHeritageClause = function (node) {
                this.appendToken(node.extendsOrImplementsKeyword);
                this.ensureSpace();
                this.appendSeparatorSpaceList(node.typeNames);
            };
            PrettyPrinterImpl.prototype.visitModuleDeclaration = function (node) {
                this.appendSpaceList(node.modifiers);
                this.ensureSpace();
                this.appendToken(node.moduleKeyword);
                this.ensureSpace();
                this.appendElement(node.name);
                this.ensureSpace();
                this.appendToken(node.openBraceToken);
                this.ensureNewLine();
                this.indentation++;
                this.appendModuleElements(node.moduleElements);
                this.indentation--;
                this.appendToken(node.closeBraceToken);
            };
            PrettyPrinterImpl.prototype.appendBody = function (body) {
                if (body.kind === 153 /* Block */ || body.kind === 213 /* ExpressionBody */) {
                    this.ensureSpace();
                    TypeScript.visitNodeOrToken(this, body);
                }
                else {
                    this.appendToken(body);
                }
            };
            PrettyPrinterImpl.prototype.visitExpressionBody = function (node) {
                this.appendToken(node.equalsGreaterThanToken);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.expression);
            };
            PrettyPrinterImpl.prototype.visitFunctionDeclaration = function (node) {
                this.appendSpaceList(node.modifiers);
                this.ensureSpace();
                this.appendToken(node.functionKeyword);
                this.ensureSpace();
                this.appendToken(node.identifier);
                this.appendNode(node.callSignature);
                this.appendBody(node.body);
            };
            PrettyPrinterImpl.prototype.visitVariableStatement = function (node) {
                this.appendSpaceList(node.modifiers);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.variableDeclaration);
                this.appendToken(node.semicolonToken);
            };
            PrettyPrinterImpl.prototype.visitVariableDeclaration = function (node) {
                this.appendToken(node.varConstOrLetKeyword);
                this.ensureSpace();
                this.appendSeparatorSpaceList(node.variableDeclarators);
            };
            PrettyPrinterImpl.prototype.visitVariableDeclarator = function (node) {
                TypeScript.visitNodeOrToken(this, node.propertyName);
                this.appendNode(node.equalsValueClause);
            };
            PrettyPrinterImpl.prototype.visitEqualsValueClause = function (node) {
                this.ensureSpace();
                this.appendToken(node.equalsToken);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.value);
            };
            PrettyPrinterImpl.prototype.visitPrefixUnaryExpression = function (node) {
                this.appendToken(node.operatorToken);
                TypeScript.visitNodeOrToken(this, node.operand);
            };
            PrettyPrinterImpl.prototype.visitArrayLiteralExpression = function (node) {
                this.appendToken(node.openBracketToken);
                this.appendSeparatorSpaceList(node.expressions);
                this.appendToken(node.closeBracketToken);
            };
            PrettyPrinterImpl.prototype.visitOmittedExpression = function (node) {
            };
            PrettyPrinterImpl.prototype.visitParenthesizedExpression = function (node) {
                this.appendToken(node.openParenToken);
                TypeScript.visitNodeOrToken(this, node.expression);
                this.appendToken(node.closeParenToken);
            };
            PrettyPrinterImpl.prototype.visitSimpleArrowFunctionExpression = function (node) {
                this.appendNode(node.parameter);
                this.ensureSpace();
                this.appendToken(node.equalsGreaterThanToken);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.body);
            };
            PrettyPrinterImpl.prototype.visitParenthesizedArrowFunctionExpression = function (node) {
                TypeScript.visitNodeOrToken(this, node.callSignature);
                this.ensureSpace();
                this.appendToken(node.equalsGreaterThanToken);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.body);
            };
            PrettyPrinterImpl.prototype.visitQualifiedName = function (node) {
                TypeScript.visitNodeOrToken(this, node.left);
                this.appendToken(node.dotToken);
                this.appendToken(node.right);
            };
            PrettyPrinterImpl.prototype.visitTypeQuery = function (node) {
                this.appendToken(node.typeOfKeyword);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.name);
            };
            PrettyPrinterImpl.prototype.visitTypeArgumentList = function (node) {
                this.appendToken(node.lessThanToken);
                this.appendSeparatorSpaceList(node.typeArguments);
                this.appendToken(node.greaterThanToken);
            };
            PrettyPrinterImpl.prototype.visitTupleType = function (node) {
                this.appendToken(node.openBracketToken);
                this.appendSeparatorSpaceList(node.types);
                this.appendToken(node.closeBracketToken);
            };
            PrettyPrinterImpl.prototype.visitParenthesizedType = function (node) {
                this.appendToken(node.openParenToken);
                this.appendElement(node.type);
                this.appendToken(node.closeParenToken);
            };
            PrettyPrinterImpl.prototype.visitUnionType = function (node) {
                this.appendElement(node.left);
                this.ensureSpace();
                this.appendToken(node.barToken);
                this.ensureSpace();
                this.appendElement(node.right);
            };
            PrettyPrinterImpl.prototype.visitConstructorType = function (node) {
                this.appendToken(node.newKeyword);
                this.ensureSpace();
                this.appendNode(node.typeParameterList);
                TypeScript.visitNodeOrToken(this, node.parameterList);
                this.ensureSpace();
                this.appendToken(node.equalsGreaterThanToken);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.type);
            };
            PrettyPrinterImpl.prototype.visitFunctionType = function (node) {
                this.appendNode(node.typeParameterList);
                TypeScript.visitNodeOrToken(this, node.parameterList);
                this.ensureSpace();
                this.appendToken(node.equalsGreaterThanToken);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.type);
            };
            PrettyPrinterImpl.prototype.visitObjectType = function (node) {
                this.appendToken(node.openBraceToken);
                this.ensureSpace();
                this.appendSeparatorSpaceList(node.typeMembers);
                this.appendToken(node.closeBraceToken);
            };
            PrettyPrinterImpl.prototype.visitArrayType = function (node) {
                TypeScript.visitNodeOrToken(this, node.type);
                this.appendToken(node.openBracketToken);
                this.appendToken(node.closeBracketToken);
            };
            PrettyPrinterImpl.prototype.visitGenericType = function (node) {
                TypeScript.visitNodeOrToken(this, node.name);
                TypeScript.visitNodeOrToken(this, node.typeArgumentList);
            };
            PrettyPrinterImpl.prototype.visitTypeAnnotation = function (node) {
                this.appendToken(node.colonToken);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.type);
            };
            PrettyPrinterImpl.prototype.appendStatements = function (statements) {
                var lastStatement = undefined;
                for (var i = 0, n = statements.length; i < n; i++) {
                    var statement = statements[i];
                    var newLineCount = this.newLineCountBetweenStatements(lastStatement, statement);
                    this.appendNewLines(newLineCount);
                    TypeScript.visitNodeOrToken(this, statement);
                    lastStatement = statement;
                }
            };
            PrettyPrinterImpl.prototype.visitBlock = function (node) {
                this.appendToken(node.openBraceToken);
                this.ensureNewLine();
                this.indentation++;
                this.appendStatements(node.statements);
                this.indentation--;
                this.ensureNewLine();
                this.appendToken(node.closeBraceToken);
            };
            PrettyPrinterImpl.prototype.visitParameter = function (node) {
                this.appendToken(node.dotDotDotToken);
                this.appendSpaceList(node.modifiers);
                this.appendToken(node.identifier);
                this.appendToken(node.questionToken);
                this.appendNode(node.typeAnnotation);
                this.appendNode(node.equalsValueClause);
            };
            PrettyPrinterImpl.prototype.visitPropertyAccessExpression = function (node) {
                TypeScript.visitNodeOrToken(this, node.expression);
                this.appendToken(node.dotToken);
                this.appendToken(node.name);
            };
            PrettyPrinterImpl.prototype.visitPostfixUnaryExpression = function (node) {
                TypeScript.visitNodeOrToken(this, node.operand);
                this.appendToken(node.operatorToken);
            };
            PrettyPrinterImpl.prototype.visitElementAccessExpression = function (node) {
                TypeScript.visitNodeOrToken(this, node.expression);
                this.appendToken(node.openBracketToken);
                TypeScript.visitNodeOrToken(this, node.argumentExpression);
                this.appendToken(node.closeBracketToken);
            };
            PrettyPrinterImpl.prototype.visitInvocationExpression = function (node) {
                TypeScript.visitNodeOrToken(this, node.expression);
                TypeScript.visitNodeOrToken(this, node.argumentList);
            };
            PrettyPrinterImpl.prototype.visitArgumentList = function (node) {
                this.appendToken(node.openParenToken);
                this.appendSeparatorSpaceList(node.arguments);
                this.appendToken(node.closeParenToken);
            };
            PrettyPrinterImpl.prototype.visitBinaryExpression = function (node) {
                TypeScript.visitNodeOrToken(this, node.left);
                if (node.operatorToken.kind !== 84 /* CommaToken */) {
                    this.ensureSpace();
                }
                this.appendToken(node.operatorToken);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.right);
            };
            PrettyPrinterImpl.prototype.visitConditionalExpression = function (node) {
                TypeScript.visitNodeOrToken(this, node.condition);
                this.ensureSpace();
                this.appendToken(node.questionToken);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.whenTrue);
                this.ensureSpace();
                this.appendToken(node.colonToken);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.whenFalse);
            };
            PrettyPrinterImpl.prototype.visitConstructSignature = function (node) {
                this.appendToken(node.newKeyword);
                TypeScript.visitNodeOrToken(this, node.callSignature);
            };
            PrettyPrinterImpl.prototype.visitMethodSignature = function (node) {
                TypeScript.visitNodeOrToken(this, node.propertyName);
                this.appendToken(node.questionToken);
                TypeScript.visitNodeOrToken(this, node.callSignature);
            };
            PrettyPrinterImpl.prototype.visitIndexSignature = function (node) {
                this.appendSpaceList(node.modifiers);
                this.appendToken(node.openBracketToken);
                this.appendSeparatorSpaceList(node.parameters);
                this.appendToken(node.closeBracketToken);
                this.appendNode(node.typeAnnotation);
                this.appendToken(node.semicolonOrCommaToken);
            };
            PrettyPrinterImpl.prototype.visitPropertySignature = function (node) {
                TypeScript.visitNodeOrToken(this, node.propertyName);
                this.appendToken(node.questionToken);
                this.appendNode(node.typeAnnotation);
                this.appendToken(node.semicolonOrCommaToken);
            };
            PrettyPrinterImpl.prototype.visitParameterList = function (node) {
                this.appendToken(node.openParenToken);
                this.appendSeparatorSpaceList(node.parameters);
                this.appendToken(node.closeParenToken);
            };
            PrettyPrinterImpl.prototype.visitCallSignature = function (node) {
                this.appendNode(node.typeParameterList);
                TypeScript.visitNodeOrToken(this, node.parameterList);
                this.appendNode(node.typeAnnotation);
                this.appendToken(node.semicolonOrCommaToken);
            };
            PrettyPrinterImpl.prototype.visitTypeParameterList = function (node) {
                this.appendToken(node.lessThanToken);
                this.appendSeparatorSpaceList(node.typeParameters);
                this.appendToken(node.greaterThanToken);
            };
            PrettyPrinterImpl.prototype.visitTypeParameter = function (node) {
                this.appendToken(node.identifier);
                this.appendNode(node.constraint);
            };
            PrettyPrinterImpl.prototype.visitConstraint = function (node) {
                this.ensureSpace();
                this.appendToken(node.extendsKeyword);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.typeOrExpression);
            };
            PrettyPrinterImpl.prototype.appendBlockOrStatement = function (node) {
                if (node.kind === 153 /* Block */) {
                    this.ensureSpace();
                    TypeScript.visitNodeOrToken(this, node);
                }
                else {
                    this.ensureNewLine();
                    this.indentation++;
                    TypeScript.visitNodeOrToken(this, node);
                    this.indentation--;
                }
            };
            PrettyPrinterImpl.prototype.visitIfStatement = function (node) {
                this.appendToken(node.ifKeyword);
                this.ensureSpace();
                this.appendToken(node.openParenToken);
                TypeScript.visitNodeOrToken(this, node.condition);
                this.appendToken(node.closeParenToken);
                this.appendBlockOrStatement(node.statement);
                this.appendNode(node.elseClause);
            };
            PrettyPrinterImpl.prototype.visitElseClause = function (node) {
                this.ensureNewLine();
                this.appendToken(node.elseKeyword);
                if (node.statement.kind === 154 /* IfStatement */) {
                    this.ensureSpace();
                    TypeScript.visitNodeOrToken(this, node.statement);
                }
                else {
                    this.appendBlockOrStatement(node.statement);
                }
            };
            PrettyPrinterImpl.prototype.visitExpressionStatement = function (node) {
                TypeScript.visitNodeOrToken(this, node.expression);
                this.appendToken(node.semicolonToken);
            };
            PrettyPrinterImpl.prototype.visitConstructorDeclaration = function (node) {
                this.appendToken(node.constructorKeyword);
                TypeScript.visitNodeOrToken(this, node.callSignature);
                this.appendBody(node.body);
            };
            PrettyPrinterImpl.prototype.visitMethodDeclaration = function (node) {
                this.appendSpaceList(node.modifiers);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.propertyName);
                TypeScript.visitNodeOrToken(this, node.callSignature);
                this.appendBody(node.body);
            };
            PrettyPrinterImpl.prototype.visitGetAccessor = function (node) {
                this.appendSpaceList(node.modifiers);
                this.ensureSpace();
                this.appendToken(node.getKeyword);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.propertyName);
                TypeScript.visitNodeOrToken(this, node.callSignature);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.body);
            };
            PrettyPrinterImpl.prototype.visitSetAccessor = function (node) {
                this.appendSpaceList(node.modifiers);
                this.ensureSpace();
                this.appendToken(node.setKeyword);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.propertyName);
                TypeScript.visitNodeOrToken(this, node.callSignature);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.body);
            };
            PrettyPrinterImpl.prototype.visitPropertyDeclaration = function (node) {
                this.appendSpaceList(node.modifiers);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.variableDeclarator);
                this.appendToken(node.semicolonToken);
            };
            PrettyPrinterImpl.prototype.visitThrowStatement = function (node) {
                this.appendToken(node.throwKeyword);
                if (node.expression) {
                    this.ensureSpace();
                    TypeScript.visitNodeOrToken(this, node.expression);
                }
                this.appendToken(node.semicolonToken);
            };
            PrettyPrinterImpl.prototype.visitReturnStatement = function (node) {
                this.appendToken(node.returnKeyword);
                if (node.expression) {
                    this.ensureSpace();
                    TypeScript.visitNodeOrToken(this, node.expression);
                }
                this.appendToken(node.semicolonToken);
            };
            PrettyPrinterImpl.prototype.visitObjectCreationExpression = function (node) {
                this.appendToken(node.newKeyword);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.expression);
                this.appendNode(node.argumentList);
            };
            PrettyPrinterImpl.prototype.visitSwitchStatement = function (node) {
                this.appendToken(node.switchKeyword);
                this.ensureSpace();
                this.appendToken(node.openParenToken);
                TypeScript.visitNodeOrToken(this, node.expression);
                this.appendToken(node.closeParenToken);
                this.ensureSpace();
                this.appendToken(node.openBraceToken);
                this.ensureNewLine();
                var lastSwitchClause = undefined;
                for (var i = 0, n = node.switchClauses.length; i < n; i++) {
                    var switchClause = node.switchClauses[i];
                    var newLineCount = this.newLineCountBetweenSwitchClauses(lastSwitchClause, switchClause);
                    this.appendNewLines(newLineCount);
                    TypeScript.visitNodeOrToken(this, switchClause);
                    lastSwitchClause = switchClause;
                }
                this.ensureNewLine();
                this.appendToken(node.closeBraceToken);
            };
            PrettyPrinterImpl.prototype.appendSwitchClauseStatements = function (node) {
                if (TypeScript.childCount(node.statements) === 1 && TypeScript.childAt(node.statements, 0).kind === 153 /* Block */) {
                    this.ensureSpace();
                    TypeScript.visitNodeOrToken(this, node.statements[0]);
                }
                else if (TypeScript.childCount(node.statements) > 0) {
                    this.ensureNewLine();
                    this.indentation++;
                    this.appendStatements(node.statements);
                    this.indentation--;
                }
            };
            PrettyPrinterImpl.prototype.visitCaseSwitchClause = function (node) {
                this.appendToken(node.caseKeyword);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.expression);
                this.appendToken(node.colonToken);
                this.appendSwitchClauseStatements(node);
            };
            PrettyPrinterImpl.prototype.visitDefaultSwitchClause = function (node) {
                this.appendToken(node.defaultKeyword);
                this.appendToken(node.colonToken);
                this.appendSwitchClauseStatements(node);
            };
            PrettyPrinterImpl.prototype.visitBreakStatement = function (node) {
                this.appendToken(node.breakKeyword);
                if (node.identifier) {
                    this.ensureSpace();
                    this.appendToken(node.identifier);
                }
                this.appendToken(node.semicolonToken);
            };
            PrettyPrinterImpl.prototype.visitContinueStatement = function (node) {
                this.appendToken(node.continueKeyword);
                if (node.identifier) {
                    this.ensureSpace();
                    this.appendToken(node.identifier);
                }
                this.appendToken(node.semicolonToken);
            };
            PrettyPrinterImpl.prototype.visitForStatement = function (node) {
                this.appendToken(node.forKeyword);
                this.ensureSpace();
                this.appendToken(node.openParenToken);
                TypeScript.visitNodeOrToken(this, node.initializer);
                this.appendToken(node.firstSemicolonToken);
                if (node.condition) {
                    this.ensureSpace();
                    TypeScript.visitNodeOrToken(this, node.condition);
                }
                this.appendToken(node.secondSemicolonToken);
                if (node.incrementor) {
                    this.ensureSpace();
                    TypeScript.visitNodeOrToken(this, node.incrementor);
                }
                this.appendToken(node.closeParenToken);
                this.appendBlockOrStatement(node.statement);
            };
            PrettyPrinterImpl.prototype.visitForInStatement = function (node) {
                this.appendToken(node.forKeyword);
                this.ensureSpace();
                this.appendToken(node.openParenToken);
                this.appendElement(node.left);
                this.ensureSpace();
                this.appendToken(node.inKeyword);
                this.ensureSpace();
                this.appendElement(node.right);
                this.appendToken(node.closeParenToken);
                this.appendBlockOrStatement(node.statement);
            };
            PrettyPrinterImpl.prototype.visitWhileStatement = function (node) {
                this.appendToken(node.whileKeyword);
                this.ensureSpace();
                this.appendToken(node.openParenToken);
                TypeScript.visitNodeOrToken(this, node.condition);
                this.appendToken(node.closeParenToken);
                this.appendBlockOrStatement(node.statement);
            };
            PrettyPrinterImpl.prototype.visitWithStatement = function (node) {
                this.appendToken(node.withKeyword);
                this.ensureSpace();
                this.appendToken(node.openParenToken);
                TypeScript.visitNodeOrToken(this, node.condition);
                this.appendToken(node.closeParenToken);
                this.appendBlockOrStatement(node.statement);
            };
            PrettyPrinterImpl.prototype.visitEnumDeclaration = function (node) {
                this.appendSpaceList(node.modifiers);
                this.ensureSpace();
                this.appendToken(node.enumKeyword);
                this.ensureSpace();
                this.appendToken(node.identifier);
                this.ensureSpace();
                this.appendToken(node.openBraceToken);
                this.ensureNewLine();
                this.indentation++;
                this.appendSeparatorNewLineList(node.enumElements);
                this.indentation--;
                this.appendToken(node.closeBraceToken);
            };
            PrettyPrinterImpl.prototype.visitEnumElement = function (node) {
                TypeScript.visitNodeOrToken(this, node.propertyName);
                this.ensureSpace();
                this.appendNode(node.equalsValueClause);
            };
            PrettyPrinterImpl.prototype.visitTypeAssertionExpression = function (node) {
                this.appendToken(node.lessThanToken);
                TypeScript.visitNodeOrToken(this, node.type);
                this.appendToken(node.greaterThanToken);
                TypeScript.visitNodeOrToken(this, node.expression);
            };
            PrettyPrinterImpl.prototype.visitObjectLiteralExpression = function (node) {
                this.appendToken(node.openBraceToken);
                if (TypeScript.childCount(node.propertyAssignments) === 1) {
                    this.ensureSpace();
                    TypeScript.visitNodeOrToken(this, TypeScript.childAt(node.propertyAssignments, 0));
                    this.ensureSpace();
                }
                else if (TypeScript.childCount(node.propertyAssignments) > 0) {
                    this.indentation++;
                    this.ensureNewLine();
                    this.appendSeparatorNewLineList(node.propertyAssignments);
                    this.ensureNewLine();
                    this.indentation--;
                }
                this.appendToken(node.closeBraceToken);
            };
            PrettyPrinterImpl.prototype.visitComputedPropertyName = function (node) {
                this.appendToken(node.openBracketToken);
                TypeScript.visitNodeOrToken(this, node.expression);
                this.appendToken(node.closeBracketToken);
            };
            PrettyPrinterImpl.prototype.visitPropertyAssignment = function (node) {
                TypeScript.visitNodeOrToken(this, node.propertyName);
                this.appendToken(node.colonToken);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.expression);
            };
            PrettyPrinterImpl.prototype.visitFunctionExpression = function (node) {
                this.appendToken(node.functionKeyword);
                if (node.identifier) {
                    this.ensureSpace();
                    this.appendToken(node.identifier);
                }
                TypeScript.visitNodeOrToken(this, node.callSignature);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.body);
            };
            PrettyPrinterImpl.prototype.visitEmptyStatement = function (node) {
                this.appendToken(node.semicolonToken);
            };
            PrettyPrinterImpl.prototype.visitTryStatement = function (node) {
                this.appendToken(node.tryKeyword);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.block);
                this.appendNode(node.catchClause);
                this.appendNode(node.finallyClause);
            };
            PrettyPrinterImpl.prototype.visitCatchClause = function (node) {
                this.ensureNewLine();
                this.appendToken(node.catchKeyword);
                this.ensureSpace();
                this.appendToken(node.openParenToken);
                this.appendToken(node.identifier);
                this.appendToken(node.closeParenToken);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.block);
            };
            PrettyPrinterImpl.prototype.visitFinallyClause = function (node) {
                this.ensureNewLine();
                this.appendToken(node.finallyKeyword);
                this.ensureNewLine();
                TypeScript.visitNodeOrToken(this, node.block);
            };
            PrettyPrinterImpl.prototype.visitLabeledStatement = function (node) {
                this.appendToken(node.identifier);
                this.appendToken(node.colonToken);
                this.appendBlockOrStatement(node.statement);
            };
            PrettyPrinterImpl.prototype.visitDoStatement = function (node) {
                this.appendToken(node.doKeyword);
                this.appendBlockOrStatement(node.statement);
                this.ensureNewLine();
                this.appendToken(node.whileKeyword);
                this.ensureSpace();
                this.appendToken(node.openParenToken);
                TypeScript.visitNodeOrToken(this, node.condition);
                this.appendToken(node.closeParenToken);
                this.appendToken(node.semicolonToken);
            };
            PrettyPrinterImpl.prototype.visitTypeOfExpression = function (node) {
                this.appendToken(node.typeOfKeyword);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.expression);
            };
            PrettyPrinterImpl.prototype.visitDeleteExpression = function (node) {
                this.appendToken(node.deleteKeyword);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.expression);
            };
            PrettyPrinterImpl.prototype.visitVoidExpression = function (node) {
                this.appendToken(node.voidKeyword);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.expression);
            };
            PrettyPrinterImpl.prototype.visitYieldExpression = function (node) {
                this.appendToken(node.yieldKeyword);
                this.ensureSpace();
                this.appendToken(node.asterixToken);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.expression);
            };
            PrettyPrinterImpl.prototype.visitAwaitExpression = function (node) {
                this.appendToken(node.awaitKeyword);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.expression);
            };
            PrettyPrinterImpl.prototype.visitDebuggerStatement = function (node) {
                this.appendToken(node.debuggerKeyword);
                this.appendToken(node.semicolonToken);
            };
            PrettyPrinterImpl.prototype.visitTemplateExpression = function (node) {
                this.appendToken(node.templateStartToken);
                this.ensureSpace();
                this.appendSpaceList(node.templateClauses);
            };
            PrettyPrinterImpl.prototype.visitTemplateClause = function (node) {
                TypeScript.visitNodeOrToken(this, node.expression);
                this.ensureSpace();
                this.appendToken(node.templateMiddleOrEndToken);
            };
            PrettyPrinterImpl.prototype.visitTemplateAccessExpression = function (node) {
                TypeScript.visitNodeOrToken(this, node.expression);
                this.ensureSpace();
                TypeScript.visitNodeOrToken(this, node.templateExpression);
            };
            return PrettyPrinterImpl;
        })();
    })(PrettyPrinter = TypeScript.PrettyPrinter || (TypeScript.PrettyPrinter = {}));
})(TypeScript || (TypeScript = {}));
var negative262ExpectedResults = {
    'Sbp_12.5_A9_T3.js': false,
    'Sbp_12.6.1_A13_T3.js': false,
    'Sbp_12.6.2_A13_T3.js': false,
    'Sbp_12.6.4_A13_T3.js': false,
    'Sbp_7.8.4_A6.1_T4.js': false,
    'Sbp_7.8.4_A6.2_T1.js': false,
    'Sbp_7.8.4_A6.2_T2.js': false,
    'Sbp_A1_T1.js': true,
    'Sbp_A2_T1.js': true,
    'Sbp_A2_T2.js': true,
    'Sbp_A3_T1.js': true,
    'Sbp_A3_T2.js': true,
    'Sbp_A4_T1.js': true,
    'Sbp_A4_T2.js': true,
    'Sbp_A5_T1.js': true,
    'Sbp_A5_T2.js': true,
    'S7.2_A5_T1.js': false,
    'S7.2_A5_T2.js': false,
    'S7.2_A5_T3.js': false,
    'S7.2_A5_T4.js': false,
    'S7.2_A5_T5.js': false,
    'S7.3_A2.1_T1.js': true,
    'S7.3_A2.1_T2.js': false,
    'S7.3_A2.2_T1.js': true,
    'S7.3_A2.2_T2.js': false,
    'S7.3_A2.3.js': true,
    'S7.3_A2.4.js': true,
    'S7.3_A3.1_T1.js': true,
    'S7.3_A3.1_T2.js': true,
    'S7.3_A3.1_T3.js': false,
    'S7.3_A3.2_T1.js': true,
    'S7.3_A3.2_T2.js': true,
    'S7.3_A3.2_T3.js': false,
    'S7.3_A3.3_T1.js': true,
    'S7.3_A3.3_T2.js': true,
    'S7.3_A3.4_T1.js': true,
    'S7.3_A3.4_T2.js': true,
    'S7.3_A6_T1.js': false,
    'S7.3_A6_T2.js': false,
    'S7.3_A6_T3.js': false,
    'S7.3_A6_T4.js': false,
    'S7.4_A2_T2.js': false,
    'S7.4_A3.js': false,
    'S7.4_A4_T1.js': false,
    'S7.4_A4_T4.js': false,
    'S7.6.1.1_A1.1.js': false,
    'S7.6.1.1_A1.10.js': false,
    'S7.6.1.1_A1.11.js': false,
    'S7.6.1.1_A1.12.js': false,
    'S7.6.1.1_A1.13.js': false,
    'S7.6.1.1_A1.14.js': false,
    'S7.6.1.1_A1.15.js': false,
    'S7.6.1.1_A1.16.js': false,
    'S7.6.1.1_A1.17.js': false,
    'S7.6.1.1_A1.18.js': true,
    'S7.6.1.1_A1.19.js': false,
    'S7.6.1.1_A1.2.js': false,
    'S7.6.1.1_A1.20.js': false,
    'S7.6.1.1_A1.21.js': false,
    'S7.6.1.1_A1.22.js': false,
    'S7.6.1.1_A1.23.js': false,
    'S7.6.1.1_A1.24.js': false,
    'S7.6.1.1_A1.25.js': false,
    'S7.6.1.1_A1.3.js': false,
    'S7.6.1.1_A1.4.js': false,
    'S7.6.1.1_A1.5.js': false,
    'S7.6.1.1_A1.6.js': false,
    'S7.6.1.1_A1.7.js': false,
    'S7.6.1.1_A1.8.js': false,
    'S7.6.1.1_A1.9.js': false,
    'S7.6.1.2_A1.10.js': false,
    'S7.6.1.2_A1.11.js': false,
    'S7.6.1.2_A1.15.js': false,
    'S7.6.1.2_A1.16.js': false,
    'S7.6.1.2_A1.18.js': false,
    'S7.6.1.2_A1.21.js': false,
    'S7.6.1.2_A1.22.js': false,
    'S7.6.1.2_A1.23.js': false,
    'S7.6.1.2_A1.24.js': false,
    'S7.6.1.2_A1.26.js': false,
    'S7.6.1.2_A1.27.js': false,
    'S7.6.1.2_A1.5.js': false,
    'S7.6.1.2_A1.6.js': false,
    'S7.6.1.2_A1.7.js': false,
    'S7.6.1.2_A1.9.js': false,
    '7.6.1.2-1gs.js': false,
    'S7.6.1_A1.1.js': true,
    'S7.6.1_A1.2.js': true,
    'S7.6.1_A1.3.js': true,
    'S7.7_A2_T1.js': false,
    'S7.7_A2_T10.js': false,
    'S7.7_A2_T2.js': false,
    'S7.7_A2_T3.js': false,
    'S7.7_A2_T4.js': false,
    'S7.7_A2_T5.js': false,
    'S7.7_A2_T6.js': false,
    'S7.7_A2_T7.js': false,
    'S7.7_A2_T8.js': false,
    'S7.7_A2_T9.js': false,
    '7.8.3-1gs.js': true,
    '7.8.3-2gs.js': true,
    '7.8.3-3gs.js': true,
    'S7.8.3_A4.1_T1.js': true,
    'S7.8.3_A4.1_T2.js': true,
    'S7.8.3_A4.1_T3.js': true,
    'S7.8.3_A4.1_T4.js': true,
    'S7.8.3_A4.1_T5.js': true,
    'S7.8.3_A4.1_T6.js': true,
    'S7.8.3_A4.1_T7.js': true,
    'S7.8.3_A4.1_T8.js': true,
    'S7.8.3_A6.1_T1.js': false,
    'S7.8.3_A6.1_T2.js': false,
    'S7.8.3_A6.2_T1.js': false,
    'S7.8.3_A6.2_T2.js': false,
    '7.8.4-1gs.js': true,
    'S7.8.4_A1.1_T1.js': false,
    'S7.8.4_A1.1_T2.js': false,
    'S7.8.4_A1.2_T1.js': false,
    'S7.8.4_A1.2_T2.js': false,
    'S7.8.4_A3.1_T1.js': false,
    'S7.8.4_A3.1_T2.js': false,
    'S7.8.4_A3.2_T1.js': false,
    'S7.8.4_A3.2_T2.js': false,
    'S7.8.4_A4.3_T1.js': true,
    'S7.8.4_A4.3_T2.js': true,
    'S7.8.4_A7.1_T4.js': false,
    'S7.8.4_A7.2_T1.js': false,
    'S7.8.4_A7.2_T2.js': false,
    'S7.8.4_A7.2_T3.js': false,
    'S7.8.4_A7.2_T4.js': false,
    'S7.8.4_A7.2_T5.js': false,
    'S7.8.4_A7.2_T6.js': false,
    '7.8.5-1gs.js': false,
    'S7.8.5_A1.2_T1.js': false,
    'S7.8.5_A1.2_T2.js': false,
    'S7.8.5_A1.2_T3.js': false,
    'S7.8.5_A1.2_T4.js': false,
    'S7.8.5_A1.3_T1.js': false,
    'S7.8.5_A1.3_T3.js': false,
    'S7.8.5_A1.5_T1.js': false,
    'S7.8.5_A1.5_T3.js': false,
    'S7.8.5_A2.2_T1.js': false,
    'S7.8.5_A2.2_T2.js': false,
    'S7.8.5_A2.3_T1.js': false,
    'S7.8.5_A2.3_T3.js': false,
    'S7.8.5_A2.5_T1.js': false,
    'S7.8.5_A2.5_T3.js': false,
    'S7.9.2_A1_T1.js': false,
    'S7.9.2_A1_T3.js': false,
    'S7.9.2_A1_T6.js': false,
    'S7.9_A10_T2.js': false,
    'S7.9_A10_T4.js': false,
    'S7.9_A10_T6.js': false,
    'S7.9_A10_T8.js': false,
    'S7.9_A11_T4.js': false,
    'S7.9_A11_T8.js': false,
    'S7.9_A4.js': false,
    'S7.9_A5.1_T1.js': false,
    'S7.9_A5.3_T1.js': false,
    'S7.9_A5.7_T1.js': true,
    'S7.9_A6.2_T1.js': false,
    'S7.9_A6.2_T10.js': false,
    'S7.9_A6.2_T2.js': false,
    'S7.9_A6.2_T3.js': false,
    'S7.9_A6.2_T4.js': false,
    'S7.9_A6.2_T5.js': false,
    'S7.9_A6.2_T6.js': false,
    'S7.9_A6.2_T7.js': false,
    'S7.9_A6.2_T8.js': false,
    'S7.9_A6.2_T9.js': false,
    'S7.9_A6.3_T1.js': false,
    'S7.9_A6.3_T2.js': false,
    'S7.9_A6.3_T3.js': false,
    'S7.9_A6.3_T4.js': false,
    'S7.9_A6.3_T5.js': false,
    'S7.9_A6.3_T6.js': false,
    'S7.9_A6.3_T7.js': false,
    'S7.9_A6.4_T1.js': false,
    'S7.9_A6.4_T2.js': false,
    'S7.9_A7_T7.js': true,
    'S7.9_A9_T6.js': false,
    'S7.9_A9_T7.js': false,
    'S7.9_A9_T8.js': false,
    'S8.2_A2.js': false,
    'S8.3_A2.1.js': true,
    'S8.3_A2.2.js': true,
    'S8.4_A13_T1.js': false,
    'S8.4_A13_T2.js': false,
    'S8.4_A13_T3.js': false,
    'S8.4_A14_T1.js': false,
    'S8.4_A14_T2.js': false,
    'S8.4_A14_T3.js': false,
    'S8.4_A7.1.js': true,
    'S8.4_A7.2.js': true,
    'S8.4_A7.3.js': true,
    'S8.4_A7.4.js': true,
    'S8.6.2_A7.js': true,
    '8.7.2-3-a-1gs.js': true,
    '8.7.2-3-a-2gs.js': true,
    'S8.7.2_A1_T1.js': true,
    'S8.7.2_A1_T2.js': true,
    '10.1.1-2gs.js': false,
    '10.1.1-5gs.js': false,
    '10.1.1-8gs.js': false,
    '10.4.2.1-1gs.js': true,
    '10.5-1gs.js': true,
    '10.6-2gs.js': true,
    'S11.1.1_A1.js': true,
    '11.1.5-1gs.js': true,
    '11.1.5-2gs.js': true,
    '11.13.1-4-28gs.js': true,
    '11.13.1-4-29gs.js': true,
    'S11.13.1_A2.1_T3.js': true,
    '11.13.2-6-1gs.js': true,
    'S11.13.2_A2.2_T1.js': true,
    'S11.13.2_A2.2_T10.js': true,
    'S11.13.2_A2.2_T11.js': true,
    'S11.13.2_A2.2_T2.js': true,
    'S11.13.2_A2.2_T3.js': true,
    'S11.13.2_A2.2_T4.js': true,
    'S11.13.2_A2.2_T5.js': true,
    'S11.13.2_A2.2_T6.js': true,
    'S11.13.2_A2.2_T7.js': true,
    'S11.13.2_A2.2_T8.js': true,
    'S11.13.2_A2.2_T9.js': true,
    'S11.2.4_A1.3_T1.js': false,
    '11.3.1-2-1gs.js': true,
    'S11.3.1_A1.1_T1.js': true,
    'S11.3.1_A1.1_T2.js': true,
    'S11.3.1_A1.1_T3.js': true,
    'S11.3.1_A1.1_T4.js': true,
    'S11.3.1_A2.1_T3.js': true,
    'S11.3.2_A1.1_T1.js': true,
    'S11.3.2_A1.1_T2.js': true,
    'S11.3.2_A1.1_T3.js': true,
    'S11.3.2_A1.1_T4.js': true,
    'S11.3.2_A2.1_T3.js': true,
    '11.4.1-5-a-5gs.js': true,
    'S11.4.2_A2_T2.js': true,
    'S11.4.4_A2.1_T3.js': true,
    '11.4.5-2-2gs.js': true,
    'S11.4.5_A2.1_T3.js': true,
    'S12.1_A4_T1.js': false,
    'S12.1_A4_T2.js': false,
    '12.10.1-11gs.js': true,
    'S12.11_A2_T1.js': true,
    'S12.11_A3_T1.js': false,
    'S12.11_A3_T2.js': false,
    'S12.11_A3_T3.js': false,
    'S12.11_A3_T4.js': false,
    'S12.11_A3_T5.js': false,
    'S12.13_A1.js': true,
    '12.14.1-1gs.js': true,
    'S12.14_A16_T1.js': false,
    'S12.14_A16_T10.js': false,
    'S12.14_A16_T11.js': false,
    'S12.14_A16_T12.js': false,
    'S12.14_A16_T13.js': false,
    'S12.14_A16_T14.js': false,
    'S12.14_A16_T15.js': false,
    'S12.14_A16_T2.js': false,
    'S12.14_A16_T3.js': false,
    'S12.14_A16_T4.js': false,
    'S12.14_A16_T5.js': false,
    'S12.14_A16_T6.js': false,
    'S12.14_A16_T7.js': false,
    'S12.14_A16_T8.js': false,
    'S12.14_A16_T9.js': false,
    '12.2.1-1gs.js': true,
    '12.2.1-4gs.js': true,
    'S12.2_A8_T1.js': false,
    'S12.2_A8_T2.js': false,
    'S12.2_A8_T3.js': false,
    'S12.2_A8_T4.js': false,
    'S12.2_A8_T5.js': false,
    'S12.2_A8_T6.js': false,
    'S12.2_A8_T7.js': false,
    'S12.2_A8_T8.js': false,
    'S12.4_A1.js': false,
    'S12.5_A11.js': false,
    'S12.5_A2.js': true,
    'S12.5_A6_T1.js': false,
    'S12.5_A6_T2.js': false,
    'S12.5_A8.js': false,
    'S12.6.1_A12.js': false,
    'S12.6.1_A15.js': false,
    'S12.6.1_A6_T1.js': false,
    'S12.6.1_A6_T2.js': false,
    'S12.6.1_A6_T3.js': false,
    'S12.6.1_A6_T4.js': false,
    'S12.6.1_A6_T5.js': false,
    'S12.6.1_A6_T6.js': false,
    'S12.6.2_A15.js': false,
    'S12.6.2_A6_T1.js': false,
    'S12.6.2_A6_T2.js': false,
    'S12.6.2_A6_T3.js': false,
    'S12.6.2_A6_T4.js': false,
    'S12.6.2_A6_T5.js': false,
    'S12.6.2_A6_T6.js': false,
    'S12.6.3_A11.1_T3.js': true,
    'S12.6.3_A11_T3.js': true,
    'S12.6.3_A12.1_T3.js': true,
    'S12.6.3_A12_T3.js': true,
    'S12.6.3_A4.1.js': false,
    'S12.6.3_A4_T1.js': false,
    'S12.6.3_A4_T2.js': false,
    'S12.6.3_A7.1_T1.js': false,
    'S12.6.3_A7.1_T2.js': false,
    'S12.6.3_A7_T1.js': false,
    'S12.6.3_A7_T2.js': false,
    'S12.6.3_A8.1_T1.js': false,
    'S12.6.3_A8.1_T2.js': false,
    'S12.6.3_A8.1_T3.js': false,
    'S12.6.3_A8_T1.js': false,
    'S12.6.3_A8_T2.js': false,
    'S12.6.3_A8_T3.js': false,
    'S12.6.4_A15.js': false,
    'S12.7_A1_T1.js': true,
    'S12.7_A1_T2.js': true,
    'S12.7_A1_T3.js': true,
    'S12.7_A1_T4.js': true,
    'S12.7_A5_T1.js': true,
    'S12.7_A5_T2.js': true,
    'S12.7_A5_T3.js': true,
    'S12.7_A6.js': true,
    'S12.7_A8_T1.js': true,
    'S12.7_A8_T2.js': true,
    'S12.8_A1_T1.js': true,
    'S12.8_A1_T2.js': true,
    'S12.8_A1_T3.js': true,
    'S12.8_A1_T4.js': true,
    'S12.8_A5_T1.js': true,
    'S12.8_A5_T2.js': true,
    'S12.8_A5_T3.js': true,
    'S12.8_A6.js': true,
    'S12.8_A8_T1.js': true,
    'S12.8_A8_T2.js': true,
    'S12.9_A1_T1.js': true,
    'S12.9_A1_T10.js': true,
    'S12.9_A1_T2.js': true,
    'S12.9_A1_T3.js': true,
    'S12.9_A1_T4.js': true,
    'S12.9_A1_T5.js': true,
    'S12.9_A1_T6.js': true,
    'S12.9_A1_T7.js': true,
    'S12.9_A1_T8.js': true,
    'S12.9_A1_T9.js': true,
    '13.0_4-17gs.js': true,
    '13.0_4-5gs.js': true,
    'S13_A7_T3.js': false,
    '13.1-13gs.js': true,
    '13.1-1gs.js': true,
    '13.1-4gs.js': true,
    '13.1-5gs.js': true,
    '13.1-8gs.js': true,
    '13.2-19-b-3gs.js': true,
    '14.1-4gs.js': true,
    '14.1-5gs.js': true,
    'S15.1.2.1_A2_T2.js': true,
    'S15.1_A1_T1.js': true,
    'S15.1_A1_T2.js': true,
    'S15.1_A2_T1.js': true,
    'S15.2.4.3_A12.js': true,
    'S15.2.4.3_A13.js': true,
    'S15.2.4.4_A12.js': true,
    'S15.2.4.4_A13.js': true,
    'S15.2.4.4_A14.js': true,
    'S15.2.4.4_A15.js': true,
    'S15.2.4.5_A12.js': true,
    'S15.2.4.5_A13.js': true,
    'S15.2.4.6_A12.js': true,
    'S15.2.4.6_A13.js': true,
    'S15.2.4.7_A12.js': true,
    'S15.2.4.7_A13.js': true,
    '15.3.2.1-10-4gs.js': true,
    '15.3.2.1-10-6gs.js': true,
    'S15.3.4.2_A12.js': true,
    'S15.3.4.2_A13.js': true,
    'S15.3.4.2_A14.js': true,
    'S15.3.4.2_A15.js': true,
    'S15.3.4.2_A16.js': true,
    'S15.3.4.3_A13.js': true,
    'S15.3.4.3_A14.js': true,
    'S15.3.4.3_A15.js': true,
    'S15.3.4.4_A13.js': true,
    'S15.3.4.4_A14.js': true,
    'S15.3.4.4_A15.js': true,
    'S15.3.4.5_A1.js': true,
    'S15.3.4.5_A13.js': true,
    'S15.3.4.5_A14.js': true,
    'S15.3.4.5_A15.js': true,
    'S15.3.4.5_A2.js': true,
    '15.3.5.4_2-10gs.js': true,
    '15.3.5.4_2-11gs.js': true,
    '15.3.5.4_2-13gs.js': true,
    '15.3.5.4_2-15gs.js': true,
    '15.3.5.4_2-16gs.js': true,
    '15.3.5.4_2-17gs.js': true,
    '15.3.5.4_2-18gs.js': true,
    '15.3.5.4_2-19gs.js': true,
    '15.3.5.4_2-1gs.js': true,
    '15.3.5.4_2-20gs.js': true,
    '15.3.5.4_2-21gs.js': true,
    '15.3.5.4_2-22gs.js': true,
    '15.3.5.4_2-23gs.js': true,
    '15.3.5.4_2-24gs.js': true,
    '15.3.5.4_2-25gs.js': true,
    '15.3.5.4_2-26gs.js': true,
    '15.3.5.4_2-27gs.js': true,
    '15.3.5.4_2-28gs.js': true,
    '15.3.5.4_2-29gs.js': true,
    '15.3.5.4_2-2gs.js': true,
    '15.3.5.4_2-30gs.js': true,
    '15.3.5.4_2-31gs.js': true,
    '15.3.5.4_2-32gs.js': true,
    '15.3.5.4_2-33gs.js': true,
    '15.3.5.4_2-34gs.js': true,
    '15.3.5.4_2-35gs.js': true,
    '15.3.5.4_2-36gs.js': true,
    '15.3.5.4_2-37gs.js': true,
    '15.3.5.4_2-38gs.js': true,
    '15.3.5.4_2-39gs.js': true,
    '15.3.5.4_2-3gs.js': true,
    '15.3.5.4_2-40gs.js': true,
    '15.3.5.4_2-41gs.js': true,
    '15.3.5.4_2-42gs.js': true,
    '15.3.5.4_2-43gs.js': true,
    '15.3.5.4_2-44gs.js': true,
    '15.3.5.4_2-45gs.js': true,
    '15.3.5.4_2-46gs.js': true,
    '15.3.5.4_2-47gs.js': true,
    '15.3.5.4_2-48gs.js': true,
    '15.3.5.4_2-49gs.js': true,
    '15.3.5.4_2-4gs.js': true,
    '15.3.5.4_2-50gs.js': true,
    '15.3.5.4_2-51gs.js': true,
    '15.3.5.4_2-52gs.js': true,
    '15.3.5.4_2-53gs.js': true,
    '15.3.5.4_2-54gs.js': true,
    '15.3.5.4_2-55gs.js': true,
    '15.3.5.4_2-56gs.js': true,
    '15.3.5.4_2-57gs.js': true,
    '15.3.5.4_2-58gs.js': true,
    '15.3.5.4_2-59gs.js': true,
    '15.3.5.4_2-5gs.js': true,
    '15.3.5.4_2-60gs.js': true,
    '15.3.5.4_2-61gs.js': true,
    '15.3.5.4_2-62gs.js': true,
    '15.3.5.4_2-63gs.js': true,
    '15.3.5.4_2-64gs.js': true,
    '15.3.5.4_2-65gs.js': true,
    '15.3.5.4_2-66gs.js': true,
    '15.3.5.4_2-67gs.js': true,
    '15.3.5.4_2-68gs.js': true,
    '15.3.5.4_2-69gs.js': true,
    '15.3.5.4_2-6gs.js': true,
    '15.3.5.4_2-70gs.js': true,
    '15.3.5.4_2-71gs.js': true,
    '15.3.5.4_2-72gs.js': true,
    '15.3.5.4_2-73gs.js': true,
    '15.3.5.4_2-74gs.js': true,
    '15.3.5.4_2-7gs.js': true,
    '15.3.5.4_2-8gs.js': true,
    '15.3.5.4_2-94gs.js': true,
    '15.3.5.4_2-95gs.js': true,
    '15.3.5.4_2-96gs.js': true,
    '15.3.5.4_2-97gs.js': true,
    '15.3.5.4_2-9gs.js': true,
    '15.3.5-1gs.js': true,
    '15.3.5-2gs.js': true
};
var TypeScript;
(function (TypeScript) {
    var SyntaxElementsCollector = (function () {
        function SyntaxElementsCollector() {
        }
        SyntaxElementsCollector.collectElements = function (node) {
            var result = [];
            this.collect(node, result);
            return result;
        };
        SyntaxElementsCollector.collect = function (element, result) {
            if (element) {
                var kind = element.kind;
                result.push(element);
                for (var i = 0, n = TypeScript.childCount(element); i < n; i++) {
                    this.collect(TypeScript.childAt(element, i), result);
                }
            }
        };
        return SyntaxElementsCollector;
    })();
    TypeScript.SyntaxElementsCollector = SyntaxElementsCollector;
    function withChange(text, start, length, newText) {
        var contents = text.substr(0, text.length());
        var newContents = contents.substr(0, start) + newText + contents.substring(start + length);
        return { text: TypeScript.SimpleText.fromString(newContents), textChangeRange: new TypeScript.TextChangeRange(new TypeScript.TextSpan(start, length), newText.length) };
    }
    function withInsert(text, start, newText) {
        return withChange(text, start, 0, newText);
    }
    function withDelete(text, start, length) {
        return withChange(text, start, length, "");
    }
    function compareTrees(oldText, newText, textChangeRange, reusedElements) {
        if (reusedElements === void 0) { reusedElements = -1; }
        var oldTree = TypeScript.Parser.parse("", oldText, 1 /* ES5 */, false);
        TypeScript.visitNodeOrToken(new PositionValidatingWalker(), oldTree.sourceUnit());
        var newTree = TypeScript.Parser.parse("", newText, 1 /* ES5 */, false);
        TypeScript.visitNodeOrToken(new PositionValidatingWalker(), newTree.sourceUnit());
        var incrementalNewTree = TypeScript.IncrementalParser.parse(oldTree, textChangeRange, newText);
        TypeScript.visitNodeOrToken(new PositionValidatingWalker(), incrementalNewTree.sourceUnit());
        TypeScript.Debug.assert(TypeScript.treeStructuralEquals(newTree, incrementalNewTree, true));
        TypeScript.Debug.assert(IncrementalParserTests.reusedElements(oldTree.sourceUnit(), newTree.sourceUnit()) === 0);
        if (reusedElements !== -1) {
            var actualReusedCount = IncrementalParserTests.reusedElements(oldTree.sourceUnit(), incrementalNewTree.sourceUnit());
            TypeScript.Debug.assert(actualReusedCount === reusedElements, actualReusedCount + " !== " + reusedElements);
        }
    }
    var IncrementalParserTests = (function () {
        function IncrementalParserTests() {
        }
        IncrementalParserTests.runAllTests = function () {
            for (var name in IncrementalParserTests) {
                if (IncrementalParserTests.hasOwnProperty(name) && TypeScript.StringUtilities.startsWith(name, "test")) {
                    var o = IncrementalParserTests;
                    o[name]();
                }
            }
        };
        IncrementalParserTests.reusedElements = function (oldNode, newNode) {
            var allOldElements = SyntaxElementsCollector.collectElements(oldNode);
            var allNewElements = SyntaxElementsCollector.collectElements(newNode);
            return TypeScript.ArrayUtilities.where(allOldElements, function (v) { return TypeScript.ArrayUtilities.contains(allNewElements, v); }).length;
        };
        IncrementalParserTests.testIncremental1 = function () {
            var source = "class C {\r\n";
            source += "    public foo1() { }\r\n";
            source += "    public foo2() {\r\n";
            source += "        return 1;\r\n";
            source += "    }\r\n";
            source += "    public foo3() { }\r\n";
            source += "}";
            var semicolonIndex = source.indexOf(";");
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withInsert(oldText, semicolonIndex, " + 1");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, 36);
        };
        IncrementalParserTests.testIncremental2 = function () {
            var source = "class C {\r\n";
            source += "    public foo1() { }\r\n";
            source += "    public foo2() {\r\n";
            source += "        return 1 + 1;\r\n";
            source += "    }\r\n";
            source += "    public foo3() { }\r\n";
            source += "}";
            var index = source.indexOf("+ 1");
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withDelete(oldText, index, 3);
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, 36);
        };
        IncrementalParserTests.testIncrementalRegex1 = function () {
            var source = "class C { public foo1() { /; } public foo2() { return 1;} public foo3() { } }";
            var semicolonIndex = source.indexOf(";}");
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withInsert(oldText, semicolonIndex, "/");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, 5);
        };
        IncrementalParserTests.testIncrementalRegex2 = function () {
            var source = "class C { public foo1() { ; } public foo2() { return 1/;} public foo3() { } }";
            var semicolonIndex = source.indexOf(";");
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withInsert(oldText, semicolonIndex, "/");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, 21);
        };
        IncrementalParserTests.testIncrementalComment1 = function () {
            var source = "class C { public foo1() { /; } public foo2() { return 1; } public foo3() { } }";
            var semicolonIndex = source.indexOf(";");
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withInsert(oldText, semicolonIndex, "/");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, 5);
        };
        IncrementalParserTests.testIncrementalComment2 = function () {
            var source = "class C { public foo1() { /; } public foo2() { return 1; } public foo3() { } }";
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withInsert(oldText, 0, "//");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, 0);
        };
        IncrementalParserTests.testIncrementalComment3 = function () {
            var source = "//class C { public foo1() { /; } public foo2() { return 1; } public foo3() { } }";
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withDelete(oldText, 0, 2);
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, 0);
        };
        IncrementalParserTests.testIncrementalComment4 = function () {
            var source = "class C { public foo1() { /; } public foo2() { */ return 1; } public foo3() { } }";
            var index = source.indexOf(";");
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withInsert(oldText, index, "*");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, 22);
        };
        IncrementalParserTests.testParameter1 = function () {
            var source = "class C {\r\n";
            source += "    public foo2(a, b, c, d) {\r\n";
            source += "        return 1;\r\n";
            source += "    }\r\n";
            source += "}";
            var semicolonIndex = source.indexOf(";");
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withInsert(oldText, semicolonIndex, " + 1");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, 25);
        };
        IncrementalParserTests.testTypeMember1 = function () {
            var source = "interface I { a: number; b: string; (c): d; new (e): f; g(): h }";
            var index = source.indexOf(": string");
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withInsert(oldText, index, "?");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, 44);
        };
        IncrementalParserTests.testEnumElement1 = function () {
            var source = "enum E { a = 1, b = 1 << 1, c = 3, e = 4, f = 5, g = 7, h = 8, i = 9, j = 10 }";
            var index = source.indexOf("<<");
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withChange(oldText, index, 2, "+");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, 53);
        };
        IncrementalParserTests.testStrictMode1 = function () {
            var source = "foo1();\r\nfoo1();\r\nfoo1();\r\package();";
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withInsert(oldText, 0, "'strict';\r\n");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, 27);
        };
        IncrementalParserTests.testStrictMode2 = function () {
            var source = "foo1();\r\nfoo1();\r\nfoo1();\r\package();";
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withInsert(oldText, 0, "'use strict';\r\n");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, 13);
        };
        IncrementalParserTests.testStrictMode3 = function () {
            var source = "'strict';\r\nfoo1();\r\nfoo1();\r\nfoo1();\r\npackage();";
            var index = source.indexOf('f');
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withDelete(oldText, 0, index);
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, 27);
        };
        IncrementalParserTests.testStrictMode4 = function () {
            var source = "'use strict';\r\nfoo1();\r\nfoo1();\r\nfoo1();\r\npackage();";
            var index = source.indexOf('f');
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withDelete(oldText, 0, index);
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, 12);
        };
        IncrementalParserTests.testIncremental5 = function () {
            var source = "'use blahhh';\r\nfoo1();\r\nfoo2();\r\nfoo3();\r\nfoo4();\r\nfoo4();\r\nfoo6();\r\nfoo7();\r\nfoo8();\r\nfoo9();\r\n";
            var index = source.indexOf('b');
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withChange(oldText, index, 6, "strict");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, 37);
        };
        IncrementalParserTests.testIncremental6 = function () {
            var source = "'use strict';\r\nfoo1();\r\nfoo2();\r\nfoo3();\r\nfoo4();\r\nfoo4();\r\nfoo6();\r\nfoo7();\r\nfoo8();\r\nfoo9();\r\n";
            var index = source.indexOf('s');
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withChange(oldText, index, 6, "blahhh");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, 37);
        };
        IncrementalParserTests.testDelete1 = function () {
            var source = "'use blahhh';\r\nfoo1();\r\nfoo2();\r\nfoo3();\r\nfoo4();\r\nfoo4();\r\nfoo6();\r\nfoo7();\r\nfoo8();\r\nfoo9();\r\n";
            var index = source.indexOf('f');
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withDelete(oldText, 0, index);
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, 67);
        };
        IncrementalParserTests.testIncremental3 = function () {
            var source = "var v = (a, b, c, d, e)";
            var index = source.indexOf('a');
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withInsert(oldText, index + 1, ":");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, -1);
        };
        IncrementalParserTests.testIncremental4 = function () {
            var source = "var v = (a:, b, c, d, e)";
            var index = source.indexOf(':');
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withDelete(oldText, index, 1);
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, -1);
        };
        IncrementalParserTests.testIncremental7 = function () {
            var source = "var v = F<b>e";
            var index = source.indexOf('b');
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withInsert(oldText, index + 1, ",x");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, -1);
        };
        IncrementalParserTests.testIncremental8 = function () {
            var source = "var v = F<a,b>e";
            var index = source.indexOf('b');
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withInsert(oldText, index + 1, ",x");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, -1);
        };
        IncrementalParserTests.testIncremental9 = function () {
            var source = "var v = F<a,b,c>e";
            var index = source.indexOf('b');
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withInsert(oldText, index + 1, ",x");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, -1);
        };
        IncrementalParserTests.testIncremental10 = function () {
            var source = "var v = F<a,b,c,d>e";
            var index = source.indexOf('b');
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withInsert(oldText, index + 1, ",x");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, -1);
        };
        IncrementalParserTests.testIncremental11 = function () {
            var source = "interface IFoo<T> { }\r\ninterface Array<T> extends IFoo<T> { }";
            var index = source.indexOf('extends');
            var repeat = "extends IFoo<T>".length;
            for (var i = 0; i < repeat; i++) {
                var oldText = TypeScript.SimpleText.fromString(source);
                var newTextAndChange = withDelete(oldText, index, 1);
                compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, -1);
                source = newTextAndChange.text.substr(0, newTextAndChange.text.length());
            }
        };
        IncrementalParserTests.testGenerics1 = function () {
            var source = "var v = <T>(a);";
            var index = source.indexOf(';');
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withInsert(oldText, index, " => 1");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, 6);
        };
        IncrementalParserTests.testGenerics2 = function () {
            var source = "var v = <T>(a) => 1;";
            var index = source.indexOf(' =>');
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withDelete(oldText, index, " => 1".length);
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, 6);
        };
        IncrementalParserTests.testGenerics3 = function () {
            var source = "var v = 1 >> = 2";
            var index = source.indexOf('>> =');
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withDelete(oldText, index + 2, 1);
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, -1);
        };
        IncrementalParserTests.testGenerics4 = function () {
            var source = "var v = 1 >>= 2";
            var index = source.indexOf('>>=');
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withInsert(oldText, index + 2, " ");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, 2);
        };
        IncrementalParserTests.testGenerics5 = function () {
            var source = "var v = T>>(2)";
            var index = source.indexOf('T');
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withInsert(oldText, index, "Foo<Bar<");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, 4);
        };
        IncrementalParserTests.testGenerics6 = function () {
            var source = "var v = Foo<Bar<T>>(2)";
            var index = source.indexOf('Foo<Bar<');
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withDelete(oldText, index, "Foo<Bar<".length);
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, 4);
        };
        IncrementalParserTests.testGenerics7 = function () {
            var source = "var v = T>>=2;";
            var index = source.indexOf('=');
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withChange(oldText, index, "= ".length, ": Foo<Bar<");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, 2);
        };
        IncrementalParserTests.testGenerics8 = function () {
            var source = "var v : Foo<Bar<T>>=2;";
            var index = source.indexOf(':');
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withChange(oldText, index, ": Foo<Bar<".length, "= ");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, 2);
        };
        IncrementalParserTests.testParenthesizedExpressionToLambda = function () {
            var source = "var v = (a, b) = c";
            var index = source.indexOf("= c") + 1;
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withInsert(oldText, index, ">");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, -1);
        };
        IncrementalParserTests.testLambdaToParenthesizedExpression = function () {
            var source = "var v = (a, b) => c";
            var index = source.indexOf(">");
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withDelete(oldText, index, 1);
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, -1);
        };
        IncrementalParserTests.testGenericToArithmetic = function () {
            var source = "var v = new Dictionary<A, B>()";
            var index = source.indexOf("()");
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withDelete(oldText, index, 2);
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, -1);
        };
        IncrementalParserTests.testArithmeticToGeneric = function () {
            var source = "var v = new Dictionary<A, B>";
            var index = source.length;
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withInsert(oldText, index, "()");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, -1);
        };
        IncrementalParserTests.testYield1 = function () {
            var source = "function foo() {\r\nyield(foo1);\r\n}";
            var oldText = TypeScript.SimpleText.fromString(source);
            var index = source.indexOf("foo");
            var newTextAndChange = withInsert(oldText, index, "*");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, -1);
        };
        IncrementalParserTests.testYield2 = function () {
            var source = "function *foo() {\r\nyield(foo1);\r\n}";
            var oldText = TypeScript.SimpleText.fromString(source);
            var index = source.indexOf("*");
            var newTextAndChange = withDelete(oldText, index, "*".length);
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, -1);
        };
        IncrementalParserTests.textComplexEdits1 = function () {
            var source = "if (typeParameterSymbol.isResolved() || typeParameterSymbol.isResolving()) {\
    return typeParameterSymbol;\
}\
else {\
    return null;\
}";
            var index = source.indexOf("||");
            var text1 = TypeScript.SimpleText.fromString(source);
            var textAndChange1 = withChange(text1, index, "|| typeParameterSymbol.isResolving()".length, "/*|| typeParameterSymbol.isResolving()*/");
            var text2 = textAndChange1.text;
            var start = text2.substr(0, text2.length()).indexOf("else");
            var end = text2.substr(0, text2.length()).lastIndexOf("}") + 1;
            var textAndChange2 = withDelete(text2, start, end - start);
            var text3 = textAndChange2.text;
            compareTrees(text1, text2, textAndChange1.textChangeRange, -1);
            compareTrees(text2, text3, textAndChange2.textChangeRange, -1);
            compareTrees(text1, text3, TypeScript.TextChangeRange.collapseChangesAcrossMultipleVersions([textAndChange1.textChangeRange, textAndChange2.textChangeRange]), -1);
        };
        IncrementalParserTests.testSemicolonDelete1 = function () {
            var source = "export class Foo {\r\n}\r\n\r\nexport var foo = new Foo();\r\n\r\n    export function test(foo: Foo) {\r\n        return true;\r\n    }\r\n";
            var oldText = TypeScript.SimpleText.fromString(source);
            var index = source.lastIndexOf(";");
            var newTextAndChange = withDelete(oldText, index, 1);
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, 39);
        };
        IncrementalParserTests.testGenericError1 = function () {
            var source = "class Dictionary<> { }\r\nvar y;\r\n";
            var oldText = TypeScript.SimpleText.fromString(source);
            var index = source.length;
            var newTextAndChange = withInsert(oldText, index, "var x;");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, -1);
        };
        IncrementalParserTests.testParameterDeleteAfterComment1 = function () {
            var source = "function fn(/* comment! */ a: number, c) { }";
            var oldText = TypeScript.SimpleText.fromString(source);
            var index = source.indexOf("a:");
            var newTextAndChange = withDelete(oldText, index, "a: number,".length);
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, -1);
        };
        IncrementalParserTests.testInsertModifierBeforeSetter1 = function () {
            var source = "class C {\
    set Bar(bar:string) {}\
}\
var o2 = { set Foo(val:number) { } };";
            var oldText = TypeScript.SimpleText.fromString(source);
            var index = source.indexOf("set");
            var newTextAndChange = withInsert(oldText, index, "public ");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, -1);
        };
        IncrementalParserTests.testParameter2 = function () {
            var source = "alert(100);\
\
class OverloadedMonster {\
constructor();\
constructor(name) { }\
}";
            var oldText = TypeScript.SimpleText.fromString(source);
            var index = source.indexOf("100");
            var newTextAndChange = withInsert(oldText, index, "'1', ");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, -1);
        };
        IncrementalParserTests.testInsertAboveComment = function () {
            var source = "\
// foo\
1;";
            var oldText = TypeScript.SimpleText.fromString(source);
            var index = 0;
            var newTextAndChange = withInsert(oldText, index, "var x;\r\n");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, -1);
        };
        IncrementalParserTests.testInsertDeclareAboveModule = function () {
            var source = "module mAmbient {\
module m3 { }\
}";
            var oldText = TypeScript.SimpleText.fromString(source);
            var index = 0;
            var newTextAndChange = withInsert(oldText, index, "declare ");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, -1);
        };
        IncrementalParserTests.testInsertFunctionAboveLambdaWithComment = function () {
            var source = "\
() =>\
   // do something\
0;";
            var oldText = TypeScript.SimpleText.fromString(source);
            var index = 0;
            var newTextAndChange = withInsert(oldText, index, "function Foo() { }");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, -1);
        };
        IncrementalParserTests.testSlashToRegex1 = function () {
            var source = "while (true) /3; return;";
            var oldText = TypeScript.SimpleText.fromString(source);
            var index = source.length - 1;
            var newTextAndChange = withInsert(oldText, index, "/");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, -1);
        };
        IncrementalParserTests.testRegex1 = function () {
            var source = "return;\r\nwhile (true) /3/g;";
            var oldText = TypeScript.SimpleText.fromString(source);
            var index = source.indexOf("while");
            var newTextAndChange = withDelete(oldText, index, "while ".length);
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, -1);
        };
        IncrementalParserTests.testRegex2 = function () {
            var source = "return;\r\n(true) /3/g;";
            var oldText = TypeScript.SimpleText.fromString(source);
            var index = source.indexOf("(");
            var newTextAndChange = withInsert(oldText, index, "while ");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, -1);
        };
        IncrementalParserTests.testKeywordAsIdentifier1 = function () {
            var source = "return; a.public /*";
            var oldText = TypeScript.SimpleText.fromString(source);
            var newTextAndChange = withInsert(oldText, 0, "");
            compareTrees(oldText, newTextAndChange.text, newTextAndChange.textChangeRange, -1);
        };
        IncrementalParserTests.testSkippedToken1 = function () {
            var source = "function foo() {\r\n" + "            function getOccurrencesAtPosition() {\r\n" + "            switch (node) {\r\n" + "                enum \r\n" + "            }\r\n" + "                \r\n" + "                return undefined;\r\n" + "                \r\n" + "                function keywordToReferenceEntry() {\r\n" + "                }\r\n" + "            }\r\n" + "                \r\n" + "            return {\r\n" + "                getEmitOutput: (filename): Bar => null,\r\n" + "            };\r\n" + "        }";
            var text1 = TypeScript.SimpleText.fromString(source);
            var tree1 = TypeScript.Parser.parse("", text1, 1 /* ES5 */, false);
            var index = source.indexOf("enum ") + "enum ".length;
            var textAndChange1 = withInsert(text1, index, "F");
            var incrementalTree1 = TypeScript.IncrementalParser.parse(tree1, textAndChange1.textChangeRange, textAndChange1.text);
            var textAndChange2 = withInsert(textAndChange1.text, index + 1, "o");
            var incrementalTree2 = TypeScript.IncrementalParser.parse(incrementalTree1, textAndChange2.textChangeRange, textAndChange2.text);
        };
        return IncrementalParserTests;
    })();
    TypeScript.IncrementalParserTests = IncrementalParserTests;
})(TypeScript || (TypeScript = {}));
var TypeScript;
(function (TypeScript) {
    function assertParent(parent, child) {
        if (child) {
            return TypeScript.Debug.assert(parent === child.parent);
        }
    }
    function nodeStructuralEquals(node1, node2, checkParents, text1, text2) {
        if (node1 === node2) {
            return true;
        }
        if (!node1 || !node2) {
            return false;
        }
        TypeScript.Debug.assert(node1.kind === 125 /* SourceUnit */ || node1.parent);
        TypeScript.Debug.assert(node2.kind === 125 /* SourceUnit */ || node2.parent);
        if (node1.kind !== node2.kind) {
            return false;
        }
        if (TypeScript.childCount(node1) !== TypeScript.childCount(node2)) {
            return false;
        }
        for (var i = 0, n = TypeScript.childCount(node1); i < n; i++) {
            var element1 = TypeScript.childAt(node1, i);
            var element2 = TypeScript.childAt(node2, i);
            if (checkParents) {
                assertParent(node1, element1);
                assertParent(node2, element2);
            }
            if (!elementStructuralEquals(element1, element2, checkParents, text1, text2)) {
                return false;
            }
        }
        return true;
    }
    TypeScript.nodeStructuralEquals = nodeStructuralEquals;
    function nodeOrTokenStructuralEquals(node1, node2, checkParents, text1, text2) {
        if (node1 === node2) {
            return true;
        }
        if (!node1 || !node2) {
            return false;
        }
        TypeScript.Debug.assert(node1.kind === 125 /* SourceUnit */ || node1.parent);
        TypeScript.Debug.assert(node2.kind === 125 /* SourceUnit */ || node2.parent);
        if (TypeScript.isToken(node1)) {
            return TypeScript.isToken(node2) ? tokenStructuralEquals(node1, node2, text1, text2) : false;
        }
        return TypeScript.isNode(node2) ? nodeStructuralEquals(node1, node2, checkParents, text1, text2) : false;
    }
    TypeScript.nodeOrTokenStructuralEquals = nodeOrTokenStructuralEquals;
    function tokenStructuralEquals(token1, token2, text1, text2) {
        if (token1 === token2) {
            return true;
        }
        if (!token1 || !token2) {
            return false;
        }
        TypeScript.Debug.assert(token1.parent);
        TypeScript.Debug.assert(token2.parent);
        return token1.kind === token2.kind && TypeScript.width(token1) === TypeScript.width(token2) && token1.fullWidth() === token2.fullWidth() && token1.fullStart() === token2.fullStart() && TypeScript.fullEnd(token1) === TypeScript.fullEnd(token2) && TypeScript.start(token1, text1) === TypeScript.start(token2, text2) && token1.text() === token2.text() && triviaListStructuralEquals(token1.leadingTrivia(text1), token2.leadingTrivia(text2));
    }
    TypeScript.tokenStructuralEquals = tokenStructuralEquals;
    function triviaListStructuralEquals(triviaList1, triviaList2) {
        TypeScript.Debug.assert(triviaList1.isShared() || triviaList1.parent);
        TypeScript.Debug.assert(triviaList1.isShared() || triviaList2.parent);
        if (triviaList1.count() !== triviaList2.count()) {
            return false;
        }
        for (var i = 0, n = triviaList1.count(); i < n; i++) {
            if (!triviaStructuralEquals(triviaList1.syntaxTriviaAt(i), triviaList2.syntaxTriviaAt(i))) {
                return false;
            }
        }
        return true;
    }
    TypeScript.triviaListStructuralEquals = triviaListStructuralEquals;
    function triviaStructuralEquals(trivia1, trivia2) {
        TypeScript.Debug.assert(trivia1.parent);
        TypeScript.Debug.assert(trivia2.parent);
        return trivia1.kind === trivia2.kind && trivia1.fullWidth() === trivia2.fullWidth() && trivia1.fullText() === trivia2.fullText();
    }
    TypeScript.triviaStructuralEquals = triviaStructuralEquals;
    function listStructuralEquals(list1, list2, checkParents, text1, text2) {
        TypeScript.Debug.assert(list1.parent);
        TypeScript.Debug.assert(list2.parent);
        if (TypeScript.childCount(list1) !== TypeScript.childCount(list2)) {
            return false;
        }
        for (var i = 0, n = TypeScript.childCount(list1); i < n; i++) {
            var child1 = TypeScript.childAt(list1, i);
            var child2 = TypeScript.childAt(list2, i);
            if (checkParents) {
                assertParent(list1, child1);
                assertParent(list2, child2);
            }
            if (!elementStructuralEquals(child1, child2, checkParents, text1, text2)) {
                return false;
            }
        }
        return true;
    }
    function elementStructuralEquals(element1, element2, checkParents, text1, text2) {
        if (element1 === element2) {
            return true;
        }
        if (!element1 || !element2) {
            return false;
        }
        TypeScript.Debug.assert(element1.kind === 125 /* SourceUnit */ || element1.parent);
        TypeScript.Debug.assert(element2.kind === 125 /* SourceUnit */ || element2.parent);
        if (element2.kind !== element2.kind) {
            return false;
        }
        if (TypeScript.fullStart(element1) !== TypeScript.fullStart(element2)) {
            return false;
        }
        if (TypeScript.start(element1) !== TypeScript.start(element2)) {
            return false;
        }
        if (TypeScript.fullEnd(element1) !== TypeScript.fullEnd(element2)) {
            return false;
        }
        if (TypeScript.isToken(element1)) {
            return tokenStructuralEquals(element1, element2, text1, text2);
        }
        else if (TypeScript.isNode(element1)) {
            return nodeStructuralEquals(element1, element2, checkParents, text1, text2);
        }
        else if (TypeScript.isList(element1)) {
            return listStructuralEquals(element1, element2, checkParents, text1, text2);
        }
        throw TypeScript.Errors.invalidOperation();
    }
    TypeScript.elementStructuralEquals = elementStructuralEquals;
    function treeStructuralEquals(tree1, tree2, checkParents) {
        if (!TypeScript.ArrayUtilities.sequenceEquals(tree1.diagnostics(), tree2.diagnostics(), TypeScript.Diagnostic.equals)) {
            return false;
        }
        return nodeStructuralEquals(tree1.sourceUnit(), tree2.sourceUnit(), checkParents, tree1.text, tree2.text);
    }
    TypeScript.treeStructuralEquals = treeStructuralEquals;
})(TypeScript || (TypeScript = {}));
var specificFile = undefined;
var generate = false;
function isDTSFile(s) {
    return ts.fileExtensionIs(s, ".d.ts");
}
var PositionValidatingWalker = (function (_super) {
    __extends(PositionValidatingWalker, _super);
    function PositionValidatingWalker() {
        _super.apply(this, arguments);
        this.position = 0;
    }
    PositionValidatingWalker.prototype.visitToken = function (token) {
        TypeScript.Debug.assert(this.position === token.fullStart());
        this.position += token.fullWidth();
    };
    return PositionValidatingWalker;
})(TypeScript.SyntaxWalker);
function tokenToJSON(token, text, mergeTrivia) {
    if (!token) {
        return undefined;
    }
    var isSkippedToken = token.parent && token.parent.kind === 6 /* SkippedTokenTrivia */;
    var isMissingToken = token.fullWidth() === 0 && token.kind !== 8 /* EndOfFileToken */;
    var result = {};
    for (var name in getSyntaxKindEnum()) {
        if (getSyntaxKindEnum()[name] === token.kind) {
            result.kind = name;
            break;
        }
    }
    var fullStart = TypeScript.fullStart(token);
    var fullEnd = TypeScript.fullEnd(token);
    result.fullStart = fullStart;
    result.start = TypeScript.start(token, text);
    result.fullWidth = fullEnd - fullStart;
    result.width = TypeScript.width(token, text);
    result.text = token.text();
    var value = TypeScript.tokenValue(token);
    if (value !== undefined) {
        result.value = value;
        result.valueText = TypeScript.tokenValueText(token);
    }
    if (token.isKeywordConvertedToIdentifier()) {
        result.isKeywordConvertedToIdentifier = true;
    }
    if (token.isIncrementallyUnusable()) {
        result.isIncrementallyUnusable = true;
    }
    if (isSkippedToken || isMissingToken) {
        TypeScript.Debug.assert(!token.hasLeadingTrivia());
    }
    else {
        var leadingTriviaList = token.hasLeadingTrivia() ? token.leadingTrivia(text) : undefined;
        if (leadingTriviaList) {
            var leadingTrivia = leadingTriviaList.toArray();
            result.hasLeadingTrivia = true;
            if (TypeScript.ArrayUtilities.any(leadingTrivia, function (t) { return t.isComment(); })) {
                result.hasLeadingComment = true;
            }
            if (TypeScript.ArrayUtilities.any(leadingTrivia, function (t) { return t.isNewLine(); })) {
                result.hasLeadingNewLine = true;
            }
            if (TypeScript.ArrayUtilities.any(leadingTrivia, function (t) { return t.isSkippedToken(); })) {
                result.hasLeadingSkippedToken = true;
            }
            result.leadingTrivia = triviaListToJSON(leadingTrivia, text);
        }
    }
    return result;
}
function triviaListToJSON(trivia, text) {
    var result = [];
    for (var i = 0, n = trivia.length; i < n; i++) {
        result.push(triviaToJSON(trivia[i], text));
    }
    return result;
}
function triviaToJSON(trivia, text) {
    var result = {};
    for (var name in getSyntaxKindEnum()) {
        if (getSyntaxKindEnum()[name] === trivia.kind) {
            result.kind = name;
            break;
        }
    }
    if (trivia.isSkippedToken()) {
        result.skippedToken = tokenToJSON(trivia.skippedToken(), text, false);
    }
    else {
        result.fullStart = trivia.fullStart();
        result.fullEnd = trivia.fullStart() + trivia.fullWidth();
        result.text = trivia.fullText();
    }
    return result;
}
function getSyntaxKindEnum() {
    var name = "SyntaxKind";
    return TypeScript[name];
}
function nodeToJSON(node, text) {
    var result = {};
    for (var name in getSyntaxKindEnum()) {
        if (getSyntaxKindEnum()[name] === node.kind) {
            result.kind = name;
            break;
        }
    }
    result.start = TypeScript.start(node);
    result.end = TypeScript.fullEnd(node);
    result.width = TypeScript.width(node);
    if (TypeScript.isIncrementallyUnusable(node)) {
        result.isIncrementallyUnusable = true;
    }
    if (TypeScript.parsedInStrictModeContext(node)) {
        result.parsedInStrictModeContext = true;
    }
    if (TypeScript.parsedInDisallowInContext(node)) {
        result.parsedInDisallowInContext = true;
    }
    if (TypeScript.parsedInYieldContext(node)) {
        result.parsedInYieldContext = true;
    }
    if (TypeScript.parsedInGeneratorParameterContext(node)) {
        result.parsedInGeneratorParameterContext = true;
    }
    if (TypeScript.parsedInAsyncContext(node)) {
        result.parsedInAsyncContext = true;
    }
    var usedNames = {};
    var thisAsIndexable = node;
    for (var i = 0, n = TypeScript.childCount(node); i < n; i++) {
        var value = TypeScript.childAt(node, i);
        if (value) {
            for (var name in node) {
                if (usedNames[name] === undefined && value === thisAsIndexable[name]) {
                    result[name] = elementToJSON(value, text);
                    usedNames[name] = true;
                    break;
                }
            }
        }
    }
    return result;
}
function elementToJSON(element, text) {
    if (element !== undefined) {
        if (TypeScript.isToken(element)) {
            return tokenToJSON(element, text, true);
        }
        else if (TypeScript.isList(element)) {
            if (TypeScript.childCount(element) > 0) {
                var result = [];
                for (var i = 0, n = TypeScript.childCount(element); i < n; i++) {
                    result.push(elementToJSON(TypeScript.childAt(element, i), text));
                }
                return result;
            }
        }
        else {
            return nodeToJSON(element, text);
        }
    }
}
function syntaxTreeToJSON(tree) {
    var result = {};
    result.isDeclaration = tree.isDeclaration();
    switch (tree.languageVersion()) {
        case 0 /* ES3 */:
            result.languageVersion = "EcmaScript3";
            break;
        case 1 /* ES5 */:
            result.languageVersion = "EcmaScript5";
            break;
        case 2 /* ES6 */:
            result.languageVersion = "EcmaScript6";
            break;
        default:
            throw new Error();
    }
    if (tree.diagnostics().length > 0) {
        result.diagnostics = tree.diagnostics();
    }
    result.sourceUnit = elementToJSON(tree.sourceUnit(), tree.text);
    result.lineMap = tree.lineMap();
    return result;
}
function emptySourceUnit() {
    return TypeScript.Parser.parse("", TypeScript.SimpleText.fromString(""), 1 /* ES5 */, false).sourceUnit();
}
var Program = (function () {
    function Program() {
    }
    Program.prototype.runAllTests = function (verify) {
        var _this = this;
        TypeScript.Environment.standardOut.WriteLine("");
        if (generate) {
            TypeScript.Environment.standardOut.WriteLine("!!!!!!!!!! WARNING - GENERATING !!!!!!!!!");
            TypeScript.Environment.standardOut.WriteLine("");
        }
        TypeScript.Environment.standardOut.Write("Testing Incremental 1:");
        this.runTests(TypeScript.Environment.currentDirectory() + "\\tests\\Fidelity\\parser\\ecmascript5", function (fileName) { return _this.runIncremental(fileName, 1 /* ES5 */); });
        if (specificFile === undefined) {
            TypeScript.Environment.standardOut.WriteLine("Testing Incremental 2.");
            TypeScript.IncrementalParserTests.runAllTests();
        }
        if (specificFile === undefined) {
            this.testIncrementalSpeed(TypeScript.Environment.currentDirectory() + "\\src\\services\\syntax\\syntaxNodes.concrete.generated.ts");
        }
        TypeScript.Environment.standardOut.Write("Testing scanner ES3:");
        this.runTests(TypeScript.Environment.currentDirectory() + "\\tests\\Fidelity\\scanner\\ecmascript3", function (fileName) { return _this.runScanner(fileName, 0 /* ES3 */, verify, generate); });
        TypeScript.Environment.standardOut.Write("Testing scanner ES5:");
        this.runTests(TypeScript.Environment.currentDirectory() + "\\tests\\Fidelity\\scanner\\ecmascript5", function (fileName) { return _this.runScanner(fileName, 1 /* ES5 */, verify, generate); });
        TypeScript.Environment.standardOut.Write("Testing findToken:");
        this.runTests(TypeScript.Environment.currentDirectory() + "\\tests\\Fidelity\\findToken\\ecmascript5", function (fileName) { return _this.runFindToken(fileName, 1 /* ES5 */, verify, generate); });
        TypeScript.Environment.standardOut.Write("Testing trivia:");
        this.runTests(TypeScript.Environment.currentDirectory() + "\\tests\\Fidelity\\trivia\\ecmascript5", function (fileName) { return _this.runTrivia(fileName, 1 /* ES5 */, verify, generate); });
        TypeScript.Environment.standardOut.Write("Testing parser ES6:");
        this.runTests(TypeScript.Environment.currentDirectory() + "\\tests\\Fidelity\\parser\\ecmascript6", function (fileName) { return _this.runParser(fileName, 2 /* ES6 */, verify, generate); });
        TypeScript.Environment.standardOut.Write("Testing parser ES5:");
        this.runTests(TypeScript.Environment.currentDirectory() + "\\tests\\Fidelity\\parser\\ecmascript5", function (fileName) { return _this.runParser(fileName, 1 /* ES5 */, verify, generate); });
        TypeScript.Environment.standardOut.Write("Testing parser ES3:");
        this.runTests(TypeScript.Environment.currentDirectory() + "\\tests\\Fidelity\\parser\\ecmascript3", function (fileName) { return _this.runParser(fileName, 0 /* ES3 */, verify, generate); });
        TypeScript.Environment.standardOut.Write("Testing emitter 2:");
        this.runTests(TypeScript.Environment.currentDirectory() + "\\tests\\Fidelity\\emitter2\\ecmascript5", function (fileName) { return _this.runEmitter(fileName, 1 /* ES5 */, verify, generate, true); });
        TypeScript.Environment.standardOut.Write("Testing emitter 1:");
        this.runTests(TypeScript.Environment.currentDirectory() + "\\tests\\Fidelity\\emitter\\ecmascript5", function (fileName) { return _this.runEmitter(fileName, 1 /* ES5 */, verify, generate, false); });
        TypeScript.Environment.standardOut.Write("Testing pretty printer:");
        this.runTests(TypeScript.Environment.currentDirectory() + "\\tests\\Fidelity\\prettyPrinter\\ecmascript5", function (fileName) { return _this.runPrettyPrinter(fileName, 1 /* ES5 */, verify, generate); });
        TypeScript.Environment.standardOut.Write("Testing against 262:");
        this.runTests(TypeScript.Environment.currentDirectory() + "\\tests\\Fidelity\\test262", function (fileName) { return _this.runParser(fileName, 1 /* ES5 */, verify, generate); });
    };
    Program.reusedElements = function (oldNode, newNode, key) {
        var allOldElements = TypeScript.SyntaxElementsCollector.collectElements(oldNode);
        var allNewElements = TypeScript.SyntaxElementsCollector.collectElements(newNode);
        for (var i = 0; i < allOldElements.length; i++) {
            var oldElement = allOldElements[i];
            oldElement[key] = key;
        }
        var reused = 0;
        for (var j = 0; j < allNewElements.length; j++) {
            var newElement = allNewElements[j];
            if (newElement[key] === key) {
                reused++;
            }
        }
        return { originalElements: allOldElements.length, reusedElements: reused };
    };
    Program.prototype.testIncrementalSpeed = function (fileName) {
        var repeat = 500;
        TypeScript.Environment.standardOut.WriteLine("Incremental Perf - Changed Text.");
        this.testIncrementalSpeedChange(fileName, repeat);
        TypeScript.Environment.standardOut.WriteLine("");
        TypeScript.Environment.standardOut.WriteLine("Incremental Perf - No Changed Text.");
        this.testIncrementalSpeedNoChange(fileName, repeat);
    };
    Program.prototype.testIncrementalSpeedNoChange = function (fileName, repeat) {
        if (specificFile !== undefined) {
            return;
        }
        var contents = TypeScript.Environment.readFile(fileName, undefined).contents;
        var text = TypeScript.SimpleText.fromString(contents);
        var tree = TypeScript.Parser.parse(fileName, text, 1 /* ES5 */, isDTSFile(fileName));
        var originalTree = tree;
        var totalIncrementalTime = 0;
        for (var i = 0; i < repeat; i++) {
            var changeLength = i * 2 % 20;
            var start = new Date().getTime();
            var tree2 = TypeScript.IncrementalParser.parse(tree, new TypeScript.TextChangeRange(new TypeScript.TextSpan(((text.length() / 2) >> 0) - i, changeLength), changeLength), text);
            totalIncrementalTime += (new Date().getTime() - start);
            TypeScript.Debug.assert(TypeScript.treeStructuralEquals(tree, tree2, false));
            tree = tree2;
        }
        var rateBytesPerMillisecond = (contents.length * repeat) / totalIncrementalTime;
        var rateBytesPerSecond = rateBytesPerMillisecond * 1000;
        var rateMBPerSecond = rateBytesPerSecond / (1024 * 1024);
        TypeScript.Environment.standardOut.WriteLine("Incremental     rate: " + rateMBPerSecond + " MB/s");
        var allOldElements = TypeScript.SyntaxElementsCollector.collectElements(originalTree.sourceUnit());
        var allNewElements = TypeScript.SyntaxElementsCollector.collectElements(tree.sourceUnit());
        var reuse = TypeScript.ArrayUtilities.where(allNewElements, function (v) { return TypeScript.ArrayUtilities.contains(allOldElements, v); }).length;
        TypeScript.Environment.standardOut.WriteLine("Reuse: " + reuse / allNewElements.length);
    };
    Program.prototype.testIncrementalSpeedChange = function (fileName, repeat) {
        if (specificFile !== undefined) {
            return;
        }
        var contents = TypeScript.Environment.readFile(fileName, undefined).contents;
        var text = TypeScript.SimpleText.fromString(contents);
        var tree = TypeScript.Parser.parse(fileName, text, 1 /* ES5 */, isDTSFile(fileName));
        var originalTree = tree;
        var allElements = TypeScript.SyntaxElementsCollector.collectElements(tree.sourceUnit());
        var nonSharedElements = TypeScript.ArrayUtilities.where(allElements, function (e) { return !(TypeScript.isList(e) && e.length === 0); });
        TypeScript.Environment.standardOut.WriteLine("All elements   : " + allElements.length);
        TypeScript.Environment.standardOut.WriteLine("Non empty lists: " + nonSharedElements.length);
        var totalIncrementalTime = 0;
        var totalIncrementalASTTime = 0;
        for (var i = 0; i < repeat; i++) {
            var changeStart = ((text.length() / 2) >> 0) - i;
            contents = text.substr(0, text.length());
            var contentsToReplace = contents.substr(changeStart);
            var first = true;
            var changeRange = undefined;
            var updatedText = contentsToReplace.replace(/[^a-zA-Z0-9][a-zA-Z]+[^a-zA-Z0-9]/g, function (sub, offset) {
                var start = sub.substring(0, 1);
                var mid = sub.substring(1, sub.length - 1);
                var end = sub.substring(sub.length - 1);
                var midOffset = changeStart + offset + 1;
                if (first && TypeScript.SyntaxFacts.getTokenKind(mid) === 0 /* None */) {
                    first = false;
                    if (i % 3 && mid.length >= 2) {
                        changeRange = new TypeScript.TextChangeRange(new TypeScript.TextSpan(midOffset, mid.length), mid.length - 1);
                        return start + mid.substr(0, mid.length - 1) + end;
                    }
                    changeRange = new TypeScript.TextChangeRange(new TypeScript.TextSpan(midOffset, mid.length), mid.length + 1);
                    return start + mid + "a" + end;
                }
                return sub;
            });
            var newContents = this.flatten(contents.substr(0, changeStart) + updatedText);
            TypeScript.Debug.assert(changeRange);
            text = TypeScript.SimpleText.fromString(newContents);
            var start = new Date().getTime();
            var tree2 = TypeScript.IncrementalParser.parse(tree, changeRange, text);
            totalIncrementalTime += (new Date().getTime() - start);
            tree = tree2;
        }
        var rateBytesPerMillisecond = (contents.length * repeat) / totalIncrementalTime;
        var rateBytesPerSecond = rateBytesPerMillisecond * 1000;
        var rateMBPerSecond = rateBytesPerSecond / (1024 * 1024);
        TypeScript.Environment.standardOut.WriteLine("Incremental     rate: " + rateMBPerSecond + " MB/s");
        var allOldElements = TypeScript.SyntaxElementsCollector.collectElements(originalTree.sourceUnit());
        var allNewElements = TypeScript.SyntaxElementsCollector.collectElements(tree.sourceUnit());
        var reuse = TypeScript.ArrayUtilities.where(allNewElements, function (v) { return TypeScript.ArrayUtilities.contains(allOldElements, v); }).length;
        TypeScript.Environment.standardOut.WriteLine("Reuse: " + reuse / allNewElements.length);
    };
    Program.prototype.flatten = function (val) {
        var v = {};
        v[val] = 1;
        for (var a in v) {
            if (v.hasOwnProperty(a)) {
                return a;
            }
        }
        TypeScript.Debug.fail();
    };
    Program.prototype.handleException = function (fileName, e) {
        TypeScript.Environment.standardOut.WriteLine("");
        if (e.message.indexOf(fileName) < 0) {
            TypeScript.Environment.standardOut.WriteLine("Exception: " + fileName + ": " + e.message);
        }
        else {
            TypeScript.Environment.standardOut.WriteLine(e.message);
        }
    };
    Program.prototype.runTests = function (path, action) {
        var _this = this;
        var testFiles = TypeScript.Environment.listFiles(path, undefined, { recursive: true });
        var indexNum = 0;
        testFiles.forEach(function (fileName) {
            if (specificFile !== undefined && fileName.indexOf(specificFile) < 0) {
                return;
            }
            if (indexNum % 100 === 0) {
                TypeScript.Environment.standardOut.Write(".");
            }
            try {
                action(fileName);
            }
            catch (e) {
                _this.handleException(fileName, e);
            }
            indexNum++;
        });
        TypeScript.Environment.standardOut.WriteLine("");
    };
    Program.prototype.checkResult = function (fileName, result, convert, verify, generateBaseline, justText) {
        var actualResult;
        var expectedFile = fileName + ".expected";
        var actualFile = fileName + ".actual";
        if (generateBaseline) {
            actualResult = justText ? result : JSON.stringify(convert(result), undefined, 4);
            expectedFile = fileName + ".expected";
            TypeScript.Environment.writeFile(expectedFile, actualResult, false);
            if (TypeScript.Environment.fileExists(actualFile)) {
                TypeScript.Environment.deleteFile(actualFile);
            }
        }
        else if (verify) {
            actualResult = justText ? result : JSON.stringify(convert(result), undefined, 4);
            var expectedResult = undefined;
            if (!TypeScript.Environment.fileExists(expectedFile)) {
                TypeScript.Environment.writeFile(expectedFile, "", false);
            }
            else {
                expectedResult = TypeScript.Environment.readFile(expectedFile, undefined).contents;
            }
            if (expectedResult !== actualResult) {
                TypeScript.Environment.standardOut.WriteLine(" ! Fail: " + actualFile);
                TypeScript.Environment.writeFile(actualFile, actualResult, false);
            }
            else {
                if (TypeScript.Environment.fileExists(actualFile)) {
                    TypeScript.Environment.deleteFile(actualFile);
                }
            }
        }
    };
    Program.prototype.runEmitter = function (fileName, languageVersion, verify, generateBaseline, justText) {
        if (true) {
            return;
        }
        if (!TypeScript.StringUtilities.endsWith(fileName, ".ts") && !TypeScript.StringUtilities.endsWith(fileName, ".js")) {
            return;
        }
        if (fileName.indexOf("RealSource") >= 0) {
            return;
        }
        var contents = TypeScript.Environment.readFile(fileName, undefined).contents;
        totalSize += contents.length;
        var text = TypeScript.SimpleText.fromString(contents);
        var tree = TypeScript.Parser.parse(fileName, text, languageVersion, isDTSFile(fileName));
    };
    Program.prototype.runPrettyPrinter = function (fileName, languageVersion, verify, generateBaseline) {
        if (!TypeScript.StringUtilities.endsWith(fileName, ".ts") && !TypeScript.StringUtilities.endsWith(fileName, ".js")) {
            return;
        }
        if (fileName.indexOf("RealSource") >= 0) {
            return;
        }
        var contents = TypeScript.Environment.readFile(fileName, undefined).contents;
        totalSize += contents.length;
        var text = TypeScript.SimpleText.fromString(contents);
        var tree = TypeScript.Parser.parse(fileName, text, languageVersion, isDTSFile(fileName));
        var result = TypeScript.PrettyPrinter.prettyPrint(tree.sourceUnit());
        this.checkResult(fileName, result, undefined, verify, generateBaseline, true);
    };
    Program.prototype.runParser = function (fileName, languageVersion, verify, generateBaseline, allowErrors) {
        if (allowErrors === void 0) { allowErrors = true; }
        if (!TypeScript.StringUtilities.endsWith(fileName, ".ts") && !TypeScript.StringUtilities.endsWith(fileName, ".js")) {
            return;
        }
        if (fileName.indexOf("RealSource") >= 0) {
            return;
        }
        var contents = TypeScript.Environment.readFile(fileName, undefined).contents;
        totalSize += contents.length;
        var text = TypeScript.SimpleText.fromString(contents);
        var andersStart = new Date().getTime();
        var andersText = ts.createSourceFile(fileName, contents, 2 /* ES6 */);
        andersTime += (new Date().getTime() - andersStart);
        var start = new Date().getTime();
        var tree = TypeScript.Parser.parse(fileName, text, languageVersion, isDTSFile(fileName));
        var delta = new Date().getTime() - start;
        cyrusTime += delta;
        if (!allowErrors) {
            var diagnostics = tree.diagnostics();
            if (diagnostics.length > 0) {
                TypeScript.Environment.standardOut.WriteLine(fileName);
                TypeScript.Environment.standardOut.WriteLine("\t" + diagnostics[0].message());
            }
        }
        if (verify) {
            TypeScript.Debug.assert(TypeScript.fullWidth(tree.sourceUnit()) === contents.length);
            TypeScript.visitNodeOrToken(new PositionValidatingWalker(), tree.sourceUnit());
            this.checkResult(fileName, tree, syntaxTreeToJSON, verify, generateBaseline, false);
        }
        totalTime += delta;
    };
    Program.prototype.runIncremental = function (fileName, languageVersion) {
        if (!TypeScript.StringUtilities.endsWith(fileName, ".ts") && !TypeScript.StringUtilities.endsWith(fileName, ".js")) {
            return;
        }
        if (fileName.indexOf("RealSource") >= 0) {
            return;
        }
        var contents = TypeScript.Environment.readFile(fileName, undefined).contents;
        var text = TypeScript.SimpleText.fromString(contents);
        var tree1 = TypeScript.Parser.parse(fileName, text, languageVersion, isDTSFile(fileName));
        var tree2 = TypeScript.IncrementalParser.parse(new TypeScript.SyntaxTree(emptySourceUnit(), isDTSFile(fileName), [], fileName, text, tree1.languageVersion()), new TypeScript.TextChangeRange(new TypeScript.TextSpan(0, 0), text.length()), text);
        TypeScript.Debug.assert(TypeScript.treeStructuralEquals(tree1, tree2, true));
    };
    Program.prototype.runFindToken = function (fileName, languageVersion, verify, generateBaseline) {
        if (!TypeScript.StringUtilities.endsWith(fileName, ".ts") && !TypeScript.StringUtilities.endsWith(fileName, ".js")) {
            return;
        }
        if (fileName.indexOf("RealSource") >= 0) {
            return;
        }
        var contents = TypeScript.Environment.readFile(fileName, undefined).contents;
        var text = TypeScript.SimpleText.fromString(contents);
        var tree = TypeScript.Parser.parse(fileName, text, languageVersion, isDTSFile(fileName));
        var sourceUnit = tree.sourceUnit();
        TypeScript.Debug.assert(TypeScript.fullWidth(tree.sourceUnit()) === contents.length);
        var tokens = {};
        var tokensOnLeft = {};
        var leftToRight = [];
        var rightToLeft = [];
        for (var i = 0; i <= contents.length; i++) {
            var token = TypeScript.findToken(sourceUnit, i);
            var left = TypeScript.Syntax.findTokenOnLeft(sourceUnit, i);
            var tokenOnLeft = left || null;
            TypeScript.Debug.assert(TypeScript.isToken(token));
            if (i === contents.length) {
                TypeScript.Debug.assert(token.kind === 8 /* EndOfFileToken */);
            }
            else {
                TypeScript.Debug.assert(TypeScript.width(token) > 0 || token.kind === 8 /* EndOfFileToken */);
                TypeScript.Debug.assert(token.fullWidth() > 0);
            }
            tokens[i] = tokenToJSON(token, text, false);
            tokensOnLeft[i] = tokenToJSON(tokenOnLeft, text, false) || null;
        }
        var positionedToken = TypeScript.findToken(sourceUnit, 0);
        while (positionedToken) {
            leftToRight.push(tokenToJSON(positionedToken, text, false));
            positionedToken = TypeScript.nextToken(positionedToken);
        }
        positionedToken = TypeScript.findToken(sourceUnit, contents.length);
        while (positionedToken) {
            rightToLeft.push(tokenToJSON(positionedToken, text, false));
            positionedToken = TypeScript.previousToken(positionedToken);
        }
        var result = {
            tokens: tokens,
            tokensOnLeft: tokensOnLeft,
            leftToRight: leftToRight,
            rightToLeft: rightToLeft
        };
        this.checkResult(fileName, result, function (a) { return a; }, verify, generateBaseline, false);
    };
    Program.prototype.runTrivia = function (fileName, languageVersion, verify, generateBaseline) {
        if (!TypeScript.StringUtilities.endsWith(fileName, ".ts")) {
            return;
        }
        var contents = TypeScript.Environment.readFile(fileName, undefined).contents;
        var text = TypeScript.SimpleText.fromString(contents);
        var scanner = TypeScript.Scanner.createScanner(languageVersion, text, function () {
        });
        var tokens = [];
        var textArray = [];
        var diagnostics = [];
        while (true) {
            var token = scanner.scan(false);
            tokens.push(tokenToJSON(token, text, false));
            if (token.kind === 8 /* EndOfFileToken */) {
                break;
            }
        }
        this.checkResult(fileName, tokens, function (a) { return a; }, verify, generateBaseline, false);
    };
    Program.prototype.runScanner = function (fileName, languageVersion, verify, generateBaseline) {
        if (!TypeScript.StringUtilities.endsWith(fileName, ".ts")) {
            return;
        }
        var contents = TypeScript.Environment.readFile(fileName, undefined).contents;
        var diagnostics = [];
        var reportDiagnostic = function (position, fullWidth, diagnosticKey, args) {
            diagnostics.push(new TypeScript.Diagnostic(fileName, text.lineMap(), position, fullWidth, diagnosticKey, args));
        };
        var text = TypeScript.SimpleText.fromString(contents);
        var scanner = TypeScript.Scanner.createScanner(languageVersion, text, reportDiagnostic);
        var tokens = [];
        var jsonTokens = [];
        var textArray = [];
        var position = 0;
        while (true) {
            var token = scanner.scan(false);
            jsonTokens.push(tokenToJSON(token, text, false));
            tokens.push(token);
            TypeScript.Debug.assert(position === token.fullStart());
            position += token.fullWidth();
            if (token.kind === 8 /* EndOfFileToken */) {
                break;
            }
        }
        if (verify) {
            var tokenText = TypeScript.ArrayUtilities.select(tokens, function (t) { return t.fullText(text); }).join("");
            if (tokenText !== contents) {
                throw new Error("Token invariant broken!");
            }
        }
        var result = diagnostics.length === 0 ? jsonTokens : { diagnostics: diagnostics, tokens: jsonTokens };
        this.checkResult(fileName, result, function (a) { return a; }, verify, generateBaseline, false);
    };
    Program.prototype.parseArguments = function () {
        TypeScript.Environment.standardOut.WriteLine("Testing input files.");
        for (var index in TypeScript.Environment.arguments) {
            var fileName = TypeScript.Environment.arguments[index];
            if (specificFile !== undefined && fileName.indexOf(specificFile) < 0) {
                continue;
            }
            this.runParser(fileName, 1 /* ES5 */, false, false, false);
        }
    };
    Program.prototype.run262 = function () {
        var path = "C:\\temp\\test262\\suite";
        var testFiles = TypeScript.Environment.listFiles(path, undefined, { recursive: true });
        var testCount = 0;
        var failCount = 0;
        var skippedTests = [];
        for (var index in testFiles) {
            var fileName = testFiles[index];
            if (specificFile !== undefined && fileName.indexOf(specificFile) < 0) {
                continue;
            }
            var contents = TypeScript.Environment.readFile(fileName, undefined).contents;
            var isNegative = contents.indexOf("@negative") >= 0;
            testCount++;
            try {
                var stringText = TypeScript.SimpleText.fromString(contents);
                var tree = TypeScript.Parser.parse(fileName, stringText, 1 /* ES5 */, isDTSFile(fileName));
                if (isNegative) {
                    var nameOnly = fileName.substr(fileName.lastIndexOf("\\") + 1);
                    var canParseSuccessfully = negative262ExpectedResults[nameOnly];
                    if (canParseSuccessfully) {
                        if (tree.diagnostics() && tree.diagnostics().length > 0) {
                            TypeScript.Environment.standardOut.WriteLine("Negative test. Unexpected failure: " + fileName);
                            failCount++;
                        }
                    }
                    else {
                        if (!tree.diagnostics() || tree.diagnostics().length === 0) {
                            TypeScript.Environment.standardOut.WriteLine("Negative test. Unexpected success: " + fileName);
                            failCount++;
                        }
                    }
                }
                else {
                    if (tree.diagnostics() && tree.diagnostics().length > 0) {
                        TypeScript.Environment.standardOut.WriteLine("Unexpected failure: " + fileName);
                        failCount++;
                    }
                }
            }
            catch (e) {
                failCount++;
                this.handleException(fileName, e);
            }
        }
        TypeScript.Environment.standardOut.WriteLine("");
        TypeScript.Environment.standardOut.WriteLine("Test 262 results:");
        TypeScript.Environment.standardOut.WriteLine("Test Count: " + testCount);
        TypeScript.Environment.standardOut.WriteLine("Skip Count: " + skippedTests.length);
        TypeScript.Environment.standardOut.WriteLine("Fail Count: " + failCount);
        for (var i = 0; i < skippedTests.length; i++) {
            TypeScript.Environment.standardOut.WriteLine(skippedTests[i]);
        }
    };
    return Program;
})();
var andersTime = 0;
var cyrusTime = 0;
var totalTime = 0;
var totalSize = 0;
var program = new Program();
totalTime = 0;
totalSize = 0;
program.runAllTests(true);
var count = 1;
TypeScript.Environment.standardOut.WriteLine("Total time: " + (totalTime / count));
TypeScript.Environment.standardOut.WriteLine("Total size: " + (totalSize / count));
TypeScript.Environment.standardOut.WriteLine("Anders time: " + andersTime);
TypeScript.Environment.standardOut.WriteLine("Cyrus time : " + cyrusTime);
//# sourceMappingURL=file:///C:/VSPro_1/src/typescript/public_cyrusn/tests/Fidelity/program.js.map